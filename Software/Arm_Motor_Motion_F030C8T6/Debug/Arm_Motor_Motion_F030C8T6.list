
Arm_Motor_Motion_F030C8T6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b970  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000960  0800ba30  0800ba30  0000ca30  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c390  0800c390  0000e1e4  2**0
                  CONTENTS
  4 .ARM          00000000  0800c390  0800c390  0000e1e4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800c390  0800c390  0000e1e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c390  0800c390  0000d390  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800c394  0800c394  0000d394  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e4  20000000  0800c398  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000448  200001e4  0800c57c  0000e1e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000062c  0800c57c  0000e62c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000e1e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a103  00000000  00000000  0000e20c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000020b0  00000000  00000000  0001830f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008a8  00000000  00000000  0001a3c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000069b  00000000  00000000  0001ac68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00011a8d  00000000  00000000  0001b303  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000dbac  00000000  00000000  0002cd90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005fa33  00000000  00000000  0003a93c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000086  00000000  00000000  0009a36f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000031e4  00000000  00000000  0009a3f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000053  00000000  00000000  0009d5dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001e4 	.word	0x200001e4
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800ba18 	.word	0x0800ba18

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001e8 	.word	0x200001e8
 8000104:	0800ba18 	.word	0x0800ba18

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			@ (mov r8, r8)

0800012c <__gnu_thumb1_case_shi>:
 800012c:	b403      	push	{r0, r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0040      	lsls	r0, r0, #1
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	5e09      	ldrsh	r1, [r1, r0]
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	448e      	add	lr, r1
 800013c:	bc03      	pop	{r0, r1}
 800013e:	4770      	bx	lr

08000140 <__udivsi3>:
 8000140:	2200      	movs	r2, #0
 8000142:	0843      	lsrs	r3, r0, #1
 8000144:	428b      	cmp	r3, r1
 8000146:	d374      	bcc.n	8000232 <__udivsi3+0xf2>
 8000148:	0903      	lsrs	r3, r0, #4
 800014a:	428b      	cmp	r3, r1
 800014c:	d35f      	bcc.n	800020e <__udivsi3+0xce>
 800014e:	0a03      	lsrs	r3, r0, #8
 8000150:	428b      	cmp	r3, r1
 8000152:	d344      	bcc.n	80001de <__udivsi3+0x9e>
 8000154:	0b03      	lsrs	r3, r0, #12
 8000156:	428b      	cmp	r3, r1
 8000158:	d328      	bcc.n	80001ac <__udivsi3+0x6c>
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d30d      	bcc.n	800017c <__udivsi3+0x3c>
 8000160:	22ff      	movs	r2, #255	@ 0xff
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	ba12      	rev	r2, r2
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d302      	bcc.n	8000172 <__udivsi3+0x32>
 800016c:	1212      	asrs	r2, r2, #8
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	d065      	beq.n	800023e <__udivsi3+0xfe>
 8000172:	0b03      	lsrs	r3, r0, #12
 8000174:	428b      	cmp	r3, r1
 8000176:	d319      	bcc.n	80001ac <__udivsi3+0x6c>
 8000178:	e000      	b.n	800017c <__udivsi3+0x3c>
 800017a:	0a09      	lsrs	r1, r1, #8
 800017c:	0bc3      	lsrs	r3, r0, #15
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x46>
 8000182:	03cb      	lsls	r3, r1, #15
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b83      	lsrs	r3, r0, #14
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x52>
 800018e:	038b      	lsls	r3, r1, #14
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b43      	lsrs	r3, r0, #13
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x5e>
 800019a:	034b      	lsls	r3, r1, #13
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b03      	lsrs	r3, r0, #12
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x6a>
 80001a6:	030b      	lsls	r3, r1, #12
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0ac3      	lsrs	r3, r0, #11
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x76>
 80001b2:	02cb      	lsls	r3, r1, #11
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a83      	lsrs	r3, r0, #10
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x82>
 80001be:	028b      	lsls	r3, r1, #10
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a43      	lsrs	r3, r0, #9
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x8e>
 80001ca:	024b      	lsls	r3, r1, #9
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a03      	lsrs	r3, r0, #8
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x9a>
 80001d6:	020b      	lsls	r3, r1, #8
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	d2cd      	bcs.n	800017a <__udivsi3+0x3a>
 80001de:	09c3      	lsrs	r3, r0, #7
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xa8>
 80001e4:	01cb      	lsls	r3, r1, #7
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0983      	lsrs	r3, r0, #6
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xb4>
 80001f0:	018b      	lsls	r3, r1, #6
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0943      	lsrs	r3, r0, #5
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xc0>
 80001fc:	014b      	lsls	r3, r1, #5
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0903      	lsrs	r3, r0, #4
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xcc>
 8000208:	010b      	lsls	r3, r1, #4
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	08c3      	lsrs	r3, r0, #3
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xd8>
 8000214:	00cb      	lsls	r3, r1, #3
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0883      	lsrs	r3, r0, #2
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xe4>
 8000220:	008b      	lsls	r3, r1, #2
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0843      	lsrs	r3, r0, #1
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xf0>
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	1a41      	subs	r1, r0, r1
 8000234:	d200      	bcs.n	8000238 <__udivsi3+0xf8>
 8000236:	4601      	mov	r1, r0
 8000238:	4152      	adcs	r2, r2
 800023a:	4610      	mov	r0, r2
 800023c:	4770      	bx	lr
 800023e:	e7ff      	b.n	8000240 <__udivsi3+0x100>
 8000240:	b501      	push	{r0, lr}
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f8f0 	bl	8000428 <__aeabi_idiv0>
 8000248:	bd02      	pop	{r1, pc}
 800024a:	46c0      	nop			@ (mov r8, r8)

0800024c <__aeabi_uidivmod>:
 800024c:	2900      	cmp	r1, #0
 800024e:	d0f7      	beq.n	8000240 <__udivsi3+0x100>
 8000250:	e776      	b.n	8000140 <__udivsi3>
 8000252:	4770      	bx	lr

08000254 <__divsi3>:
 8000254:	4603      	mov	r3, r0
 8000256:	430b      	orrs	r3, r1
 8000258:	d47f      	bmi.n	800035a <__divsi3+0x106>
 800025a:	2200      	movs	r2, #0
 800025c:	0843      	lsrs	r3, r0, #1
 800025e:	428b      	cmp	r3, r1
 8000260:	d374      	bcc.n	800034c <__divsi3+0xf8>
 8000262:	0903      	lsrs	r3, r0, #4
 8000264:	428b      	cmp	r3, r1
 8000266:	d35f      	bcc.n	8000328 <__divsi3+0xd4>
 8000268:	0a03      	lsrs	r3, r0, #8
 800026a:	428b      	cmp	r3, r1
 800026c:	d344      	bcc.n	80002f8 <__divsi3+0xa4>
 800026e:	0b03      	lsrs	r3, r0, #12
 8000270:	428b      	cmp	r3, r1
 8000272:	d328      	bcc.n	80002c6 <__divsi3+0x72>
 8000274:	0c03      	lsrs	r3, r0, #16
 8000276:	428b      	cmp	r3, r1
 8000278:	d30d      	bcc.n	8000296 <__divsi3+0x42>
 800027a:	22ff      	movs	r2, #255	@ 0xff
 800027c:	0209      	lsls	r1, r1, #8
 800027e:	ba12      	rev	r2, r2
 8000280:	0c03      	lsrs	r3, r0, #16
 8000282:	428b      	cmp	r3, r1
 8000284:	d302      	bcc.n	800028c <__divsi3+0x38>
 8000286:	1212      	asrs	r2, r2, #8
 8000288:	0209      	lsls	r1, r1, #8
 800028a:	d065      	beq.n	8000358 <__divsi3+0x104>
 800028c:	0b03      	lsrs	r3, r0, #12
 800028e:	428b      	cmp	r3, r1
 8000290:	d319      	bcc.n	80002c6 <__divsi3+0x72>
 8000292:	e000      	b.n	8000296 <__divsi3+0x42>
 8000294:	0a09      	lsrs	r1, r1, #8
 8000296:	0bc3      	lsrs	r3, r0, #15
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x4c>
 800029c:	03cb      	lsls	r3, r1, #15
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b83      	lsrs	r3, r0, #14
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x58>
 80002a8:	038b      	lsls	r3, r1, #14
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0b43      	lsrs	r3, r0, #13
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x64>
 80002b4:	034b      	lsls	r3, r1, #13
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0b03      	lsrs	r3, r0, #12
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x70>
 80002c0:	030b      	lsls	r3, r1, #12
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0ac3      	lsrs	r3, r0, #11
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x7c>
 80002cc:	02cb      	lsls	r3, r1, #11
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a83      	lsrs	r3, r0, #10
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0x88>
 80002d8:	028b      	lsls	r3, r1, #10
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	0a43      	lsrs	r3, r0, #9
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d301      	bcc.n	80002e8 <__divsi3+0x94>
 80002e4:	024b      	lsls	r3, r1, #9
 80002e6:	1ac0      	subs	r0, r0, r3
 80002e8:	4152      	adcs	r2, r2
 80002ea:	0a03      	lsrs	r3, r0, #8
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d301      	bcc.n	80002f4 <__divsi3+0xa0>
 80002f0:	020b      	lsls	r3, r1, #8
 80002f2:	1ac0      	subs	r0, r0, r3
 80002f4:	4152      	adcs	r2, r2
 80002f6:	d2cd      	bcs.n	8000294 <__divsi3+0x40>
 80002f8:	09c3      	lsrs	r3, r0, #7
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xae>
 80002fe:	01cb      	lsls	r3, r1, #7
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0983      	lsrs	r3, r0, #6
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xba>
 800030a:	018b      	lsls	r3, r1, #6
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0943      	lsrs	r3, r0, #5
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xc6>
 8000316:	014b      	lsls	r3, r1, #5
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0903      	lsrs	r3, r0, #4
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xd2>
 8000322:	010b      	lsls	r3, r1, #4
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	08c3      	lsrs	r3, r0, #3
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xde>
 800032e:	00cb      	lsls	r3, r1, #3
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	0883      	lsrs	r3, r0, #2
 8000336:	428b      	cmp	r3, r1
 8000338:	d301      	bcc.n	800033e <__divsi3+0xea>
 800033a:	008b      	lsls	r3, r1, #2
 800033c:	1ac0      	subs	r0, r0, r3
 800033e:	4152      	adcs	r2, r2
 8000340:	0843      	lsrs	r3, r0, #1
 8000342:	428b      	cmp	r3, r1
 8000344:	d301      	bcc.n	800034a <__divsi3+0xf6>
 8000346:	004b      	lsls	r3, r1, #1
 8000348:	1ac0      	subs	r0, r0, r3
 800034a:	4152      	adcs	r2, r2
 800034c:	1a41      	subs	r1, r0, r1
 800034e:	d200      	bcs.n	8000352 <__divsi3+0xfe>
 8000350:	4601      	mov	r1, r0
 8000352:	4152      	adcs	r2, r2
 8000354:	4610      	mov	r0, r2
 8000356:	4770      	bx	lr
 8000358:	e05d      	b.n	8000416 <__divsi3+0x1c2>
 800035a:	0fca      	lsrs	r2, r1, #31
 800035c:	d000      	beq.n	8000360 <__divsi3+0x10c>
 800035e:	4249      	negs	r1, r1
 8000360:	1003      	asrs	r3, r0, #32
 8000362:	d300      	bcc.n	8000366 <__divsi3+0x112>
 8000364:	4240      	negs	r0, r0
 8000366:	4053      	eors	r3, r2
 8000368:	2200      	movs	r2, #0
 800036a:	469c      	mov	ip, r3
 800036c:	0903      	lsrs	r3, r0, #4
 800036e:	428b      	cmp	r3, r1
 8000370:	d32d      	bcc.n	80003ce <__divsi3+0x17a>
 8000372:	0a03      	lsrs	r3, r0, #8
 8000374:	428b      	cmp	r3, r1
 8000376:	d312      	bcc.n	800039e <__divsi3+0x14a>
 8000378:	22fc      	movs	r2, #252	@ 0xfc
 800037a:	0189      	lsls	r1, r1, #6
 800037c:	ba12      	rev	r2, r2
 800037e:	0a03      	lsrs	r3, r0, #8
 8000380:	428b      	cmp	r3, r1
 8000382:	d30c      	bcc.n	800039e <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d308      	bcc.n	800039e <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	1192      	asrs	r2, r2, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d304      	bcc.n	800039e <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	d03a      	beq.n	800040e <__divsi3+0x1ba>
 8000398:	1192      	asrs	r2, r2, #6
 800039a:	e000      	b.n	800039e <__divsi3+0x14a>
 800039c:	0989      	lsrs	r1, r1, #6
 800039e:	09c3      	lsrs	r3, r0, #7
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x154>
 80003a4:	01cb      	lsls	r3, r1, #7
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0983      	lsrs	r3, r0, #6
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x160>
 80003b0:	018b      	lsls	r3, r1, #6
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0943      	lsrs	r3, r0, #5
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x16c>
 80003bc:	014b      	lsls	r3, r1, #5
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0903      	lsrs	r3, r0, #4
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x178>
 80003c8:	010b      	lsls	r3, r1, #4
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	08c3      	lsrs	r3, r0, #3
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x184>
 80003d4:	00cb      	lsls	r3, r1, #3
 80003d6:	1ac0      	subs	r0, r0, r3
 80003d8:	4152      	adcs	r2, r2
 80003da:	0883      	lsrs	r3, r0, #2
 80003dc:	428b      	cmp	r3, r1
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x190>
 80003e0:	008b      	lsls	r3, r1, #2
 80003e2:	1ac0      	subs	r0, r0, r3
 80003e4:	4152      	adcs	r2, r2
 80003e6:	d2d9      	bcs.n	800039c <__divsi3+0x148>
 80003e8:	0843      	lsrs	r3, r0, #1
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d301      	bcc.n	80003f2 <__divsi3+0x19e>
 80003ee:	004b      	lsls	r3, r1, #1
 80003f0:	1ac0      	subs	r0, r0, r3
 80003f2:	4152      	adcs	r2, r2
 80003f4:	1a41      	subs	r1, r0, r1
 80003f6:	d200      	bcs.n	80003fa <__divsi3+0x1a6>
 80003f8:	4601      	mov	r1, r0
 80003fa:	4663      	mov	r3, ip
 80003fc:	4152      	adcs	r2, r2
 80003fe:	105b      	asrs	r3, r3, #1
 8000400:	4610      	mov	r0, r2
 8000402:	d301      	bcc.n	8000408 <__divsi3+0x1b4>
 8000404:	4240      	negs	r0, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d500      	bpl.n	800040c <__divsi3+0x1b8>
 800040a:	4249      	negs	r1, r1
 800040c:	4770      	bx	lr
 800040e:	4663      	mov	r3, ip
 8000410:	105b      	asrs	r3, r3, #1
 8000412:	d300      	bcc.n	8000416 <__divsi3+0x1c2>
 8000414:	4240      	negs	r0, r0
 8000416:	b501      	push	{r0, lr}
 8000418:	2000      	movs	r0, #0
 800041a:	f000 f805 	bl	8000428 <__aeabi_idiv0>
 800041e:	bd02      	pop	{r1, pc}

08000420 <__aeabi_idivmod>:
 8000420:	2900      	cmp	r1, #0
 8000422:	d0f8      	beq.n	8000416 <__divsi3+0x1c2>
 8000424:	e716      	b.n	8000254 <__divsi3>
 8000426:	4770      	bx	lr

08000428 <__aeabi_idiv0>:
 8000428:	4770      	bx	lr
 800042a:	46c0      	nop			@ (mov r8, r8)

0800042c <__aeabi_cdrcmple>:
 800042c:	4684      	mov	ip, r0
 800042e:	0010      	movs	r0, r2
 8000430:	4662      	mov	r2, ip
 8000432:	468c      	mov	ip, r1
 8000434:	0019      	movs	r1, r3
 8000436:	4663      	mov	r3, ip
 8000438:	e000      	b.n	800043c <__aeabi_cdcmpeq>
 800043a:	46c0      	nop			@ (mov r8, r8)

0800043c <__aeabi_cdcmpeq>:
 800043c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043e:	f001 f919 	bl	8001674 <__ledf2>
 8000442:	2800      	cmp	r0, #0
 8000444:	d401      	bmi.n	800044a <__aeabi_cdcmpeq+0xe>
 8000446:	2100      	movs	r1, #0
 8000448:	42c8      	cmn	r0, r1
 800044a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800044c <__aeabi_dcmpeq>:
 800044c:	b510      	push	{r4, lr}
 800044e:	f001 f859 	bl	8001504 <__eqdf2>
 8000452:	4240      	negs	r0, r0
 8000454:	3001      	adds	r0, #1
 8000456:	bd10      	pop	{r4, pc}

08000458 <__aeabi_dcmplt>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f001 f90b 	bl	8001674 <__ledf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	db01      	blt.n	8000466 <__aeabi_dcmplt+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			@ (mov r8, r8)

0800046c <__aeabi_dcmple>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f001 f901 	bl	8001674 <__ledf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	dd01      	ble.n	800047a <__aeabi_dcmple+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			@ (mov r8, r8)

08000480 <__aeabi_dcmpgt>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f001 f883 	bl	800158c <__gedf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	dc01      	bgt.n	800048e <__aeabi_dcmpgt+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			@ (mov r8, r8)

08000494 <__aeabi_dcmpge>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f001 f879 	bl	800158c <__gedf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	da01      	bge.n	80004a2 <__aeabi_dcmpge+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			@ (mov r8, r8)

080004a8 <__aeabi_cfrcmple>:
 80004a8:	4684      	mov	ip, r0
 80004aa:	0008      	movs	r0, r1
 80004ac:	4661      	mov	r1, ip
 80004ae:	e7ff      	b.n	80004b0 <__aeabi_cfcmpeq>

080004b0 <__aeabi_cfcmpeq>:
 80004b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80004b2:	f000 f919 	bl	80006e8 <__lesf2>
 80004b6:	2800      	cmp	r0, #0
 80004b8:	d401      	bmi.n	80004be <__aeabi_cfcmpeq+0xe>
 80004ba:	2100      	movs	r1, #0
 80004bc:	42c8      	cmn	r0, r1
 80004be:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004c0 <__aeabi_fcmpeq>:
 80004c0:	b510      	push	{r4, lr}
 80004c2:	f000 f899 	bl	80005f8 <__eqsf2>
 80004c6:	4240      	negs	r0, r0
 80004c8:	3001      	adds	r0, #1
 80004ca:	bd10      	pop	{r4, pc}

080004cc <__aeabi_fcmplt>:
 80004cc:	b510      	push	{r4, lr}
 80004ce:	f000 f90b 	bl	80006e8 <__lesf2>
 80004d2:	2800      	cmp	r0, #0
 80004d4:	db01      	blt.n	80004da <__aeabi_fcmplt+0xe>
 80004d6:	2000      	movs	r0, #0
 80004d8:	bd10      	pop	{r4, pc}
 80004da:	2001      	movs	r0, #1
 80004dc:	bd10      	pop	{r4, pc}
 80004de:	46c0      	nop			@ (mov r8, r8)

080004e0 <__aeabi_fcmple>:
 80004e0:	b510      	push	{r4, lr}
 80004e2:	f000 f901 	bl	80006e8 <__lesf2>
 80004e6:	2800      	cmp	r0, #0
 80004e8:	dd01      	ble.n	80004ee <__aeabi_fcmple+0xe>
 80004ea:	2000      	movs	r0, #0
 80004ec:	bd10      	pop	{r4, pc}
 80004ee:	2001      	movs	r0, #1
 80004f0:	bd10      	pop	{r4, pc}
 80004f2:	46c0      	nop			@ (mov r8, r8)

080004f4 <__aeabi_fcmpgt>:
 80004f4:	b510      	push	{r4, lr}
 80004f6:	f000 f8a7 	bl	8000648 <__gesf2>
 80004fa:	2800      	cmp	r0, #0
 80004fc:	dc01      	bgt.n	8000502 <__aeabi_fcmpgt+0xe>
 80004fe:	2000      	movs	r0, #0
 8000500:	bd10      	pop	{r4, pc}
 8000502:	2001      	movs	r0, #1
 8000504:	bd10      	pop	{r4, pc}
 8000506:	46c0      	nop			@ (mov r8, r8)

08000508 <__aeabi_fcmpge>:
 8000508:	b510      	push	{r4, lr}
 800050a:	f000 f89d 	bl	8000648 <__gesf2>
 800050e:	2800      	cmp	r0, #0
 8000510:	da01      	bge.n	8000516 <__aeabi_fcmpge+0xe>
 8000512:	2000      	movs	r0, #0
 8000514:	bd10      	pop	{r4, pc}
 8000516:	2001      	movs	r0, #1
 8000518:	bd10      	pop	{r4, pc}
 800051a:	46c0      	nop			@ (mov r8, r8)

0800051c <__aeabi_d2uiz>:
 800051c:	b570      	push	{r4, r5, r6, lr}
 800051e:	2200      	movs	r2, #0
 8000520:	4b0c      	ldr	r3, [pc, #48]	@ (8000554 <__aeabi_d2uiz+0x38>)
 8000522:	0004      	movs	r4, r0
 8000524:	000d      	movs	r5, r1
 8000526:	f7ff ffb5 	bl	8000494 <__aeabi_dcmpge>
 800052a:	2800      	cmp	r0, #0
 800052c:	d104      	bne.n	8000538 <__aeabi_d2uiz+0x1c>
 800052e:	0020      	movs	r0, r4
 8000530:	0029      	movs	r1, r5
 8000532:	f001 ff97 	bl	8002464 <__aeabi_d2iz>
 8000536:	bd70      	pop	{r4, r5, r6, pc}
 8000538:	4b06      	ldr	r3, [pc, #24]	@ (8000554 <__aeabi_d2uiz+0x38>)
 800053a:	2200      	movs	r2, #0
 800053c:	0020      	movs	r0, r4
 800053e:	0029      	movs	r1, r5
 8000540:	f001 fbd2 	bl	8001ce8 <__aeabi_dsub>
 8000544:	f001 ff8e 	bl	8002464 <__aeabi_d2iz>
 8000548:	2380      	movs	r3, #128	@ 0x80
 800054a:	061b      	lsls	r3, r3, #24
 800054c:	469c      	mov	ip, r3
 800054e:	4460      	add	r0, ip
 8000550:	e7f1      	b.n	8000536 <__aeabi_d2uiz+0x1a>
 8000552:	46c0      	nop			@ (mov r8, r8)
 8000554:	41e00000 	.word	0x41e00000

08000558 <__aeabi_d2lz>:
 8000558:	b570      	push	{r4, r5, r6, lr}
 800055a:	2200      	movs	r2, #0
 800055c:	2300      	movs	r3, #0
 800055e:	0004      	movs	r4, r0
 8000560:	000d      	movs	r5, r1
 8000562:	f7ff ff79 	bl	8000458 <__aeabi_dcmplt>
 8000566:	2800      	cmp	r0, #0
 8000568:	d108      	bne.n	800057c <__aeabi_d2lz+0x24>
 800056a:	0020      	movs	r0, r4
 800056c:	0029      	movs	r1, r5
 800056e:	f000 f80f 	bl	8000590 <__aeabi_d2ulz>
 8000572:	0002      	movs	r2, r0
 8000574:	000b      	movs	r3, r1
 8000576:	0010      	movs	r0, r2
 8000578:	0019      	movs	r1, r3
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	2380      	movs	r3, #128	@ 0x80
 800057e:	061b      	lsls	r3, r3, #24
 8000580:	18e9      	adds	r1, r5, r3
 8000582:	0020      	movs	r0, r4
 8000584:	f000 f804 	bl	8000590 <__aeabi_d2ulz>
 8000588:	2300      	movs	r3, #0
 800058a:	4242      	negs	r2, r0
 800058c:	418b      	sbcs	r3, r1
 800058e:	e7f2      	b.n	8000576 <__aeabi_d2lz+0x1e>

08000590 <__aeabi_d2ulz>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	2200      	movs	r2, #0
 8000594:	4b0b      	ldr	r3, [pc, #44]	@ (80005c4 <__aeabi_d2ulz+0x34>)
 8000596:	000d      	movs	r5, r1
 8000598:	0004      	movs	r4, r0
 800059a:	f001 f8dd 	bl	8001758 <__aeabi_dmul>
 800059e:	f7ff ffbd 	bl	800051c <__aeabi_d2uiz>
 80005a2:	0006      	movs	r6, r0
 80005a4:	f001 ffc8 	bl	8002538 <__aeabi_ui2d>
 80005a8:	2200      	movs	r2, #0
 80005aa:	4b07      	ldr	r3, [pc, #28]	@ (80005c8 <__aeabi_d2ulz+0x38>)
 80005ac:	f001 f8d4 	bl	8001758 <__aeabi_dmul>
 80005b0:	0002      	movs	r2, r0
 80005b2:	000b      	movs	r3, r1
 80005b4:	0020      	movs	r0, r4
 80005b6:	0029      	movs	r1, r5
 80005b8:	f001 fb96 	bl	8001ce8 <__aeabi_dsub>
 80005bc:	f7ff ffae 	bl	800051c <__aeabi_d2uiz>
 80005c0:	0031      	movs	r1, r6
 80005c2:	bd70      	pop	{r4, r5, r6, pc}
 80005c4:	3df00000 	.word	0x3df00000
 80005c8:	41f00000 	.word	0x41f00000

080005cc <__aeabi_l2d>:
 80005cc:	b570      	push	{r4, r5, r6, lr}
 80005ce:	0006      	movs	r6, r0
 80005d0:	0008      	movs	r0, r1
 80005d2:	f001 ff83 	bl	80024dc <__aeabi_i2d>
 80005d6:	2200      	movs	r2, #0
 80005d8:	4b06      	ldr	r3, [pc, #24]	@ (80005f4 <__aeabi_l2d+0x28>)
 80005da:	f001 f8bd 	bl	8001758 <__aeabi_dmul>
 80005de:	000d      	movs	r5, r1
 80005e0:	0004      	movs	r4, r0
 80005e2:	0030      	movs	r0, r6
 80005e4:	f001 ffa8 	bl	8002538 <__aeabi_ui2d>
 80005e8:	002b      	movs	r3, r5
 80005ea:	0022      	movs	r2, r4
 80005ec:	f000 f90c 	bl	8000808 <__aeabi_dadd>
 80005f0:	bd70      	pop	{r4, r5, r6, pc}
 80005f2:	46c0      	nop			@ (mov r8, r8)
 80005f4:	41f00000 	.word	0x41f00000

080005f8 <__eqsf2>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	0042      	lsls	r2, r0, #1
 80005fc:	024e      	lsls	r6, r1, #9
 80005fe:	004c      	lsls	r4, r1, #1
 8000600:	0245      	lsls	r5, r0, #9
 8000602:	0a6d      	lsrs	r5, r5, #9
 8000604:	0e12      	lsrs	r2, r2, #24
 8000606:	0fc3      	lsrs	r3, r0, #31
 8000608:	0a76      	lsrs	r6, r6, #9
 800060a:	0e24      	lsrs	r4, r4, #24
 800060c:	0fc9      	lsrs	r1, r1, #31
 800060e:	2aff      	cmp	r2, #255	@ 0xff
 8000610:	d010      	beq.n	8000634 <__eqsf2+0x3c>
 8000612:	2cff      	cmp	r4, #255	@ 0xff
 8000614:	d00c      	beq.n	8000630 <__eqsf2+0x38>
 8000616:	2001      	movs	r0, #1
 8000618:	42a2      	cmp	r2, r4
 800061a:	d10a      	bne.n	8000632 <__eqsf2+0x3a>
 800061c:	42b5      	cmp	r5, r6
 800061e:	d108      	bne.n	8000632 <__eqsf2+0x3a>
 8000620:	428b      	cmp	r3, r1
 8000622:	d00f      	beq.n	8000644 <__eqsf2+0x4c>
 8000624:	2a00      	cmp	r2, #0
 8000626:	d104      	bne.n	8000632 <__eqsf2+0x3a>
 8000628:	0028      	movs	r0, r5
 800062a:	1e43      	subs	r3, r0, #1
 800062c:	4198      	sbcs	r0, r3
 800062e:	e000      	b.n	8000632 <__eqsf2+0x3a>
 8000630:	2001      	movs	r0, #1
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	2001      	movs	r0, #1
 8000636:	2cff      	cmp	r4, #255	@ 0xff
 8000638:	d1fb      	bne.n	8000632 <__eqsf2+0x3a>
 800063a:	4335      	orrs	r5, r6
 800063c:	d1f9      	bne.n	8000632 <__eqsf2+0x3a>
 800063e:	404b      	eors	r3, r1
 8000640:	0018      	movs	r0, r3
 8000642:	e7f6      	b.n	8000632 <__eqsf2+0x3a>
 8000644:	2000      	movs	r0, #0
 8000646:	e7f4      	b.n	8000632 <__eqsf2+0x3a>

08000648 <__gesf2>:
 8000648:	b530      	push	{r4, r5, lr}
 800064a:	0042      	lsls	r2, r0, #1
 800064c:	0244      	lsls	r4, r0, #9
 800064e:	024d      	lsls	r5, r1, #9
 8000650:	0fc3      	lsrs	r3, r0, #31
 8000652:	0048      	lsls	r0, r1, #1
 8000654:	0a64      	lsrs	r4, r4, #9
 8000656:	0e12      	lsrs	r2, r2, #24
 8000658:	0a6d      	lsrs	r5, r5, #9
 800065a:	0e00      	lsrs	r0, r0, #24
 800065c:	0fc9      	lsrs	r1, r1, #31
 800065e:	2aff      	cmp	r2, #255	@ 0xff
 8000660:	d019      	beq.n	8000696 <__gesf2+0x4e>
 8000662:	28ff      	cmp	r0, #255	@ 0xff
 8000664:	d00b      	beq.n	800067e <__gesf2+0x36>
 8000666:	2a00      	cmp	r2, #0
 8000668:	d11e      	bne.n	80006a8 <__gesf2+0x60>
 800066a:	2800      	cmp	r0, #0
 800066c:	d10b      	bne.n	8000686 <__gesf2+0x3e>
 800066e:	2d00      	cmp	r5, #0
 8000670:	d027      	beq.n	80006c2 <__gesf2+0x7a>
 8000672:	2c00      	cmp	r4, #0
 8000674:	d134      	bne.n	80006e0 <__gesf2+0x98>
 8000676:	2900      	cmp	r1, #0
 8000678:	d02f      	beq.n	80006da <__gesf2+0x92>
 800067a:	0008      	movs	r0, r1
 800067c:	bd30      	pop	{r4, r5, pc}
 800067e:	2d00      	cmp	r5, #0
 8000680:	d128      	bne.n	80006d4 <__gesf2+0x8c>
 8000682:	2a00      	cmp	r2, #0
 8000684:	d101      	bne.n	800068a <__gesf2+0x42>
 8000686:	2c00      	cmp	r4, #0
 8000688:	d0f5      	beq.n	8000676 <__gesf2+0x2e>
 800068a:	428b      	cmp	r3, r1
 800068c:	d107      	bne.n	800069e <__gesf2+0x56>
 800068e:	2b00      	cmp	r3, #0
 8000690:	d023      	beq.n	80006da <__gesf2+0x92>
 8000692:	0018      	movs	r0, r3
 8000694:	e7f2      	b.n	800067c <__gesf2+0x34>
 8000696:	2c00      	cmp	r4, #0
 8000698:	d11c      	bne.n	80006d4 <__gesf2+0x8c>
 800069a:	28ff      	cmp	r0, #255	@ 0xff
 800069c:	d014      	beq.n	80006c8 <__gesf2+0x80>
 800069e:	1e58      	subs	r0, r3, #1
 80006a0:	2302      	movs	r3, #2
 80006a2:	4018      	ands	r0, r3
 80006a4:	3801      	subs	r0, #1
 80006a6:	e7e9      	b.n	800067c <__gesf2+0x34>
 80006a8:	2800      	cmp	r0, #0
 80006aa:	d0f8      	beq.n	800069e <__gesf2+0x56>
 80006ac:	428b      	cmp	r3, r1
 80006ae:	d1f6      	bne.n	800069e <__gesf2+0x56>
 80006b0:	4282      	cmp	r2, r0
 80006b2:	dcf4      	bgt.n	800069e <__gesf2+0x56>
 80006b4:	dbeb      	blt.n	800068e <__gesf2+0x46>
 80006b6:	42ac      	cmp	r4, r5
 80006b8:	d8f1      	bhi.n	800069e <__gesf2+0x56>
 80006ba:	2000      	movs	r0, #0
 80006bc:	42ac      	cmp	r4, r5
 80006be:	d2dd      	bcs.n	800067c <__gesf2+0x34>
 80006c0:	e7e5      	b.n	800068e <__gesf2+0x46>
 80006c2:	2c00      	cmp	r4, #0
 80006c4:	d0da      	beq.n	800067c <__gesf2+0x34>
 80006c6:	e7ea      	b.n	800069e <__gesf2+0x56>
 80006c8:	2d00      	cmp	r5, #0
 80006ca:	d103      	bne.n	80006d4 <__gesf2+0x8c>
 80006cc:	428b      	cmp	r3, r1
 80006ce:	d1e6      	bne.n	800069e <__gesf2+0x56>
 80006d0:	2000      	movs	r0, #0
 80006d2:	e7d3      	b.n	800067c <__gesf2+0x34>
 80006d4:	2002      	movs	r0, #2
 80006d6:	4240      	negs	r0, r0
 80006d8:	e7d0      	b.n	800067c <__gesf2+0x34>
 80006da:	2001      	movs	r0, #1
 80006dc:	4240      	negs	r0, r0
 80006de:	e7cd      	b.n	800067c <__gesf2+0x34>
 80006e0:	428b      	cmp	r3, r1
 80006e2:	d0e8      	beq.n	80006b6 <__gesf2+0x6e>
 80006e4:	e7db      	b.n	800069e <__gesf2+0x56>
 80006e6:	46c0      	nop			@ (mov r8, r8)

080006e8 <__lesf2>:
 80006e8:	b530      	push	{r4, r5, lr}
 80006ea:	0042      	lsls	r2, r0, #1
 80006ec:	0244      	lsls	r4, r0, #9
 80006ee:	024d      	lsls	r5, r1, #9
 80006f0:	0fc3      	lsrs	r3, r0, #31
 80006f2:	0048      	lsls	r0, r1, #1
 80006f4:	0a64      	lsrs	r4, r4, #9
 80006f6:	0e12      	lsrs	r2, r2, #24
 80006f8:	0a6d      	lsrs	r5, r5, #9
 80006fa:	0e00      	lsrs	r0, r0, #24
 80006fc:	0fc9      	lsrs	r1, r1, #31
 80006fe:	2aff      	cmp	r2, #255	@ 0xff
 8000700:	d01a      	beq.n	8000738 <__lesf2+0x50>
 8000702:	28ff      	cmp	r0, #255	@ 0xff
 8000704:	d00e      	beq.n	8000724 <__lesf2+0x3c>
 8000706:	2a00      	cmp	r2, #0
 8000708:	d11e      	bne.n	8000748 <__lesf2+0x60>
 800070a:	2800      	cmp	r0, #0
 800070c:	d10e      	bne.n	800072c <__lesf2+0x44>
 800070e:	2d00      	cmp	r5, #0
 8000710:	d02a      	beq.n	8000768 <__lesf2+0x80>
 8000712:	2c00      	cmp	r4, #0
 8000714:	d00c      	beq.n	8000730 <__lesf2+0x48>
 8000716:	428b      	cmp	r3, r1
 8000718:	d01d      	beq.n	8000756 <__lesf2+0x6e>
 800071a:	1e58      	subs	r0, r3, #1
 800071c:	2302      	movs	r3, #2
 800071e:	4018      	ands	r0, r3
 8000720:	3801      	subs	r0, #1
 8000722:	e010      	b.n	8000746 <__lesf2+0x5e>
 8000724:	2d00      	cmp	r5, #0
 8000726:	d10d      	bne.n	8000744 <__lesf2+0x5c>
 8000728:	2a00      	cmp	r2, #0
 800072a:	d120      	bne.n	800076e <__lesf2+0x86>
 800072c:	2c00      	cmp	r4, #0
 800072e:	d11e      	bne.n	800076e <__lesf2+0x86>
 8000730:	2900      	cmp	r1, #0
 8000732:	d023      	beq.n	800077c <__lesf2+0x94>
 8000734:	0008      	movs	r0, r1
 8000736:	e006      	b.n	8000746 <__lesf2+0x5e>
 8000738:	2c00      	cmp	r4, #0
 800073a:	d103      	bne.n	8000744 <__lesf2+0x5c>
 800073c:	28ff      	cmp	r0, #255	@ 0xff
 800073e:	d1ec      	bne.n	800071a <__lesf2+0x32>
 8000740:	2d00      	cmp	r5, #0
 8000742:	d017      	beq.n	8000774 <__lesf2+0x8c>
 8000744:	2002      	movs	r0, #2
 8000746:	bd30      	pop	{r4, r5, pc}
 8000748:	2800      	cmp	r0, #0
 800074a:	d0e6      	beq.n	800071a <__lesf2+0x32>
 800074c:	428b      	cmp	r3, r1
 800074e:	d1e4      	bne.n	800071a <__lesf2+0x32>
 8000750:	4282      	cmp	r2, r0
 8000752:	dce2      	bgt.n	800071a <__lesf2+0x32>
 8000754:	db04      	blt.n	8000760 <__lesf2+0x78>
 8000756:	42ac      	cmp	r4, r5
 8000758:	d8df      	bhi.n	800071a <__lesf2+0x32>
 800075a:	2000      	movs	r0, #0
 800075c:	42ac      	cmp	r4, r5
 800075e:	d2f2      	bcs.n	8000746 <__lesf2+0x5e>
 8000760:	2b00      	cmp	r3, #0
 8000762:	d00b      	beq.n	800077c <__lesf2+0x94>
 8000764:	0018      	movs	r0, r3
 8000766:	e7ee      	b.n	8000746 <__lesf2+0x5e>
 8000768:	2c00      	cmp	r4, #0
 800076a:	d0ec      	beq.n	8000746 <__lesf2+0x5e>
 800076c:	e7d5      	b.n	800071a <__lesf2+0x32>
 800076e:	428b      	cmp	r3, r1
 8000770:	d1d3      	bne.n	800071a <__lesf2+0x32>
 8000772:	e7f5      	b.n	8000760 <__lesf2+0x78>
 8000774:	2000      	movs	r0, #0
 8000776:	428b      	cmp	r3, r1
 8000778:	d0e5      	beq.n	8000746 <__lesf2+0x5e>
 800077a:	e7ce      	b.n	800071a <__lesf2+0x32>
 800077c:	2001      	movs	r0, #1
 800077e:	4240      	negs	r0, r0
 8000780:	e7e1      	b.n	8000746 <__lesf2+0x5e>
 8000782:	46c0      	nop			@ (mov r8, r8)

08000784 <__aeabi_ui2f>:
 8000784:	b570      	push	{r4, r5, r6, lr}
 8000786:	1e04      	subs	r4, r0, #0
 8000788:	d00e      	beq.n	80007a8 <__aeabi_ui2f+0x24>
 800078a:	f001 ff7d 	bl	8002688 <__clzsi2>
 800078e:	239e      	movs	r3, #158	@ 0x9e
 8000790:	0001      	movs	r1, r0
 8000792:	1a1b      	subs	r3, r3, r0
 8000794:	2b96      	cmp	r3, #150	@ 0x96
 8000796:	dc0c      	bgt.n	80007b2 <__aeabi_ui2f+0x2e>
 8000798:	2808      	cmp	r0, #8
 800079a:	d02f      	beq.n	80007fc <__aeabi_ui2f+0x78>
 800079c:	3908      	subs	r1, #8
 800079e:	408c      	lsls	r4, r1
 80007a0:	0264      	lsls	r4, r4, #9
 80007a2:	0a64      	lsrs	r4, r4, #9
 80007a4:	b2d8      	uxtb	r0, r3
 80007a6:	e001      	b.n	80007ac <__aeabi_ui2f+0x28>
 80007a8:	2000      	movs	r0, #0
 80007aa:	2400      	movs	r4, #0
 80007ac:	05c0      	lsls	r0, r0, #23
 80007ae:	4320      	orrs	r0, r4
 80007b0:	bd70      	pop	{r4, r5, r6, pc}
 80007b2:	2b99      	cmp	r3, #153	@ 0x99
 80007b4:	dc16      	bgt.n	80007e4 <__aeabi_ui2f+0x60>
 80007b6:	1f42      	subs	r2, r0, #5
 80007b8:	2805      	cmp	r0, #5
 80007ba:	d000      	beq.n	80007be <__aeabi_ui2f+0x3a>
 80007bc:	4094      	lsls	r4, r2
 80007be:	0022      	movs	r2, r4
 80007c0:	4810      	ldr	r0, [pc, #64]	@ (8000804 <__aeabi_ui2f+0x80>)
 80007c2:	4002      	ands	r2, r0
 80007c4:	0765      	lsls	r5, r4, #29
 80007c6:	d009      	beq.n	80007dc <__aeabi_ui2f+0x58>
 80007c8:	250f      	movs	r5, #15
 80007ca:	402c      	ands	r4, r5
 80007cc:	2c04      	cmp	r4, #4
 80007ce:	d005      	beq.n	80007dc <__aeabi_ui2f+0x58>
 80007d0:	3204      	adds	r2, #4
 80007d2:	0154      	lsls	r4, r2, #5
 80007d4:	d502      	bpl.n	80007dc <__aeabi_ui2f+0x58>
 80007d6:	239f      	movs	r3, #159	@ 0x9f
 80007d8:	4002      	ands	r2, r0
 80007da:	1a5b      	subs	r3, r3, r1
 80007dc:	0192      	lsls	r2, r2, #6
 80007de:	0a54      	lsrs	r4, r2, #9
 80007e0:	b2d8      	uxtb	r0, r3
 80007e2:	e7e3      	b.n	80007ac <__aeabi_ui2f+0x28>
 80007e4:	0002      	movs	r2, r0
 80007e6:	0020      	movs	r0, r4
 80007e8:	321b      	adds	r2, #27
 80007ea:	4090      	lsls	r0, r2
 80007ec:	0002      	movs	r2, r0
 80007ee:	1e50      	subs	r0, r2, #1
 80007f0:	4182      	sbcs	r2, r0
 80007f2:	2005      	movs	r0, #5
 80007f4:	1a40      	subs	r0, r0, r1
 80007f6:	40c4      	lsrs	r4, r0
 80007f8:	4314      	orrs	r4, r2
 80007fa:	e7e0      	b.n	80007be <__aeabi_ui2f+0x3a>
 80007fc:	0264      	lsls	r4, r4, #9
 80007fe:	2096      	movs	r0, #150	@ 0x96
 8000800:	0a64      	lsrs	r4, r4, #9
 8000802:	e7d3      	b.n	80007ac <__aeabi_ui2f+0x28>
 8000804:	fbffffff 	.word	0xfbffffff

08000808 <__aeabi_dadd>:
 8000808:	b5f0      	push	{r4, r5, r6, r7, lr}
 800080a:	4657      	mov	r7, sl
 800080c:	464e      	mov	r6, r9
 800080e:	4645      	mov	r5, r8
 8000810:	46de      	mov	lr, fp
 8000812:	b5e0      	push	{r5, r6, r7, lr}
 8000814:	b083      	sub	sp, #12
 8000816:	9000      	str	r0, [sp, #0]
 8000818:	9101      	str	r1, [sp, #4]
 800081a:	030c      	lsls	r4, r1, #12
 800081c:	004f      	lsls	r7, r1, #1
 800081e:	0fce      	lsrs	r6, r1, #31
 8000820:	0a61      	lsrs	r1, r4, #9
 8000822:	9c00      	ldr	r4, [sp, #0]
 8000824:	031d      	lsls	r5, r3, #12
 8000826:	0f64      	lsrs	r4, r4, #29
 8000828:	430c      	orrs	r4, r1
 800082a:	9900      	ldr	r1, [sp, #0]
 800082c:	9200      	str	r2, [sp, #0]
 800082e:	9301      	str	r3, [sp, #4]
 8000830:	00c8      	lsls	r0, r1, #3
 8000832:	0059      	lsls	r1, r3, #1
 8000834:	0d4b      	lsrs	r3, r1, #21
 8000836:	4699      	mov	r9, r3
 8000838:	9a00      	ldr	r2, [sp, #0]
 800083a:	9b01      	ldr	r3, [sp, #4]
 800083c:	0a6d      	lsrs	r5, r5, #9
 800083e:	0fd9      	lsrs	r1, r3, #31
 8000840:	0f53      	lsrs	r3, r2, #29
 8000842:	432b      	orrs	r3, r5
 8000844:	469a      	mov	sl, r3
 8000846:	9b00      	ldr	r3, [sp, #0]
 8000848:	0d7f      	lsrs	r7, r7, #21
 800084a:	00da      	lsls	r2, r3, #3
 800084c:	4694      	mov	ip, r2
 800084e:	464a      	mov	r2, r9
 8000850:	46b0      	mov	r8, r6
 8000852:	1aba      	subs	r2, r7, r2
 8000854:	428e      	cmp	r6, r1
 8000856:	d100      	bne.n	800085a <__aeabi_dadd+0x52>
 8000858:	e0b0      	b.n	80009bc <__aeabi_dadd+0x1b4>
 800085a:	2a00      	cmp	r2, #0
 800085c:	dc00      	bgt.n	8000860 <__aeabi_dadd+0x58>
 800085e:	e078      	b.n	8000952 <__aeabi_dadd+0x14a>
 8000860:	4649      	mov	r1, r9
 8000862:	2900      	cmp	r1, #0
 8000864:	d100      	bne.n	8000868 <__aeabi_dadd+0x60>
 8000866:	e0e9      	b.n	8000a3c <__aeabi_dadd+0x234>
 8000868:	49c9      	ldr	r1, [pc, #804]	@ (8000b90 <__aeabi_dadd+0x388>)
 800086a:	428f      	cmp	r7, r1
 800086c:	d100      	bne.n	8000870 <__aeabi_dadd+0x68>
 800086e:	e195      	b.n	8000b9c <__aeabi_dadd+0x394>
 8000870:	2501      	movs	r5, #1
 8000872:	2a38      	cmp	r2, #56	@ 0x38
 8000874:	dc16      	bgt.n	80008a4 <__aeabi_dadd+0x9c>
 8000876:	2180      	movs	r1, #128	@ 0x80
 8000878:	4653      	mov	r3, sl
 800087a:	0409      	lsls	r1, r1, #16
 800087c:	430b      	orrs	r3, r1
 800087e:	469a      	mov	sl, r3
 8000880:	2a1f      	cmp	r2, #31
 8000882:	dd00      	ble.n	8000886 <__aeabi_dadd+0x7e>
 8000884:	e1e7      	b.n	8000c56 <__aeabi_dadd+0x44e>
 8000886:	2120      	movs	r1, #32
 8000888:	4655      	mov	r5, sl
 800088a:	1a8b      	subs	r3, r1, r2
 800088c:	4661      	mov	r1, ip
 800088e:	409d      	lsls	r5, r3
 8000890:	40d1      	lsrs	r1, r2
 8000892:	430d      	orrs	r5, r1
 8000894:	4661      	mov	r1, ip
 8000896:	4099      	lsls	r1, r3
 8000898:	1e4b      	subs	r3, r1, #1
 800089a:	4199      	sbcs	r1, r3
 800089c:	4653      	mov	r3, sl
 800089e:	40d3      	lsrs	r3, r2
 80008a0:	430d      	orrs	r5, r1
 80008a2:	1ae4      	subs	r4, r4, r3
 80008a4:	1b45      	subs	r5, r0, r5
 80008a6:	42a8      	cmp	r0, r5
 80008a8:	4180      	sbcs	r0, r0
 80008aa:	4240      	negs	r0, r0
 80008ac:	1a24      	subs	r4, r4, r0
 80008ae:	0223      	lsls	r3, r4, #8
 80008b0:	d400      	bmi.n	80008b4 <__aeabi_dadd+0xac>
 80008b2:	e10f      	b.n	8000ad4 <__aeabi_dadd+0x2cc>
 80008b4:	0264      	lsls	r4, r4, #9
 80008b6:	0a64      	lsrs	r4, r4, #9
 80008b8:	2c00      	cmp	r4, #0
 80008ba:	d100      	bne.n	80008be <__aeabi_dadd+0xb6>
 80008bc:	e139      	b.n	8000b32 <__aeabi_dadd+0x32a>
 80008be:	0020      	movs	r0, r4
 80008c0:	f001 fee2 	bl	8002688 <__clzsi2>
 80008c4:	0003      	movs	r3, r0
 80008c6:	3b08      	subs	r3, #8
 80008c8:	2120      	movs	r1, #32
 80008ca:	0028      	movs	r0, r5
 80008cc:	1aca      	subs	r2, r1, r3
 80008ce:	40d0      	lsrs	r0, r2
 80008d0:	409c      	lsls	r4, r3
 80008d2:	0002      	movs	r2, r0
 80008d4:	409d      	lsls	r5, r3
 80008d6:	4322      	orrs	r2, r4
 80008d8:	429f      	cmp	r7, r3
 80008da:	dd00      	ble.n	80008de <__aeabi_dadd+0xd6>
 80008dc:	e173      	b.n	8000bc6 <__aeabi_dadd+0x3be>
 80008de:	1bd8      	subs	r0, r3, r7
 80008e0:	3001      	adds	r0, #1
 80008e2:	1a09      	subs	r1, r1, r0
 80008e4:	002c      	movs	r4, r5
 80008e6:	408d      	lsls	r5, r1
 80008e8:	40c4      	lsrs	r4, r0
 80008ea:	1e6b      	subs	r3, r5, #1
 80008ec:	419d      	sbcs	r5, r3
 80008ee:	0013      	movs	r3, r2
 80008f0:	40c2      	lsrs	r2, r0
 80008f2:	408b      	lsls	r3, r1
 80008f4:	4325      	orrs	r5, r4
 80008f6:	2700      	movs	r7, #0
 80008f8:	0014      	movs	r4, r2
 80008fa:	431d      	orrs	r5, r3
 80008fc:	076b      	lsls	r3, r5, #29
 80008fe:	d009      	beq.n	8000914 <__aeabi_dadd+0x10c>
 8000900:	230f      	movs	r3, #15
 8000902:	402b      	ands	r3, r5
 8000904:	2b04      	cmp	r3, #4
 8000906:	d005      	beq.n	8000914 <__aeabi_dadd+0x10c>
 8000908:	1d2b      	adds	r3, r5, #4
 800090a:	42ab      	cmp	r3, r5
 800090c:	41ad      	sbcs	r5, r5
 800090e:	426d      	negs	r5, r5
 8000910:	1964      	adds	r4, r4, r5
 8000912:	001d      	movs	r5, r3
 8000914:	0223      	lsls	r3, r4, #8
 8000916:	d400      	bmi.n	800091a <__aeabi_dadd+0x112>
 8000918:	e12d      	b.n	8000b76 <__aeabi_dadd+0x36e>
 800091a:	4a9d      	ldr	r2, [pc, #628]	@ (8000b90 <__aeabi_dadd+0x388>)
 800091c:	3701      	adds	r7, #1
 800091e:	4297      	cmp	r7, r2
 8000920:	d100      	bne.n	8000924 <__aeabi_dadd+0x11c>
 8000922:	e0d3      	b.n	8000acc <__aeabi_dadd+0x2c4>
 8000924:	4646      	mov	r6, r8
 8000926:	499b      	ldr	r1, [pc, #620]	@ (8000b94 <__aeabi_dadd+0x38c>)
 8000928:	08ed      	lsrs	r5, r5, #3
 800092a:	4021      	ands	r1, r4
 800092c:	074a      	lsls	r2, r1, #29
 800092e:	432a      	orrs	r2, r5
 8000930:	057c      	lsls	r4, r7, #21
 8000932:	024d      	lsls	r5, r1, #9
 8000934:	0b2d      	lsrs	r5, r5, #12
 8000936:	0d64      	lsrs	r4, r4, #21
 8000938:	0524      	lsls	r4, r4, #20
 800093a:	432c      	orrs	r4, r5
 800093c:	07f6      	lsls	r6, r6, #31
 800093e:	4334      	orrs	r4, r6
 8000940:	0010      	movs	r0, r2
 8000942:	0021      	movs	r1, r4
 8000944:	b003      	add	sp, #12
 8000946:	bcf0      	pop	{r4, r5, r6, r7}
 8000948:	46bb      	mov	fp, r7
 800094a:	46b2      	mov	sl, r6
 800094c:	46a9      	mov	r9, r5
 800094e:	46a0      	mov	r8, r4
 8000950:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000952:	2a00      	cmp	r2, #0
 8000954:	d100      	bne.n	8000958 <__aeabi_dadd+0x150>
 8000956:	e084      	b.n	8000a62 <__aeabi_dadd+0x25a>
 8000958:	464a      	mov	r2, r9
 800095a:	1bd2      	subs	r2, r2, r7
 800095c:	2f00      	cmp	r7, #0
 800095e:	d000      	beq.n	8000962 <__aeabi_dadd+0x15a>
 8000960:	e16d      	b.n	8000c3e <__aeabi_dadd+0x436>
 8000962:	0025      	movs	r5, r4
 8000964:	4305      	orrs	r5, r0
 8000966:	d100      	bne.n	800096a <__aeabi_dadd+0x162>
 8000968:	e127      	b.n	8000bba <__aeabi_dadd+0x3b2>
 800096a:	1e56      	subs	r6, r2, #1
 800096c:	2a01      	cmp	r2, #1
 800096e:	d100      	bne.n	8000972 <__aeabi_dadd+0x16a>
 8000970:	e23b      	b.n	8000dea <__aeabi_dadd+0x5e2>
 8000972:	4d87      	ldr	r5, [pc, #540]	@ (8000b90 <__aeabi_dadd+0x388>)
 8000974:	42aa      	cmp	r2, r5
 8000976:	d100      	bne.n	800097a <__aeabi_dadd+0x172>
 8000978:	e26a      	b.n	8000e50 <__aeabi_dadd+0x648>
 800097a:	2501      	movs	r5, #1
 800097c:	2e38      	cmp	r6, #56	@ 0x38
 800097e:	dc12      	bgt.n	80009a6 <__aeabi_dadd+0x19e>
 8000980:	0032      	movs	r2, r6
 8000982:	2a1f      	cmp	r2, #31
 8000984:	dd00      	ble.n	8000988 <__aeabi_dadd+0x180>
 8000986:	e1f8      	b.n	8000d7a <__aeabi_dadd+0x572>
 8000988:	2620      	movs	r6, #32
 800098a:	0025      	movs	r5, r4
 800098c:	1ab6      	subs	r6, r6, r2
 800098e:	0007      	movs	r7, r0
 8000990:	4653      	mov	r3, sl
 8000992:	40b0      	lsls	r0, r6
 8000994:	40d4      	lsrs	r4, r2
 8000996:	40b5      	lsls	r5, r6
 8000998:	40d7      	lsrs	r7, r2
 800099a:	1e46      	subs	r6, r0, #1
 800099c:	41b0      	sbcs	r0, r6
 800099e:	1b1b      	subs	r3, r3, r4
 80009a0:	469a      	mov	sl, r3
 80009a2:	433d      	orrs	r5, r7
 80009a4:	4305      	orrs	r5, r0
 80009a6:	4662      	mov	r2, ip
 80009a8:	1b55      	subs	r5, r2, r5
 80009aa:	45ac      	cmp	ip, r5
 80009ac:	4192      	sbcs	r2, r2
 80009ae:	4653      	mov	r3, sl
 80009b0:	4252      	negs	r2, r2
 80009b2:	000e      	movs	r6, r1
 80009b4:	464f      	mov	r7, r9
 80009b6:	4688      	mov	r8, r1
 80009b8:	1a9c      	subs	r4, r3, r2
 80009ba:	e778      	b.n	80008ae <__aeabi_dadd+0xa6>
 80009bc:	2a00      	cmp	r2, #0
 80009be:	dc00      	bgt.n	80009c2 <__aeabi_dadd+0x1ba>
 80009c0:	e08e      	b.n	8000ae0 <__aeabi_dadd+0x2d8>
 80009c2:	4649      	mov	r1, r9
 80009c4:	2900      	cmp	r1, #0
 80009c6:	d175      	bne.n	8000ab4 <__aeabi_dadd+0x2ac>
 80009c8:	4661      	mov	r1, ip
 80009ca:	4653      	mov	r3, sl
 80009cc:	4319      	orrs	r1, r3
 80009ce:	d100      	bne.n	80009d2 <__aeabi_dadd+0x1ca>
 80009d0:	e0f6      	b.n	8000bc0 <__aeabi_dadd+0x3b8>
 80009d2:	1e51      	subs	r1, r2, #1
 80009d4:	2a01      	cmp	r2, #1
 80009d6:	d100      	bne.n	80009da <__aeabi_dadd+0x1d2>
 80009d8:	e191      	b.n	8000cfe <__aeabi_dadd+0x4f6>
 80009da:	4d6d      	ldr	r5, [pc, #436]	@ (8000b90 <__aeabi_dadd+0x388>)
 80009dc:	42aa      	cmp	r2, r5
 80009de:	d100      	bne.n	80009e2 <__aeabi_dadd+0x1da>
 80009e0:	e0dc      	b.n	8000b9c <__aeabi_dadd+0x394>
 80009e2:	2501      	movs	r5, #1
 80009e4:	2938      	cmp	r1, #56	@ 0x38
 80009e6:	dc14      	bgt.n	8000a12 <__aeabi_dadd+0x20a>
 80009e8:	000a      	movs	r2, r1
 80009ea:	2a1f      	cmp	r2, #31
 80009ec:	dd00      	ble.n	80009f0 <__aeabi_dadd+0x1e8>
 80009ee:	e1a2      	b.n	8000d36 <__aeabi_dadd+0x52e>
 80009f0:	2120      	movs	r1, #32
 80009f2:	4653      	mov	r3, sl
 80009f4:	1a89      	subs	r1, r1, r2
 80009f6:	408b      	lsls	r3, r1
 80009f8:	001d      	movs	r5, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	40d3      	lsrs	r3, r2
 80009fe:	431d      	orrs	r5, r3
 8000a00:	4663      	mov	r3, ip
 8000a02:	408b      	lsls	r3, r1
 8000a04:	0019      	movs	r1, r3
 8000a06:	1e4b      	subs	r3, r1, #1
 8000a08:	4199      	sbcs	r1, r3
 8000a0a:	4653      	mov	r3, sl
 8000a0c:	40d3      	lsrs	r3, r2
 8000a0e:	430d      	orrs	r5, r1
 8000a10:	18e4      	adds	r4, r4, r3
 8000a12:	182d      	adds	r5, r5, r0
 8000a14:	4285      	cmp	r5, r0
 8000a16:	4180      	sbcs	r0, r0
 8000a18:	4240      	negs	r0, r0
 8000a1a:	1824      	adds	r4, r4, r0
 8000a1c:	0223      	lsls	r3, r4, #8
 8000a1e:	d559      	bpl.n	8000ad4 <__aeabi_dadd+0x2cc>
 8000a20:	4b5b      	ldr	r3, [pc, #364]	@ (8000b90 <__aeabi_dadd+0x388>)
 8000a22:	3701      	adds	r7, #1
 8000a24:	429f      	cmp	r7, r3
 8000a26:	d051      	beq.n	8000acc <__aeabi_dadd+0x2c4>
 8000a28:	2101      	movs	r1, #1
 8000a2a:	4b5a      	ldr	r3, [pc, #360]	@ (8000b94 <__aeabi_dadd+0x38c>)
 8000a2c:	086a      	lsrs	r2, r5, #1
 8000a2e:	401c      	ands	r4, r3
 8000a30:	4029      	ands	r1, r5
 8000a32:	430a      	orrs	r2, r1
 8000a34:	07e5      	lsls	r5, r4, #31
 8000a36:	4315      	orrs	r5, r2
 8000a38:	0864      	lsrs	r4, r4, #1
 8000a3a:	e75f      	b.n	80008fc <__aeabi_dadd+0xf4>
 8000a3c:	4661      	mov	r1, ip
 8000a3e:	4653      	mov	r3, sl
 8000a40:	4319      	orrs	r1, r3
 8000a42:	d100      	bne.n	8000a46 <__aeabi_dadd+0x23e>
 8000a44:	e0bc      	b.n	8000bc0 <__aeabi_dadd+0x3b8>
 8000a46:	1e51      	subs	r1, r2, #1
 8000a48:	2a01      	cmp	r2, #1
 8000a4a:	d100      	bne.n	8000a4e <__aeabi_dadd+0x246>
 8000a4c:	e164      	b.n	8000d18 <__aeabi_dadd+0x510>
 8000a4e:	4d50      	ldr	r5, [pc, #320]	@ (8000b90 <__aeabi_dadd+0x388>)
 8000a50:	42aa      	cmp	r2, r5
 8000a52:	d100      	bne.n	8000a56 <__aeabi_dadd+0x24e>
 8000a54:	e16a      	b.n	8000d2c <__aeabi_dadd+0x524>
 8000a56:	2501      	movs	r5, #1
 8000a58:	2938      	cmp	r1, #56	@ 0x38
 8000a5a:	dd00      	ble.n	8000a5e <__aeabi_dadd+0x256>
 8000a5c:	e722      	b.n	80008a4 <__aeabi_dadd+0x9c>
 8000a5e:	000a      	movs	r2, r1
 8000a60:	e70e      	b.n	8000880 <__aeabi_dadd+0x78>
 8000a62:	4a4d      	ldr	r2, [pc, #308]	@ (8000b98 <__aeabi_dadd+0x390>)
 8000a64:	1c7d      	adds	r5, r7, #1
 8000a66:	4215      	tst	r5, r2
 8000a68:	d000      	beq.n	8000a6c <__aeabi_dadd+0x264>
 8000a6a:	e0d0      	b.n	8000c0e <__aeabi_dadd+0x406>
 8000a6c:	0025      	movs	r5, r4
 8000a6e:	4662      	mov	r2, ip
 8000a70:	4653      	mov	r3, sl
 8000a72:	4305      	orrs	r5, r0
 8000a74:	431a      	orrs	r2, r3
 8000a76:	2f00      	cmp	r7, #0
 8000a78:	d000      	beq.n	8000a7c <__aeabi_dadd+0x274>
 8000a7a:	e137      	b.n	8000cec <__aeabi_dadd+0x4e4>
 8000a7c:	2d00      	cmp	r5, #0
 8000a7e:	d100      	bne.n	8000a82 <__aeabi_dadd+0x27a>
 8000a80:	e1a8      	b.n	8000dd4 <__aeabi_dadd+0x5cc>
 8000a82:	2a00      	cmp	r2, #0
 8000a84:	d100      	bne.n	8000a88 <__aeabi_dadd+0x280>
 8000a86:	e16a      	b.n	8000d5e <__aeabi_dadd+0x556>
 8000a88:	4663      	mov	r3, ip
 8000a8a:	1ac5      	subs	r5, r0, r3
 8000a8c:	4653      	mov	r3, sl
 8000a8e:	1ae2      	subs	r2, r4, r3
 8000a90:	42a8      	cmp	r0, r5
 8000a92:	419b      	sbcs	r3, r3
 8000a94:	425b      	negs	r3, r3
 8000a96:	1ad3      	subs	r3, r2, r3
 8000a98:	021a      	lsls	r2, r3, #8
 8000a9a:	d400      	bmi.n	8000a9e <__aeabi_dadd+0x296>
 8000a9c:	e203      	b.n	8000ea6 <__aeabi_dadd+0x69e>
 8000a9e:	4663      	mov	r3, ip
 8000aa0:	1a1d      	subs	r5, r3, r0
 8000aa2:	45ac      	cmp	ip, r5
 8000aa4:	4192      	sbcs	r2, r2
 8000aa6:	4653      	mov	r3, sl
 8000aa8:	4252      	negs	r2, r2
 8000aaa:	1b1c      	subs	r4, r3, r4
 8000aac:	000e      	movs	r6, r1
 8000aae:	4688      	mov	r8, r1
 8000ab0:	1aa4      	subs	r4, r4, r2
 8000ab2:	e723      	b.n	80008fc <__aeabi_dadd+0xf4>
 8000ab4:	4936      	ldr	r1, [pc, #216]	@ (8000b90 <__aeabi_dadd+0x388>)
 8000ab6:	428f      	cmp	r7, r1
 8000ab8:	d070      	beq.n	8000b9c <__aeabi_dadd+0x394>
 8000aba:	2501      	movs	r5, #1
 8000abc:	2a38      	cmp	r2, #56	@ 0x38
 8000abe:	dca8      	bgt.n	8000a12 <__aeabi_dadd+0x20a>
 8000ac0:	2180      	movs	r1, #128	@ 0x80
 8000ac2:	4653      	mov	r3, sl
 8000ac4:	0409      	lsls	r1, r1, #16
 8000ac6:	430b      	orrs	r3, r1
 8000ac8:	469a      	mov	sl, r3
 8000aca:	e78e      	b.n	80009ea <__aeabi_dadd+0x1e2>
 8000acc:	003c      	movs	r4, r7
 8000ace:	2500      	movs	r5, #0
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	e731      	b.n	8000938 <__aeabi_dadd+0x130>
 8000ad4:	2307      	movs	r3, #7
 8000ad6:	402b      	ands	r3, r5
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d000      	beq.n	8000ade <__aeabi_dadd+0x2d6>
 8000adc:	e710      	b.n	8000900 <__aeabi_dadd+0xf8>
 8000ade:	e093      	b.n	8000c08 <__aeabi_dadd+0x400>
 8000ae0:	2a00      	cmp	r2, #0
 8000ae2:	d074      	beq.n	8000bce <__aeabi_dadd+0x3c6>
 8000ae4:	464a      	mov	r2, r9
 8000ae6:	1bd2      	subs	r2, r2, r7
 8000ae8:	2f00      	cmp	r7, #0
 8000aea:	d100      	bne.n	8000aee <__aeabi_dadd+0x2e6>
 8000aec:	e0c7      	b.n	8000c7e <__aeabi_dadd+0x476>
 8000aee:	4928      	ldr	r1, [pc, #160]	@ (8000b90 <__aeabi_dadd+0x388>)
 8000af0:	4589      	cmp	r9, r1
 8000af2:	d100      	bne.n	8000af6 <__aeabi_dadd+0x2ee>
 8000af4:	e185      	b.n	8000e02 <__aeabi_dadd+0x5fa>
 8000af6:	2501      	movs	r5, #1
 8000af8:	2a38      	cmp	r2, #56	@ 0x38
 8000afa:	dc12      	bgt.n	8000b22 <__aeabi_dadd+0x31a>
 8000afc:	2180      	movs	r1, #128	@ 0x80
 8000afe:	0409      	lsls	r1, r1, #16
 8000b00:	430c      	orrs	r4, r1
 8000b02:	2a1f      	cmp	r2, #31
 8000b04:	dd00      	ble.n	8000b08 <__aeabi_dadd+0x300>
 8000b06:	e1ab      	b.n	8000e60 <__aeabi_dadd+0x658>
 8000b08:	2120      	movs	r1, #32
 8000b0a:	0025      	movs	r5, r4
 8000b0c:	1a89      	subs	r1, r1, r2
 8000b0e:	0007      	movs	r7, r0
 8000b10:	4088      	lsls	r0, r1
 8000b12:	408d      	lsls	r5, r1
 8000b14:	40d7      	lsrs	r7, r2
 8000b16:	1e41      	subs	r1, r0, #1
 8000b18:	4188      	sbcs	r0, r1
 8000b1a:	40d4      	lsrs	r4, r2
 8000b1c:	433d      	orrs	r5, r7
 8000b1e:	4305      	orrs	r5, r0
 8000b20:	44a2      	add	sl, r4
 8000b22:	4465      	add	r5, ip
 8000b24:	4565      	cmp	r5, ip
 8000b26:	4192      	sbcs	r2, r2
 8000b28:	4252      	negs	r2, r2
 8000b2a:	4452      	add	r2, sl
 8000b2c:	0014      	movs	r4, r2
 8000b2e:	464f      	mov	r7, r9
 8000b30:	e774      	b.n	8000a1c <__aeabi_dadd+0x214>
 8000b32:	0028      	movs	r0, r5
 8000b34:	f001 fda8 	bl	8002688 <__clzsi2>
 8000b38:	0003      	movs	r3, r0
 8000b3a:	3318      	adds	r3, #24
 8000b3c:	2b1f      	cmp	r3, #31
 8000b3e:	dc00      	bgt.n	8000b42 <__aeabi_dadd+0x33a>
 8000b40:	e6c2      	b.n	80008c8 <__aeabi_dadd+0xc0>
 8000b42:	002a      	movs	r2, r5
 8000b44:	3808      	subs	r0, #8
 8000b46:	4082      	lsls	r2, r0
 8000b48:	429f      	cmp	r7, r3
 8000b4a:	dd00      	ble.n	8000b4e <__aeabi_dadd+0x346>
 8000b4c:	e0a9      	b.n	8000ca2 <__aeabi_dadd+0x49a>
 8000b4e:	1bdb      	subs	r3, r3, r7
 8000b50:	1c58      	adds	r0, r3, #1
 8000b52:	281f      	cmp	r0, #31
 8000b54:	dc00      	bgt.n	8000b58 <__aeabi_dadd+0x350>
 8000b56:	e1ac      	b.n	8000eb2 <__aeabi_dadd+0x6aa>
 8000b58:	0015      	movs	r5, r2
 8000b5a:	3b1f      	subs	r3, #31
 8000b5c:	40dd      	lsrs	r5, r3
 8000b5e:	2820      	cmp	r0, #32
 8000b60:	d005      	beq.n	8000b6e <__aeabi_dadd+0x366>
 8000b62:	2340      	movs	r3, #64	@ 0x40
 8000b64:	1a1b      	subs	r3, r3, r0
 8000b66:	409a      	lsls	r2, r3
 8000b68:	1e53      	subs	r3, r2, #1
 8000b6a:	419a      	sbcs	r2, r3
 8000b6c:	4315      	orrs	r5, r2
 8000b6e:	2307      	movs	r3, #7
 8000b70:	2700      	movs	r7, #0
 8000b72:	402b      	ands	r3, r5
 8000b74:	e7b0      	b.n	8000ad8 <__aeabi_dadd+0x2d0>
 8000b76:	08ed      	lsrs	r5, r5, #3
 8000b78:	4b05      	ldr	r3, [pc, #20]	@ (8000b90 <__aeabi_dadd+0x388>)
 8000b7a:	0762      	lsls	r2, r4, #29
 8000b7c:	432a      	orrs	r2, r5
 8000b7e:	08e4      	lsrs	r4, r4, #3
 8000b80:	429f      	cmp	r7, r3
 8000b82:	d00f      	beq.n	8000ba4 <__aeabi_dadd+0x39c>
 8000b84:	0324      	lsls	r4, r4, #12
 8000b86:	0b25      	lsrs	r5, r4, #12
 8000b88:	057c      	lsls	r4, r7, #21
 8000b8a:	0d64      	lsrs	r4, r4, #21
 8000b8c:	e6d4      	b.n	8000938 <__aeabi_dadd+0x130>
 8000b8e:	46c0      	nop			@ (mov r8, r8)
 8000b90:	000007ff 	.word	0x000007ff
 8000b94:	ff7fffff 	.word	0xff7fffff
 8000b98:	000007fe 	.word	0x000007fe
 8000b9c:	08c0      	lsrs	r0, r0, #3
 8000b9e:	0762      	lsls	r2, r4, #29
 8000ba0:	4302      	orrs	r2, r0
 8000ba2:	08e4      	lsrs	r4, r4, #3
 8000ba4:	0013      	movs	r3, r2
 8000ba6:	4323      	orrs	r3, r4
 8000ba8:	d100      	bne.n	8000bac <__aeabi_dadd+0x3a4>
 8000baa:	e186      	b.n	8000eba <__aeabi_dadd+0x6b2>
 8000bac:	2580      	movs	r5, #128	@ 0x80
 8000bae:	032d      	lsls	r5, r5, #12
 8000bb0:	4325      	orrs	r5, r4
 8000bb2:	032d      	lsls	r5, r5, #12
 8000bb4:	4cc3      	ldr	r4, [pc, #780]	@ (8000ec4 <__aeabi_dadd+0x6bc>)
 8000bb6:	0b2d      	lsrs	r5, r5, #12
 8000bb8:	e6be      	b.n	8000938 <__aeabi_dadd+0x130>
 8000bba:	4660      	mov	r0, ip
 8000bbc:	4654      	mov	r4, sl
 8000bbe:	000e      	movs	r6, r1
 8000bc0:	0017      	movs	r7, r2
 8000bc2:	08c5      	lsrs	r5, r0, #3
 8000bc4:	e7d8      	b.n	8000b78 <__aeabi_dadd+0x370>
 8000bc6:	4cc0      	ldr	r4, [pc, #768]	@ (8000ec8 <__aeabi_dadd+0x6c0>)
 8000bc8:	1aff      	subs	r7, r7, r3
 8000bca:	4014      	ands	r4, r2
 8000bcc:	e696      	b.n	80008fc <__aeabi_dadd+0xf4>
 8000bce:	4abf      	ldr	r2, [pc, #764]	@ (8000ecc <__aeabi_dadd+0x6c4>)
 8000bd0:	1c79      	adds	r1, r7, #1
 8000bd2:	4211      	tst	r1, r2
 8000bd4:	d16b      	bne.n	8000cae <__aeabi_dadd+0x4a6>
 8000bd6:	0022      	movs	r2, r4
 8000bd8:	4302      	orrs	r2, r0
 8000bda:	2f00      	cmp	r7, #0
 8000bdc:	d000      	beq.n	8000be0 <__aeabi_dadd+0x3d8>
 8000bde:	e0db      	b.n	8000d98 <__aeabi_dadd+0x590>
 8000be0:	2a00      	cmp	r2, #0
 8000be2:	d100      	bne.n	8000be6 <__aeabi_dadd+0x3de>
 8000be4:	e12d      	b.n	8000e42 <__aeabi_dadd+0x63a>
 8000be6:	4662      	mov	r2, ip
 8000be8:	4653      	mov	r3, sl
 8000bea:	431a      	orrs	r2, r3
 8000bec:	d100      	bne.n	8000bf0 <__aeabi_dadd+0x3e8>
 8000bee:	e0b6      	b.n	8000d5e <__aeabi_dadd+0x556>
 8000bf0:	4663      	mov	r3, ip
 8000bf2:	18c5      	adds	r5, r0, r3
 8000bf4:	4285      	cmp	r5, r0
 8000bf6:	4180      	sbcs	r0, r0
 8000bf8:	4454      	add	r4, sl
 8000bfa:	4240      	negs	r0, r0
 8000bfc:	1824      	adds	r4, r4, r0
 8000bfe:	0223      	lsls	r3, r4, #8
 8000c00:	d502      	bpl.n	8000c08 <__aeabi_dadd+0x400>
 8000c02:	000f      	movs	r7, r1
 8000c04:	4bb0      	ldr	r3, [pc, #704]	@ (8000ec8 <__aeabi_dadd+0x6c0>)
 8000c06:	401c      	ands	r4, r3
 8000c08:	003a      	movs	r2, r7
 8000c0a:	0028      	movs	r0, r5
 8000c0c:	e7d8      	b.n	8000bc0 <__aeabi_dadd+0x3b8>
 8000c0e:	4662      	mov	r2, ip
 8000c10:	1a85      	subs	r5, r0, r2
 8000c12:	42a8      	cmp	r0, r5
 8000c14:	4192      	sbcs	r2, r2
 8000c16:	4653      	mov	r3, sl
 8000c18:	4252      	negs	r2, r2
 8000c1a:	4691      	mov	r9, r2
 8000c1c:	1ae3      	subs	r3, r4, r3
 8000c1e:	001a      	movs	r2, r3
 8000c20:	464b      	mov	r3, r9
 8000c22:	1ad2      	subs	r2, r2, r3
 8000c24:	0013      	movs	r3, r2
 8000c26:	4691      	mov	r9, r2
 8000c28:	021a      	lsls	r2, r3, #8
 8000c2a:	d454      	bmi.n	8000cd6 <__aeabi_dadd+0x4ce>
 8000c2c:	464a      	mov	r2, r9
 8000c2e:	464c      	mov	r4, r9
 8000c30:	432a      	orrs	r2, r5
 8000c32:	d000      	beq.n	8000c36 <__aeabi_dadd+0x42e>
 8000c34:	e640      	b.n	80008b8 <__aeabi_dadd+0xb0>
 8000c36:	2600      	movs	r6, #0
 8000c38:	2400      	movs	r4, #0
 8000c3a:	2500      	movs	r5, #0
 8000c3c:	e67c      	b.n	8000938 <__aeabi_dadd+0x130>
 8000c3e:	4da1      	ldr	r5, [pc, #644]	@ (8000ec4 <__aeabi_dadd+0x6bc>)
 8000c40:	45a9      	cmp	r9, r5
 8000c42:	d100      	bne.n	8000c46 <__aeabi_dadd+0x43e>
 8000c44:	e090      	b.n	8000d68 <__aeabi_dadd+0x560>
 8000c46:	2501      	movs	r5, #1
 8000c48:	2a38      	cmp	r2, #56	@ 0x38
 8000c4a:	dd00      	ble.n	8000c4e <__aeabi_dadd+0x446>
 8000c4c:	e6ab      	b.n	80009a6 <__aeabi_dadd+0x19e>
 8000c4e:	2580      	movs	r5, #128	@ 0x80
 8000c50:	042d      	lsls	r5, r5, #16
 8000c52:	432c      	orrs	r4, r5
 8000c54:	e695      	b.n	8000982 <__aeabi_dadd+0x17a>
 8000c56:	0011      	movs	r1, r2
 8000c58:	4655      	mov	r5, sl
 8000c5a:	3920      	subs	r1, #32
 8000c5c:	40cd      	lsrs	r5, r1
 8000c5e:	46a9      	mov	r9, r5
 8000c60:	2a20      	cmp	r2, #32
 8000c62:	d006      	beq.n	8000c72 <__aeabi_dadd+0x46a>
 8000c64:	2140      	movs	r1, #64	@ 0x40
 8000c66:	4653      	mov	r3, sl
 8000c68:	1a8a      	subs	r2, r1, r2
 8000c6a:	4093      	lsls	r3, r2
 8000c6c:	4662      	mov	r2, ip
 8000c6e:	431a      	orrs	r2, r3
 8000c70:	4694      	mov	ip, r2
 8000c72:	4665      	mov	r5, ip
 8000c74:	1e6b      	subs	r3, r5, #1
 8000c76:	419d      	sbcs	r5, r3
 8000c78:	464b      	mov	r3, r9
 8000c7a:	431d      	orrs	r5, r3
 8000c7c:	e612      	b.n	80008a4 <__aeabi_dadd+0x9c>
 8000c7e:	0021      	movs	r1, r4
 8000c80:	4301      	orrs	r1, r0
 8000c82:	d100      	bne.n	8000c86 <__aeabi_dadd+0x47e>
 8000c84:	e0c4      	b.n	8000e10 <__aeabi_dadd+0x608>
 8000c86:	1e51      	subs	r1, r2, #1
 8000c88:	2a01      	cmp	r2, #1
 8000c8a:	d100      	bne.n	8000c8e <__aeabi_dadd+0x486>
 8000c8c:	e0fb      	b.n	8000e86 <__aeabi_dadd+0x67e>
 8000c8e:	4d8d      	ldr	r5, [pc, #564]	@ (8000ec4 <__aeabi_dadd+0x6bc>)
 8000c90:	42aa      	cmp	r2, r5
 8000c92:	d100      	bne.n	8000c96 <__aeabi_dadd+0x48e>
 8000c94:	e0b5      	b.n	8000e02 <__aeabi_dadd+0x5fa>
 8000c96:	2501      	movs	r5, #1
 8000c98:	2938      	cmp	r1, #56	@ 0x38
 8000c9a:	dd00      	ble.n	8000c9e <__aeabi_dadd+0x496>
 8000c9c:	e741      	b.n	8000b22 <__aeabi_dadd+0x31a>
 8000c9e:	000a      	movs	r2, r1
 8000ca0:	e72f      	b.n	8000b02 <__aeabi_dadd+0x2fa>
 8000ca2:	4c89      	ldr	r4, [pc, #548]	@ (8000ec8 <__aeabi_dadd+0x6c0>)
 8000ca4:	1aff      	subs	r7, r7, r3
 8000ca6:	4014      	ands	r4, r2
 8000ca8:	0762      	lsls	r2, r4, #29
 8000caa:	08e4      	lsrs	r4, r4, #3
 8000cac:	e76a      	b.n	8000b84 <__aeabi_dadd+0x37c>
 8000cae:	4a85      	ldr	r2, [pc, #532]	@ (8000ec4 <__aeabi_dadd+0x6bc>)
 8000cb0:	4291      	cmp	r1, r2
 8000cb2:	d100      	bne.n	8000cb6 <__aeabi_dadd+0x4ae>
 8000cb4:	e0e3      	b.n	8000e7e <__aeabi_dadd+0x676>
 8000cb6:	4663      	mov	r3, ip
 8000cb8:	18c2      	adds	r2, r0, r3
 8000cba:	4282      	cmp	r2, r0
 8000cbc:	4180      	sbcs	r0, r0
 8000cbe:	0023      	movs	r3, r4
 8000cc0:	4240      	negs	r0, r0
 8000cc2:	4453      	add	r3, sl
 8000cc4:	181b      	adds	r3, r3, r0
 8000cc6:	07dd      	lsls	r5, r3, #31
 8000cc8:	085c      	lsrs	r4, r3, #1
 8000cca:	2307      	movs	r3, #7
 8000ccc:	0852      	lsrs	r2, r2, #1
 8000cce:	4315      	orrs	r5, r2
 8000cd0:	000f      	movs	r7, r1
 8000cd2:	402b      	ands	r3, r5
 8000cd4:	e700      	b.n	8000ad8 <__aeabi_dadd+0x2d0>
 8000cd6:	4663      	mov	r3, ip
 8000cd8:	1a1d      	subs	r5, r3, r0
 8000cda:	45ac      	cmp	ip, r5
 8000cdc:	4192      	sbcs	r2, r2
 8000cde:	4653      	mov	r3, sl
 8000ce0:	4252      	negs	r2, r2
 8000ce2:	1b1c      	subs	r4, r3, r4
 8000ce4:	000e      	movs	r6, r1
 8000ce6:	4688      	mov	r8, r1
 8000ce8:	1aa4      	subs	r4, r4, r2
 8000cea:	e5e5      	b.n	80008b8 <__aeabi_dadd+0xb0>
 8000cec:	2d00      	cmp	r5, #0
 8000cee:	d000      	beq.n	8000cf2 <__aeabi_dadd+0x4ea>
 8000cf0:	e091      	b.n	8000e16 <__aeabi_dadd+0x60e>
 8000cf2:	2a00      	cmp	r2, #0
 8000cf4:	d138      	bne.n	8000d68 <__aeabi_dadd+0x560>
 8000cf6:	2480      	movs	r4, #128	@ 0x80
 8000cf8:	2600      	movs	r6, #0
 8000cfa:	0324      	lsls	r4, r4, #12
 8000cfc:	e756      	b.n	8000bac <__aeabi_dadd+0x3a4>
 8000cfe:	4663      	mov	r3, ip
 8000d00:	18c5      	adds	r5, r0, r3
 8000d02:	4285      	cmp	r5, r0
 8000d04:	4180      	sbcs	r0, r0
 8000d06:	4454      	add	r4, sl
 8000d08:	4240      	negs	r0, r0
 8000d0a:	1824      	adds	r4, r4, r0
 8000d0c:	2701      	movs	r7, #1
 8000d0e:	0223      	lsls	r3, r4, #8
 8000d10:	d400      	bmi.n	8000d14 <__aeabi_dadd+0x50c>
 8000d12:	e6df      	b.n	8000ad4 <__aeabi_dadd+0x2cc>
 8000d14:	2702      	movs	r7, #2
 8000d16:	e687      	b.n	8000a28 <__aeabi_dadd+0x220>
 8000d18:	4663      	mov	r3, ip
 8000d1a:	1ac5      	subs	r5, r0, r3
 8000d1c:	42a8      	cmp	r0, r5
 8000d1e:	4180      	sbcs	r0, r0
 8000d20:	4653      	mov	r3, sl
 8000d22:	4240      	negs	r0, r0
 8000d24:	1ae4      	subs	r4, r4, r3
 8000d26:	2701      	movs	r7, #1
 8000d28:	1a24      	subs	r4, r4, r0
 8000d2a:	e5c0      	b.n	80008ae <__aeabi_dadd+0xa6>
 8000d2c:	0762      	lsls	r2, r4, #29
 8000d2e:	08c0      	lsrs	r0, r0, #3
 8000d30:	4302      	orrs	r2, r0
 8000d32:	08e4      	lsrs	r4, r4, #3
 8000d34:	e736      	b.n	8000ba4 <__aeabi_dadd+0x39c>
 8000d36:	0011      	movs	r1, r2
 8000d38:	4653      	mov	r3, sl
 8000d3a:	3920      	subs	r1, #32
 8000d3c:	40cb      	lsrs	r3, r1
 8000d3e:	4699      	mov	r9, r3
 8000d40:	2a20      	cmp	r2, #32
 8000d42:	d006      	beq.n	8000d52 <__aeabi_dadd+0x54a>
 8000d44:	2140      	movs	r1, #64	@ 0x40
 8000d46:	4653      	mov	r3, sl
 8000d48:	1a8a      	subs	r2, r1, r2
 8000d4a:	4093      	lsls	r3, r2
 8000d4c:	4662      	mov	r2, ip
 8000d4e:	431a      	orrs	r2, r3
 8000d50:	4694      	mov	ip, r2
 8000d52:	4665      	mov	r5, ip
 8000d54:	1e6b      	subs	r3, r5, #1
 8000d56:	419d      	sbcs	r5, r3
 8000d58:	464b      	mov	r3, r9
 8000d5a:	431d      	orrs	r5, r3
 8000d5c:	e659      	b.n	8000a12 <__aeabi_dadd+0x20a>
 8000d5e:	0762      	lsls	r2, r4, #29
 8000d60:	08c0      	lsrs	r0, r0, #3
 8000d62:	4302      	orrs	r2, r0
 8000d64:	08e4      	lsrs	r4, r4, #3
 8000d66:	e70d      	b.n	8000b84 <__aeabi_dadd+0x37c>
 8000d68:	4653      	mov	r3, sl
 8000d6a:	075a      	lsls	r2, r3, #29
 8000d6c:	4663      	mov	r3, ip
 8000d6e:	08d8      	lsrs	r0, r3, #3
 8000d70:	4653      	mov	r3, sl
 8000d72:	000e      	movs	r6, r1
 8000d74:	4302      	orrs	r2, r0
 8000d76:	08dc      	lsrs	r4, r3, #3
 8000d78:	e714      	b.n	8000ba4 <__aeabi_dadd+0x39c>
 8000d7a:	0015      	movs	r5, r2
 8000d7c:	0026      	movs	r6, r4
 8000d7e:	3d20      	subs	r5, #32
 8000d80:	40ee      	lsrs	r6, r5
 8000d82:	2a20      	cmp	r2, #32
 8000d84:	d003      	beq.n	8000d8e <__aeabi_dadd+0x586>
 8000d86:	2540      	movs	r5, #64	@ 0x40
 8000d88:	1aaa      	subs	r2, r5, r2
 8000d8a:	4094      	lsls	r4, r2
 8000d8c:	4320      	orrs	r0, r4
 8000d8e:	1e42      	subs	r2, r0, #1
 8000d90:	4190      	sbcs	r0, r2
 8000d92:	0005      	movs	r5, r0
 8000d94:	4335      	orrs	r5, r6
 8000d96:	e606      	b.n	80009a6 <__aeabi_dadd+0x19e>
 8000d98:	2a00      	cmp	r2, #0
 8000d9a:	d07c      	beq.n	8000e96 <__aeabi_dadd+0x68e>
 8000d9c:	4662      	mov	r2, ip
 8000d9e:	4653      	mov	r3, sl
 8000da0:	08c0      	lsrs	r0, r0, #3
 8000da2:	431a      	orrs	r2, r3
 8000da4:	d100      	bne.n	8000da8 <__aeabi_dadd+0x5a0>
 8000da6:	e6fa      	b.n	8000b9e <__aeabi_dadd+0x396>
 8000da8:	0762      	lsls	r2, r4, #29
 8000daa:	4310      	orrs	r0, r2
 8000dac:	2280      	movs	r2, #128	@ 0x80
 8000dae:	08e4      	lsrs	r4, r4, #3
 8000db0:	0312      	lsls	r2, r2, #12
 8000db2:	4214      	tst	r4, r2
 8000db4:	d008      	beq.n	8000dc8 <__aeabi_dadd+0x5c0>
 8000db6:	08d9      	lsrs	r1, r3, #3
 8000db8:	4211      	tst	r1, r2
 8000dba:	d105      	bne.n	8000dc8 <__aeabi_dadd+0x5c0>
 8000dbc:	4663      	mov	r3, ip
 8000dbe:	08d8      	lsrs	r0, r3, #3
 8000dc0:	4653      	mov	r3, sl
 8000dc2:	000c      	movs	r4, r1
 8000dc4:	075b      	lsls	r3, r3, #29
 8000dc6:	4318      	orrs	r0, r3
 8000dc8:	0f42      	lsrs	r2, r0, #29
 8000dca:	00c0      	lsls	r0, r0, #3
 8000dcc:	08c0      	lsrs	r0, r0, #3
 8000dce:	0752      	lsls	r2, r2, #29
 8000dd0:	4302      	orrs	r2, r0
 8000dd2:	e6e7      	b.n	8000ba4 <__aeabi_dadd+0x39c>
 8000dd4:	2a00      	cmp	r2, #0
 8000dd6:	d100      	bne.n	8000dda <__aeabi_dadd+0x5d2>
 8000dd8:	e72d      	b.n	8000c36 <__aeabi_dadd+0x42e>
 8000dda:	4663      	mov	r3, ip
 8000ddc:	08d8      	lsrs	r0, r3, #3
 8000dde:	4653      	mov	r3, sl
 8000de0:	075a      	lsls	r2, r3, #29
 8000de2:	000e      	movs	r6, r1
 8000de4:	4302      	orrs	r2, r0
 8000de6:	08dc      	lsrs	r4, r3, #3
 8000de8:	e6cc      	b.n	8000b84 <__aeabi_dadd+0x37c>
 8000dea:	4663      	mov	r3, ip
 8000dec:	1a1d      	subs	r5, r3, r0
 8000dee:	45ac      	cmp	ip, r5
 8000df0:	4192      	sbcs	r2, r2
 8000df2:	4653      	mov	r3, sl
 8000df4:	4252      	negs	r2, r2
 8000df6:	1b1c      	subs	r4, r3, r4
 8000df8:	000e      	movs	r6, r1
 8000dfa:	4688      	mov	r8, r1
 8000dfc:	1aa4      	subs	r4, r4, r2
 8000dfe:	3701      	adds	r7, #1
 8000e00:	e555      	b.n	80008ae <__aeabi_dadd+0xa6>
 8000e02:	4663      	mov	r3, ip
 8000e04:	08d9      	lsrs	r1, r3, #3
 8000e06:	4653      	mov	r3, sl
 8000e08:	075a      	lsls	r2, r3, #29
 8000e0a:	430a      	orrs	r2, r1
 8000e0c:	08dc      	lsrs	r4, r3, #3
 8000e0e:	e6c9      	b.n	8000ba4 <__aeabi_dadd+0x39c>
 8000e10:	4660      	mov	r0, ip
 8000e12:	4654      	mov	r4, sl
 8000e14:	e6d4      	b.n	8000bc0 <__aeabi_dadd+0x3b8>
 8000e16:	08c0      	lsrs	r0, r0, #3
 8000e18:	2a00      	cmp	r2, #0
 8000e1a:	d100      	bne.n	8000e1e <__aeabi_dadd+0x616>
 8000e1c:	e6bf      	b.n	8000b9e <__aeabi_dadd+0x396>
 8000e1e:	0762      	lsls	r2, r4, #29
 8000e20:	4310      	orrs	r0, r2
 8000e22:	2280      	movs	r2, #128	@ 0x80
 8000e24:	08e4      	lsrs	r4, r4, #3
 8000e26:	0312      	lsls	r2, r2, #12
 8000e28:	4214      	tst	r4, r2
 8000e2a:	d0cd      	beq.n	8000dc8 <__aeabi_dadd+0x5c0>
 8000e2c:	08dd      	lsrs	r5, r3, #3
 8000e2e:	4215      	tst	r5, r2
 8000e30:	d1ca      	bne.n	8000dc8 <__aeabi_dadd+0x5c0>
 8000e32:	4663      	mov	r3, ip
 8000e34:	08d8      	lsrs	r0, r3, #3
 8000e36:	4653      	mov	r3, sl
 8000e38:	075b      	lsls	r3, r3, #29
 8000e3a:	000e      	movs	r6, r1
 8000e3c:	002c      	movs	r4, r5
 8000e3e:	4318      	orrs	r0, r3
 8000e40:	e7c2      	b.n	8000dc8 <__aeabi_dadd+0x5c0>
 8000e42:	4663      	mov	r3, ip
 8000e44:	08d9      	lsrs	r1, r3, #3
 8000e46:	4653      	mov	r3, sl
 8000e48:	075a      	lsls	r2, r3, #29
 8000e4a:	430a      	orrs	r2, r1
 8000e4c:	08dc      	lsrs	r4, r3, #3
 8000e4e:	e699      	b.n	8000b84 <__aeabi_dadd+0x37c>
 8000e50:	4663      	mov	r3, ip
 8000e52:	08d8      	lsrs	r0, r3, #3
 8000e54:	4653      	mov	r3, sl
 8000e56:	075a      	lsls	r2, r3, #29
 8000e58:	000e      	movs	r6, r1
 8000e5a:	4302      	orrs	r2, r0
 8000e5c:	08dc      	lsrs	r4, r3, #3
 8000e5e:	e6a1      	b.n	8000ba4 <__aeabi_dadd+0x39c>
 8000e60:	0011      	movs	r1, r2
 8000e62:	0027      	movs	r7, r4
 8000e64:	3920      	subs	r1, #32
 8000e66:	40cf      	lsrs	r7, r1
 8000e68:	2a20      	cmp	r2, #32
 8000e6a:	d003      	beq.n	8000e74 <__aeabi_dadd+0x66c>
 8000e6c:	2140      	movs	r1, #64	@ 0x40
 8000e6e:	1a8a      	subs	r2, r1, r2
 8000e70:	4094      	lsls	r4, r2
 8000e72:	4320      	orrs	r0, r4
 8000e74:	1e42      	subs	r2, r0, #1
 8000e76:	4190      	sbcs	r0, r2
 8000e78:	0005      	movs	r5, r0
 8000e7a:	433d      	orrs	r5, r7
 8000e7c:	e651      	b.n	8000b22 <__aeabi_dadd+0x31a>
 8000e7e:	000c      	movs	r4, r1
 8000e80:	2500      	movs	r5, #0
 8000e82:	2200      	movs	r2, #0
 8000e84:	e558      	b.n	8000938 <__aeabi_dadd+0x130>
 8000e86:	4460      	add	r0, ip
 8000e88:	4560      	cmp	r0, ip
 8000e8a:	4192      	sbcs	r2, r2
 8000e8c:	4454      	add	r4, sl
 8000e8e:	4252      	negs	r2, r2
 8000e90:	0005      	movs	r5, r0
 8000e92:	18a4      	adds	r4, r4, r2
 8000e94:	e73a      	b.n	8000d0c <__aeabi_dadd+0x504>
 8000e96:	4653      	mov	r3, sl
 8000e98:	075a      	lsls	r2, r3, #29
 8000e9a:	4663      	mov	r3, ip
 8000e9c:	08d9      	lsrs	r1, r3, #3
 8000e9e:	4653      	mov	r3, sl
 8000ea0:	430a      	orrs	r2, r1
 8000ea2:	08dc      	lsrs	r4, r3, #3
 8000ea4:	e67e      	b.n	8000ba4 <__aeabi_dadd+0x39c>
 8000ea6:	001a      	movs	r2, r3
 8000ea8:	001c      	movs	r4, r3
 8000eaa:	432a      	orrs	r2, r5
 8000eac:	d000      	beq.n	8000eb0 <__aeabi_dadd+0x6a8>
 8000eae:	e6ab      	b.n	8000c08 <__aeabi_dadd+0x400>
 8000eb0:	e6c1      	b.n	8000c36 <__aeabi_dadd+0x42e>
 8000eb2:	2120      	movs	r1, #32
 8000eb4:	2500      	movs	r5, #0
 8000eb6:	1a09      	subs	r1, r1, r0
 8000eb8:	e519      	b.n	80008ee <__aeabi_dadd+0xe6>
 8000eba:	2200      	movs	r2, #0
 8000ebc:	2500      	movs	r5, #0
 8000ebe:	4c01      	ldr	r4, [pc, #4]	@ (8000ec4 <__aeabi_dadd+0x6bc>)
 8000ec0:	e53a      	b.n	8000938 <__aeabi_dadd+0x130>
 8000ec2:	46c0      	nop			@ (mov r8, r8)
 8000ec4:	000007ff 	.word	0x000007ff
 8000ec8:	ff7fffff 	.word	0xff7fffff
 8000ecc:	000007fe 	.word	0x000007fe

08000ed0 <__aeabi_ddiv>:
 8000ed0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ed2:	46de      	mov	lr, fp
 8000ed4:	4645      	mov	r5, r8
 8000ed6:	4657      	mov	r7, sl
 8000ed8:	464e      	mov	r6, r9
 8000eda:	b5e0      	push	{r5, r6, r7, lr}
 8000edc:	b087      	sub	sp, #28
 8000ede:	9200      	str	r2, [sp, #0]
 8000ee0:	9301      	str	r3, [sp, #4]
 8000ee2:	030b      	lsls	r3, r1, #12
 8000ee4:	0b1b      	lsrs	r3, r3, #12
 8000ee6:	469b      	mov	fp, r3
 8000ee8:	0fca      	lsrs	r2, r1, #31
 8000eea:	004b      	lsls	r3, r1, #1
 8000eec:	0004      	movs	r4, r0
 8000eee:	4680      	mov	r8, r0
 8000ef0:	0d5b      	lsrs	r3, r3, #21
 8000ef2:	9202      	str	r2, [sp, #8]
 8000ef4:	d100      	bne.n	8000ef8 <__aeabi_ddiv+0x28>
 8000ef6:	e16a      	b.n	80011ce <__aeabi_ddiv+0x2fe>
 8000ef8:	4ad4      	ldr	r2, [pc, #848]	@ (800124c <__aeabi_ddiv+0x37c>)
 8000efa:	4293      	cmp	r3, r2
 8000efc:	d100      	bne.n	8000f00 <__aeabi_ddiv+0x30>
 8000efe:	e18c      	b.n	800121a <__aeabi_ddiv+0x34a>
 8000f00:	4659      	mov	r1, fp
 8000f02:	0f42      	lsrs	r2, r0, #29
 8000f04:	00c9      	lsls	r1, r1, #3
 8000f06:	430a      	orrs	r2, r1
 8000f08:	2180      	movs	r1, #128	@ 0x80
 8000f0a:	0409      	lsls	r1, r1, #16
 8000f0c:	4311      	orrs	r1, r2
 8000f0e:	00c2      	lsls	r2, r0, #3
 8000f10:	4690      	mov	r8, r2
 8000f12:	4acf      	ldr	r2, [pc, #828]	@ (8001250 <__aeabi_ddiv+0x380>)
 8000f14:	4689      	mov	r9, r1
 8000f16:	4692      	mov	sl, r2
 8000f18:	449a      	add	sl, r3
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	2400      	movs	r4, #0
 8000f1e:	9303      	str	r3, [sp, #12]
 8000f20:	9e00      	ldr	r6, [sp, #0]
 8000f22:	9f01      	ldr	r7, [sp, #4]
 8000f24:	033b      	lsls	r3, r7, #12
 8000f26:	0b1b      	lsrs	r3, r3, #12
 8000f28:	469b      	mov	fp, r3
 8000f2a:	007b      	lsls	r3, r7, #1
 8000f2c:	0030      	movs	r0, r6
 8000f2e:	0d5b      	lsrs	r3, r3, #21
 8000f30:	0ffd      	lsrs	r5, r7, #31
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d100      	bne.n	8000f38 <__aeabi_ddiv+0x68>
 8000f36:	e128      	b.n	800118a <__aeabi_ddiv+0x2ba>
 8000f38:	4ac4      	ldr	r2, [pc, #784]	@ (800124c <__aeabi_ddiv+0x37c>)
 8000f3a:	4293      	cmp	r3, r2
 8000f3c:	d100      	bne.n	8000f40 <__aeabi_ddiv+0x70>
 8000f3e:	e177      	b.n	8001230 <__aeabi_ddiv+0x360>
 8000f40:	4659      	mov	r1, fp
 8000f42:	0f72      	lsrs	r2, r6, #29
 8000f44:	00c9      	lsls	r1, r1, #3
 8000f46:	430a      	orrs	r2, r1
 8000f48:	2180      	movs	r1, #128	@ 0x80
 8000f4a:	0409      	lsls	r1, r1, #16
 8000f4c:	4311      	orrs	r1, r2
 8000f4e:	468b      	mov	fp, r1
 8000f50:	49bf      	ldr	r1, [pc, #764]	@ (8001250 <__aeabi_ddiv+0x380>)
 8000f52:	00f2      	lsls	r2, r6, #3
 8000f54:	468c      	mov	ip, r1
 8000f56:	4651      	mov	r1, sl
 8000f58:	4463      	add	r3, ip
 8000f5a:	1acb      	subs	r3, r1, r3
 8000f5c:	469a      	mov	sl, r3
 8000f5e:	2300      	movs	r3, #0
 8000f60:	9e02      	ldr	r6, [sp, #8]
 8000f62:	406e      	eors	r6, r5
 8000f64:	2c0f      	cmp	r4, #15
 8000f66:	d827      	bhi.n	8000fb8 <__aeabi_ddiv+0xe8>
 8000f68:	49ba      	ldr	r1, [pc, #744]	@ (8001254 <__aeabi_ddiv+0x384>)
 8000f6a:	00a4      	lsls	r4, r4, #2
 8000f6c:	5909      	ldr	r1, [r1, r4]
 8000f6e:	468f      	mov	pc, r1
 8000f70:	46cb      	mov	fp, r9
 8000f72:	4642      	mov	r2, r8
 8000f74:	9e02      	ldr	r6, [sp, #8]
 8000f76:	9b03      	ldr	r3, [sp, #12]
 8000f78:	2b02      	cmp	r3, #2
 8000f7a:	d016      	beq.n	8000faa <__aeabi_ddiv+0xda>
 8000f7c:	2b03      	cmp	r3, #3
 8000f7e:	d100      	bne.n	8000f82 <__aeabi_ddiv+0xb2>
 8000f80:	e2a6      	b.n	80014d0 <__aeabi_ddiv+0x600>
 8000f82:	2b01      	cmp	r3, #1
 8000f84:	d000      	beq.n	8000f88 <__aeabi_ddiv+0xb8>
 8000f86:	e0df      	b.n	8001148 <__aeabi_ddiv+0x278>
 8000f88:	2200      	movs	r2, #0
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	2400      	movs	r4, #0
 8000f8e:	4690      	mov	r8, r2
 8000f90:	051b      	lsls	r3, r3, #20
 8000f92:	4323      	orrs	r3, r4
 8000f94:	07f6      	lsls	r6, r6, #31
 8000f96:	4333      	orrs	r3, r6
 8000f98:	4640      	mov	r0, r8
 8000f9a:	0019      	movs	r1, r3
 8000f9c:	b007      	add	sp, #28
 8000f9e:	bcf0      	pop	{r4, r5, r6, r7}
 8000fa0:	46bb      	mov	fp, r7
 8000fa2:	46b2      	mov	sl, r6
 8000fa4:	46a9      	mov	r9, r5
 8000fa6:	46a0      	mov	r8, r4
 8000fa8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000faa:	2200      	movs	r2, #0
 8000fac:	2400      	movs	r4, #0
 8000fae:	4690      	mov	r8, r2
 8000fb0:	4ba6      	ldr	r3, [pc, #664]	@ (800124c <__aeabi_ddiv+0x37c>)
 8000fb2:	e7ed      	b.n	8000f90 <__aeabi_ddiv+0xc0>
 8000fb4:	002e      	movs	r6, r5
 8000fb6:	e7df      	b.n	8000f78 <__aeabi_ddiv+0xa8>
 8000fb8:	45cb      	cmp	fp, r9
 8000fba:	d200      	bcs.n	8000fbe <__aeabi_ddiv+0xee>
 8000fbc:	e1d4      	b.n	8001368 <__aeabi_ddiv+0x498>
 8000fbe:	d100      	bne.n	8000fc2 <__aeabi_ddiv+0xf2>
 8000fc0:	e1cf      	b.n	8001362 <__aeabi_ddiv+0x492>
 8000fc2:	2301      	movs	r3, #1
 8000fc4:	425b      	negs	r3, r3
 8000fc6:	469c      	mov	ip, r3
 8000fc8:	4644      	mov	r4, r8
 8000fca:	4648      	mov	r0, r9
 8000fcc:	2700      	movs	r7, #0
 8000fce:	44e2      	add	sl, ip
 8000fd0:	465b      	mov	r3, fp
 8000fd2:	0e15      	lsrs	r5, r2, #24
 8000fd4:	021b      	lsls	r3, r3, #8
 8000fd6:	431d      	orrs	r5, r3
 8000fd8:	0c19      	lsrs	r1, r3, #16
 8000fda:	042b      	lsls	r3, r5, #16
 8000fdc:	0212      	lsls	r2, r2, #8
 8000fde:	9500      	str	r5, [sp, #0]
 8000fe0:	0c1d      	lsrs	r5, r3, #16
 8000fe2:	4691      	mov	r9, r2
 8000fe4:	9102      	str	r1, [sp, #8]
 8000fe6:	9503      	str	r5, [sp, #12]
 8000fe8:	f7ff f930 	bl	800024c <__aeabi_uidivmod>
 8000fec:	0002      	movs	r2, r0
 8000fee:	436a      	muls	r2, r5
 8000ff0:	040b      	lsls	r3, r1, #16
 8000ff2:	0c21      	lsrs	r1, r4, #16
 8000ff4:	4680      	mov	r8, r0
 8000ff6:	4319      	orrs	r1, r3
 8000ff8:	428a      	cmp	r2, r1
 8000ffa:	d909      	bls.n	8001010 <__aeabi_ddiv+0x140>
 8000ffc:	9d00      	ldr	r5, [sp, #0]
 8000ffe:	2301      	movs	r3, #1
 8001000:	46ac      	mov	ip, r5
 8001002:	425b      	negs	r3, r3
 8001004:	4461      	add	r1, ip
 8001006:	469c      	mov	ip, r3
 8001008:	44e0      	add	r8, ip
 800100a:	428d      	cmp	r5, r1
 800100c:	d800      	bhi.n	8001010 <__aeabi_ddiv+0x140>
 800100e:	e1fb      	b.n	8001408 <__aeabi_ddiv+0x538>
 8001010:	1a88      	subs	r0, r1, r2
 8001012:	9902      	ldr	r1, [sp, #8]
 8001014:	f7ff f91a 	bl	800024c <__aeabi_uidivmod>
 8001018:	9a03      	ldr	r2, [sp, #12]
 800101a:	0424      	lsls	r4, r4, #16
 800101c:	4342      	muls	r2, r0
 800101e:	0409      	lsls	r1, r1, #16
 8001020:	0c24      	lsrs	r4, r4, #16
 8001022:	0003      	movs	r3, r0
 8001024:	430c      	orrs	r4, r1
 8001026:	42a2      	cmp	r2, r4
 8001028:	d906      	bls.n	8001038 <__aeabi_ddiv+0x168>
 800102a:	9900      	ldr	r1, [sp, #0]
 800102c:	3b01      	subs	r3, #1
 800102e:	468c      	mov	ip, r1
 8001030:	4464      	add	r4, ip
 8001032:	42a1      	cmp	r1, r4
 8001034:	d800      	bhi.n	8001038 <__aeabi_ddiv+0x168>
 8001036:	e1e1      	b.n	80013fc <__aeabi_ddiv+0x52c>
 8001038:	1aa0      	subs	r0, r4, r2
 800103a:	4642      	mov	r2, r8
 800103c:	0412      	lsls	r2, r2, #16
 800103e:	431a      	orrs	r2, r3
 8001040:	4693      	mov	fp, r2
 8001042:	464b      	mov	r3, r9
 8001044:	4659      	mov	r1, fp
 8001046:	0c1b      	lsrs	r3, r3, #16
 8001048:	001d      	movs	r5, r3
 800104a:	9304      	str	r3, [sp, #16]
 800104c:	040b      	lsls	r3, r1, #16
 800104e:	4649      	mov	r1, r9
 8001050:	0409      	lsls	r1, r1, #16
 8001052:	0c09      	lsrs	r1, r1, #16
 8001054:	000c      	movs	r4, r1
 8001056:	0c1b      	lsrs	r3, r3, #16
 8001058:	435c      	muls	r4, r3
 800105a:	0c12      	lsrs	r2, r2, #16
 800105c:	436b      	muls	r3, r5
 800105e:	4688      	mov	r8, r1
 8001060:	4351      	muls	r1, r2
 8001062:	436a      	muls	r2, r5
 8001064:	0c25      	lsrs	r5, r4, #16
 8001066:	46ac      	mov	ip, r5
 8001068:	185b      	adds	r3, r3, r1
 800106a:	4463      	add	r3, ip
 800106c:	4299      	cmp	r1, r3
 800106e:	d903      	bls.n	8001078 <__aeabi_ddiv+0x1a8>
 8001070:	2180      	movs	r1, #128	@ 0x80
 8001072:	0249      	lsls	r1, r1, #9
 8001074:	468c      	mov	ip, r1
 8001076:	4462      	add	r2, ip
 8001078:	0c19      	lsrs	r1, r3, #16
 800107a:	0424      	lsls	r4, r4, #16
 800107c:	041b      	lsls	r3, r3, #16
 800107e:	0c24      	lsrs	r4, r4, #16
 8001080:	188a      	adds	r2, r1, r2
 8001082:	191c      	adds	r4, r3, r4
 8001084:	4290      	cmp	r0, r2
 8001086:	d302      	bcc.n	800108e <__aeabi_ddiv+0x1be>
 8001088:	d116      	bne.n	80010b8 <__aeabi_ddiv+0x1e8>
 800108a:	42a7      	cmp	r7, r4
 800108c:	d214      	bcs.n	80010b8 <__aeabi_ddiv+0x1e8>
 800108e:	465b      	mov	r3, fp
 8001090:	9d00      	ldr	r5, [sp, #0]
 8001092:	3b01      	subs	r3, #1
 8001094:	444f      	add	r7, r9
 8001096:	9305      	str	r3, [sp, #20]
 8001098:	454f      	cmp	r7, r9
 800109a:	419b      	sbcs	r3, r3
 800109c:	46ac      	mov	ip, r5
 800109e:	425b      	negs	r3, r3
 80010a0:	4463      	add	r3, ip
 80010a2:	18c0      	adds	r0, r0, r3
 80010a4:	4285      	cmp	r5, r0
 80010a6:	d300      	bcc.n	80010aa <__aeabi_ddiv+0x1da>
 80010a8:	e1a1      	b.n	80013ee <__aeabi_ddiv+0x51e>
 80010aa:	4282      	cmp	r2, r0
 80010ac:	d900      	bls.n	80010b0 <__aeabi_ddiv+0x1e0>
 80010ae:	e1f6      	b.n	800149e <__aeabi_ddiv+0x5ce>
 80010b0:	d100      	bne.n	80010b4 <__aeabi_ddiv+0x1e4>
 80010b2:	e1f1      	b.n	8001498 <__aeabi_ddiv+0x5c8>
 80010b4:	9b05      	ldr	r3, [sp, #20]
 80010b6:	469b      	mov	fp, r3
 80010b8:	1b3c      	subs	r4, r7, r4
 80010ba:	42a7      	cmp	r7, r4
 80010bc:	41bf      	sbcs	r7, r7
 80010be:	9d00      	ldr	r5, [sp, #0]
 80010c0:	1a80      	subs	r0, r0, r2
 80010c2:	427f      	negs	r7, r7
 80010c4:	1bc0      	subs	r0, r0, r7
 80010c6:	4285      	cmp	r5, r0
 80010c8:	d100      	bne.n	80010cc <__aeabi_ddiv+0x1fc>
 80010ca:	e1d0      	b.n	800146e <__aeabi_ddiv+0x59e>
 80010cc:	9902      	ldr	r1, [sp, #8]
 80010ce:	f7ff f8bd 	bl	800024c <__aeabi_uidivmod>
 80010d2:	9a03      	ldr	r2, [sp, #12]
 80010d4:	040b      	lsls	r3, r1, #16
 80010d6:	4342      	muls	r2, r0
 80010d8:	0c21      	lsrs	r1, r4, #16
 80010da:	0007      	movs	r7, r0
 80010dc:	4319      	orrs	r1, r3
 80010de:	428a      	cmp	r2, r1
 80010e0:	d900      	bls.n	80010e4 <__aeabi_ddiv+0x214>
 80010e2:	e178      	b.n	80013d6 <__aeabi_ddiv+0x506>
 80010e4:	1a88      	subs	r0, r1, r2
 80010e6:	9902      	ldr	r1, [sp, #8]
 80010e8:	f7ff f8b0 	bl	800024c <__aeabi_uidivmod>
 80010ec:	9a03      	ldr	r2, [sp, #12]
 80010ee:	0424      	lsls	r4, r4, #16
 80010f0:	4342      	muls	r2, r0
 80010f2:	0409      	lsls	r1, r1, #16
 80010f4:	0c24      	lsrs	r4, r4, #16
 80010f6:	0003      	movs	r3, r0
 80010f8:	430c      	orrs	r4, r1
 80010fa:	42a2      	cmp	r2, r4
 80010fc:	d900      	bls.n	8001100 <__aeabi_ddiv+0x230>
 80010fe:	e15d      	b.n	80013bc <__aeabi_ddiv+0x4ec>
 8001100:	4641      	mov	r1, r8
 8001102:	1aa4      	subs	r4, r4, r2
 8001104:	043a      	lsls	r2, r7, #16
 8001106:	431a      	orrs	r2, r3
 8001108:	9d04      	ldr	r5, [sp, #16]
 800110a:	0413      	lsls	r3, r2, #16
 800110c:	0c1b      	lsrs	r3, r3, #16
 800110e:	4359      	muls	r1, r3
 8001110:	4647      	mov	r7, r8
 8001112:	436b      	muls	r3, r5
 8001114:	469c      	mov	ip, r3
 8001116:	0c10      	lsrs	r0, r2, #16
 8001118:	4347      	muls	r7, r0
 800111a:	0c0b      	lsrs	r3, r1, #16
 800111c:	44bc      	add	ip, r7
 800111e:	4463      	add	r3, ip
 8001120:	4368      	muls	r0, r5
 8001122:	429f      	cmp	r7, r3
 8001124:	d903      	bls.n	800112e <__aeabi_ddiv+0x25e>
 8001126:	2580      	movs	r5, #128	@ 0x80
 8001128:	026d      	lsls	r5, r5, #9
 800112a:	46ac      	mov	ip, r5
 800112c:	4460      	add	r0, ip
 800112e:	0c1f      	lsrs	r7, r3, #16
 8001130:	0409      	lsls	r1, r1, #16
 8001132:	041b      	lsls	r3, r3, #16
 8001134:	0c09      	lsrs	r1, r1, #16
 8001136:	183f      	adds	r7, r7, r0
 8001138:	185b      	adds	r3, r3, r1
 800113a:	42bc      	cmp	r4, r7
 800113c:	d200      	bcs.n	8001140 <__aeabi_ddiv+0x270>
 800113e:	e102      	b.n	8001346 <__aeabi_ddiv+0x476>
 8001140:	d100      	bne.n	8001144 <__aeabi_ddiv+0x274>
 8001142:	e0fd      	b.n	8001340 <__aeabi_ddiv+0x470>
 8001144:	2301      	movs	r3, #1
 8001146:	431a      	orrs	r2, r3
 8001148:	4b43      	ldr	r3, [pc, #268]	@ (8001258 <__aeabi_ddiv+0x388>)
 800114a:	4453      	add	r3, sl
 800114c:	2b00      	cmp	r3, #0
 800114e:	dc00      	bgt.n	8001152 <__aeabi_ddiv+0x282>
 8001150:	e0ae      	b.n	80012b0 <__aeabi_ddiv+0x3e0>
 8001152:	0751      	lsls	r1, r2, #29
 8001154:	d000      	beq.n	8001158 <__aeabi_ddiv+0x288>
 8001156:	e198      	b.n	800148a <__aeabi_ddiv+0x5ba>
 8001158:	4659      	mov	r1, fp
 800115a:	01c9      	lsls	r1, r1, #7
 800115c:	d506      	bpl.n	800116c <__aeabi_ddiv+0x29c>
 800115e:	4659      	mov	r1, fp
 8001160:	4b3e      	ldr	r3, [pc, #248]	@ (800125c <__aeabi_ddiv+0x38c>)
 8001162:	4019      	ands	r1, r3
 8001164:	2380      	movs	r3, #128	@ 0x80
 8001166:	468b      	mov	fp, r1
 8001168:	00db      	lsls	r3, r3, #3
 800116a:	4453      	add	r3, sl
 800116c:	493c      	ldr	r1, [pc, #240]	@ (8001260 <__aeabi_ddiv+0x390>)
 800116e:	428b      	cmp	r3, r1
 8001170:	dd00      	ble.n	8001174 <__aeabi_ddiv+0x2a4>
 8001172:	e71a      	b.n	8000faa <__aeabi_ddiv+0xda>
 8001174:	4659      	mov	r1, fp
 8001176:	08d2      	lsrs	r2, r2, #3
 8001178:	0749      	lsls	r1, r1, #29
 800117a:	4311      	orrs	r1, r2
 800117c:	465a      	mov	r2, fp
 800117e:	055b      	lsls	r3, r3, #21
 8001180:	0254      	lsls	r4, r2, #9
 8001182:	4688      	mov	r8, r1
 8001184:	0b24      	lsrs	r4, r4, #12
 8001186:	0d5b      	lsrs	r3, r3, #21
 8001188:	e702      	b.n	8000f90 <__aeabi_ddiv+0xc0>
 800118a:	465a      	mov	r2, fp
 800118c:	9b00      	ldr	r3, [sp, #0]
 800118e:	431a      	orrs	r2, r3
 8001190:	d100      	bne.n	8001194 <__aeabi_ddiv+0x2c4>
 8001192:	e07e      	b.n	8001292 <__aeabi_ddiv+0x3c2>
 8001194:	465b      	mov	r3, fp
 8001196:	2b00      	cmp	r3, #0
 8001198:	d100      	bne.n	800119c <__aeabi_ddiv+0x2cc>
 800119a:	e100      	b.n	800139e <__aeabi_ddiv+0x4ce>
 800119c:	4658      	mov	r0, fp
 800119e:	f001 fa73 	bl	8002688 <__clzsi2>
 80011a2:	0002      	movs	r2, r0
 80011a4:	0003      	movs	r3, r0
 80011a6:	3a0b      	subs	r2, #11
 80011a8:	271d      	movs	r7, #29
 80011aa:	9e00      	ldr	r6, [sp, #0]
 80011ac:	1aba      	subs	r2, r7, r2
 80011ae:	0019      	movs	r1, r3
 80011b0:	4658      	mov	r0, fp
 80011b2:	40d6      	lsrs	r6, r2
 80011b4:	3908      	subs	r1, #8
 80011b6:	4088      	lsls	r0, r1
 80011b8:	0032      	movs	r2, r6
 80011ba:	4302      	orrs	r2, r0
 80011bc:	4693      	mov	fp, r2
 80011be:	9a00      	ldr	r2, [sp, #0]
 80011c0:	408a      	lsls	r2, r1
 80011c2:	4928      	ldr	r1, [pc, #160]	@ (8001264 <__aeabi_ddiv+0x394>)
 80011c4:	4453      	add	r3, sl
 80011c6:	468a      	mov	sl, r1
 80011c8:	449a      	add	sl, r3
 80011ca:	2300      	movs	r3, #0
 80011cc:	e6c8      	b.n	8000f60 <__aeabi_ddiv+0x90>
 80011ce:	465b      	mov	r3, fp
 80011d0:	4303      	orrs	r3, r0
 80011d2:	4699      	mov	r9, r3
 80011d4:	d056      	beq.n	8001284 <__aeabi_ddiv+0x3b4>
 80011d6:	465b      	mov	r3, fp
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d100      	bne.n	80011de <__aeabi_ddiv+0x30e>
 80011dc:	e0cd      	b.n	800137a <__aeabi_ddiv+0x4aa>
 80011de:	4658      	mov	r0, fp
 80011e0:	f001 fa52 	bl	8002688 <__clzsi2>
 80011e4:	230b      	movs	r3, #11
 80011e6:	425b      	negs	r3, r3
 80011e8:	469c      	mov	ip, r3
 80011ea:	0002      	movs	r2, r0
 80011ec:	4484      	add	ip, r0
 80011ee:	4666      	mov	r6, ip
 80011f0:	231d      	movs	r3, #29
 80011f2:	1b9b      	subs	r3, r3, r6
 80011f4:	0026      	movs	r6, r4
 80011f6:	0011      	movs	r1, r2
 80011f8:	4658      	mov	r0, fp
 80011fa:	40de      	lsrs	r6, r3
 80011fc:	3908      	subs	r1, #8
 80011fe:	4088      	lsls	r0, r1
 8001200:	0033      	movs	r3, r6
 8001202:	4303      	orrs	r3, r0
 8001204:	4699      	mov	r9, r3
 8001206:	0023      	movs	r3, r4
 8001208:	408b      	lsls	r3, r1
 800120a:	4698      	mov	r8, r3
 800120c:	4b16      	ldr	r3, [pc, #88]	@ (8001268 <__aeabi_ddiv+0x398>)
 800120e:	2400      	movs	r4, #0
 8001210:	1a9b      	subs	r3, r3, r2
 8001212:	469a      	mov	sl, r3
 8001214:	2300      	movs	r3, #0
 8001216:	9303      	str	r3, [sp, #12]
 8001218:	e682      	b.n	8000f20 <__aeabi_ddiv+0x50>
 800121a:	465a      	mov	r2, fp
 800121c:	4302      	orrs	r2, r0
 800121e:	4691      	mov	r9, r2
 8001220:	d12a      	bne.n	8001278 <__aeabi_ddiv+0x3a8>
 8001222:	2200      	movs	r2, #0
 8001224:	469a      	mov	sl, r3
 8001226:	2302      	movs	r3, #2
 8001228:	4690      	mov	r8, r2
 800122a:	2408      	movs	r4, #8
 800122c:	9303      	str	r3, [sp, #12]
 800122e:	e677      	b.n	8000f20 <__aeabi_ddiv+0x50>
 8001230:	465a      	mov	r2, fp
 8001232:	9b00      	ldr	r3, [sp, #0]
 8001234:	431a      	orrs	r2, r3
 8001236:	4b0d      	ldr	r3, [pc, #52]	@ (800126c <__aeabi_ddiv+0x39c>)
 8001238:	469c      	mov	ip, r3
 800123a:	44e2      	add	sl, ip
 800123c:	2a00      	cmp	r2, #0
 800123e:	d117      	bne.n	8001270 <__aeabi_ddiv+0x3a0>
 8001240:	2302      	movs	r3, #2
 8001242:	431c      	orrs	r4, r3
 8001244:	2300      	movs	r3, #0
 8001246:	469b      	mov	fp, r3
 8001248:	3302      	adds	r3, #2
 800124a:	e689      	b.n	8000f60 <__aeabi_ddiv+0x90>
 800124c:	000007ff 	.word	0x000007ff
 8001250:	fffffc01 	.word	0xfffffc01
 8001254:	0800bda8 	.word	0x0800bda8
 8001258:	000003ff 	.word	0x000003ff
 800125c:	feffffff 	.word	0xfeffffff
 8001260:	000007fe 	.word	0x000007fe
 8001264:	000003f3 	.word	0x000003f3
 8001268:	fffffc0d 	.word	0xfffffc0d
 800126c:	fffff801 	.word	0xfffff801
 8001270:	2303      	movs	r3, #3
 8001272:	0032      	movs	r2, r6
 8001274:	431c      	orrs	r4, r3
 8001276:	e673      	b.n	8000f60 <__aeabi_ddiv+0x90>
 8001278:	469a      	mov	sl, r3
 800127a:	2303      	movs	r3, #3
 800127c:	46d9      	mov	r9, fp
 800127e:	240c      	movs	r4, #12
 8001280:	9303      	str	r3, [sp, #12]
 8001282:	e64d      	b.n	8000f20 <__aeabi_ddiv+0x50>
 8001284:	2300      	movs	r3, #0
 8001286:	4698      	mov	r8, r3
 8001288:	469a      	mov	sl, r3
 800128a:	3301      	adds	r3, #1
 800128c:	2404      	movs	r4, #4
 800128e:	9303      	str	r3, [sp, #12]
 8001290:	e646      	b.n	8000f20 <__aeabi_ddiv+0x50>
 8001292:	2301      	movs	r3, #1
 8001294:	431c      	orrs	r4, r3
 8001296:	2300      	movs	r3, #0
 8001298:	469b      	mov	fp, r3
 800129a:	3301      	adds	r3, #1
 800129c:	e660      	b.n	8000f60 <__aeabi_ddiv+0x90>
 800129e:	2300      	movs	r3, #0
 80012a0:	2480      	movs	r4, #128	@ 0x80
 80012a2:	4698      	mov	r8, r3
 80012a4:	2600      	movs	r6, #0
 80012a6:	4b92      	ldr	r3, [pc, #584]	@ (80014f0 <__aeabi_ddiv+0x620>)
 80012a8:	0324      	lsls	r4, r4, #12
 80012aa:	e671      	b.n	8000f90 <__aeabi_ddiv+0xc0>
 80012ac:	2201      	movs	r2, #1
 80012ae:	4252      	negs	r2, r2
 80012b0:	2101      	movs	r1, #1
 80012b2:	1ac9      	subs	r1, r1, r3
 80012b4:	2938      	cmp	r1, #56	@ 0x38
 80012b6:	dd00      	ble.n	80012ba <__aeabi_ddiv+0x3ea>
 80012b8:	e666      	b.n	8000f88 <__aeabi_ddiv+0xb8>
 80012ba:	291f      	cmp	r1, #31
 80012bc:	dc00      	bgt.n	80012c0 <__aeabi_ddiv+0x3f0>
 80012be:	e0ab      	b.n	8001418 <__aeabi_ddiv+0x548>
 80012c0:	201f      	movs	r0, #31
 80012c2:	4240      	negs	r0, r0
 80012c4:	1ac3      	subs	r3, r0, r3
 80012c6:	4658      	mov	r0, fp
 80012c8:	40d8      	lsrs	r0, r3
 80012ca:	0003      	movs	r3, r0
 80012cc:	2920      	cmp	r1, #32
 80012ce:	d004      	beq.n	80012da <__aeabi_ddiv+0x40a>
 80012d0:	4658      	mov	r0, fp
 80012d2:	4988      	ldr	r1, [pc, #544]	@ (80014f4 <__aeabi_ddiv+0x624>)
 80012d4:	4451      	add	r1, sl
 80012d6:	4088      	lsls	r0, r1
 80012d8:	4302      	orrs	r2, r0
 80012da:	1e51      	subs	r1, r2, #1
 80012dc:	418a      	sbcs	r2, r1
 80012de:	431a      	orrs	r2, r3
 80012e0:	2307      	movs	r3, #7
 80012e2:	0019      	movs	r1, r3
 80012e4:	2400      	movs	r4, #0
 80012e6:	4011      	ands	r1, r2
 80012e8:	4213      	tst	r3, r2
 80012ea:	d00c      	beq.n	8001306 <__aeabi_ddiv+0x436>
 80012ec:	230f      	movs	r3, #15
 80012ee:	4013      	ands	r3, r2
 80012f0:	2b04      	cmp	r3, #4
 80012f2:	d100      	bne.n	80012f6 <__aeabi_ddiv+0x426>
 80012f4:	e0f9      	b.n	80014ea <__aeabi_ddiv+0x61a>
 80012f6:	1d11      	adds	r1, r2, #4
 80012f8:	4291      	cmp	r1, r2
 80012fa:	419b      	sbcs	r3, r3
 80012fc:	000a      	movs	r2, r1
 80012fe:	425b      	negs	r3, r3
 8001300:	0759      	lsls	r1, r3, #29
 8001302:	025b      	lsls	r3, r3, #9
 8001304:	0b1c      	lsrs	r4, r3, #12
 8001306:	08d2      	lsrs	r2, r2, #3
 8001308:	430a      	orrs	r2, r1
 800130a:	4690      	mov	r8, r2
 800130c:	2300      	movs	r3, #0
 800130e:	e63f      	b.n	8000f90 <__aeabi_ddiv+0xc0>
 8001310:	2480      	movs	r4, #128	@ 0x80
 8001312:	464b      	mov	r3, r9
 8001314:	0324      	lsls	r4, r4, #12
 8001316:	4223      	tst	r3, r4
 8001318:	d009      	beq.n	800132e <__aeabi_ddiv+0x45e>
 800131a:	465b      	mov	r3, fp
 800131c:	4223      	tst	r3, r4
 800131e:	d106      	bne.n	800132e <__aeabi_ddiv+0x45e>
 8001320:	431c      	orrs	r4, r3
 8001322:	0324      	lsls	r4, r4, #12
 8001324:	002e      	movs	r6, r5
 8001326:	4690      	mov	r8, r2
 8001328:	4b71      	ldr	r3, [pc, #452]	@ (80014f0 <__aeabi_ddiv+0x620>)
 800132a:	0b24      	lsrs	r4, r4, #12
 800132c:	e630      	b.n	8000f90 <__aeabi_ddiv+0xc0>
 800132e:	2480      	movs	r4, #128	@ 0x80
 8001330:	464b      	mov	r3, r9
 8001332:	0324      	lsls	r4, r4, #12
 8001334:	431c      	orrs	r4, r3
 8001336:	0324      	lsls	r4, r4, #12
 8001338:	9e02      	ldr	r6, [sp, #8]
 800133a:	4b6d      	ldr	r3, [pc, #436]	@ (80014f0 <__aeabi_ddiv+0x620>)
 800133c:	0b24      	lsrs	r4, r4, #12
 800133e:	e627      	b.n	8000f90 <__aeabi_ddiv+0xc0>
 8001340:	2b00      	cmp	r3, #0
 8001342:	d100      	bne.n	8001346 <__aeabi_ddiv+0x476>
 8001344:	e700      	b.n	8001148 <__aeabi_ddiv+0x278>
 8001346:	9800      	ldr	r0, [sp, #0]
 8001348:	1e51      	subs	r1, r2, #1
 800134a:	4684      	mov	ip, r0
 800134c:	4464      	add	r4, ip
 800134e:	4284      	cmp	r4, r0
 8001350:	d200      	bcs.n	8001354 <__aeabi_ddiv+0x484>
 8001352:	e084      	b.n	800145e <__aeabi_ddiv+0x58e>
 8001354:	42bc      	cmp	r4, r7
 8001356:	d200      	bcs.n	800135a <__aeabi_ddiv+0x48a>
 8001358:	e0ae      	b.n	80014b8 <__aeabi_ddiv+0x5e8>
 800135a:	d100      	bne.n	800135e <__aeabi_ddiv+0x48e>
 800135c:	e0c1      	b.n	80014e2 <__aeabi_ddiv+0x612>
 800135e:	000a      	movs	r2, r1
 8001360:	e6f0      	b.n	8001144 <__aeabi_ddiv+0x274>
 8001362:	4542      	cmp	r2, r8
 8001364:	d900      	bls.n	8001368 <__aeabi_ddiv+0x498>
 8001366:	e62c      	b.n	8000fc2 <__aeabi_ddiv+0xf2>
 8001368:	464b      	mov	r3, r9
 800136a:	07dc      	lsls	r4, r3, #31
 800136c:	0858      	lsrs	r0, r3, #1
 800136e:	4643      	mov	r3, r8
 8001370:	085b      	lsrs	r3, r3, #1
 8001372:	431c      	orrs	r4, r3
 8001374:	4643      	mov	r3, r8
 8001376:	07df      	lsls	r7, r3, #31
 8001378:	e62a      	b.n	8000fd0 <__aeabi_ddiv+0x100>
 800137a:	f001 f985 	bl	8002688 <__clzsi2>
 800137e:	2315      	movs	r3, #21
 8001380:	469c      	mov	ip, r3
 8001382:	4484      	add	ip, r0
 8001384:	0002      	movs	r2, r0
 8001386:	4663      	mov	r3, ip
 8001388:	3220      	adds	r2, #32
 800138a:	2b1c      	cmp	r3, #28
 800138c:	dc00      	bgt.n	8001390 <__aeabi_ddiv+0x4c0>
 800138e:	e72e      	b.n	80011ee <__aeabi_ddiv+0x31e>
 8001390:	0023      	movs	r3, r4
 8001392:	3808      	subs	r0, #8
 8001394:	4083      	lsls	r3, r0
 8001396:	4699      	mov	r9, r3
 8001398:	2300      	movs	r3, #0
 800139a:	4698      	mov	r8, r3
 800139c:	e736      	b.n	800120c <__aeabi_ddiv+0x33c>
 800139e:	f001 f973 	bl	8002688 <__clzsi2>
 80013a2:	0002      	movs	r2, r0
 80013a4:	0003      	movs	r3, r0
 80013a6:	3215      	adds	r2, #21
 80013a8:	3320      	adds	r3, #32
 80013aa:	2a1c      	cmp	r2, #28
 80013ac:	dc00      	bgt.n	80013b0 <__aeabi_ddiv+0x4e0>
 80013ae:	e6fb      	b.n	80011a8 <__aeabi_ddiv+0x2d8>
 80013b0:	9900      	ldr	r1, [sp, #0]
 80013b2:	3808      	subs	r0, #8
 80013b4:	4081      	lsls	r1, r0
 80013b6:	2200      	movs	r2, #0
 80013b8:	468b      	mov	fp, r1
 80013ba:	e702      	b.n	80011c2 <__aeabi_ddiv+0x2f2>
 80013bc:	9900      	ldr	r1, [sp, #0]
 80013be:	3b01      	subs	r3, #1
 80013c0:	468c      	mov	ip, r1
 80013c2:	4464      	add	r4, ip
 80013c4:	42a1      	cmp	r1, r4
 80013c6:	d900      	bls.n	80013ca <__aeabi_ddiv+0x4fa>
 80013c8:	e69a      	b.n	8001100 <__aeabi_ddiv+0x230>
 80013ca:	42a2      	cmp	r2, r4
 80013cc:	d800      	bhi.n	80013d0 <__aeabi_ddiv+0x500>
 80013ce:	e697      	b.n	8001100 <__aeabi_ddiv+0x230>
 80013d0:	1e83      	subs	r3, r0, #2
 80013d2:	4464      	add	r4, ip
 80013d4:	e694      	b.n	8001100 <__aeabi_ddiv+0x230>
 80013d6:	46ac      	mov	ip, r5
 80013d8:	4461      	add	r1, ip
 80013da:	3f01      	subs	r7, #1
 80013dc:	428d      	cmp	r5, r1
 80013de:	d900      	bls.n	80013e2 <__aeabi_ddiv+0x512>
 80013e0:	e680      	b.n	80010e4 <__aeabi_ddiv+0x214>
 80013e2:	428a      	cmp	r2, r1
 80013e4:	d800      	bhi.n	80013e8 <__aeabi_ddiv+0x518>
 80013e6:	e67d      	b.n	80010e4 <__aeabi_ddiv+0x214>
 80013e8:	1e87      	subs	r7, r0, #2
 80013ea:	4461      	add	r1, ip
 80013ec:	e67a      	b.n	80010e4 <__aeabi_ddiv+0x214>
 80013ee:	4285      	cmp	r5, r0
 80013f0:	d000      	beq.n	80013f4 <__aeabi_ddiv+0x524>
 80013f2:	e65f      	b.n	80010b4 <__aeabi_ddiv+0x1e4>
 80013f4:	45b9      	cmp	r9, r7
 80013f6:	d900      	bls.n	80013fa <__aeabi_ddiv+0x52a>
 80013f8:	e65c      	b.n	80010b4 <__aeabi_ddiv+0x1e4>
 80013fa:	e656      	b.n	80010aa <__aeabi_ddiv+0x1da>
 80013fc:	42a2      	cmp	r2, r4
 80013fe:	d800      	bhi.n	8001402 <__aeabi_ddiv+0x532>
 8001400:	e61a      	b.n	8001038 <__aeabi_ddiv+0x168>
 8001402:	1e83      	subs	r3, r0, #2
 8001404:	4464      	add	r4, ip
 8001406:	e617      	b.n	8001038 <__aeabi_ddiv+0x168>
 8001408:	428a      	cmp	r2, r1
 800140a:	d800      	bhi.n	800140e <__aeabi_ddiv+0x53e>
 800140c:	e600      	b.n	8001010 <__aeabi_ddiv+0x140>
 800140e:	46ac      	mov	ip, r5
 8001410:	1e83      	subs	r3, r0, #2
 8001412:	4698      	mov	r8, r3
 8001414:	4461      	add	r1, ip
 8001416:	e5fb      	b.n	8001010 <__aeabi_ddiv+0x140>
 8001418:	4837      	ldr	r0, [pc, #220]	@ (80014f8 <__aeabi_ddiv+0x628>)
 800141a:	0014      	movs	r4, r2
 800141c:	4450      	add	r0, sl
 800141e:	4082      	lsls	r2, r0
 8001420:	465b      	mov	r3, fp
 8001422:	0017      	movs	r7, r2
 8001424:	4083      	lsls	r3, r0
 8001426:	40cc      	lsrs	r4, r1
 8001428:	1e7a      	subs	r2, r7, #1
 800142a:	4197      	sbcs	r7, r2
 800142c:	4323      	orrs	r3, r4
 800142e:	433b      	orrs	r3, r7
 8001430:	001a      	movs	r2, r3
 8001432:	465b      	mov	r3, fp
 8001434:	40cb      	lsrs	r3, r1
 8001436:	0751      	lsls	r1, r2, #29
 8001438:	d009      	beq.n	800144e <__aeabi_ddiv+0x57e>
 800143a:	210f      	movs	r1, #15
 800143c:	4011      	ands	r1, r2
 800143e:	2904      	cmp	r1, #4
 8001440:	d005      	beq.n	800144e <__aeabi_ddiv+0x57e>
 8001442:	1d11      	adds	r1, r2, #4
 8001444:	4291      	cmp	r1, r2
 8001446:	4192      	sbcs	r2, r2
 8001448:	4252      	negs	r2, r2
 800144a:	189b      	adds	r3, r3, r2
 800144c:	000a      	movs	r2, r1
 800144e:	0219      	lsls	r1, r3, #8
 8001450:	d400      	bmi.n	8001454 <__aeabi_ddiv+0x584>
 8001452:	e755      	b.n	8001300 <__aeabi_ddiv+0x430>
 8001454:	2200      	movs	r2, #0
 8001456:	2301      	movs	r3, #1
 8001458:	2400      	movs	r4, #0
 800145a:	4690      	mov	r8, r2
 800145c:	e598      	b.n	8000f90 <__aeabi_ddiv+0xc0>
 800145e:	000a      	movs	r2, r1
 8001460:	42bc      	cmp	r4, r7
 8001462:	d000      	beq.n	8001466 <__aeabi_ddiv+0x596>
 8001464:	e66e      	b.n	8001144 <__aeabi_ddiv+0x274>
 8001466:	454b      	cmp	r3, r9
 8001468:	d000      	beq.n	800146c <__aeabi_ddiv+0x59c>
 800146a:	e66b      	b.n	8001144 <__aeabi_ddiv+0x274>
 800146c:	e66c      	b.n	8001148 <__aeabi_ddiv+0x278>
 800146e:	4b23      	ldr	r3, [pc, #140]	@ (80014fc <__aeabi_ddiv+0x62c>)
 8001470:	4a23      	ldr	r2, [pc, #140]	@ (8001500 <__aeabi_ddiv+0x630>)
 8001472:	4453      	add	r3, sl
 8001474:	4592      	cmp	sl, r2
 8001476:	da00      	bge.n	800147a <__aeabi_ddiv+0x5aa>
 8001478:	e718      	b.n	80012ac <__aeabi_ddiv+0x3dc>
 800147a:	2101      	movs	r1, #1
 800147c:	4249      	negs	r1, r1
 800147e:	1d0a      	adds	r2, r1, #4
 8001480:	428a      	cmp	r2, r1
 8001482:	4189      	sbcs	r1, r1
 8001484:	4249      	negs	r1, r1
 8001486:	448b      	add	fp, r1
 8001488:	e666      	b.n	8001158 <__aeabi_ddiv+0x288>
 800148a:	210f      	movs	r1, #15
 800148c:	4011      	ands	r1, r2
 800148e:	2904      	cmp	r1, #4
 8001490:	d100      	bne.n	8001494 <__aeabi_ddiv+0x5c4>
 8001492:	e661      	b.n	8001158 <__aeabi_ddiv+0x288>
 8001494:	0011      	movs	r1, r2
 8001496:	e7f2      	b.n	800147e <__aeabi_ddiv+0x5ae>
 8001498:	42bc      	cmp	r4, r7
 800149a:	d800      	bhi.n	800149e <__aeabi_ddiv+0x5ce>
 800149c:	e60a      	b.n	80010b4 <__aeabi_ddiv+0x1e4>
 800149e:	2302      	movs	r3, #2
 80014a0:	425b      	negs	r3, r3
 80014a2:	469c      	mov	ip, r3
 80014a4:	9900      	ldr	r1, [sp, #0]
 80014a6:	444f      	add	r7, r9
 80014a8:	454f      	cmp	r7, r9
 80014aa:	419b      	sbcs	r3, r3
 80014ac:	44e3      	add	fp, ip
 80014ae:	468c      	mov	ip, r1
 80014b0:	425b      	negs	r3, r3
 80014b2:	4463      	add	r3, ip
 80014b4:	18c0      	adds	r0, r0, r3
 80014b6:	e5ff      	b.n	80010b8 <__aeabi_ddiv+0x1e8>
 80014b8:	4649      	mov	r1, r9
 80014ba:	9d00      	ldr	r5, [sp, #0]
 80014bc:	0048      	lsls	r0, r1, #1
 80014be:	4548      	cmp	r0, r9
 80014c0:	4189      	sbcs	r1, r1
 80014c2:	46ac      	mov	ip, r5
 80014c4:	4249      	negs	r1, r1
 80014c6:	4461      	add	r1, ip
 80014c8:	4681      	mov	r9, r0
 80014ca:	3a02      	subs	r2, #2
 80014cc:	1864      	adds	r4, r4, r1
 80014ce:	e7c7      	b.n	8001460 <__aeabi_ddiv+0x590>
 80014d0:	2480      	movs	r4, #128	@ 0x80
 80014d2:	465b      	mov	r3, fp
 80014d4:	0324      	lsls	r4, r4, #12
 80014d6:	431c      	orrs	r4, r3
 80014d8:	0324      	lsls	r4, r4, #12
 80014da:	4690      	mov	r8, r2
 80014dc:	4b04      	ldr	r3, [pc, #16]	@ (80014f0 <__aeabi_ddiv+0x620>)
 80014de:	0b24      	lsrs	r4, r4, #12
 80014e0:	e556      	b.n	8000f90 <__aeabi_ddiv+0xc0>
 80014e2:	4599      	cmp	r9, r3
 80014e4:	d3e8      	bcc.n	80014b8 <__aeabi_ddiv+0x5e8>
 80014e6:	000a      	movs	r2, r1
 80014e8:	e7bd      	b.n	8001466 <__aeabi_ddiv+0x596>
 80014ea:	2300      	movs	r3, #0
 80014ec:	e708      	b.n	8001300 <__aeabi_ddiv+0x430>
 80014ee:	46c0      	nop			@ (mov r8, r8)
 80014f0:	000007ff 	.word	0x000007ff
 80014f4:	0000043e 	.word	0x0000043e
 80014f8:	0000041e 	.word	0x0000041e
 80014fc:	000003ff 	.word	0x000003ff
 8001500:	fffffc02 	.word	0xfffffc02

08001504 <__eqdf2>:
 8001504:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001506:	4657      	mov	r7, sl
 8001508:	46de      	mov	lr, fp
 800150a:	464e      	mov	r6, r9
 800150c:	4645      	mov	r5, r8
 800150e:	b5e0      	push	{r5, r6, r7, lr}
 8001510:	000d      	movs	r5, r1
 8001512:	0004      	movs	r4, r0
 8001514:	0fe8      	lsrs	r0, r5, #31
 8001516:	4683      	mov	fp, r0
 8001518:	0309      	lsls	r1, r1, #12
 800151a:	0fd8      	lsrs	r0, r3, #31
 800151c:	0b09      	lsrs	r1, r1, #12
 800151e:	4682      	mov	sl, r0
 8001520:	4819      	ldr	r0, [pc, #100]	@ (8001588 <__eqdf2+0x84>)
 8001522:	468c      	mov	ip, r1
 8001524:	031f      	lsls	r7, r3, #12
 8001526:	0069      	lsls	r1, r5, #1
 8001528:	005e      	lsls	r6, r3, #1
 800152a:	0d49      	lsrs	r1, r1, #21
 800152c:	0b3f      	lsrs	r7, r7, #12
 800152e:	0d76      	lsrs	r6, r6, #21
 8001530:	4281      	cmp	r1, r0
 8001532:	d018      	beq.n	8001566 <__eqdf2+0x62>
 8001534:	4286      	cmp	r6, r0
 8001536:	d00f      	beq.n	8001558 <__eqdf2+0x54>
 8001538:	2001      	movs	r0, #1
 800153a:	42b1      	cmp	r1, r6
 800153c:	d10d      	bne.n	800155a <__eqdf2+0x56>
 800153e:	45bc      	cmp	ip, r7
 8001540:	d10b      	bne.n	800155a <__eqdf2+0x56>
 8001542:	4294      	cmp	r4, r2
 8001544:	d109      	bne.n	800155a <__eqdf2+0x56>
 8001546:	45d3      	cmp	fp, sl
 8001548:	d01c      	beq.n	8001584 <__eqdf2+0x80>
 800154a:	2900      	cmp	r1, #0
 800154c:	d105      	bne.n	800155a <__eqdf2+0x56>
 800154e:	4660      	mov	r0, ip
 8001550:	4320      	orrs	r0, r4
 8001552:	1e43      	subs	r3, r0, #1
 8001554:	4198      	sbcs	r0, r3
 8001556:	e000      	b.n	800155a <__eqdf2+0x56>
 8001558:	2001      	movs	r0, #1
 800155a:	bcf0      	pop	{r4, r5, r6, r7}
 800155c:	46bb      	mov	fp, r7
 800155e:	46b2      	mov	sl, r6
 8001560:	46a9      	mov	r9, r5
 8001562:	46a0      	mov	r8, r4
 8001564:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001566:	2001      	movs	r0, #1
 8001568:	428e      	cmp	r6, r1
 800156a:	d1f6      	bne.n	800155a <__eqdf2+0x56>
 800156c:	4661      	mov	r1, ip
 800156e:	4339      	orrs	r1, r7
 8001570:	000f      	movs	r7, r1
 8001572:	4317      	orrs	r7, r2
 8001574:	4327      	orrs	r7, r4
 8001576:	d1f0      	bne.n	800155a <__eqdf2+0x56>
 8001578:	465b      	mov	r3, fp
 800157a:	4652      	mov	r2, sl
 800157c:	1a98      	subs	r0, r3, r2
 800157e:	1e43      	subs	r3, r0, #1
 8001580:	4198      	sbcs	r0, r3
 8001582:	e7ea      	b.n	800155a <__eqdf2+0x56>
 8001584:	2000      	movs	r0, #0
 8001586:	e7e8      	b.n	800155a <__eqdf2+0x56>
 8001588:	000007ff 	.word	0x000007ff

0800158c <__gedf2>:
 800158c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800158e:	4657      	mov	r7, sl
 8001590:	464e      	mov	r6, r9
 8001592:	4645      	mov	r5, r8
 8001594:	46de      	mov	lr, fp
 8001596:	b5e0      	push	{r5, r6, r7, lr}
 8001598:	000d      	movs	r5, r1
 800159a:	030f      	lsls	r7, r1, #12
 800159c:	0b39      	lsrs	r1, r7, #12
 800159e:	b083      	sub	sp, #12
 80015a0:	0004      	movs	r4, r0
 80015a2:	4680      	mov	r8, r0
 80015a4:	9101      	str	r1, [sp, #4]
 80015a6:	0058      	lsls	r0, r3, #1
 80015a8:	0fe9      	lsrs	r1, r5, #31
 80015aa:	4f31      	ldr	r7, [pc, #196]	@ (8001670 <__gedf2+0xe4>)
 80015ac:	0d40      	lsrs	r0, r0, #21
 80015ae:	468c      	mov	ip, r1
 80015b0:	006e      	lsls	r6, r5, #1
 80015b2:	0319      	lsls	r1, r3, #12
 80015b4:	4682      	mov	sl, r0
 80015b6:	4691      	mov	r9, r2
 80015b8:	0d76      	lsrs	r6, r6, #21
 80015ba:	0b09      	lsrs	r1, r1, #12
 80015bc:	0fd8      	lsrs	r0, r3, #31
 80015be:	42be      	cmp	r6, r7
 80015c0:	d01f      	beq.n	8001602 <__gedf2+0x76>
 80015c2:	45ba      	cmp	sl, r7
 80015c4:	d00f      	beq.n	80015e6 <__gedf2+0x5a>
 80015c6:	2e00      	cmp	r6, #0
 80015c8:	d12f      	bne.n	800162a <__gedf2+0x9e>
 80015ca:	4655      	mov	r5, sl
 80015cc:	9e01      	ldr	r6, [sp, #4]
 80015ce:	4334      	orrs	r4, r6
 80015d0:	2d00      	cmp	r5, #0
 80015d2:	d127      	bne.n	8001624 <__gedf2+0x98>
 80015d4:	430a      	orrs	r2, r1
 80015d6:	d03a      	beq.n	800164e <__gedf2+0xc2>
 80015d8:	2c00      	cmp	r4, #0
 80015da:	d145      	bne.n	8001668 <__gedf2+0xdc>
 80015dc:	2800      	cmp	r0, #0
 80015de:	d11a      	bne.n	8001616 <__gedf2+0x8a>
 80015e0:	2001      	movs	r0, #1
 80015e2:	4240      	negs	r0, r0
 80015e4:	e017      	b.n	8001616 <__gedf2+0x8a>
 80015e6:	4311      	orrs	r1, r2
 80015e8:	d13b      	bne.n	8001662 <__gedf2+0xd6>
 80015ea:	2e00      	cmp	r6, #0
 80015ec:	d102      	bne.n	80015f4 <__gedf2+0x68>
 80015ee:	9f01      	ldr	r7, [sp, #4]
 80015f0:	4327      	orrs	r7, r4
 80015f2:	d0f3      	beq.n	80015dc <__gedf2+0x50>
 80015f4:	4584      	cmp	ip, r0
 80015f6:	d109      	bne.n	800160c <__gedf2+0x80>
 80015f8:	4663      	mov	r3, ip
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d0f0      	beq.n	80015e0 <__gedf2+0x54>
 80015fe:	4660      	mov	r0, ip
 8001600:	e009      	b.n	8001616 <__gedf2+0x8a>
 8001602:	9f01      	ldr	r7, [sp, #4]
 8001604:	4327      	orrs	r7, r4
 8001606:	d12c      	bne.n	8001662 <__gedf2+0xd6>
 8001608:	45b2      	cmp	sl, r6
 800160a:	d024      	beq.n	8001656 <__gedf2+0xca>
 800160c:	4663      	mov	r3, ip
 800160e:	2002      	movs	r0, #2
 8001610:	3b01      	subs	r3, #1
 8001612:	4018      	ands	r0, r3
 8001614:	3801      	subs	r0, #1
 8001616:	b003      	add	sp, #12
 8001618:	bcf0      	pop	{r4, r5, r6, r7}
 800161a:	46bb      	mov	fp, r7
 800161c:	46b2      	mov	sl, r6
 800161e:	46a9      	mov	r9, r5
 8001620:	46a0      	mov	r8, r4
 8001622:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001624:	2c00      	cmp	r4, #0
 8001626:	d0d9      	beq.n	80015dc <__gedf2+0x50>
 8001628:	e7e4      	b.n	80015f4 <__gedf2+0x68>
 800162a:	4654      	mov	r4, sl
 800162c:	2c00      	cmp	r4, #0
 800162e:	d0ed      	beq.n	800160c <__gedf2+0x80>
 8001630:	4584      	cmp	ip, r0
 8001632:	d1eb      	bne.n	800160c <__gedf2+0x80>
 8001634:	4556      	cmp	r6, sl
 8001636:	dce9      	bgt.n	800160c <__gedf2+0x80>
 8001638:	dbde      	blt.n	80015f8 <__gedf2+0x6c>
 800163a:	9b01      	ldr	r3, [sp, #4]
 800163c:	428b      	cmp	r3, r1
 800163e:	d8e5      	bhi.n	800160c <__gedf2+0x80>
 8001640:	d1da      	bne.n	80015f8 <__gedf2+0x6c>
 8001642:	45c8      	cmp	r8, r9
 8001644:	d8e2      	bhi.n	800160c <__gedf2+0x80>
 8001646:	2000      	movs	r0, #0
 8001648:	45c8      	cmp	r8, r9
 800164a:	d2e4      	bcs.n	8001616 <__gedf2+0x8a>
 800164c:	e7d4      	b.n	80015f8 <__gedf2+0x6c>
 800164e:	2000      	movs	r0, #0
 8001650:	2c00      	cmp	r4, #0
 8001652:	d0e0      	beq.n	8001616 <__gedf2+0x8a>
 8001654:	e7da      	b.n	800160c <__gedf2+0x80>
 8001656:	4311      	orrs	r1, r2
 8001658:	d103      	bne.n	8001662 <__gedf2+0xd6>
 800165a:	4584      	cmp	ip, r0
 800165c:	d1d6      	bne.n	800160c <__gedf2+0x80>
 800165e:	2000      	movs	r0, #0
 8001660:	e7d9      	b.n	8001616 <__gedf2+0x8a>
 8001662:	2002      	movs	r0, #2
 8001664:	4240      	negs	r0, r0
 8001666:	e7d6      	b.n	8001616 <__gedf2+0x8a>
 8001668:	4584      	cmp	ip, r0
 800166a:	d0e6      	beq.n	800163a <__gedf2+0xae>
 800166c:	e7ce      	b.n	800160c <__gedf2+0x80>
 800166e:	46c0      	nop			@ (mov r8, r8)
 8001670:	000007ff 	.word	0x000007ff

08001674 <__ledf2>:
 8001674:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001676:	4657      	mov	r7, sl
 8001678:	464e      	mov	r6, r9
 800167a:	4645      	mov	r5, r8
 800167c:	46de      	mov	lr, fp
 800167e:	b5e0      	push	{r5, r6, r7, lr}
 8001680:	000d      	movs	r5, r1
 8001682:	030f      	lsls	r7, r1, #12
 8001684:	0004      	movs	r4, r0
 8001686:	4680      	mov	r8, r0
 8001688:	0fe8      	lsrs	r0, r5, #31
 800168a:	0b39      	lsrs	r1, r7, #12
 800168c:	4684      	mov	ip, r0
 800168e:	b083      	sub	sp, #12
 8001690:	0058      	lsls	r0, r3, #1
 8001692:	4f30      	ldr	r7, [pc, #192]	@ (8001754 <__ledf2+0xe0>)
 8001694:	0d40      	lsrs	r0, r0, #21
 8001696:	9101      	str	r1, [sp, #4]
 8001698:	031e      	lsls	r6, r3, #12
 800169a:	0069      	lsls	r1, r5, #1
 800169c:	4682      	mov	sl, r0
 800169e:	4691      	mov	r9, r2
 80016a0:	0d49      	lsrs	r1, r1, #21
 80016a2:	0b36      	lsrs	r6, r6, #12
 80016a4:	0fd8      	lsrs	r0, r3, #31
 80016a6:	42b9      	cmp	r1, r7
 80016a8:	d020      	beq.n	80016ec <__ledf2+0x78>
 80016aa:	45ba      	cmp	sl, r7
 80016ac:	d00f      	beq.n	80016ce <__ledf2+0x5a>
 80016ae:	2900      	cmp	r1, #0
 80016b0:	d12b      	bne.n	800170a <__ledf2+0x96>
 80016b2:	9901      	ldr	r1, [sp, #4]
 80016b4:	430c      	orrs	r4, r1
 80016b6:	4651      	mov	r1, sl
 80016b8:	2900      	cmp	r1, #0
 80016ba:	d137      	bne.n	800172c <__ledf2+0xb8>
 80016bc:	4332      	orrs	r2, r6
 80016be:	d038      	beq.n	8001732 <__ledf2+0xbe>
 80016c0:	2c00      	cmp	r4, #0
 80016c2:	d144      	bne.n	800174e <__ledf2+0xda>
 80016c4:	2800      	cmp	r0, #0
 80016c6:	d119      	bne.n	80016fc <__ledf2+0x88>
 80016c8:	2001      	movs	r0, #1
 80016ca:	4240      	negs	r0, r0
 80016cc:	e016      	b.n	80016fc <__ledf2+0x88>
 80016ce:	4316      	orrs	r6, r2
 80016d0:	d113      	bne.n	80016fa <__ledf2+0x86>
 80016d2:	2900      	cmp	r1, #0
 80016d4:	d102      	bne.n	80016dc <__ledf2+0x68>
 80016d6:	9f01      	ldr	r7, [sp, #4]
 80016d8:	4327      	orrs	r7, r4
 80016da:	d0f3      	beq.n	80016c4 <__ledf2+0x50>
 80016dc:	4584      	cmp	ip, r0
 80016de:	d020      	beq.n	8001722 <__ledf2+0xae>
 80016e0:	4663      	mov	r3, ip
 80016e2:	2002      	movs	r0, #2
 80016e4:	3b01      	subs	r3, #1
 80016e6:	4018      	ands	r0, r3
 80016e8:	3801      	subs	r0, #1
 80016ea:	e007      	b.n	80016fc <__ledf2+0x88>
 80016ec:	9f01      	ldr	r7, [sp, #4]
 80016ee:	4327      	orrs	r7, r4
 80016f0:	d103      	bne.n	80016fa <__ledf2+0x86>
 80016f2:	458a      	cmp	sl, r1
 80016f4:	d1f4      	bne.n	80016e0 <__ledf2+0x6c>
 80016f6:	4316      	orrs	r6, r2
 80016f8:	d01f      	beq.n	800173a <__ledf2+0xc6>
 80016fa:	2002      	movs	r0, #2
 80016fc:	b003      	add	sp, #12
 80016fe:	bcf0      	pop	{r4, r5, r6, r7}
 8001700:	46bb      	mov	fp, r7
 8001702:	46b2      	mov	sl, r6
 8001704:	46a9      	mov	r9, r5
 8001706:	46a0      	mov	r8, r4
 8001708:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800170a:	4654      	mov	r4, sl
 800170c:	2c00      	cmp	r4, #0
 800170e:	d0e7      	beq.n	80016e0 <__ledf2+0x6c>
 8001710:	4584      	cmp	ip, r0
 8001712:	d1e5      	bne.n	80016e0 <__ledf2+0x6c>
 8001714:	4551      	cmp	r1, sl
 8001716:	dce3      	bgt.n	80016e0 <__ledf2+0x6c>
 8001718:	db03      	blt.n	8001722 <__ledf2+0xae>
 800171a:	9b01      	ldr	r3, [sp, #4]
 800171c:	42b3      	cmp	r3, r6
 800171e:	d8df      	bhi.n	80016e0 <__ledf2+0x6c>
 8001720:	d00f      	beq.n	8001742 <__ledf2+0xce>
 8001722:	4663      	mov	r3, ip
 8001724:	2b00      	cmp	r3, #0
 8001726:	d0cf      	beq.n	80016c8 <__ledf2+0x54>
 8001728:	4660      	mov	r0, ip
 800172a:	e7e7      	b.n	80016fc <__ledf2+0x88>
 800172c:	2c00      	cmp	r4, #0
 800172e:	d0c9      	beq.n	80016c4 <__ledf2+0x50>
 8001730:	e7d4      	b.n	80016dc <__ledf2+0x68>
 8001732:	2000      	movs	r0, #0
 8001734:	2c00      	cmp	r4, #0
 8001736:	d0e1      	beq.n	80016fc <__ledf2+0x88>
 8001738:	e7d2      	b.n	80016e0 <__ledf2+0x6c>
 800173a:	4584      	cmp	ip, r0
 800173c:	d1d0      	bne.n	80016e0 <__ledf2+0x6c>
 800173e:	2000      	movs	r0, #0
 8001740:	e7dc      	b.n	80016fc <__ledf2+0x88>
 8001742:	45c8      	cmp	r8, r9
 8001744:	d8cc      	bhi.n	80016e0 <__ledf2+0x6c>
 8001746:	2000      	movs	r0, #0
 8001748:	45c8      	cmp	r8, r9
 800174a:	d2d7      	bcs.n	80016fc <__ledf2+0x88>
 800174c:	e7e9      	b.n	8001722 <__ledf2+0xae>
 800174e:	4584      	cmp	ip, r0
 8001750:	d0e3      	beq.n	800171a <__ledf2+0xa6>
 8001752:	e7c5      	b.n	80016e0 <__ledf2+0x6c>
 8001754:	000007ff 	.word	0x000007ff

08001758 <__aeabi_dmul>:
 8001758:	b5f0      	push	{r4, r5, r6, r7, lr}
 800175a:	4657      	mov	r7, sl
 800175c:	46de      	mov	lr, fp
 800175e:	464e      	mov	r6, r9
 8001760:	4645      	mov	r5, r8
 8001762:	b5e0      	push	{r5, r6, r7, lr}
 8001764:	001f      	movs	r7, r3
 8001766:	030b      	lsls	r3, r1, #12
 8001768:	0b1b      	lsrs	r3, r3, #12
 800176a:	0016      	movs	r6, r2
 800176c:	469a      	mov	sl, r3
 800176e:	0fca      	lsrs	r2, r1, #31
 8001770:	004b      	lsls	r3, r1, #1
 8001772:	0004      	movs	r4, r0
 8001774:	4693      	mov	fp, r2
 8001776:	b087      	sub	sp, #28
 8001778:	0d5b      	lsrs	r3, r3, #21
 800177a:	d100      	bne.n	800177e <__aeabi_dmul+0x26>
 800177c:	e0d5      	b.n	800192a <__aeabi_dmul+0x1d2>
 800177e:	4abb      	ldr	r2, [pc, #748]	@ (8001a6c <__aeabi_dmul+0x314>)
 8001780:	4293      	cmp	r3, r2
 8001782:	d100      	bne.n	8001786 <__aeabi_dmul+0x2e>
 8001784:	e0f8      	b.n	8001978 <__aeabi_dmul+0x220>
 8001786:	4651      	mov	r1, sl
 8001788:	0f42      	lsrs	r2, r0, #29
 800178a:	00c9      	lsls	r1, r1, #3
 800178c:	430a      	orrs	r2, r1
 800178e:	2180      	movs	r1, #128	@ 0x80
 8001790:	0409      	lsls	r1, r1, #16
 8001792:	4311      	orrs	r1, r2
 8001794:	00c2      	lsls	r2, r0, #3
 8001796:	4691      	mov	r9, r2
 8001798:	4ab5      	ldr	r2, [pc, #724]	@ (8001a70 <__aeabi_dmul+0x318>)
 800179a:	468a      	mov	sl, r1
 800179c:	189d      	adds	r5, r3, r2
 800179e:	2300      	movs	r3, #0
 80017a0:	4698      	mov	r8, r3
 80017a2:	9302      	str	r3, [sp, #8]
 80017a4:	033c      	lsls	r4, r7, #12
 80017a6:	007b      	lsls	r3, r7, #1
 80017a8:	0ffa      	lsrs	r2, r7, #31
 80017aa:	0030      	movs	r0, r6
 80017ac:	0b24      	lsrs	r4, r4, #12
 80017ae:	0d5b      	lsrs	r3, r3, #21
 80017b0:	9200      	str	r2, [sp, #0]
 80017b2:	d100      	bne.n	80017b6 <__aeabi_dmul+0x5e>
 80017b4:	e096      	b.n	80018e4 <__aeabi_dmul+0x18c>
 80017b6:	4aad      	ldr	r2, [pc, #692]	@ (8001a6c <__aeabi_dmul+0x314>)
 80017b8:	4293      	cmp	r3, r2
 80017ba:	d031      	beq.n	8001820 <__aeabi_dmul+0xc8>
 80017bc:	0f72      	lsrs	r2, r6, #29
 80017be:	00e4      	lsls	r4, r4, #3
 80017c0:	4322      	orrs	r2, r4
 80017c2:	2480      	movs	r4, #128	@ 0x80
 80017c4:	0424      	lsls	r4, r4, #16
 80017c6:	4314      	orrs	r4, r2
 80017c8:	4aa9      	ldr	r2, [pc, #676]	@ (8001a70 <__aeabi_dmul+0x318>)
 80017ca:	00f0      	lsls	r0, r6, #3
 80017cc:	4694      	mov	ip, r2
 80017ce:	4463      	add	r3, ip
 80017d0:	195b      	adds	r3, r3, r5
 80017d2:	1c5a      	adds	r2, r3, #1
 80017d4:	9201      	str	r2, [sp, #4]
 80017d6:	4642      	mov	r2, r8
 80017d8:	2600      	movs	r6, #0
 80017da:	2a0a      	cmp	r2, #10
 80017dc:	dc42      	bgt.n	8001864 <__aeabi_dmul+0x10c>
 80017de:	465a      	mov	r2, fp
 80017e0:	9900      	ldr	r1, [sp, #0]
 80017e2:	404a      	eors	r2, r1
 80017e4:	4693      	mov	fp, r2
 80017e6:	4642      	mov	r2, r8
 80017e8:	2a02      	cmp	r2, #2
 80017ea:	dc32      	bgt.n	8001852 <__aeabi_dmul+0xfa>
 80017ec:	3a01      	subs	r2, #1
 80017ee:	2a01      	cmp	r2, #1
 80017f0:	d900      	bls.n	80017f4 <__aeabi_dmul+0x9c>
 80017f2:	e149      	b.n	8001a88 <__aeabi_dmul+0x330>
 80017f4:	2e02      	cmp	r6, #2
 80017f6:	d100      	bne.n	80017fa <__aeabi_dmul+0xa2>
 80017f8:	e0ca      	b.n	8001990 <__aeabi_dmul+0x238>
 80017fa:	2e01      	cmp	r6, #1
 80017fc:	d13d      	bne.n	800187a <__aeabi_dmul+0x122>
 80017fe:	2300      	movs	r3, #0
 8001800:	2400      	movs	r4, #0
 8001802:	2200      	movs	r2, #0
 8001804:	0010      	movs	r0, r2
 8001806:	465a      	mov	r2, fp
 8001808:	051b      	lsls	r3, r3, #20
 800180a:	4323      	orrs	r3, r4
 800180c:	07d2      	lsls	r2, r2, #31
 800180e:	4313      	orrs	r3, r2
 8001810:	0019      	movs	r1, r3
 8001812:	b007      	add	sp, #28
 8001814:	bcf0      	pop	{r4, r5, r6, r7}
 8001816:	46bb      	mov	fp, r7
 8001818:	46b2      	mov	sl, r6
 800181a:	46a9      	mov	r9, r5
 800181c:	46a0      	mov	r8, r4
 800181e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001820:	4b92      	ldr	r3, [pc, #584]	@ (8001a6c <__aeabi_dmul+0x314>)
 8001822:	4326      	orrs	r6, r4
 8001824:	18eb      	adds	r3, r5, r3
 8001826:	2e00      	cmp	r6, #0
 8001828:	d100      	bne.n	800182c <__aeabi_dmul+0xd4>
 800182a:	e0bb      	b.n	80019a4 <__aeabi_dmul+0x24c>
 800182c:	2203      	movs	r2, #3
 800182e:	4641      	mov	r1, r8
 8001830:	4311      	orrs	r1, r2
 8001832:	465a      	mov	r2, fp
 8001834:	4688      	mov	r8, r1
 8001836:	9900      	ldr	r1, [sp, #0]
 8001838:	404a      	eors	r2, r1
 800183a:	2180      	movs	r1, #128	@ 0x80
 800183c:	0109      	lsls	r1, r1, #4
 800183e:	468c      	mov	ip, r1
 8001840:	0029      	movs	r1, r5
 8001842:	4461      	add	r1, ip
 8001844:	9101      	str	r1, [sp, #4]
 8001846:	4641      	mov	r1, r8
 8001848:	290a      	cmp	r1, #10
 800184a:	dd00      	ble.n	800184e <__aeabi_dmul+0xf6>
 800184c:	e233      	b.n	8001cb6 <__aeabi_dmul+0x55e>
 800184e:	4693      	mov	fp, r2
 8001850:	2603      	movs	r6, #3
 8001852:	4642      	mov	r2, r8
 8001854:	2701      	movs	r7, #1
 8001856:	4097      	lsls	r7, r2
 8001858:	21a6      	movs	r1, #166	@ 0xa6
 800185a:	003a      	movs	r2, r7
 800185c:	00c9      	lsls	r1, r1, #3
 800185e:	400a      	ands	r2, r1
 8001860:	420f      	tst	r7, r1
 8001862:	d031      	beq.n	80018c8 <__aeabi_dmul+0x170>
 8001864:	9e02      	ldr	r6, [sp, #8]
 8001866:	2e02      	cmp	r6, #2
 8001868:	d100      	bne.n	800186c <__aeabi_dmul+0x114>
 800186a:	e235      	b.n	8001cd8 <__aeabi_dmul+0x580>
 800186c:	2e03      	cmp	r6, #3
 800186e:	d100      	bne.n	8001872 <__aeabi_dmul+0x11a>
 8001870:	e1d2      	b.n	8001c18 <__aeabi_dmul+0x4c0>
 8001872:	4654      	mov	r4, sl
 8001874:	4648      	mov	r0, r9
 8001876:	2e01      	cmp	r6, #1
 8001878:	d0c1      	beq.n	80017fe <__aeabi_dmul+0xa6>
 800187a:	9a01      	ldr	r2, [sp, #4]
 800187c:	4b7d      	ldr	r3, [pc, #500]	@ (8001a74 <__aeabi_dmul+0x31c>)
 800187e:	4694      	mov	ip, r2
 8001880:	4463      	add	r3, ip
 8001882:	2b00      	cmp	r3, #0
 8001884:	dc00      	bgt.n	8001888 <__aeabi_dmul+0x130>
 8001886:	e0c0      	b.n	8001a0a <__aeabi_dmul+0x2b2>
 8001888:	0742      	lsls	r2, r0, #29
 800188a:	d009      	beq.n	80018a0 <__aeabi_dmul+0x148>
 800188c:	220f      	movs	r2, #15
 800188e:	4002      	ands	r2, r0
 8001890:	2a04      	cmp	r2, #4
 8001892:	d005      	beq.n	80018a0 <__aeabi_dmul+0x148>
 8001894:	1d02      	adds	r2, r0, #4
 8001896:	4282      	cmp	r2, r0
 8001898:	4180      	sbcs	r0, r0
 800189a:	4240      	negs	r0, r0
 800189c:	1824      	adds	r4, r4, r0
 800189e:	0010      	movs	r0, r2
 80018a0:	01e2      	lsls	r2, r4, #7
 80018a2:	d506      	bpl.n	80018b2 <__aeabi_dmul+0x15a>
 80018a4:	4b74      	ldr	r3, [pc, #464]	@ (8001a78 <__aeabi_dmul+0x320>)
 80018a6:	9a01      	ldr	r2, [sp, #4]
 80018a8:	401c      	ands	r4, r3
 80018aa:	2380      	movs	r3, #128	@ 0x80
 80018ac:	4694      	mov	ip, r2
 80018ae:	00db      	lsls	r3, r3, #3
 80018b0:	4463      	add	r3, ip
 80018b2:	4a72      	ldr	r2, [pc, #456]	@ (8001a7c <__aeabi_dmul+0x324>)
 80018b4:	4293      	cmp	r3, r2
 80018b6:	dc6b      	bgt.n	8001990 <__aeabi_dmul+0x238>
 80018b8:	0762      	lsls	r2, r4, #29
 80018ba:	08c0      	lsrs	r0, r0, #3
 80018bc:	0264      	lsls	r4, r4, #9
 80018be:	055b      	lsls	r3, r3, #21
 80018c0:	4302      	orrs	r2, r0
 80018c2:	0b24      	lsrs	r4, r4, #12
 80018c4:	0d5b      	lsrs	r3, r3, #21
 80018c6:	e79d      	b.n	8001804 <__aeabi_dmul+0xac>
 80018c8:	2190      	movs	r1, #144	@ 0x90
 80018ca:	0089      	lsls	r1, r1, #2
 80018cc:	420f      	tst	r7, r1
 80018ce:	d163      	bne.n	8001998 <__aeabi_dmul+0x240>
 80018d0:	2288      	movs	r2, #136	@ 0x88
 80018d2:	423a      	tst	r2, r7
 80018d4:	d100      	bne.n	80018d8 <__aeabi_dmul+0x180>
 80018d6:	e0d7      	b.n	8001a88 <__aeabi_dmul+0x330>
 80018d8:	9b00      	ldr	r3, [sp, #0]
 80018da:	46a2      	mov	sl, r4
 80018dc:	469b      	mov	fp, r3
 80018de:	4681      	mov	r9, r0
 80018e0:	9602      	str	r6, [sp, #8]
 80018e2:	e7bf      	b.n	8001864 <__aeabi_dmul+0x10c>
 80018e4:	0023      	movs	r3, r4
 80018e6:	4333      	orrs	r3, r6
 80018e8:	d100      	bne.n	80018ec <__aeabi_dmul+0x194>
 80018ea:	e07f      	b.n	80019ec <__aeabi_dmul+0x294>
 80018ec:	2c00      	cmp	r4, #0
 80018ee:	d100      	bne.n	80018f2 <__aeabi_dmul+0x19a>
 80018f0:	e1ad      	b.n	8001c4e <__aeabi_dmul+0x4f6>
 80018f2:	0020      	movs	r0, r4
 80018f4:	f000 fec8 	bl	8002688 <__clzsi2>
 80018f8:	0002      	movs	r2, r0
 80018fa:	0003      	movs	r3, r0
 80018fc:	3a0b      	subs	r2, #11
 80018fe:	201d      	movs	r0, #29
 8001900:	0019      	movs	r1, r3
 8001902:	1a82      	subs	r2, r0, r2
 8001904:	0030      	movs	r0, r6
 8001906:	3908      	subs	r1, #8
 8001908:	40d0      	lsrs	r0, r2
 800190a:	408c      	lsls	r4, r1
 800190c:	4304      	orrs	r4, r0
 800190e:	0030      	movs	r0, r6
 8001910:	4088      	lsls	r0, r1
 8001912:	4a5b      	ldr	r2, [pc, #364]	@ (8001a80 <__aeabi_dmul+0x328>)
 8001914:	1aeb      	subs	r3, r5, r3
 8001916:	4694      	mov	ip, r2
 8001918:	4463      	add	r3, ip
 800191a:	1c5a      	adds	r2, r3, #1
 800191c:	9201      	str	r2, [sp, #4]
 800191e:	4642      	mov	r2, r8
 8001920:	2600      	movs	r6, #0
 8001922:	2a0a      	cmp	r2, #10
 8001924:	dc00      	bgt.n	8001928 <__aeabi_dmul+0x1d0>
 8001926:	e75a      	b.n	80017de <__aeabi_dmul+0x86>
 8001928:	e79c      	b.n	8001864 <__aeabi_dmul+0x10c>
 800192a:	4653      	mov	r3, sl
 800192c:	4303      	orrs	r3, r0
 800192e:	4699      	mov	r9, r3
 8001930:	d054      	beq.n	80019dc <__aeabi_dmul+0x284>
 8001932:	4653      	mov	r3, sl
 8001934:	2b00      	cmp	r3, #0
 8001936:	d100      	bne.n	800193a <__aeabi_dmul+0x1e2>
 8001938:	e177      	b.n	8001c2a <__aeabi_dmul+0x4d2>
 800193a:	4650      	mov	r0, sl
 800193c:	f000 fea4 	bl	8002688 <__clzsi2>
 8001940:	230b      	movs	r3, #11
 8001942:	425b      	negs	r3, r3
 8001944:	469c      	mov	ip, r3
 8001946:	0002      	movs	r2, r0
 8001948:	4484      	add	ip, r0
 800194a:	0011      	movs	r1, r2
 800194c:	4650      	mov	r0, sl
 800194e:	3908      	subs	r1, #8
 8001950:	4088      	lsls	r0, r1
 8001952:	231d      	movs	r3, #29
 8001954:	4680      	mov	r8, r0
 8001956:	4660      	mov	r0, ip
 8001958:	1a1b      	subs	r3, r3, r0
 800195a:	0020      	movs	r0, r4
 800195c:	40d8      	lsrs	r0, r3
 800195e:	0003      	movs	r3, r0
 8001960:	4640      	mov	r0, r8
 8001962:	4303      	orrs	r3, r0
 8001964:	469a      	mov	sl, r3
 8001966:	0023      	movs	r3, r4
 8001968:	408b      	lsls	r3, r1
 800196a:	4699      	mov	r9, r3
 800196c:	2300      	movs	r3, #0
 800196e:	4d44      	ldr	r5, [pc, #272]	@ (8001a80 <__aeabi_dmul+0x328>)
 8001970:	4698      	mov	r8, r3
 8001972:	1aad      	subs	r5, r5, r2
 8001974:	9302      	str	r3, [sp, #8]
 8001976:	e715      	b.n	80017a4 <__aeabi_dmul+0x4c>
 8001978:	4652      	mov	r2, sl
 800197a:	4302      	orrs	r2, r0
 800197c:	4691      	mov	r9, r2
 800197e:	d126      	bne.n	80019ce <__aeabi_dmul+0x276>
 8001980:	2200      	movs	r2, #0
 8001982:	001d      	movs	r5, r3
 8001984:	2302      	movs	r3, #2
 8001986:	4692      	mov	sl, r2
 8001988:	3208      	adds	r2, #8
 800198a:	4690      	mov	r8, r2
 800198c:	9302      	str	r3, [sp, #8]
 800198e:	e709      	b.n	80017a4 <__aeabi_dmul+0x4c>
 8001990:	2400      	movs	r4, #0
 8001992:	2200      	movs	r2, #0
 8001994:	4b35      	ldr	r3, [pc, #212]	@ (8001a6c <__aeabi_dmul+0x314>)
 8001996:	e735      	b.n	8001804 <__aeabi_dmul+0xac>
 8001998:	2300      	movs	r3, #0
 800199a:	2480      	movs	r4, #128	@ 0x80
 800199c:	469b      	mov	fp, r3
 800199e:	0324      	lsls	r4, r4, #12
 80019a0:	4b32      	ldr	r3, [pc, #200]	@ (8001a6c <__aeabi_dmul+0x314>)
 80019a2:	e72f      	b.n	8001804 <__aeabi_dmul+0xac>
 80019a4:	2202      	movs	r2, #2
 80019a6:	4641      	mov	r1, r8
 80019a8:	4311      	orrs	r1, r2
 80019aa:	2280      	movs	r2, #128	@ 0x80
 80019ac:	0112      	lsls	r2, r2, #4
 80019ae:	4694      	mov	ip, r2
 80019b0:	002a      	movs	r2, r5
 80019b2:	4462      	add	r2, ip
 80019b4:	4688      	mov	r8, r1
 80019b6:	9201      	str	r2, [sp, #4]
 80019b8:	290a      	cmp	r1, #10
 80019ba:	dd00      	ble.n	80019be <__aeabi_dmul+0x266>
 80019bc:	e752      	b.n	8001864 <__aeabi_dmul+0x10c>
 80019be:	465a      	mov	r2, fp
 80019c0:	2000      	movs	r0, #0
 80019c2:	9900      	ldr	r1, [sp, #0]
 80019c4:	0004      	movs	r4, r0
 80019c6:	404a      	eors	r2, r1
 80019c8:	4693      	mov	fp, r2
 80019ca:	2602      	movs	r6, #2
 80019cc:	e70b      	b.n	80017e6 <__aeabi_dmul+0x8e>
 80019ce:	220c      	movs	r2, #12
 80019d0:	001d      	movs	r5, r3
 80019d2:	2303      	movs	r3, #3
 80019d4:	4681      	mov	r9, r0
 80019d6:	4690      	mov	r8, r2
 80019d8:	9302      	str	r3, [sp, #8]
 80019da:	e6e3      	b.n	80017a4 <__aeabi_dmul+0x4c>
 80019dc:	2300      	movs	r3, #0
 80019de:	469a      	mov	sl, r3
 80019e0:	3304      	adds	r3, #4
 80019e2:	4698      	mov	r8, r3
 80019e4:	3b03      	subs	r3, #3
 80019e6:	2500      	movs	r5, #0
 80019e8:	9302      	str	r3, [sp, #8]
 80019ea:	e6db      	b.n	80017a4 <__aeabi_dmul+0x4c>
 80019ec:	4642      	mov	r2, r8
 80019ee:	3301      	adds	r3, #1
 80019f0:	431a      	orrs	r2, r3
 80019f2:	002b      	movs	r3, r5
 80019f4:	4690      	mov	r8, r2
 80019f6:	1c5a      	adds	r2, r3, #1
 80019f8:	9201      	str	r2, [sp, #4]
 80019fa:	4642      	mov	r2, r8
 80019fc:	2400      	movs	r4, #0
 80019fe:	2000      	movs	r0, #0
 8001a00:	2601      	movs	r6, #1
 8001a02:	2a0a      	cmp	r2, #10
 8001a04:	dc00      	bgt.n	8001a08 <__aeabi_dmul+0x2b0>
 8001a06:	e6ea      	b.n	80017de <__aeabi_dmul+0x86>
 8001a08:	e72c      	b.n	8001864 <__aeabi_dmul+0x10c>
 8001a0a:	2201      	movs	r2, #1
 8001a0c:	1ad2      	subs	r2, r2, r3
 8001a0e:	2a38      	cmp	r2, #56	@ 0x38
 8001a10:	dd00      	ble.n	8001a14 <__aeabi_dmul+0x2bc>
 8001a12:	e6f4      	b.n	80017fe <__aeabi_dmul+0xa6>
 8001a14:	2a1f      	cmp	r2, #31
 8001a16:	dc00      	bgt.n	8001a1a <__aeabi_dmul+0x2c2>
 8001a18:	e12a      	b.n	8001c70 <__aeabi_dmul+0x518>
 8001a1a:	211f      	movs	r1, #31
 8001a1c:	4249      	negs	r1, r1
 8001a1e:	1acb      	subs	r3, r1, r3
 8001a20:	0021      	movs	r1, r4
 8001a22:	40d9      	lsrs	r1, r3
 8001a24:	000b      	movs	r3, r1
 8001a26:	2a20      	cmp	r2, #32
 8001a28:	d005      	beq.n	8001a36 <__aeabi_dmul+0x2de>
 8001a2a:	4a16      	ldr	r2, [pc, #88]	@ (8001a84 <__aeabi_dmul+0x32c>)
 8001a2c:	9d01      	ldr	r5, [sp, #4]
 8001a2e:	4694      	mov	ip, r2
 8001a30:	4465      	add	r5, ip
 8001a32:	40ac      	lsls	r4, r5
 8001a34:	4320      	orrs	r0, r4
 8001a36:	1e42      	subs	r2, r0, #1
 8001a38:	4190      	sbcs	r0, r2
 8001a3a:	4318      	orrs	r0, r3
 8001a3c:	2307      	movs	r3, #7
 8001a3e:	0019      	movs	r1, r3
 8001a40:	2400      	movs	r4, #0
 8001a42:	4001      	ands	r1, r0
 8001a44:	4203      	tst	r3, r0
 8001a46:	d00c      	beq.n	8001a62 <__aeabi_dmul+0x30a>
 8001a48:	230f      	movs	r3, #15
 8001a4a:	4003      	ands	r3, r0
 8001a4c:	2b04      	cmp	r3, #4
 8001a4e:	d100      	bne.n	8001a52 <__aeabi_dmul+0x2fa>
 8001a50:	e140      	b.n	8001cd4 <__aeabi_dmul+0x57c>
 8001a52:	1d03      	adds	r3, r0, #4
 8001a54:	4283      	cmp	r3, r0
 8001a56:	41a4      	sbcs	r4, r4
 8001a58:	0018      	movs	r0, r3
 8001a5a:	4264      	negs	r4, r4
 8001a5c:	0761      	lsls	r1, r4, #29
 8001a5e:	0264      	lsls	r4, r4, #9
 8001a60:	0b24      	lsrs	r4, r4, #12
 8001a62:	08c2      	lsrs	r2, r0, #3
 8001a64:	2300      	movs	r3, #0
 8001a66:	430a      	orrs	r2, r1
 8001a68:	e6cc      	b.n	8001804 <__aeabi_dmul+0xac>
 8001a6a:	46c0      	nop			@ (mov r8, r8)
 8001a6c:	000007ff 	.word	0x000007ff
 8001a70:	fffffc01 	.word	0xfffffc01
 8001a74:	000003ff 	.word	0x000003ff
 8001a78:	feffffff 	.word	0xfeffffff
 8001a7c:	000007fe 	.word	0x000007fe
 8001a80:	fffffc0d 	.word	0xfffffc0d
 8001a84:	0000043e 	.word	0x0000043e
 8001a88:	4649      	mov	r1, r9
 8001a8a:	464a      	mov	r2, r9
 8001a8c:	0409      	lsls	r1, r1, #16
 8001a8e:	0c09      	lsrs	r1, r1, #16
 8001a90:	000d      	movs	r5, r1
 8001a92:	0c16      	lsrs	r6, r2, #16
 8001a94:	0c02      	lsrs	r2, r0, #16
 8001a96:	0400      	lsls	r0, r0, #16
 8001a98:	0c00      	lsrs	r0, r0, #16
 8001a9a:	4345      	muls	r5, r0
 8001a9c:	46ac      	mov	ip, r5
 8001a9e:	0005      	movs	r5, r0
 8001aa0:	4375      	muls	r5, r6
 8001aa2:	46a8      	mov	r8, r5
 8001aa4:	0015      	movs	r5, r2
 8001aa6:	000f      	movs	r7, r1
 8001aa8:	4375      	muls	r5, r6
 8001aaa:	9200      	str	r2, [sp, #0]
 8001aac:	9502      	str	r5, [sp, #8]
 8001aae:	002a      	movs	r2, r5
 8001ab0:	9d00      	ldr	r5, [sp, #0]
 8001ab2:	436f      	muls	r7, r5
 8001ab4:	4665      	mov	r5, ip
 8001ab6:	0c2d      	lsrs	r5, r5, #16
 8001ab8:	46a9      	mov	r9, r5
 8001aba:	4447      	add	r7, r8
 8001abc:	444f      	add	r7, r9
 8001abe:	45b8      	cmp	r8, r7
 8001ac0:	d905      	bls.n	8001ace <__aeabi_dmul+0x376>
 8001ac2:	0015      	movs	r5, r2
 8001ac4:	2280      	movs	r2, #128	@ 0x80
 8001ac6:	0252      	lsls	r2, r2, #9
 8001ac8:	4690      	mov	r8, r2
 8001aca:	4445      	add	r5, r8
 8001acc:	9502      	str	r5, [sp, #8]
 8001ace:	0c3d      	lsrs	r5, r7, #16
 8001ad0:	9503      	str	r5, [sp, #12]
 8001ad2:	4665      	mov	r5, ip
 8001ad4:	042d      	lsls	r5, r5, #16
 8001ad6:	043f      	lsls	r7, r7, #16
 8001ad8:	0c2d      	lsrs	r5, r5, #16
 8001ada:	46ac      	mov	ip, r5
 8001adc:	003d      	movs	r5, r7
 8001ade:	4465      	add	r5, ip
 8001ae0:	9504      	str	r5, [sp, #16]
 8001ae2:	0c25      	lsrs	r5, r4, #16
 8001ae4:	0424      	lsls	r4, r4, #16
 8001ae6:	0c24      	lsrs	r4, r4, #16
 8001ae8:	46ac      	mov	ip, r5
 8001aea:	0025      	movs	r5, r4
 8001aec:	4375      	muls	r5, r6
 8001aee:	46a8      	mov	r8, r5
 8001af0:	4665      	mov	r5, ip
 8001af2:	000f      	movs	r7, r1
 8001af4:	4369      	muls	r1, r5
 8001af6:	4441      	add	r1, r8
 8001af8:	4689      	mov	r9, r1
 8001afa:	4367      	muls	r7, r4
 8001afc:	0c39      	lsrs	r1, r7, #16
 8001afe:	4449      	add	r1, r9
 8001b00:	436e      	muls	r6, r5
 8001b02:	4588      	cmp	r8, r1
 8001b04:	d903      	bls.n	8001b0e <__aeabi_dmul+0x3b6>
 8001b06:	2280      	movs	r2, #128	@ 0x80
 8001b08:	0252      	lsls	r2, r2, #9
 8001b0a:	4690      	mov	r8, r2
 8001b0c:	4446      	add	r6, r8
 8001b0e:	0c0d      	lsrs	r5, r1, #16
 8001b10:	46a8      	mov	r8, r5
 8001b12:	0035      	movs	r5, r6
 8001b14:	4445      	add	r5, r8
 8001b16:	9505      	str	r5, [sp, #20]
 8001b18:	9d03      	ldr	r5, [sp, #12]
 8001b1a:	043f      	lsls	r7, r7, #16
 8001b1c:	46a8      	mov	r8, r5
 8001b1e:	0c3f      	lsrs	r7, r7, #16
 8001b20:	0409      	lsls	r1, r1, #16
 8001b22:	19c9      	adds	r1, r1, r7
 8001b24:	4488      	add	r8, r1
 8001b26:	4645      	mov	r5, r8
 8001b28:	9503      	str	r5, [sp, #12]
 8001b2a:	4655      	mov	r5, sl
 8001b2c:	042e      	lsls	r6, r5, #16
 8001b2e:	0c36      	lsrs	r6, r6, #16
 8001b30:	0c2f      	lsrs	r7, r5, #16
 8001b32:	0035      	movs	r5, r6
 8001b34:	4345      	muls	r5, r0
 8001b36:	4378      	muls	r0, r7
 8001b38:	4681      	mov	r9, r0
 8001b3a:	0038      	movs	r0, r7
 8001b3c:	46a8      	mov	r8, r5
 8001b3e:	0c2d      	lsrs	r5, r5, #16
 8001b40:	46aa      	mov	sl, r5
 8001b42:	9a00      	ldr	r2, [sp, #0]
 8001b44:	4350      	muls	r0, r2
 8001b46:	4372      	muls	r2, r6
 8001b48:	444a      	add	r2, r9
 8001b4a:	4452      	add	r2, sl
 8001b4c:	4591      	cmp	r9, r2
 8001b4e:	d903      	bls.n	8001b58 <__aeabi_dmul+0x400>
 8001b50:	2580      	movs	r5, #128	@ 0x80
 8001b52:	026d      	lsls	r5, r5, #9
 8001b54:	46a9      	mov	r9, r5
 8001b56:	4448      	add	r0, r9
 8001b58:	0c15      	lsrs	r5, r2, #16
 8001b5a:	46a9      	mov	r9, r5
 8001b5c:	4645      	mov	r5, r8
 8001b5e:	042d      	lsls	r5, r5, #16
 8001b60:	0c2d      	lsrs	r5, r5, #16
 8001b62:	46a8      	mov	r8, r5
 8001b64:	4665      	mov	r5, ip
 8001b66:	437d      	muls	r5, r7
 8001b68:	0412      	lsls	r2, r2, #16
 8001b6a:	4448      	add	r0, r9
 8001b6c:	4490      	add	r8, r2
 8001b6e:	46a9      	mov	r9, r5
 8001b70:	0032      	movs	r2, r6
 8001b72:	4665      	mov	r5, ip
 8001b74:	4362      	muls	r2, r4
 8001b76:	436e      	muls	r6, r5
 8001b78:	437c      	muls	r4, r7
 8001b7a:	0c17      	lsrs	r7, r2, #16
 8001b7c:	1936      	adds	r6, r6, r4
 8001b7e:	19bf      	adds	r7, r7, r6
 8001b80:	42bc      	cmp	r4, r7
 8001b82:	d903      	bls.n	8001b8c <__aeabi_dmul+0x434>
 8001b84:	2480      	movs	r4, #128	@ 0x80
 8001b86:	0264      	lsls	r4, r4, #9
 8001b88:	46a4      	mov	ip, r4
 8001b8a:	44e1      	add	r9, ip
 8001b8c:	9c02      	ldr	r4, [sp, #8]
 8001b8e:	9e03      	ldr	r6, [sp, #12]
 8001b90:	46a4      	mov	ip, r4
 8001b92:	9d05      	ldr	r5, [sp, #20]
 8001b94:	4466      	add	r6, ip
 8001b96:	428e      	cmp	r6, r1
 8001b98:	4189      	sbcs	r1, r1
 8001b9a:	46ac      	mov	ip, r5
 8001b9c:	0412      	lsls	r2, r2, #16
 8001b9e:	043c      	lsls	r4, r7, #16
 8001ba0:	0c12      	lsrs	r2, r2, #16
 8001ba2:	18a2      	adds	r2, r4, r2
 8001ba4:	4462      	add	r2, ip
 8001ba6:	4249      	negs	r1, r1
 8001ba8:	1854      	adds	r4, r2, r1
 8001baa:	4446      	add	r6, r8
 8001bac:	46a4      	mov	ip, r4
 8001bae:	4546      	cmp	r6, r8
 8001bb0:	41a4      	sbcs	r4, r4
 8001bb2:	4682      	mov	sl, r0
 8001bb4:	4264      	negs	r4, r4
 8001bb6:	46a0      	mov	r8, r4
 8001bb8:	42aa      	cmp	r2, r5
 8001bba:	4192      	sbcs	r2, r2
 8001bbc:	458c      	cmp	ip, r1
 8001bbe:	4189      	sbcs	r1, r1
 8001bc0:	44e2      	add	sl, ip
 8001bc2:	44d0      	add	r8, sl
 8001bc4:	4249      	negs	r1, r1
 8001bc6:	4252      	negs	r2, r2
 8001bc8:	430a      	orrs	r2, r1
 8001bca:	45a0      	cmp	r8, r4
 8001bcc:	41a4      	sbcs	r4, r4
 8001bce:	4582      	cmp	sl, r0
 8001bd0:	4189      	sbcs	r1, r1
 8001bd2:	4264      	negs	r4, r4
 8001bd4:	4249      	negs	r1, r1
 8001bd6:	430c      	orrs	r4, r1
 8001bd8:	4641      	mov	r1, r8
 8001bda:	0c3f      	lsrs	r7, r7, #16
 8001bdc:	19d2      	adds	r2, r2, r7
 8001bde:	1912      	adds	r2, r2, r4
 8001be0:	0dcc      	lsrs	r4, r1, #23
 8001be2:	9904      	ldr	r1, [sp, #16]
 8001be4:	0270      	lsls	r0, r6, #9
 8001be6:	4308      	orrs	r0, r1
 8001be8:	1e41      	subs	r1, r0, #1
 8001bea:	4188      	sbcs	r0, r1
 8001bec:	4641      	mov	r1, r8
 8001bee:	444a      	add	r2, r9
 8001bf0:	0df6      	lsrs	r6, r6, #23
 8001bf2:	0252      	lsls	r2, r2, #9
 8001bf4:	4330      	orrs	r0, r6
 8001bf6:	0249      	lsls	r1, r1, #9
 8001bf8:	4314      	orrs	r4, r2
 8001bfa:	4308      	orrs	r0, r1
 8001bfc:	01d2      	lsls	r2, r2, #7
 8001bfe:	d535      	bpl.n	8001c6c <__aeabi_dmul+0x514>
 8001c00:	2201      	movs	r2, #1
 8001c02:	0843      	lsrs	r3, r0, #1
 8001c04:	4002      	ands	r2, r0
 8001c06:	4313      	orrs	r3, r2
 8001c08:	07e0      	lsls	r0, r4, #31
 8001c0a:	4318      	orrs	r0, r3
 8001c0c:	0864      	lsrs	r4, r4, #1
 8001c0e:	e634      	b.n	800187a <__aeabi_dmul+0x122>
 8001c10:	9b00      	ldr	r3, [sp, #0]
 8001c12:	46a2      	mov	sl, r4
 8001c14:	469b      	mov	fp, r3
 8001c16:	4681      	mov	r9, r0
 8001c18:	2480      	movs	r4, #128	@ 0x80
 8001c1a:	4653      	mov	r3, sl
 8001c1c:	0324      	lsls	r4, r4, #12
 8001c1e:	431c      	orrs	r4, r3
 8001c20:	0324      	lsls	r4, r4, #12
 8001c22:	464a      	mov	r2, r9
 8001c24:	4b2e      	ldr	r3, [pc, #184]	@ (8001ce0 <__aeabi_dmul+0x588>)
 8001c26:	0b24      	lsrs	r4, r4, #12
 8001c28:	e5ec      	b.n	8001804 <__aeabi_dmul+0xac>
 8001c2a:	f000 fd2d 	bl	8002688 <__clzsi2>
 8001c2e:	2315      	movs	r3, #21
 8001c30:	469c      	mov	ip, r3
 8001c32:	4484      	add	ip, r0
 8001c34:	0002      	movs	r2, r0
 8001c36:	4663      	mov	r3, ip
 8001c38:	3220      	adds	r2, #32
 8001c3a:	2b1c      	cmp	r3, #28
 8001c3c:	dc00      	bgt.n	8001c40 <__aeabi_dmul+0x4e8>
 8001c3e:	e684      	b.n	800194a <__aeabi_dmul+0x1f2>
 8001c40:	2300      	movs	r3, #0
 8001c42:	4699      	mov	r9, r3
 8001c44:	0023      	movs	r3, r4
 8001c46:	3808      	subs	r0, #8
 8001c48:	4083      	lsls	r3, r0
 8001c4a:	469a      	mov	sl, r3
 8001c4c:	e68e      	b.n	800196c <__aeabi_dmul+0x214>
 8001c4e:	f000 fd1b 	bl	8002688 <__clzsi2>
 8001c52:	0002      	movs	r2, r0
 8001c54:	0003      	movs	r3, r0
 8001c56:	3215      	adds	r2, #21
 8001c58:	3320      	adds	r3, #32
 8001c5a:	2a1c      	cmp	r2, #28
 8001c5c:	dc00      	bgt.n	8001c60 <__aeabi_dmul+0x508>
 8001c5e:	e64e      	b.n	80018fe <__aeabi_dmul+0x1a6>
 8001c60:	0002      	movs	r2, r0
 8001c62:	0034      	movs	r4, r6
 8001c64:	3a08      	subs	r2, #8
 8001c66:	2000      	movs	r0, #0
 8001c68:	4094      	lsls	r4, r2
 8001c6a:	e652      	b.n	8001912 <__aeabi_dmul+0x1ba>
 8001c6c:	9301      	str	r3, [sp, #4]
 8001c6e:	e604      	b.n	800187a <__aeabi_dmul+0x122>
 8001c70:	4b1c      	ldr	r3, [pc, #112]	@ (8001ce4 <__aeabi_dmul+0x58c>)
 8001c72:	0021      	movs	r1, r4
 8001c74:	469c      	mov	ip, r3
 8001c76:	0003      	movs	r3, r0
 8001c78:	9d01      	ldr	r5, [sp, #4]
 8001c7a:	40d3      	lsrs	r3, r2
 8001c7c:	4465      	add	r5, ip
 8001c7e:	40a9      	lsls	r1, r5
 8001c80:	4319      	orrs	r1, r3
 8001c82:	0003      	movs	r3, r0
 8001c84:	40ab      	lsls	r3, r5
 8001c86:	1e58      	subs	r0, r3, #1
 8001c88:	4183      	sbcs	r3, r0
 8001c8a:	4319      	orrs	r1, r3
 8001c8c:	0008      	movs	r0, r1
 8001c8e:	40d4      	lsrs	r4, r2
 8001c90:	074b      	lsls	r3, r1, #29
 8001c92:	d009      	beq.n	8001ca8 <__aeabi_dmul+0x550>
 8001c94:	230f      	movs	r3, #15
 8001c96:	400b      	ands	r3, r1
 8001c98:	2b04      	cmp	r3, #4
 8001c9a:	d005      	beq.n	8001ca8 <__aeabi_dmul+0x550>
 8001c9c:	1d0b      	adds	r3, r1, #4
 8001c9e:	428b      	cmp	r3, r1
 8001ca0:	4180      	sbcs	r0, r0
 8001ca2:	4240      	negs	r0, r0
 8001ca4:	1824      	adds	r4, r4, r0
 8001ca6:	0018      	movs	r0, r3
 8001ca8:	0223      	lsls	r3, r4, #8
 8001caa:	d400      	bmi.n	8001cae <__aeabi_dmul+0x556>
 8001cac:	e6d6      	b.n	8001a5c <__aeabi_dmul+0x304>
 8001cae:	2301      	movs	r3, #1
 8001cb0:	2400      	movs	r4, #0
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	e5a6      	b.n	8001804 <__aeabi_dmul+0xac>
 8001cb6:	290f      	cmp	r1, #15
 8001cb8:	d1aa      	bne.n	8001c10 <__aeabi_dmul+0x4b8>
 8001cba:	2380      	movs	r3, #128	@ 0x80
 8001cbc:	4652      	mov	r2, sl
 8001cbe:	031b      	lsls	r3, r3, #12
 8001cc0:	421a      	tst	r2, r3
 8001cc2:	d0a9      	beq.n	8001c18 <__aeabi_dmul+0x4c0>
 8001cc4:	421c      	tst	r4, r3
 8001cc6:	d1a7      	bne.n	8001c18 <__aeabi_dmul+0x4c0>
 8001cc8:	431c      	orrs	r4, r3
 8001cca:	9b00      	ldr	r3, [sp, #0]
 8001ccc:	0002      	movs	r2, r0
 8001cce:	469b      	mov	fp, r3
 8001cd0:	4b03      	ldr	r3, [pc, #12]	@ (8001ce0 <__aeabi_dmul+0x588>)
 8001cd2:	e597      	b.n	8001804 <__aeabi_dmul+0xac>
 8001cd4:	2400      	movs	r4, #0
 8001cd6:	e6c1      	b.n	8001a5c <__aeabi_dmul+0x304>
 8001cd8:	2400      	movs	r4, #0
 8001cda:	4b01      	ldr	r3, [pc, #4]	@ (8001ce0 <__aeabi_dmul+0x588>)
 8001cdc:	0022      	movs	r2, r4
 8001cde:	e591      	b.n	8001804 <__aeabi_dmul+0xac>
 8001ce0:	000007ff 	.word	0x000007ff
 8001ce4:	0000041e 	.word	0x0000041e

08001ce8 <__aeabi_dsub>:
 8001ce8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001cea:	464e      	mov	r6, r9
 8001cec:	4645      	mov	r5, r8
 8001cee:	46de      	mov	lr, fp
 8001cf0:	4657      	mov	r7, sl
 8001cf2:	b5e0      	push	{r5, r6, r7, lr}
 8001cf4:	b085      	sub	sp, #20
 8001cf6:	9000      	str	r0, [sp, #0]
 8001cf8:	9101      	str	r1, [sp, #4]
 8001cfa:	030c      	lsls	r4, r1, #12
 8001cfc:	004f      	lsls	r7, r1, #1
 8001cfe:	0fce      	lsrs	r6, r1, #31
 8001d00:	0a61      	lsrs	r1, r4, #9
 8001d02:	9c00      	ldr	r4, [sp, #0]
 8001d04:	46b0      	mov	r8, r6
 8001d06:	0f64      	lsrs	r4, r4, #29
 8001d08:	430c      	orrs	r4, r1
 8001d0a:	9900      	ldr	r1, [sp, #0]
 8001d0c:	0d7f      	lsrs	r7, r7, #21
 8001d0e:	00c8      	lsls	r0, r1, #3
 8001d10:	0011      	movs	r1, r2
 8001d12:	001a      	movs	r2, r3
 8001d14:	031b      	lsls	r3, r3, #12
 8001d16:	469c      	mov	ip, r3
 8001d18:	9100      	str	r1, [sp, #0]
 8001d1a:	9201      	str	r2, [sp, #4]
 8001d1c:	0051      	lsls	r1, r2, #1
 8001d1e:	0d4b      	lsrs	r3, r1, #21
 8001d20:	4699      	mov	r9, r3
 8001d22:	9b01      	ldr	r3, [sp, #4]
 8001d24:	9d00      	ldr	r5, [sp, #0]
 8001d26:	0fd9      	lsrs	r1, r3, #31
 8001d28:	4663      	mov	r3, ip
 8001d2a:	0f6a      	lsrs	r2, r5, #29
 8001d2c:	0a5b      	lsrs	r3, r3, #9
 8001d2e:	4313      	orrs	r3, r2
 8001d30:	00ea      	lsls	r2, r5, #3
 8001d32:	4694      	mov	ip, r2
 8001d34:	4693      	mov	fp, r2
 8001d36:	4ac1      	ldr	r2, [pc, #772]	@ (800203c <__aeabi_dsub+0x354>)
 8001d38:	9003      	str	r0, [sp, #12]
 8001d3a:	9302      	str	r3, [sp, #8]
 8001d3c:	4591      	cmp	r9, r2
 8001d3e:	d100      	bne.n	8001d42 <__aeabi_dsub+0x5a>
 8001d40:	e0cd      	b.n	8001ede <__aeabi_dsub+0x1f6>
 8001d42:	2501      	movs	r5, #1
 8001d44:	4069      	eors	r1, r5
 8001d46:	464d      	mov	r5, r9
 8001d48:	1b7d      	subs	r5, r7, r5
 8001d4a:	46aa      	mov	sl, r5
 8001d4c:	428e      	cmp	r6, r1
 8001d4e:	d100      	bne.n	8001d52 <__aeabi_dsub+0x6a>
 8001d50:	e080      	b.n	8001e54 <__aeabi_dsub+0x16c>
 8001d52:	2d00      	cmp	r5, #0
 8001d54:	dc00      	bgt.n	8001d58 <__aeabi_dsub+0x70>
 8001d56:	e335      	b.n	80023c4 <__aeabi_dsub+0x6dc>
 8001d58:	4649      	mov	r1, r9
 8001d5a:	2900      	cmp	r1, #0
 8001d5c:	d100      	bne.n	8001d60 <__aeabi_dsub+0x78>
 8001d5e:	e0df      	b.n	8001f20 <__aeabi_dsub+0x238>
 8001d60:	4297      	cmp	r7, r2
 8001d62:	d100      	bne.n	8001d66 <__aeabi_dsub+0x7e>
 8001d64:	e194      	b.n	8002090 <__aeabi_dsub+0x3a8>
 8001d66:	4652      	mov	r2, sl
 8001d68:	2501      	movs	r5, #1
 8001d6a:	2a38      	cmp	r2, #56	@ 0x38
 8001d6c:	dc19      	bgt.n	8001da2 <__aeabi_dsub+0xba>
 8001d6e:	2280      	movs	r2, #128	@ 0x80
 8001d70:	9b02      	ldr	r3, [sp, #8]
 8001d72:	0412      	lsls	r2, r2, #16
 8001d74:	4313      	orrs	r3, r2
 8001d76:	9302      	str	r3, [sp, #8]
 8001d78:	4652      	mov	r2, sl
 8001d7a:	2a1f      	cmp	r2, #31
 8001d7c:	dd00      	ble.n	8001d80 <__aeabi_dsub+0x98>
 8001d7e:	e1e3      	b.n	8002148 <__aeabi_dsub+0x460>
 8001d80:	4653      	mov	r3, sl
 8001d82:	2220      	movs	r2, #32
 8001d84:	4661      	mov	r1, ip
 8001d86:	9d02      	ldr	r5, [sp, #8]
 8001d88:	1ad2      	subs	r2, r2, r3
 8001d8a:	4095      	lsls	r5, r2
 8001d8c:	40d9      	lsrs	r1, r3
 8001d8e:	430d      	orrs	r5, r1
 8001d90:	4661      	mov	r1, ip
 8001d92:	4091      	lsls	r1, r2
 8001d94:	000a      	movs	r2, r1
 8001d96:	1e51      	subs	r1, r2, #1
 8001d98:	418a      	sbcs	r2, r1
 8001d9a:	4315      	orrs	r5, r2
 8001d9c:	9a02      	ldr	r2, [sp, #8]
 8001d9e:	40da      	lsrs	r2, r3
 8001da0:	1aa4      	subs	r4, r4, r2
 8001da2:	1b45      	subs	r5, r0, r5
 8001da4:	42a8      	cmp	r0, r5
 8001da6:	4180      	sbcs	r0, r0
 8001da8:	4240      	negs	r0, r0
 8001daa:	1a24      	subs	r4, r4, r0
 8001dac:	0223      	lsls	r3, r4, #8
 8001dae:	d400      	bmi.n	8001db2 <__aeabi_dsub+0xca>
 8001db0:	e13d      	b.n	800202e <__aeabi_dsub+0x346>
 8001db2:	0264      	lsls	r4, r4, #9
 8001db4:	0a64      	lsrs	r4, r4, #9
 8001db6:	2c00      	cmp	r4, #0
 8001db8:	d100      	bne.n	8001dbc <__aeabi_dsub+0xd4>
 8001dba:	e147      	b.n	800204c <__aeabi_dsub+0x364>
 8001dbc:	0020      	movs	r0, r4
 8001dbe:	f000 fc63 	bl	8002688 <__clzsi2>
 8001dc2:	0003      	movs	r3, r0
 8001dc4:	3b08      	subs	r3, #8
 8001dc6:	2120      	movs	r1, #32
 8001dc8:	0028      	movs	r0, r5
 8001dca:	1aca      	subs	r2, r1, r3
 8001dcc:	40d0      	lsrs	r0, r2
 8001dce:	409c      	lsls	r4, r3
 8001dd0:	0002      	movs	r2, r0
 8001dd2:	409d      	lsls	r5, r3
 8001dd4:	4322      	orrs	r2, r4
 8001dd6:	429f      	cmp	r7, r3
 8001dd8:	dd00      	ble.n	8001ddc <__aeabi_dsub+0xf4>
 8001dda:	e177      	b.n	80020cc <__aeabi_dsub+0x3e4>
 8001ddc:	1bd8      	subs	r0, r3, r7
 8001dde:	3001      	adds	r0, #1
 8001de0:	1a09      	subs	r1, r1, r0
 8001de2:	002c      	movs	r4, r5
 8001de4:	408d      	lsls	r5, r1
 8001de6:	40c4      	lsrs	r4, r0
 8001de8:	1e6b      	subs	r3, r5, #1
 8001dea:	419d      	sbcs	r5, r3
 8001dec:	0013      	movs	r3, r2
 8001dee:	40c2      	lsrs	r2, r0
 8001df0:	408b      	lsls	r3, r1
 8001df2:	4325      	orrs	r5, r4
 8001df4:	2700      	movs	r7, #0
 8001df6:	0014      	movs	r4, r2
 8001df8:	431d      	orrs	r5, r3
 8001dfa:	076b      	lsls	r3, r5, #29
 8001dfc:	d009      	beq.n	8001e12 <__aeabi_dsub+0x12a>
 8001dfe:	230f      	movs	r3, #15
 8001e00:	402b      	ands	r3, r5
 8001e02:	2b04      	cmp	r3, #4
 8001e04:	d005      	beq.n	8001e12 <__aeabi_dsub+0x12a>
 8001e06:	1d2b      	adds	r3, r5, #4
 8001e08:	42ab      	cmp	r3, r5
 8001e0a:	41ad      	sbcs	r5, r5
 8001e0c:	426d      	negs	r5, r5
 8001e0e:	1964      	adds	r4, r4, r5
 8001e10:	001d      	movs	r5, r3
 8001e12:	0223      	lsls	r3, r4, #8
 8001e14:	d400      	bmi.n	8001e18 <__aeabi_dsub+0x130>
 8001e16:	e140      	b.n	800209a <__aeabi_dsub+0x3b2>
 8001e18:	4a88      	ldr	r2, [pc, #544]	@ (800203c <__aeabi_dsub+0x354>)
 8001e1a:	3701      	adds	r7, #1
 8001e1c:	4297      	cmp	r7, r2
 8001e1e:	d100      	bne.n	8001e22 <__aeabi_dsub+0x13a>
 8001e20:	e101      	b.n	8002026 <__aeabi_dsub+0x33e>
 8001e22:	2601      	movs	r6, #1
 8001e24:	4643      	mov	r3, r8
 8001e26:	4986      	ldr	r1, [pc, #536]	@ (8002040 <__aeabi_dsub+0x358>)
 8001e28:	08ed      	lsrs	r5, r5, #3
 8001e2a:	4021      	ands	r1, r4
 8001e2c:	074a      	lsls	r2, r1, #29
 8001e2e:	432a      	orrs	r2, r5
 8001e30:	057c      	lsls	r4, r7, #21
 8001e32:	024d      	lsls	r5, r1, #9
 8001e34:	0b2d      	lsrs	r5, r5, #12
 8001e36:	0d64      	lsrs	r4, r4, #21
 8001e38:	401e      	ands	r6, r3
 8001e3a:	0524      	lsls	r4, r4, #20
 8001e3c:	432c      	orrs	r4, r5
 8001e3e:	07f6      	lsls	r6, r6, #31
 8001e40:	4334      	orrs	r4, r6
 8001e42:	0010      	movs	r0, r2
 8001e44:	0021      	movs	r1, r4
 8001e46:	b005      	add	sp, #20
 8001e48:	bcf0      	pop	{r4, r5, r6, r7}
 8001e4a:	46bb      	mov	fp, r7
 8001e4c:	46b2      	mov	sl, r6
 8001e4e:	46a9      	mov	r9, r5
 8001e50:	46a0      	mov	r8, r4
 8001e52:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e54:	2d00      	cmp	r5, #0
 8001e56:	dc00      	bgt.n	8001e5a <__aeabi_dsub+0x172>
 8001e58:	e2d0      	b.n	80023fc <__aeabi_dsub+0x714>
 8001e5a:	4649      	mov	r1, r9
 8001e5c:	2900      	cmp	r1, #0
 8001e5e:	d000      	beq.n	8001e62 <__aeabi_dsub+0x17a>
 8001e60:	e0d4      	b.n	800200c <__aeabi_dsub+0x324>
 8001e62:	4661      	mov	r1, ip
 8001e64:	9b02      	ldr	r3, [sp, #8]
 8001e66:	4319      	orrs	r1, r3
 8001e68:	d100      	bne.n	8001e6c <__aeabi_dsub+0x184>
 8001e6a:	e12b      	b.n	80020c4 <__aeabi_dsub+0x3dc>
 8001e6c:	1e69      	subs	r1, r5, #1
 8001e6e:	2d01      	cmp	r5, #1
 8001e70:	d100      	bne.n	8001e74 <__aeabi_dsub+0x18c>
 8001e72:	e1d9      	b.n	8002228 <__aeabi_dsub+0x540>
 8001e74:	4295      	cmp	r5, r2
 8001e76:	d100      	bne.n	8001e7a <__aeabi_dsub+0x192>
 8001e78:	e10a      	b.n	8002090 <__aeabi_dsub+0x3a8>
 8001e7a:	2501      	movs	r5, #1
 8001e7c:	2938      	cmp	r1, #56	@ 0x38
 8001e7e:	dc17      	bgt.n	8001eb0 <__aeabi_dsub+0x1c8>
 8001e80:	468a      	mov	sl, r1
 8001e82:	4653      	mov	r3, sl
 8001e84:	2b1f      	cmp	r3, #31
 8001e86:	dd00      	ble.n	8001e8a <__aeabi_dsub+0x1a2>
 8001e88:	e1e7      	b.n	800225a <__aeabi_dsub+0x572>
 8001e8a:	2220      	movs	r2, #32
 8001e8c:	1ad2      	subs	r2, r2, r3
 8001e8e:	9b02      	ldr	r3, [sp, #8]
 8001e90:	4661      	mov	r1, ip
 8001e92:	4093      	lsls	r3, r2
 8001e94:	001d      	movs	r5, r3
 8001e96:	4653      	mov	r3, sl
 8001e98:	40d9      	lsrs	r1, r3
 8001e9a:	4663      	mov	r3, ip
 8001e9c:	4093      	lsls	r3, r2
 8001e9e:	001a      	movs	r2, r3
 8001ea0:	430d      	orrs	r5, r1
 8001ea2:	1e51      	subs	r1, r2, #1
 8001ea4:	418a      	sbcs	r2, r1
 8001ea6:	4653      	mov	r3, sl
 8001ea8:	4315      	orrs	r5, r2
 8001eaa:	9a02      	ldr	r2, [sp, #8]
 8001eac:	40da      	lsrs	r2, r3
 8001eae:	18a4      	adds	r4, r4, r2
 8001eb0:	182d      	adds	r5, r5, r0
 8001eb2:	4285      	cmp	r5, r0
 8001eb4:	4180      	sbcs	r0, r0
 8001eb6:	4240      	negs	r0, r0
 8001eb8:	1824      	adds	r4, r4, r0
 8001eba:	0223      	lsls	r3, r4, #8
 8001ebc:	d400      	bmi.n	8001ec0 <__aeabi_dsub+0x1d8>
 8001ebe:	e0b6      	b.n	800202e <__aeabi_dsub+0x346>
 8001ec0:	4b5e      	ldr	r3, [pc, #376]	@ (800203c <__aeabi_dsub+0x354>)
 8001ec2:	3701      	adds	r7, #1
 8001ec4:	429f      	cmp	r7, r3
 8001ec6:	d100      	bne.n	8001eca <__aeabi_dsub+0x1e2>
 8001ec8:	e0ad      	b.n	8002026 <__aeabi_dsub+0x33e>
 8001eca:	2101      	movs	r1, #1
 8001ecc:	4b5c      	ldr	r3, [pc, #368]	@ (8002040 <__aeabi_dsub+0x358>)
 8001ece:	086a      	lsrs	r2, r5, #1
 8001ed0:	401c      	ands	r4, r3
 8001ed2:	4029      	ands	r1, r5
 8001ed4:	430a      	orrs	r2, r1
 8001ed6:	07e5      	lsls	r5, r4, #31
 8001ed8:	4315      	orrs	r5, r2
 8001eda:	0864      	lsrs	r4, r4, #1
 8001edc:	e78d      	b.n	8001dfa <__aeabi_dsub+0x112>
 8001ede:	4a59      	ldr	r2, [pc, #356]	@ (8002044 <__aeabi_dsub+0x35c>)
 8001ee0:	9b02      	ldr	r3, [sp, #8]
 8001ee2:	4692      	mov	sl, r2
 8001ee4:	4662      	mov	r2, ip
 8001ee6:	44ba      	add	sl, r7
 8001ee8:	431a      	orrs	r2, r3
 8001eea:	d02c      	beq.n	8001f46 <__aeabi_dsub+0x25e>
 8001eec:	428e      	cmp	r6, r1
 8001eee:	d02e      	beq.n	8001f4e <__aeabi_dsub+0x266>
 8001ef0:	4652      	mov	r2, sl
 8001ef2:	2a00      	cmp	r2, #0
 8001ef4:	d060      	beq.n	8001fb8 <__aeabi_dsub+0x2d0>
 8001ef6:	2f00      	cmp	r7, #0
 8001ef8:	d100      	bne.n	8001efc <__aeabi_dsub+0x214>
 8001efa:	e0db      	b.n	80020b4 <__aeabi_dsub+0x3cc>
 8001efc:	4663      	mov	r3, ip
 8001efe:	000e      	movs	r6, r1
 8001f00:	9c02      	ldr	r4, [sp, #8]
 8001f02:	08d8      	lsrs	r0, r3, #3
 8001f04:	0762      	lsls	r2, r4, #29
 8001f06:	4302      	orrs	r2, r0
 8001f08:	08e4      	lsrs	r4, r4, #3
 8001f0a:	0013      	movs	r3, r2
 8001f0c:	4323      	orrs	r3, r4
 8001f0e:	d100      	bne.n	8001f12 <__aeabi_dsub+0x22a>
 8001f10:	e254      	b.n	80023bc <__aeabi_dsub+0x6d4>
 8001f12:	2580      	movs	r5, #128	@ 0x80
 8001f14:	032d      	lsls	r5, r5, #12
 8001f16:	4325      	orrs	r5, r4
 8001f18:	032d      	lsls	r5, r5, #12
 8001f1a:	4c48      	ldr	r4, [pc, #288]	@ (800203c <__aeabi_dsub+0x354>)
 8001f1c:	0b2d      	lsrs	r5, r5, #12
 8001f1e:	e78c      	b.n	8001e3a <__aeabi_dsub+0x152>
 8001f20:	4661      	mov	r1, ip
 8001f22:	9b02      	ldr	r3, [sp, #8]
 8001f24:	4319      	orrs	r1, r3
 8001f26:	d100      	bne.n	8001f2a <__aeabi_dsub+0x242>
 8001f28:	e0cc      	b.n	80020c4 <__aeabi_dsub+0x3dc>
 8001f2a:	0029      	movs	r1, r5
 8001f2c:	3901      	subs	r1, #1
 8001f2e:	2d01      	cmp	r5, #1
 8001f30:	d100      	bne.n	8001f34 <__aeabi_dsub+0x24c>
 8001f32:	e188      	b.n	8002246 <__aeabi_dsub+0x55e>
 8001f34:	4295      	cmp	r5, r2
 8001f36:	d100      	bne.n	8001f3a <__aeabi_dsub+0x252>
 8001f38:	e0aa      	b.n	8002090 <__aeabi_dsub+0x3a8>
 8001f3a:	2501      	movs	r5, #1
 8001f3c:	2938      	cmp	r1, #56	@ 0x38
 8001f3e:	dd00      	ble.n	8001f42 <__aeabi_dsub+0x25a>
 8001f40:	e72f      	b.n	8001da2 <__aeabi_dsub+0xba>
 8001f42:	468a      	mov	sl, r1
 8001f44:	e718      	b.n	8001d78 <__aeabi_dsub+0x90>
 8001f46:	2201      	movs	r2, #1
 8001f48:	4051      	eors	r1, r2
 8001f4a:	428e      	cmp	r6, r1
 8001f4c:	d1d0      	bne.n	8001ef0 <__aeabi_dsub+0x208>
 8001f4e:	4653      	mov	r3, sl
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d100      	bne.n	8001f56 <__aeabi_dsub+0x26e>
 8001f54:	e0be      	b.n	80020d4 <__aeabi_dsub+0x3ec>
 8001f56:	2f00      	cmp	r7, #0
 8001f58:	d000      	beq.n	8001f5c <__aeabi_dsub+0x274>
 8001f5a:	e138      	b.n	80021ce <__aeabi_dsub+0x4e6>
 8001f5c:	46ca      	mov	sl, r9
 8001f5e:	0022      	movs	r2, r4
 8001f60:	4302      	orrs	r2, r0
 8001f62:	d100      	bne.n	8001f66 <__aeabi_dsub+0x27e>
 8001f64:	e1e2      	b.n	800232c <__aeabi_dsub+0x644>
 8001f66:	4653      	mov	r3, sl
 8001f68:	1e59      	subs	r1, r3, #1
 8001f6a:	2b01      	cmp	r3, #1
 8001f6c:	d100      	bne.n	8001f70 <__aeabi_dsub+0x288>
 8001f6e:	e20d      	b.n	800238c <__aeabi_dsub+0x6a4>
 8001f70:	4a32      	ldr	r2, [pc, #200]	@ (800203c <__aeabi_dsub+0x354>)
 8001f72:	4592      	cmp	sl, r2
 8001f74:	d100      	bne.n	8001f78 <__aeabi_dsub+0x290>
 8001f76:	e1d2      	b.n	800231e <__aeabi_dsub+0x636>
 8001f78:	2701      	movs	r7, #1
 8001f7a:	2938      	cmp	r1, #56	@ 0x38
 8001f7c:	dc13      	bgt.n	8001fa6 <__aeabi_dsub+0x2be>
 8001f7e:	291f      	cmp	r1, #31
 8001f80:	dd00      	ble.n	8001f84 <__aeabi_dsub+0x29c>
 8001f82:	e1ee      	b.n	8002362 <__aeabi_dsub+0x67a>
 8001f84:	2220      	movs	r2, #32
 8001f86:	9b02      	ldr	r3, [sp, #8]
 8001f88:	1a52      	subs	r2, r2, r1
 8001f8a:	0025      	movs	r5, r4
 8001f8c:	0007      	movs	r7, r0
 8001f8e:	469a      	mov	sl, r3
 8001f90:	40cc      	lsrs	r4, r1
 8001f92:	4090      	lsls	r0, r2
 8001f94:	4095      	lsls	r5, r2
 8001f96:	40cf      	lsrs	r7, r1
 8001f98:	44a2      	add	sl, r4
 8001f9a:	1e42      	subs	r2, r0, #1
 8001f9c:	4190      	sbcs	r0, r2
 8001f9e:	4653      	mov	r3, sl
 8001fa0:	432f      	orrs	r7, r5
 8001fa2:	4307      	orrs	r7, r0
 8001fa4:	9302      	str	r3, [sp, #8]
 8001fa6:	003d      	movs	r5, r7
 8001fa8:	4465      	add	r5, ip
 8001faa:	4565      	cmp	r5, ip
 8001fac:	4192      	sbcs	r2, r2
 8001fae:	9b02      	ldr	r3, [sp, #8]
 8001fb0:	4252      	negs	r2, r2
 8001fb2:	464f      	mov	r7, r9
 8001fb4:	18d4      	adds	r4, r2, r3
 8001fb6:	e780      	b.n	8001eba <__aeabi_dsub+0x1d2>
 8001fb8:	4a23      	ldr	r2, [pc, #140]	@ (8002048 <__aeabi_dsub+0x360>)
 8001fba:	1c7d      	adds	r5, r7, #1
 8001fbc:	4215      	tst	r5, r2
 8001fbe:	d000      	beq.n	8001fc2 <__aeabi_dsub+0x2da>
 8001fc0:	e0aa      	b.n	8002118 <__aeabi_dsub+0x430>
 8001fc2:	4662      	mov	r2, ip
 8001fc4:	0025      	movs	r5, r4
 8001fc6:	9b02      	ldr	r3, [sp, #8]
 8001fc8:	4305      	orrs	r5, r0
 8001fca:	431a      	orrs	r2, r3
 8001fcc:	2f00      	cmp	r7, #0
 8001fce:	d000      	beq.n	8001fd2 <__aeabi_dsub+0x2ea>
 8001fd0:	e0f5      	b.n	80021be <__aeabi_dsub+0x4d6>
 8001fd2:	2d00      	cmp	r5, #0
 8001fd4:	d100      	bne.n	8001fd8 <__aeabi_dsub+0x2f0>
 8001fd6:	e16b      	b.n	80022b0 <__aeabi_dsub+0x5c8>
 8001fd8:	2a00      	cmp	r2, #0
 8001fda:	d100      	bne.n	8001fde <__aeabi_dsub+0x2f6>
 8001fdc:	e152      	b.n	8002284 <__aeabi_dsub+0x59c>
 8001fde:	4663      	mov	r3, ip
 8001fe0:	1ac5      	subs	r5, r0, r3
 8001fe2:	9b02      	ldr	r3, [sp, #8]
 8001fe4:	1ae2      	subs	r2, r4, r3
 8001fe6:	42a8      	cmp	r0, r5
 8001fe8:	419b      	sbcs	r3, r3
 8001fea:	425b      	negs	r3, r3
 8001fec:	1ad3      	subs	r3, r2, r3
 8001fee:	021a      	lsls	r2, r3, #8
 8001ff0:	d400      	bmi.n	8001ff4 <__aeabi_dsub+0x30c>
 8001ff2:	e1d5      	b.n	80023a0 <__aeabi_dsub+0x6b8>
 8001ff4:	4663      	mov	r3, ip
 8001ff6:	1a1d      	subs	r5, r3, r0
 8001ff8:	45ac      	cmp	ip, r5
 8001ffa:	4192      	sbcs	r2, r2
 8001ffc:	2601      	movs	r6, #1
 8001ffe:	9b02      	ldr	r3, [sp, #8]
 8002000:	4252      	negs	r2, r2
 8002002:	1b1c      	subs	r4, r3, r4
 8002004:	4688      	mov	r8, r1
 8002006:	1aa4      	subs	r4, r4, r2
 8002008:	400e      	ands	r6, r1
 800200a:	e6f6      	b.n	8001dfa <__aeabi_dsub+0x112>
 800200c:	4297      	cmp	r7, r2
 800200e:	d03f      	beq.n	8002090 <__aeabi_dsub+0x3a8>
 8002010:	4652      	mov	r2, sl
 8002012:	2501      	movs	r5, #1
 8002014:	2a38      	cmp	r2, #56	@ 0x38
 8002016:	dd00      	ble.n	800201a <__aeabi_dsub+0x332>
 8002018:	e74a      	b.n	8001eb0 <__aeabi_dsub+0x1c8>
 800201a:	2280      	movs	r2, #128	@ 0x80
 800201c:	9b02      	ldr	r3, [sp, #8]
 800201e:	0412      	lsls	r2, r2, #16
 8002020:	4313      	orrs	r3, r2
 8002022:	9302      	str	r3, [sp, #8]
 8002024:	e72d      	b.n	8001e82 <__aeabi_dsub+0x19a>
 8002026:	003c      	movs	r4, r7
 8002028:	2500      	movs	r5, #0
 800202a:	2200      	movs	r2, #0
 800202c:	e705      	b.n	8001e3a <__aeabi_dsub+0x152>
 800202e:	2307      	movs	r3, #7
 8002030:	402b      	ands	r3, r5
 8002032:	2b00      	cmp	r3, #0
 8002034:	d000      	beq.n	8002038 <__aeabi_dsub+0x350>
 8002036:	e6e2      	b.n	8001dfe <__aeabi_dsub+0x116>
 8002038:	e06b      	b.n	8002112 <__aeabi_dsub+0x42a>
 800203a:	46c0      	nop			@ (mov r8, r8)
 800203c:	000007ff 	.word	0x000007ff
 8002040:	ff7fffff 	.word	0xff7fffff
 8002044:	fffff801 	.word	0xfffff801
 8002048:	000007fe 	.word	0x000007fe
 800204c:	0028      	movs	r0, r5
 800204e:	f000 fb1b 	bl	8002688 <__clzsi2>
 8002052:	0003      	movs	r3, r0
 8002054:	3318      	adds	r3, #24
 8002056:	2b1f      	cmp	r3, #31
 8002058:	dc00      	bgt.n	800205c <__aeabi_dsub+0x374>
 800205a:	e6b4      	b.n	8001dc6 <__aeabi_dsub+0xde>
 800205c:	002a      	movs	r2, r5
 800205e:	3808      	subs	r0, #8
 8002060:	4082      	lsls	r2, r0
 8002062:	429f      	cmp	r7, r3
 8002064:	dd00      	ble.n	8002068 <__aeabi_dsub+0x380>
 8002066:	e0b9      	b.n	80021dc <__aeabi_dsub+0x4f4>
 8002068:	1bdb      	subs	r3, r3, r7
 800206a:	1c58      	adds	r0, r3, #1
 800206c:	281f      	cmp	r0, #31
 800206e:	dc00      	bgt.n	8002072 <__aeabi_dsub+0x38a>
 8002070:	e1a0      	b.n	80023b4 <__aeabi_dsub+0x6cc>
 8002072:	0015      	movs	r5, r2
 8002074:	3b1f      	subs	r3, #31
 8002076:	40dd      	lsrs	r5, r3
 8002078:	2820      	cmp	r0, #32
 800207a:	d005      	beq.n	8002088 <__aeabi_dsub+0x3a0>
 800207c:	2340      	movs	r3, #64	@ 0x40
 800207e:	1a1b      	subs	r3, r3, r0
 8002080:	409a      	lsls	r2, r3
 8002082:	1e53      	subs	r3, r2, #1
 8002084:	419a      	sbcs	r2, r3
 8002086:	4315      	orrs	r5, r2
 8002088:	2307      	movs	r3, #7
 800208a:	2700      	movs	r7, #0
 800208c:	402b      	ands	r3, r5
 800208e:	e7d0      	b.n	8002032 <__aeabi_dsub+0x34a>
 8002090:	08c0      	lsrs	r0, r0, #3
 8002092:	0762      	lsls	r2, r4, #29
 8002094:	4302      	orrs	r2, r0
 8002096:	08e4      	lsrs	r4, r4, #3
 8002098:	e737      	b.n	8001f0a <__aeabi_dsub+0x222>
 800209a:	08ea      	lsrs	r2, r5, #3
 800209c:	0763      	lsls	r3, r4, #29
 800209e:	431a      	orrs	r2, r3
 80020a0:	4bd3      	ldr	r3, [pc, #844]	@ (80023f0 <__aeabi_dsub+0x708>)
 80020a2:	08e4      	lsrs	r4, r4, #3
 80020a4:	429f      	cmp	r7, r3
 80020a6:	d100      	bne.n	80020aa <__aeabi_dsub+0x3c2>
 80020a8:	e72f      	b.n	8001f0a <__aeabi_dsub+0x222>
 80020aa:	0324      	lsls	r4, r4, #12
 80020ac:	0b25      	lsrs	r5, r4, #12
 80020ae:	057c      	lsls	r4, r7, #21
 80020b0:	0d64      	lsrs	r4, r4, #21
 80020b2:	e6c2      	b.n	8001e3a <__aeabi_dsub+0x152>
 80020b4:	46ca      	mov	sl, r9
 80020b6:	0022      	movs	r2, r4
 80020b8:	4302      	orrs	r2, r0
 80020ba:	d158      	bne.n	800216e <__aeabi_dsub+0x486>
 80020bc:	4663      	mov	r3, ip
 80020be:	000e      	movs	r6, r1
 80020c0:	9c02      	ldr	r4, [sp, #8]
 80020c2:	9303      	str	r3, [sp, #12]
 80020c4:	9b03      	ldr	r3, [sp, #12]
 80020c6:	4657      	mov	r7, sl
 80020c8:	08da      	lsrs	r2, r3, #3
 80020ca:	e7e7      	b.n	800209c <__aeabi_dsub+0x3b4>
 80020cc:	4cc9      	ldr	r4, [pc, #804]	@ (80023f4 <__aeabi_dsub+0x70c>)
 80020ce:	1aff      	subs	r7, r7, r3
 80020d0:	4014      	ands	r4, r2
 80020d2:	e692      	b.n	8001dfa <__aeabi_dsub+0x112>
 80020d4:	4dc8      	ldr	r5, [pc, #800]	@ (80023f8 <__aeabi_dsub+0x710>)
 80020d6:	1c7a      	adds	r2, r7, #1
 80020d8:	422a      	tst	r2, r5
 80020da:	d000      	beq.n	80020de <__aeabi_dsub+0x3f6>
 80020dc:	e084      	b.n	80021e8 <__aeabi_dsub+0x500>
 80020de:	0022      	movs	r2, r4
 80020e0:	4302      	orrs	r2, r0
 80020e2:	2f00      	cmp	r7, #0
 80020e4:	d000      	beq.n	80020e8 <__aeabi_dsub+0x400>
 80020e6:	e0ef      	b.n	80022c8 <__aeabi_dsub+0x5e0>
 80020e8:	2a00      	cmp	r2, #0
 80020ea:	d100      	bne.n	80020ee <__aeabi_dsub+0x406>
 80020ec:	e0e5      	b.n	80022ba <__aeabi_dsub+0x5d2>
 80020ee:	4662      	mov	r2, ip
 80020f0:	9902      	ldr	r1, [sp, #8]
 80020f2:	430a      	orrs	r2, r1
 80020f4:	d100      	bne.n	80020f8 <__aeabi_dsub+0x410>
 80020f6:	e0c5      	b.n	8002284 <__aeabi_dsub+0x59c>
 80020f8:	4663      	mov	r3, ip
 80020fa:	18c5      	adds	r5, r0, r3
 80020fc:	468c      	mov	ip, r1
 80020fe:	4285      	cmp	r5, r0
 8002100:	4180      	sbcs	r0, r0
 8002102:	4464      	add	r4, ip
 8002104:	4240      	negs	r0, r0
 8002106:	1824      	adds	r4, r4, r0
 8002108:	0223      	lsls	r3, r4, #8
 800210a:	d502      	bpl.n	8002112 <__aeabi_dsub+0x42a>
 800210c:	4bb9      	ldr	r3, [pc, #740]	@ (80023f4 <__aeabi_dsub+0x70c>)
 800210e:	3701      	adds	r7, #1
 8002110:	401c      	ands	r4, r3
 8002112:	46ba      	mov	sl, r7
 8002114:	9503      	str	r5, [sp, #12]
 8002116:	e7d5      	b.n	80020c4 <__aeabi_dsub+0x3dc>
 8002118:	4662      	mov	r2, ip
 800211a:	1a85      	subs	r5, r0, r2
 800211c:	42a8      	cmp	r0, r5
 800211e:	4192      	sbcs	r2, r2
 8002120:	4252      	negs	r2, r2
 8002122:	4691      	mov	r9, r2
 8002124:	9b02      	ldr	r3, [sp, #8]
 8002126:	1ae3      	subs	r3, r4, r3
 8002128:	001a      	movs	r2, r3
 800212a:	464b      	mov	r3, r9
 800212c:	1ad2      	subs	r2, r2, r3
 800212e:	0013      	movs	r3, r2
 8002130:	4691      	mov	r9, r2
 8002132:	021a      	lsls	r2, r3, #8
 8002134:	d46c      	bmi.n	8002210 <__aeabi_dsub+0x528>
 8002136:	464a      	mov	r2, r9
 8002138:	464c      	mov	r4, r9
 800213a:	432a      	orrs	r2, r5
 800213c:	d000      	beq.n	8002140 <__aeabi_dsub+0x458>
 800213e:	e63a      	b.n	8001db6 <__aeabi_dsub+0xce>
 8002140:	2600      	movs	r6, #0
 8002142:	2400      	movs	r4, #0
 8002144:	2500      	movs	r5, #0
 8002146:	e678      	b.n	8001e3a <__aeabi_dsub+0x152>
 8002148:	9902      	ldr	r1, [sp, #8]
 800214a:	4653      	mov	r3, sl
 800214c:	000d      	movs	r5, r1
 800214e:	3a20      	subs	r2, #32
 8002150:	40d5      	lsrs	r5, r2
 8002152:	2b20      	cmp	r3, #32
 8002154:	d006      	beq.n	8002164 <__aeabi_dsub+0x47c>
 8002156:	2240      	movs	r2, #64	@ 0x40
 8002158:	1ad2      	subs	r2, r2, r3
 800215a:	000b      	movs	r3, r1
 800215c:	4093      	lsls	r3, r2
 800215e:	4662      	mov	r2, ip
 8002160:	431a      	orrs	r2, r3
 8002162:	4693      	mov	fp, r2
 8002164:	465b      	mov	r3, fp
 8002166:	1e5a      	subs	r2, r3, #1
 8002168:	4193      	sbcs	r3, r2
 800216a:	431d      	orrs	r5, r3
 800216c:	e619      	b.n	8001da2 <__aeabi_dsub+0xba>
 800216e:	4653      	mov	r3, sl
 8002170:	1e5a      	subs	r2, r3, #1
 8002172:	2b01      	cmp	r3, #1
 8002174:	d100      	bne.n	8002178 <__aeabi_dsub+0x490>
 8002176:	e0c6      	b.n	8002306 <__aeabi_dsub+0x61e>
 8002178:	4e9d      	ldr	r6, [pc, #628]	@ (80023f0 <__aeabi_dsub+0x708>)
 800217a:	45b2      	cmp	sl, r6
 800217c:	d100      	bne.n	8002180 <__aeabi_dsub+0x498>
 800217e:	e6bd      	b.n	8001efc <__aeabi_dsub+0x214>
 8002180:	4688      	mov	r8, r1
 8002182:	000e      	movs	r6, r1
 8002184:	2501      	movs	r5, #1
 8002186:	2a38      	cmp	r2, #56	@ 0x38
 8002188:	dc10      	bgt.n	80021ac <__aeabi_dsub+0x4c4>
 800218a:	2a1f      	cmp	r2, #31
 800218c:	dc7f      	bgt.n	800228e <__aeabi_dsub+0x5a6>
 800218e:	2120      	movs	r1, #32
 8002190:	0025      	movs	r5, r4
 8002192:	1a89      	subs	r1, r1, r2
 8002194:	0007      	movs	r7, r0
 8002196:	4088      	lsls	r0, r1
 8002198:	408d      	lsls	r5, r1
 800219a:	40d7      	lsrs	r7, r2
 800219c:	40d4      	lsrs	r4, r2
 800219e:	1e41      	subs	r1, r0, #1
 80021a0:	4188      	sbcs	r0, r1
 80021a2:	9b02      	ldr	r3, [sp, #8]
 80021a4:	433d      	orrs	r5, r7
 80021a6:	1b1b      	subs	r3, r3, r4
 80021a8:	4305      	orrs	r5, r0
 80021aa:	9302      	str	r3, [sp, #8]
 80021ac:	4662      	mov	r2, ip
 80021ae:	1b55      	subs	r5, r2, r5
 80021b0:	45ac      	cmp	ip, r5
 80021b2:	4192      	sbcs	r2, r2
 80021b4:	9b02      	ldr	r3, [sp, #8]
 80021b6:	4252      	negs	r2, r2
 80021b8:	464f      	mov	r7, r9
 80021ba:	1a9c      	subs	r4, r3, r2
 80021bc:	e5f6      	b.n	8001dac <__aeabi_dsub+0xc4>
 80021be:	2d00      	cmp	r5, #0
 80021c0:	d000      	beq.n	80021c4 <__aeabi_dsub+0x4dc>
 80021c2:	e0b7      	b.n	8002334 <__aeabi_dsub+0x64c>
 80021c4:	2a00      	cmp	r2, #0
 80021c6:	d100      	bne.n	80021ca <__aeabi_dsub+0x4e2>
 80021c8:	e0f0      	b.n	80023ac <__aeabi_dsub+0x6c4>
 80021ca:	2601      	movs	r6, #1
 80021cc:	400e      	ands	r6, r1
 80021ce:	4663      	mov	r3, ip
 80021d0:	9802      	ldr	r0, [sp, #8]
 80021d2:	08d9      	lsrs	r1, r3, #3
 80021d4:	0742      	lsls	r2, r0, #29
 80021d6:	430a      	orrs	r2, r1
 80021d8:	08c4      	lsrs	r4, r0, #3
 80021da:	e696      	b.n	8001f0a <__aeabi_dsub+0x222>
 80021dc:	4c85      	ldr	r4, [pc, #532]	@ (80023f4 <__aeabi_dsub+0x70c>)
 80021de:	1aff      	subs	r7, r7, r3
 80021e0:	4014      	ands	r4, r2
 80021e2:	0762      	lsls	r2, r4, #29
 80021e4:	08e4      	lsrs	r4, r4, #3
 80021e6:	e760      	b.n	80020aa <__aeabi_dsub+0x3c2>
 80021e8:	4981      	ldr	r1, [pc, #516]	@ (80023f0 <__aeabi_dsub+0x708>)
 80021ea:	428a      	cmp	r2, r1
 80021ec:	d100      	bne.n	80021f0 <__aeabi_dsub+0x508>
 80021ee:	e0c9      	b.n	8002384 <__aeabi_dsub+0x69c>
 80021f0:	4663      	mov	r3, ip
 80021f2:	18c1      	adds	r1, r0, r3
 80021f4:	4281      	cmp	r1, r0
 80021f6:	4180      	sbcs	r0, r0
 80021f8:	9b02      	ldr	r3, [sp, #8]
 80021fa:	4240      	negs	r0, r0
 80021fc:	18e3      	adds	r3, r4, r3
 80021fe:	181b      	adds	r3, r3, r0
 8002200:	07dd      	lsls	r5, r3, #31
 8002202:	085c      	lsrs	r4, r3, #1
 8002204:	2307      	movs	r3, #7
 8002206:	0849      	lsrs	r1, r1, #1
 8002208:	430d      	orrs	r5, r1
 800220a:	0017      	movs	r7, r2
 800220c:	402b      	ands	r3, r5
 800220e:	e710      	b.n	8002032 <__aeabi_dsub+0x34a>
 8002210:	4663      	mov	r3, ip
 8002212:	1a1d      	subs	r5, r3, r0
 8002214:	45ac      	cmp	ip, r5
 8002216:	4192      	sbcs	r2, r2
 8002218:	2601      	movs	r6, #1
 800221a:	9b02      	ldr	r3, [sp, #8]
 800221c:	4252      	negs	r2, r2
 800221e:	1b1c      	subs	r4, r3, r4
 8002220:	4688      	mov	r8, r1
 8002222:	1aa4      	subs	r4, r4, r2
 8002224:	400e      	ands	r6, r1
 8002226:	e5c6      	b.n	8001db6 <__aeabi_dsub+0xce>
 8002228:	4663      	mov	r3, ip
 800222a:	18c5      	adds	r5, r0, r3
 800222c:	9b02      	ldr	r3, [sp, #8]
 800222e:	4285      	cmp	r5, r0
 8002230:	4180      	sbcs	r0, r0
 8002232:	469c      	mov	ip, r3
 8002234:	4240      	negs	r0, r0
 8002236:	4464      	add	r4, ip
 8002238:	1824      	adds	r4, r4, r0
 800223a:	2701      	movs	r7, #1
 800223c:	0223      	lsls	r3, r4, #8
 800223e:	d400      	bmi.n	8002242 <__aeabi_dsub+0x55a>
 8002240:	e6f5      	b.n	800202e <__aeabi_dsub+0x346>
 8002242:	2702      	movs	r7, #2
 8002244:	e641      	b.n	8001eca <__aeabi_dsub+0x1e2>
 8002246:	4663      	mov	r3, ip
 8002248:	1ac5      	subs	r5, r0, r3
 800224a:	42a8      	cmp	r0, r5
 800224c:	4180      	sbcs	r0, r0
 800224e:	9b02      	ldr	r3, [sp, #8]
 8002250:	4240      	negs	r0, r0
 8002252:	1ae4      	subs	r4, r4, r3
 8002254:	2701      	movs	r7, #1
 8002256:	1a24      	subs	r4, r4, r0
 8002258:	e5a8      	b.n	8001dac <__aeabi_dsub+0xc4>
 800225a:	9d02      	ldr	r5, [sp, #8]
 800225c:	4652      	mov	r2, sl
 800225e:	002b      	movs	r3, r5
 8002260:	3a20      	subs	r2, #32
 8002262:	40d3      	lsrs	r3, r2
 8002264:	0019      	movs	r1, r3
 8002266:	4653      	mov	r3, sl
 8002268:	2b20      	cmp	r3, #32
 800226a:	d006      	beq.n	800227a <__aeabi_dsub+0x592>
 800226c:	2240      	movs	r2, #64	@ 0x40
 800226e:	1ad2      	subs	r2, r2, r3
 8002270:	002b      	movs	r3, r5
 8002272:	4093      	lsls	r3, r2
 8002274:	4662      	mov	r2, ip
 8002276:	431a      	orrs	r2, r3
 8002278:	4693      	mov	fp, r2
 800227a:	465d      	mov	r5, fp
 800227c:	1e6b      	subs	r3, r5, #1
 800227e:	419d      	sbcs	r5, r3
 8002280:	430d      	orrs	r5, r1
 8002282:	e615      	b.n	8001eb0 <__aeabi_dsub+0x1c8>
 8002284:	0762      	lsls	r2, r4, #29
 8002286:	08c0      	lsrs	r0, r0, #3
 8002288:	4302      	orrs	r2, r0
 800228a:	08e4      	lsrs	r4, r4, #3
 800228c:	e70d      	b.n	80020aa <__aeabi_dsub+0x3c2>
 800228e:	0011      	movs	r1, r2
 8002290:	0027      	movs	r7, r4
 8002292:	3920      	subs	r1, #32
 8002294:	40cf      	lsrs	r7, r1
 8002296:	2a20      	cmp	r2, #32
 8002298:	d005      	beq.n	80022a6 <__aeabi_dsub+0x5be>
 800229a:	2140      	movs	r1, #64	@ 0x40
 800229c:	1a8a      	subs	r2, r1, r2
 800229e:	4094      	lsls	r4, r2
 80022a0:	0025      	movs	r5, r4
 80022a2:	4305      	orrs	r5, r0
 80022a4:	9503      	str	r5, [sp, #12]
 80022a6:	9d03      	ldr	r5, [sp, #12]
 80022a8:	1e6a      	subs	r2, r5, #1
 80022aa:	4195      	sbcs	r5, r2
 80022ac:	433d      	orrs	r5, r7
 80022ae:	e77d      	b.n	80021ac <__aeabi_dsub+0x4c4>
 80022b0:	2a00      	cmp	r2, #0
 80022b2:	d100      	bne.n	80022b6 <__aeabi_dsub+0x5ce>
 80022b4:	e744      	b.n	8002140 <__aeabi_dsub+0x458>
 80022b6:	2601      	movs	r6, #1
 80022b8:	400e      	ands	r6, r1
 80022ba:	4663      	mov	r3, ip
 80022bc:	08d9      	lsrs	r1, r3, #3
 80022be:	9b02      	ldr	r3, [sp, #8]
 80022c0:	075a      	lsls	r2, r3, #29
 80022c2:	430a      	orrs	r2, r1
 80022c4:	08dc      	lsrs	r4, r3, #3
 80022c6:	e6f0      	b.n	80020aa <__aeabi_dsub+0x3c2>
 80022c8:	2a00      	cmp	r2, #0
 80022ca:	d028      	beq.n	800231e <__aeabi_dsub+0x636>
 80022cc:	4662      	mov	r2, ip
 80022ce:	9f02      	ldr	r7, [sp, #8]
 80022d0:	08c0      	lsrs	r0, r0, #3
 80022d2:	433a      	orrs	r2, r7
 80022d4:	d100      	bne.n	80022d8 <__aeabi_dsub+0x5f0>
 80022d6:	e6dc      	b.n	8002092 <__aeabi_dsub+0x3aa>
 80022d8:	0762      	lsls	r2, r4, #29
 80022da:	4310      	orrs	r0, r2
 80022dc:	2280      	movs	r2, #128	@ 0x80
 80022de:	08e4      	lsrs	r4, r4, #3
 80022e0:	0312      	lsls	r2, r2, #12
 80022e2:	4214      	tst	r4, r2
 80022e4:	d009      	beq.n	80022fa <__aeabi_dsub+0x612>
 80022e6:	08fd      	lsrs	r5, r7, #3
 80022e8:	4215      	tst	r5, r2
 80022ea:	d106      	bne.n	80022fa <__aeabi_dsub+0x612>
 80022ec:	4663      	mov	r3, ip
 80022ee:	2601      	movs	r6, #1
 80022f0:	002c      	movs	r4, r5
 80022f2:	08d8      	lsrs	r0, r3, #3
 80022f4:	077b      	lsls	r3, r7, #29
 80022f6:	4318      	orrs	r0, r3
 80022f8:	400e      	ands	r6, r1
 80022fa:	0f42      	lsrs	r2, r0, #29
 80022fc:	00c0      	lsls	r0, r0, #3
 80022fe:	08c0      	lsrs	r0, r0, #3
 8002300:	0752      	lsls	r2, r2, #29
 8002302:	4302      	orrs	r2, r0
 8002304:	e601      	b.n	8001f0a <__aeabi_dsub+0x222>
 8002306:	4663      	mov	r3, ip
 8002308:	1a1d      	subs	r5, r3, r0
 800230a:	45ac      	cmp	ip, r5
 800230c:	4192      	sbcs	r2, r2
 800230e:	9b02      	ldr	r3, [sp, #8]
 8002310:	4252      	negs	r2, r2
 8002312:	1b1c      	subs	r4, r3, r4
 8002314:	000e      	movs	r6, r1
 8002316:	4688      	mov	r8, r1
 8002318:	2701      	movs	r7, #1
 800231a:	1aa4      	subs	r4, r4, r2
 800231c:	e546      	b.n	8001dac <__aeabi_dsub+0xc4>
 800231e:	4663      	mov	r3, ip
 8002320:	08d9      	lsrs	r1, r3, #3
 8002322:	9b02      	ldr	r3, [sp, #8]
 8002324:	075a      	lsls	r2, r3, #29
 8002326:	430a      	orrs	r2, r1
 8002328:	08dc      	lsrs	r4, r3, #3
 800232a:	e5ee      	b.n	8001f0a <__aeabi_dsub+0x222>
 800232c:	4663      	mov	r3, ip
 800232e:	9c02      	ldr	r4, [sp, #8]
 8002330:	9303      	str	r3, [sp, #12]
 8002332:	e6c7      	b.n	80020c4 <__aeabi_dsub+0x3dc>
 8002334:	08c0      	lsrs	r0, r0, #3
 8002336:	2a00      	cmp	r2, #0
 8002338:	d100      	bne.n	800233c <__aeabi_dsub+0x654>
 800233a:	e6aa      	b.n	8002092 <__aeabi_dsub+0x3aa>
 800233c:	0762      	lsls	r2, r4, #29
 800233e:	4310      	orrs	r0, r2
 8002340:	2280      	movs	r2, #128	@ 0x80
 8002342:	08e4      	lsrs	r4, r4, #3
 8002344:	0312      	lsls	r2, r2, #12
 8002346:	4214      	tst	r4, r2
 8002348:	d0d7      	beq.n	80022fa <__aeabi_dsub+0x612>
 800234a:	9f02      	ldr	r7, [sp, #8]
 800234c:	08fd      	lsrs	r5, r7, #3
 800234e:	4215      	tst	r5, r2
 8002350:	d1d3      	bne.n	80022fa <__aeabi_dsub+0x612>
 8002352:	4663      	mov	r3, ip
 8002354:	2601      	movs	r6, #1
 8002356:	08d8      	lsrs	r0, r3, #3
 8002358:	077b      	lsls	r3, r7, #29
 800235a:	002c      	movs	r4, r5
 800235c:	4318      	orrs	r0, r3
 800235e:	400e      	ands	r6, r1
 8002360:	e7cb      	b.n	80022fa <__aeabi_dsub+0x612>
 8002362:	000a      	movs	r2, r1
 8002364:	0027      	movs	r7, r4
 8002366:	3a20      	subs	r2, #32
 8002368:	40d7      	lsrs	r7, r2
 800236a:	2920      	cmp	r1, #32
 800236c:	d005      	beq.n	800237a <__aeabi_dsub+0x692>
 800236e:	2240      	movs	r2, #64	@ 0x40
 8002370:	1a52      	subs	r2, r2, r1
 8002372:	4094      	lsls	r4, r2
 8002374:	0025      	movs	r5, r4
 8002376:	4305      	orrs	r5, r0
 8002378:	9503      	str	r5, [sp, #12]
 800237a:	9d03      	ldr	r5, [sp, #12]
 800237c:	1e6a      	subs	r2, r5, #1
 800237e:	4195      	sbcs	r5, r2
 8002380:	432f      	orrs	r7, r5
 8002382:	e610      	b.n	8001fa6 <__aeabi_dsub+0x2be>
 8002384:	0014      	movs	r4, r2
 8002386:	2500      	movs	r5, #0
 8002388:	2200      	movs	r2, #0
 800238a:	e556      	b.n	8001e3a <__aeabi_dsub+0x152>
 800238c:	9b02      	ldr	r3, [sp, #8]
 800238e:	4460      	add	r0, ip
 8002390:	4699      	mov	r9, r3
 8002392:	4560      	cmp	r0, ip
 8002394:	4192      	sbcs	r2, r2
 8002396:	444c      	add	r4, r9
 8002398:	4252      	negs	r2, r2
 800239a:	0005      	movs	r5, r0
 800239c:	18a4      	adds	r4, r4, r2
 800239e:	e74c      	b.n	800223a <__aeabi_dsub+0x552>
 80023a0:	001a      	movs	r2, r3
 80023a2:	001c      	movs	r4, r3
 80023a4:	432a      	orrs	r2, r5
 80023a6:	d000      	beq.n	80023aa <__aeabi_dsub+0x6c2>
 80023a8:	e6b3      	b.n	8002112 <__aeabi_dsub+0x42a>
 80023aa:	e6c9      	b.n	8002140 <__aeabi_dsub+0x458>
 80023ac:	2480      	movs	r4, #128	@ 0x80
 80023ae:	2600      	movs	r6, #0
 80023b0:	0324      	lsls	r4, r4, #12
 80023b2:	e5ae      	b.n	8001f12 <__aeabi_dsub+0x22a>
 80023b4:	2120      	movs	r1, #32
 80023b6:	2500      	movs	r5, #0
 80023b8:	1a09      	subs	r1, r1, r0
 80023ba:	e517      	b.n	8001dec <__aeabi_dsub+0x104>
 80023bc:	2200      	movs	r2, #0
 80023be:	2500      	movs	r5, #0
 80023c0:	4c0b      	ldr	r4, [pc, #44]	@ (80023f0 <__aeabi_dsub+0x708>)
 80023c2:	e53a      	b.n	8001e3a <__aeabi_dsub+0x152>
 80023c4:	2d00      	cmp	r5, #0
 80023c6:	d100      	bne.n	80023ca <__aeabi_dsub+0x6e2>
 80023c8:	e5f6      	b.n	8001fb8 <__aeabi_dsub+0x2d0>
 80023ca:	464b      	mov	r3, r9
 80023cc:	1bda      	subs	r2, r3, r7
 80023ce:	4692      	mov	sl, r2
 80023d0:	2f00      	cmp	r7, #0
 80023d2:	d100      	bne.n	80023d6 <__aeabi_dsub+0x6ee>
 80023d4:	e66f      	b.n	80020b6 <__aeabi_dsub+0x3ce>
 80023d6:	2a38      	cmp	r2, #56	@ 0x38
 80023d8:	dc05      	bgt.n	80023e6 <__aeabi_dsub+0x6fe>
 80023da:	2680      	movs	r6, #128	@ 0x80
 80023dc:	0436      	lsls	r6, r6, #16
 80023de:	4334      	orrs	r4, r6
 80023e0:	4688      	mov	r8, r1
 80023e2:	000e      	movs	r6, r1
 80023e4:	e6d1      	b.n	800218a <__aeabi_dsub+0x4a2>
 80023e6:	4688      	mov	r8, r1
 80023e8:	000e      	movs	r6, r1
 80023ea:	2501      	movs	r5, #1
 80023ec:	e6de      	b.n	80021ac <__aeabi_dsub+0x4c4>
 80023ee:	46c0      	nop			@ (mov r8, r8)
 80023f0:	000007ff 	.word	0x000007ff
 80023f4:	ff7fffff 	.word	0xff7fffff
 80023f8:	000007fe 	.word	0x000007fe
 80023fc:	2d00      	cmp	r5, #0
 80023fe:	d100      	bne.n	8002402 <__aeabi_dsub+0x71a>
 8002400:	e668      	b.n	80020d4 <__aeabi_dsub+0x3ec>
 8002402:	464b      	mov	r3, r9
 8002404:	1bd9      	subs	r1, r3, r7
 8002406:	2f00      	cmp	r7, #0
 8002408:	d101      	bne.n	800240e <__aeabi_dsub+0x726>
 800240a:	468a      	mov	sl, r1
 800240c:	e5a7      	b.n	8001f5e <__aeabi_dsub+0x276>
 800240e:	2701      	movs	r7, #1
 8002410:	2938      	cmp	r1, #56	@ 0x38
 8002412:	dd00      	ble.n	8002416 <__aeabi_dsub+0x72e>
 8002414:	e5c7      	b.n	8001fa6 <__aeabi_dsub+0x2be>
 8002416:	2280      	movs	r2, #128	@ 0x80
 8002418:	0412      	lsls	r2, r2, #16
 800241a:	4314      	orrs	r4, r2
 800241c:	e5af      	b.n	8001f7e <__aeabi_dsub+0x296>
 800241e:	46c0      	nop			@ (mov r8, r8)

08002420 <__aeabi_dcmpun>:
 8002420:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002422:	46c6      	mov	lr, r8
 8002424:	031e      	lsls	r6, r3, #12
 8002426:	0b36      	lsrs	r6, r6, #12
 8002428:	46b0      	mov	r8, r6
 800242a:	4e0d      	ldr	r6, [pc, #52]	@ (8002460 <__aeabi_dcmpun+0x40>)
 800242c:	030c      	lsls	r4, r1, #12
 800242e:	004d      	lsls	r5, r1, #1
 8002430:	005f      	lsls	r7, r3, #1
 8002432:	b500      	push	{lr}
 8002434:	0b24      	lsrs	r4, r4, #12
 8002436:	0d6d      	lsrs	r5, r5, #21
 8002438:	0d7f      	lsrs	r7, r7, #21
 800243a:	42b5      	cmp	r5, r6
 800243c:	d00b      	beq.n	8002456 <__aeabi_dcmpun+0x36>
 800243e:	4908      	ldr	r1, [pc, #32]	@ (8002460 <__aeabi_dcmpun+0x40>)
 8002440:	2000      	movs	r0, #0
 8002442:	428f      	cmp	r7, r1
 8002444:	d104      	bne.n	8002450 <__aeabi_dcmpun+0x30>
 8002446:	4646      	mov	r6, r8
 8002448:	4316      	orrs	r6, r2
 800244a:	0030      	movs	r0, r6
 800244c:	1e43      	subs	r3, r0, #1
 800244e:	4198      	sbcs	r0, r3
 8002450:	bc80      	pop	{r7}
 8002452:	46b8      	mov	r8, r7
 8002454:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002456:	4304      	orrs	r4, r0
 8002458:	2001      	movs	r0, #1
 800245a:	2c00      	cmp	r4, #0
 800245c:	d1f8      	bne.n	8002450 <__aeabi_dcmpun+0x30>
 800245e:	e7ee      	b.n	800243e <__aeabi_dcmpun+0x1e>
 8002460:	000007ff 	.word	0x000007ff

08002464 <__aeabi_d2iz>:
 8002464:	000b      	movs	r3, r1
 8002466:	0002      	movs	r2, r0
 8002468:	b570      	push	{r4, r5, r6, lr}
 800246a:	4d16      	ldr	r5, [pc, #88]	@ (80024c4 <__aeabi_d2iz+0x60>)
 800246c:	030c      	lsls	r4, r1, #12
 800246e:	b082      	sub	sp, #8
 8002470:	0049      	lsls	r1, r1, #1
 8002472:	2000      	movs	r0, #0
 8002474:	9200      	str	r2, [sp, #0]
 8002476:	9301      	str	r3, [sp, #4]
 8002478:	0b24      	lsrs	r4, r4, #12
 800247a:	0d49      	lsrs	r1, r1, #21
 800247c:	0fde      	lsrs	r6, r3, #31
 800247e:	42a9      	cmp	r1, r5
 8002480:	dd04      	ble.n	800248c <__aeabi_d2iz+0x28>
 8002482:	4811      	ldr	r0, [pc, #68]	@ (80024c8 <__aeabi_d2iz+0x64>)
 8002484:	4281      	cmp	r1, r0
 8002486:	dd03      	ble.n	8002490 <__aeabi_d2iz+0x2c>
 8002488:	4b10      	ldr	r3, [pc, #64]	@ (80024cc <__aeabi_d2iz+0x68>)
 800248a:	18f0      	adds	r0, r6, r3
 800248c:	b002      	add	sp, #8
 800248e:	bd70      	pop	{r4, r5, r6, pc}
 8002490:	2080      	movs	r0, #128	@ 0x80
 8002492:	0340      	lsls	r0, r0, #13
 8002494:	4320      	orrs	r0, r4
 8002496:	4c0e      	ldr	r4, [pc, #56]	@ (80024d0 <__aeabi_d2iz+0x6c>)
 8002498:	1a64      	subs	r4, r4, r1
 800249a:	2c1f      	cmp	r4, #31
 800249c:	dd08      	ble.n	80024b0 <__aeabi_d2iz+0x4c>
 800249e:	4b0d      	ldr	r3, [pc, #52]	@ (80024d4 <__aeabi_d2iz+0x70>)
 80024a0:	1a5b      	subs	r3, r3, r1
 80024a2:	40d8      	lsrs	r0, r3
 80024a4:	0003      	movs	r3, r0
 80024a6:	4258      	negs	r0, r3
 80024a8:	2e00      	cmp	r6, #0
 80024aa:	d1ef      	bne.n	800248c <__aeabi_d2iz+0x28>
 80024ac:	0018      	movs	r0, r3
 80024ae:	e7ed      	b.n	800248c <__aeabi_d2iz+0x28>
 80024b0:	4b09      	ldr	r3, [pc, #36]	@ (80024d8 <__aeabi_d2iz+0x74>)
 80024b2:	9a00      	ldr	r2, [sp, #0]
 80024b4:	469c      	mov	ip, r3
 80024b6:	0003      	movs	r3, r0
 80024b8:	4461      	add	r1, ip
 80024ba:	408b      	lsls	r3, r1
 80024bc:	40e2      	lsrs	r2, r4
 80024be:	4313      	orrs	r3, r2
 80024c0:	e7f1      	b.n	80024a6 <__aeabi_d2iz+0x42>
 80024c2:	46c0      	nop			@ (mov r8, r8)
 80024c4:	000003fe 	.word	0x000003fe
 80024c8:	0000041d 	.word	0x0000041d
 80024cc:	7fffffff 	.word	0x7fffffff
 80024d0:	00000433 	.word	0x00000433
 80024d4:	00000413 	.word	0x00000413
 80024d8:	fffffbed 	.word	0xfffffbed

080024dc <__aeabi_i2d>:
 80024dc:	b570      	push	{r4, r5, r6, lr}
 80024de:	2800      	cmp	r0, #0
 80024e0:	d016      	beq.n	8002510 <__aeabi_i2d+0x34>
 80024e2:	17c3      	asrs	r3, r0, #31
 80024e4:	18c5      	adds	r5, r0, r3
 80024e6:	405d      	eors	r5, r3
 80024e8:	0fc4      	lsrs	r4, r0, #31
 80024ea:	0028      	movs	r0, r5
 80024ec:	f000 f8cc 	bl	8002688 <__clzsi2>
 80024f0:	4b10      	ldr	r3, [pc, #64]	@ (8002534 <__aeabi_i2d+0x58>)
 80024f2:	1a1b      	subs	r3, r3, r0
 80024f4:	055b      	lsls	r3, r3, #21
 80024f6:	0d5b      	lsrs	r3, r3, #21
 80024f8:	280a      	cmp	r0, #10
 80024fa:	dc14      	bgt.n	8002526 <__aeabi_i2d+0x4a>
 80024fc:	0002      	movs	r2, r0
 80024fe:	002e      	movs	r6, r5
 8002500:	3215      	adds	r2, #21
 8002502:	4096      	lsls	r6, r2
 8002504:	220b      	movs	r2, #11
 8002506:	1a12      	subs	r2, r2, r0
 8002508:	40d5      	lsrs	r5, r2
 800250a:	032d      	lsls	r5, r5, #12
 800250c:	0b2d      	lsrs	r5, r5, #12
 800250e:	e003      	b.n	8002518 <__aeabi_i2d+0x3c>
 8002510:	2400      	movs	r4, #0
 8002512:	2300      	movs	r3, #0
 8002514:	2500      	movs	r5, #0
 8002516:	2600      	movs	r6, #0
 8002518:	051b      	lsls	r3, r3, #20
 800251a:	432b      	orrs	r3, r5
 800251c:	07e4      	lsls	r4, r4, #31
 800251e:	4323      	orrs	r3, r4
 8002520:	0030      	movs	r0, r6
 8002522:	0019      	movs	r1, r3
 8002524:	bd70      	pop	{r4, r5, r6, pc}
 8002526:	380b      	subs	r0, #11
 8002528:	4085      	lsls	r5, r0
 800252a:	032d      	lsls	r5, r5, #12
 800252c:	2600      	movs	r6, #0
 800252e:	0b2d      	lsrs	r5, r5, #12
 8002530:	e7f2      	b.n	8002518 <__aeabi_i2d+0x3c>
 8002532:	46c0      	nop			@ (mov r8, r8)
 8002534:	0000041e 	.word	0x0000041e

08002538 <__aeabi_ui2d>:
 8002538:	b510      	push	{r4, lr}
 800253a:	1e04      	subs	r4, r0, #0
 800253c:	d010      	beq.n	8002560 <__aeabi_ui2d+0x28>
 800253e:	f000 f8a3 	bl	8002688 <__clzsi2>
 8002542:	4b0e      	ldr	r3, [pc, #56]	@ (800257c <__aeabi_ui2d+0x44>)
 8002544:	1a1b      	subs	r3, r3, r0
 8002546:	055b      	lsls	r3, r3, #21
 8002548:	0d5b      	lsrs	r3, r3, #21
 800254a:	280a      	cmp	r0, #10
 800254c:	dc0f      	bgt.n	800256e <__aeabi_ui2d+0x36>
 800254e:	220b      	movs	r2, #11
 8002550:	0021      	movs	r1, r4
 8002552:	1a12      	subs	r2, r2, r0
 8002554:	40d1      	lsrs	r1, r2
 8002556:	3015      	adds	r0, #21
 8002558:	030a      	lsls	r2, r1, #12
 800255a:	4084      	lsls	r4, r0
 800255c:	0b12      	lsrs	r2, r2, #12
 800255e:	e001      	b.n	8002564 <__aeabi_ui2d+0x2c>
 8002560:	2300      	movs	r3, #0
 8002562:	2200      	movs	r2, #0
 8002564:	051b      	lsls	r3, r3, #20
 8002566:	4313      	orrs	r3, r2
 8002568:	0020      	movs	r0, r4
 800256a:	0019      	movs	r1, r3
 800256c:	bd10      	pop	{r4, pc}
 800256e:	0022      	movs	r2, r4
 8002570:	380b      	subs	r0, #11
 8002572:	4082      	lsls	r2, r0
 8002574:	0312      	lsls	r2, r2, #12
 8002576:	2400      	movs	r4, #0
 8002578:	0b12      	lsrs	r2, r2, #12
 800257a:	e7f3      	b.n	8002564 <__aeabi_ui2d+0x2c>
 800257c:	0000041e 	.word	0x0000041e

08002580 <__aeabi_d2f>:
 8002580:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002582:	004b      	lsls	r3, r1, #1
 8002584:	030f      	lsls	r7, r1, #12
 8002586:	0d5b      	lsrs	r3, r3, #21
 8002588:	4c3b      	ldr	r4, [pc, #236]	@ (8002678 <__aeabi_d2f+0xf8>)
 800258a:	0f45      	lsrs	r5, r0, #29
 800258c:	b083      	sub	sp, #12
 800258e:	0a7f      	lsrs	r7, r7, #9
 8002590:	1c5e      	adds	r6, r3, #1
 8002592:	432f      	orrs	r7, r5
 8002594:	9000      	str	r0, [sp, #0]
 8002596:	9101      	str	r1, [sp, #4]
 8002598:	0fca      	lsrs	r2, r1, #31
 800259a:	00c5      	lsls	r5, r0, #3
 800259c:	4226      	tst	r6, r4
 800259e:	d00b      	beq.n	80025b8 <__aeabi_d2f+0x38>
 80025a0:	4936      	ldr	r1, [pc, #216]	@ (800267c <__aeabi_d2f+0xfc>)
 80025a2:	185c      	adds	r4, r3, r1
 80025a4:	2cfe      	cmp	r4, #254	@ 0xfe
 80025a6:	dd13      	ble.n	80025d0 <__aeabi_d2f+0x50>
 80025a8:	20ff      	movs	r0, #255	@ 0xff
 80025aa:	2300      	movs	r3, #0
 80025ac:	05c0      	lsls	r0, r0, #23
 80025ae:	4318      	orrs	r0, r3
 80025b0:	07d2      	lsls	r2, r2, #31
 80025b2:	4310      	orrs	r0, r2
 80025b4:	b003      	add	sp, #12
 80025b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d102      	bne.n	80025c2 <__aeabi_d2f+0x42>
 80025bc:	2000      	movs	r0, #0
 80025be:	2300      	movs	r3, #0
 80025c0:	e7f4      	b.n	80025ac <__aeabi_d2f+0x2c>
 80025c2:	433d      	orrs	r5, r7
 80025c4:	d0f0      	beq.n	80025a8 <__aeabi_d2f+0x28>
 80025c6:	2380      	movs	r3, #128	@ 0x80
 80025c8:	03db      	lsls	r3, r3, #15
 80025ca:	20ff      	movs	r0, #255	@ 0xff
 80025cc:	433b      	orrs	r3, r7
 80025ce:	e7ed      	b.n	80025ac <__aeabi_d2f+0x2c>
 80025d0:	2c00      	cmp	r4, #0
 80025d2:	dd14      	ble.n	80025fe <__aeabi_d2f+0x7e>
 80025d4:	9b00      	ldr	r3, [sp, #0]
 80025d6:	00ff      	lsls	r7, r7, #3
 80025d8:	019b      	lsls	r3, r3, #6
 80025da:	1e58      	subs	r0, r3, #1
 80025dc:	4183      	sbcs	r3, r0
 80025de:	0f69      	lsrs	r1, r5, #29
 80025e0:	433b      	orrs	r3, r7
 80025e2:	430b      	orrs	r3, r1
 80025e4:	0759      	lsls	r1, r3, #29
 80025e6:	d041      	beq.n	800266c <__aeabi_d2f+0xec>
 80025e8:	210f      	movs	r1, #15
 80025ea:	4019      	ands	r1, r3
 80025ec:	2904      	cmp	r1, #4
 80025ee:	d028      	beq.n	8002642 <__aeabi_d2f+0xc2>
 80025f0:	3304      	adds	r3, #4
 80025f2:	0159      	lsls	r1, r3, #5
 80025f4:	d525      	bpl.n	8002642 <__aeabi_d2f+0xc2>
 80025f6:	3401      	adds	r4, #1
 80025f8:	2300      	movs	r3, #0
 80025fa:	b2e0      	uxtb	r0, r4
 80025fc:	e7d6      	b.n	80025ac <__aeabi_d2f+0x2c>
 80025fe:	0021      	movs	r1, r4
 8002600:	3117      	adds	r1, #23
 8002602:	dbdb      	blt.n	80025bc <__aeabi_d2f+0x3c>
 8002604:	2180      	movs	r1, #128	@ 0x80
 8002606:	201e      	movs	r0, #30
 8002608:	0409      	lsls	r1, r1, #16
 800260a:	4339      	orrs	r1, r7
 800260c:	1b00      	subs	r0, r0, r4
 800260e:	281f      	cmp	r0, #31
 8002610:	dd1b      	ble.n	800264a <__aeabi_d2f+0xca>
 8002612:	2602      	movs	r6, #2
 8002614:	4276      	negs	r6, r6
 8002616:	1b34      	subs	r4, r6, r4
 8002618:	000e      	movs	r6, r1
 800261a:	40e6      	lsrs	r6, r4
 800261c:	0034      	movs	r4, r6
 800261e:	2820      	cmp	r0, #32
 8002620:	d004      	beq.n	800262c <__aeabi_d2f+0xac>
 8002622:	4817      	ldr	r0, [pc, #92]	@ (8002680 <__aeabi_d2f+0x100>)
 8002624:	4684      	mov	ip, r0
 8002626:	4463      	add	r3, ip
 8002628:	4099      	lsls	r1, r3
 800262a:	430d      	orrs	r5, r1
 800262c:	002b      	movs	r3, r5
 800262e:	1e59      	subs	r1, r3, #1
 8002630:	418b      	sbcs	r3, r1
 8002632:	4323      	orrs	r3, r4
 8002634:	0759      	lsls	r1, r3, #29
 8002636:	d015      	beq.n	8002664 <__aeabi_d2f+0xe4>
 8002638:	210f      	movs	r1, #15
 800263a:	2400      	movs	r4, #0
 800263c:	4019      	ands	r1, r3
 800263e:	2904      	cmp	r1, #4
 8002640:	d117      	bne.n	8002672 <__aeabi_d2f+0xf2>
 8002642:	019b      	lsls	r3, r3, #6
 8002644:	0a5b      	lsrs	r3, r3, #9
 8002646:	b2e0      	uxtb	r0, r4
 8002648:	e7b0      	b.n	80025ac <__aeabi_d2f+0x2c>
 800264a:	4c0e      	ldr	r4, [pc, #56]	@ (8002684 <__aeabi_d2f+0x104>)
 800264c:	191c      	adds	r4, r3, r4
 800264e:	002b      	movs	r3, r5
 8002650:	40a5      	lsls	r5, r4
 8002652:	40c3      	lsrs	r3, r0
 8002654:	40a1      	lsls	r1, r4
 8002656:	1e68      	subs	r0, r5, #1
 8002658:	4185      	sbcs	r5, r0
 800265a:	4329      	orrs	r1, r5
 800265c:	430b      	orrs	r3, r1
 800265e:	2400      	movs	r4, #0
 8002660:	0759      	lsls	r1, r3, #29
 8002662:	d1c1      	bne.n	80025e8 <__aeabi_d2f+0x68>
 8002664:	019b      	lsls	r3, r3, #6
 8002666:	2000      	movs	r0, #0
 8002668:	0a5b      	lsrs	r3, r3, #9
 800266a:	e79f      	b.n	80025ac <__aeabi_d2f+0x2c>
 800266c:	08db      	lsrs	r3, r3, #3
 800266e:	b2e0      	uxtb	r0, r4
 8002670:	e79c      	b.n	80025ac <__aeabi_d2f+0x2c>
 8002672:	3304      	adds	r3, #4
 8002674:	e7e5      	b.n	8002642 <__aeabi_d2f+0xc2>
 8002676:	46c0      	nop			@ (mov r8, r8)
 8002678:	000007fe 	.word	0x000007fe
 800267c:	fffffc80 	.word	0xfffffc80
 8002680:	fffffca2 	.word	0xfffffca2
 8002684:	fffffc82 	.word	0xfffffc82

08002688 <__clzsi2>:
 8002688:	211c      	movs	r1, #28
 800268a:	2301      	movs	r3, #1
 800268c:	041b      	lsls	r3, r3, #16
 800268e:	4298      	cmp	r0, r3
 8002690:	d301      	bcc.n	8002696 <__clzsi2+0xe>
 8002692:	0c00      	lsrs	r0, r0, #16
 8002694:	3910      	subs	r1, #16
 8002696:	0a1b      	lsrs	r3, r3, #8
 8002698:	4298      	cmp	r0, r3
 800269a:	d301      	bcc.n	80026a0 <__clzsi2+0x18>
 800269c:	0a00      	lsrs	r0, r0, #8
 800269e:	3908      	subs	r1, #8
 80026a0:	091b      	lsrs	r3, r3, #4
 80026a2:	4298      	cmp	r0, r3
 80026a4:	d301      	bcc.n	80026aa <__clzsi2+0x22>
 80026a6:	0900      	lsrs	r0, r0, #4
 80026a8:	3904      	subs	r1, #4
 80026aa:	a202      	add	r2, pc, #8	@ (adr r2, 80026b4 <__clzsi2+0x2c>)
 80026ac:	5c10      	ldrb	r0, [r2, r0]
 80026ae:	1840      	adds	r0, r0, r1
 80026b0:	4770      	bx	lr
 80026b2:	46c0      	nop			@ (mov r8, r8)
 80026b4:	02020304 	.word	0x02020304
 80026b8:	01010101 	.word	0x01010101
	...

080026c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80026c8:	f000 fae6 	bl	8002c98 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80026cc:	f000 f809 	bl	80026e2 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80026d0:	f000 f896 	bl	8002800 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80026d4:	f000 f864 	bl	80027a0 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  motor_motion_init();
 80026d8:	f002 fe5a 	bl	8005390 <motor_motion_init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  motor_motion_control();
 80026dc:	f002 fe66 	bl	80053ac <motor_motion_control>
 80026e0:	e7fc      	b.n	80026dc <main+0x18>

080026e2 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80026e2:	b590      	push	{r4, r7, lr}
 80026e4:	b095      	sub	sp, #84	@ 0x54
 80026e6:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80026e8:	2420      	movs	r4, #32
 80026ea:	193b      	adds	r3, r7, r4
 80026ec:	0018      	movs	r0, r3
 80026ee:	2330      	movs	r3, #48	@ 0x30
 80026f0:	001a      	movs	r2, r3
 80026f2:	2100      	movs	r1, #0
 80026f4:	f005 fce2 	bl	80080bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80026f8:	2310      	movs	r3, #16
 80026fa:	18fb      	adds	r3, r7, r3
 80026fc:	0018      	movs	r0, r3
 80026fe:	2310      	movs	r3, #16
 8002700:	001a      	movs	r2, r3
 8002702:	2100      	movs	r1, #0
 8002704:	f005 fcda 	bl	80080bc <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002708:	003b      	movs	r3, r7
 800270a:	0018      	movs	r0, r3
 800270c:	2310      	movs	r3, #16
 800270e:	001a      	movs	r2, r3
 8002710:	2100      	movs	r1, #0
 8002712:	f005 fcd3 	bl	80080bc <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002716:	0021      	movs	r1, r4
 8002718:	187b      	adds	r3, r7, r1
 800271a:	2201      	movs	r2, #1
 800271c:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800271e:	187b      	adds	r3, r7, r1
 8002720:	2201      	movs	r2, #1
 8002722:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002724:	187b      	adds	r3, r7, r1
 8002726:	2202      	movs	r2, #2
 8002728:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800272a:	187b      	adds	r3, r7, r1
 800272c:	2280      	movs	r2, #128	@ 0x80
 800272e:	0252      	lsls	r2, r2, #9
 8002730:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8002732:	187b      	adds	r3, r7, r1
 8002734:	2280      	movs	r2, #128	@ 0x80
 8002736:	0352      	lsls	r2, r2, #13
 8002738:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 800273a:	187b      	adds	r3, r7, r1
 800273c:	2200      	movs	r2, #0
 800273e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002740:	187b      	adds	r3, r7, r1
 8002742:	0018      	movs	r0, r3
 8002744:	f000 fe6e 	bl	8003424 <HAL_RCC_OscConfig>
 8002748:	1e03      	subs	r3, r0, #0
 800274a:	d001      	beq.n	8002750 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800274c:	f000 f8fe 	bl	800294c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002750:	2110      	movs	r1, #16
 8002752:	187b      	adds	r3, r7, r1
 8002754:	2207      	movs	r2, #7
 8002756:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002758:	187b      	adds	r3, r7, r1
 800275a:	2202      	movs	r2, #2
 800275c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800275e:	187b      	adds	r3, r7, r1
 8002760:	2200      	movs	r2, #0
 8002762:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002764:	187b      	adds	r3, r7, r1
 8002766:	2200      	movs	r2, #0
 8002768:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800276a:	187b      	adds	r3, r7, r1
 800276c:	2101      	movs	r1, #1
 800276e:	0018      	movs	r0, r3
 8002770:	f001 f972 	bl	8003a58 <HAL_RCC_ClockConfig>
 8002774:	1e03      	subs	r3, r0, #0
 8002776:	d001      	beq.n	800277c <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8002778:	f000 f8e8 	bl	800294c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800277c:	003b      	movs	r3, r7
 800277e:	2201      	movs	r2, #1
 8002780:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8002782:	003b      	movs	r3, r7
 8002784:	2200      	movs	r2, #0
 8002786:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002788:	003b      	movs	r3, r7
 800278a:	0018      	movs	r0, r3
 800278c:	f001 faa8 	bl	8003ce0 <HAL_RCCEx_PeriphCLKConfig>
 8002790:	1e03      	subs	r3, r0, #0
 8002792:	d001      	beq.n	8002798 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8002794:	f000 f8da 	bl	800294c <Error_Handler>
  }
}
 8002798:	46c0      	nop			@ (mov r8, r8)
 800279a:	46bd      	mov	sp, r7
 800279c:	b015      	add	sp, #84	@ 0x54
 800279e:	bd90      	pop	{r4, r7, pc}

080027a0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80027a4:	4b14      	ldr	r3, [pc, #80]	@ (80027f8 <MX_USART1_UART_Init+0x58>)
 80027a6:	4a15      	ldr	r2, [pc, #84]	@ (80027fc <MX_USART1_UART_Init+0x5c>)
 80027a8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80027aa:	4b13      	ldr	r3, [pc, #76]	@ (80027f8 <MX_USART1_UART_Init+0x58>)
 80027ac:	2296      	movs	r2, #150	@ 0x96
 80027ae:	0192      	lsls	r2, r2, #6
 80027b0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80027b2:	4b11      	ldr	r3, [pc, #68]	@ (80027f8 <MX_USART1_UART_Init+0x58>)
 80027b4:	2200      	movs	r2, #0
 80027b6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80027b8:	4b0f      	ldr	r3, [pc, #60]	@ (80027f8 <MX_USART1_UART_Init+0x58>)
 80027ba:	2200      	movs	r2, #0
 80027bc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80027be:	4b0e      	ldr	r3, [pc, #56]	@ (80027f8 <MX_USART1_UART_Init+0x58>)
 80027c0:	2200      	movs	r2, #0
 80027c2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80027c4:	4b0c      	ldr	r3, [pc, #48]	@ (80027f8 <MX_USART1_UART_Init+0x58>)
 80027c6:	220c      	movs	r2, #12
 80027c8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80027ca:	4b0b      	ldr	r3, [pc, #44]	@ (80027f8 <MX_USART1_UART_Init+0x58>)
 80027cc:	2200      	movs	r2, #0
 80027ce:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80027d0:	4b09      	ldr	r3, [pc, #36]	@ (80027f8 <MX_USART1_UART_Init+0x58>)
 80027d2:	2200      	movs	r2, #0
 80027d4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80027d6:	4b08      	ldr	r3, [pc, #32]	@ (80027f8 <MX_USART1_UART_Init+0x58>)
 80027d8:	2200      	movs	r2, #0
 80027da:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80027dc:	4b06      	ldr	r3, [pc, #24]	@ (80027f8 <MX_USART1_UART_Init+0x58>)
 80027de:	2200      	movs	r2, #0
 80027e0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80027e2:	4b05      	ldr	r3, [pc, #20]	@ (80027f8 <MX_USART1_UART_Init+0x58>)
 80027e4:	0018      	movs	r0, r3
 80027e6:	f001 fb49 	bl	8003e7c <HAL_UART_Init>
 80027ea:	1e03      	subs	r3, r0, #0
 80027ec:	d001      	beq.n	80027f2 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80027ee:	f000 f8ad 	bl	800294c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80027f2:	46c0      	nop			@ (mov r8, r8)
 80027f4:	46bd      	mov	sp, r7
 80027f6:	bd80      	pop	{r7, pc}
 80027f8:	20000200 	.word	0x20000200
 80027fc:	40013800 	.word	0x40013800

08002800 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002800:	b590      	push	{r4, r7, lr}
 8002802:	b089      	sub	sp, #36	@ 0x24
 8002804:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002806:	240c      	movs	r4, #12
 8002808:	193b      	adds	r3, r7, r4
 800280a:	0018      	movs	r0, r3
 800280c:	2314      	movs	r3, #20
 800280e:	001a      	movs	r2, r3
 8002810:	2100      	movs	r1, #0
 8002812:	f005 fc53 	bl	80080bc <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002816:	4b4a      	ldr	r3, [pc, #296]	@ (8002940 <MX_GPIO_Init+0x140>)
 8002818:	695a      	ldr	r2, [r3, #20]
 800281a:	4b49      	ldr	r3, [pc, #292]	@ (8002940 <MX_GPIO_Init+0x140>)
 800281c:	2180      	movs	r1, #128	@ 0x80
 800281e:	03c9      	lsls	r1, r1, #15
 8002820:	430a      	orrs	r2, r1
 8002822:	615a      	str	r2, [r3, #20]
 8002824:	4b46      	ldr	r3, [pc, #280]	@ (8002940 <MX_GPIO_Init+0x140>)
 8002826:	695a      	ldr	r2, [r3, #20]
 8002828:	2380      	movs	r3, #128	@ 0x80
 800282a:	03db      	lsls	r3, r3, #15
 800282c:	4013      	ands	r3, r2
 800282e:	60bb      	str	r3, [r7, #8]
 8002830:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002832:	4b43      	ldr	r3, [pc, #268]	@ (8002940 <MX_GPIO_Init+0x140>)
 8002834:	695a      	ldr	r2, [r3, #20]
 8002836:	4b42      	ldr	r3, [pc, #264]	@ (8002940 <MX_GPIO_Init+0x140>)
 8002838:	2180      	movs	r1, #128	@ 0x80
 800283a:	0289      	lsls	r1, r1, #10
 800283c:	430a      	orrs	r2, r1
 800283e:	615a      	str	r2, [r3, #20]
 8002840:	4b3f      	ldr	r3, [pc, #252]	@ (8002940 <MX_GPIO_Init+0x140>)
 8002842:	695a      	ldr	r2, [r3, #20]
 8002844:	2380      	movs	r3, #128	@ 0x80
 8002846:	029b      	lsls	r3, r3, #10
 8002848:	4013      	ands	r3, r2
 800284a:	607b      	str	r3, [r7, #4]
 800284c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800284e:	4b3c      	ldr	r3, [pc, #240]	@ (8002940 <MX_GPIO_Init+0x140>)
 8002850:	695a      	ldr	r2, [r3, #20]
 8002852:	4b3b      	ldr	r3, [pc, #236]	@ (8002940 <MX_GPIO_Init+0x140>)
 8002854:	2180      	movs	r1, #128	@ 0x80
 8002856:	02c9      	lsls	r1, r1, #11
 8002858:	430a      	orrs	r2, r1
 800285a:	615a      	str	r2, [r3, #20]
 800285c:	4b38      	ldr	r3, [pc, #224]	@ (8002940 <MX_GPIO_Init+0x140>)
 800285e:	695a      	ldr	r2, [r3, #20]
 8002860:	2380      	movs	r3, #128	@ 0x80
 8002862:	02db      	lsls	r3, r3, #11
 8002864:	4013      	ands	r3, r2
 8002866:	603b      	str	r3, [r7, #0]
 8002868:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MOTOR_DRIVE_1_Pin|MOTOR_DRIVE_2_Pin|BUZZER_CTL_Pin|DFPLAYER_POWER_EN_Pin
 800286a:	4936      	ldr	r1, [pc, #216]	@ (8002944 <MX_GPIO_Init+0x144>)
 800286c:	4b36      	ldr	r3, [pc, #216]	@ (8002948 <MX_GPIO_Init+0x148>)
 800286e:	2200      	movs	r2, #0
 8002870:	0018      	movs	r0, r3
 8002872:	f000 fd82 	bl	800337a <HAL_GPIO_WritePin>
                          |LED_OUT_1_Pin|LED_OUT_2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RS485_DIR_GPIO_Port, RS485_DIR_Pin, GPIO_PIN_RESET);
 8002876:	2380      	movs	r3, #128	@ 0x80
 8002878:	0119      	lsls	r1, r3, #4
 800287a:	2390      	movs	r3, #144	@ 0x90
 800287c:	05db      	lsls	r3, r3, #23
 800287e:	2200      	movs	r2, #0
 8002880:	0018      	movs	r0, r3
 8002882:	f000 fd7a 	bl	800337a <HAL_GPIO_WritePin>

  /*Configure GPIO pin : DIGITAL_IN1_Pin */
  GPIO_InitStruct.Pin = DIGITAL_IN1_Pin;
 8002886:	193b      	adds	r3, r7, r4
 8002888:	2208      	movs	r2, #8
 800288a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800288c:	193b      	adds	r3, r7, r4
 800288e:	22c4      	movs	r2, #196	@ 0xc4
 8002890:	0392      	lsls	r2, r2, #14
 8002892:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002894:	193b      	adds	r3, r7, r4
 8002896:	2200      	movs	r2, #0
 8002898:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(DIGITAL_IN1_GPIO_Port, &GPIO_InitStruct);
 800289a:	193a      	adds	r2, r7, r4
 800289c:	2390      	movs	r3, #144	@ 0x90
 800289e:	05db      	lsls	r3, r3, #23
 80028a0:	0011      	movs	r1, r2
 80028a2:	0018      	movs	r0, r3
 80028a4:	f000 fbdc 	bl	8003060 <HAL_GPIO_Init>

  /*Configure GPIO pin : DIGITAL_IN2_Pin */
  GPIO_InitStruct.Pin = DIGITAL_IN2_Pin;
 80028a8:	193b      	adds	r3, r7, r4
 80028aa:	2210      	movs	r2, #16
 80028ac:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80028ae:	193b      	adds	r3, r7, r4
 80028b0:	2288      	movs	r2, #136	@ 0x88
 80028b2:	0352      	lsls	r2, r2, #13
 80028b4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028b6:	193b      	adds	r3, r7, r4
 80028b8:	2200      	movs	r2, #0
 80028ba:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(DIGITAL_IN2_GPIO_Port, &GPIO_InitStruct);
 80028bc:	193a      	adds	r2, r7, r4
 80028be:	2390      	movs	r3, #144	@ 0x90
 80028c0:	05db      	lsls	r3, r3, #23
 80028c2:	0011      	movs	r1, r2
 80028c4:	0018      	movs	r0, r3
 80028c6:	f000 fbcb 	bl	8003060 <HAL_GPIO_Init>

  /*Configure GPIO pins : MOTOR_DRIVE_1_Pin MOTOR_DRIVE_2_Pin BUZZER_CTL_Pin DFPLAYER_POWER_EN_Pin
                           LED_OUT_1_Pin LED_OUT_2_Pin */
  GPIO_InitStruct.Pin = MOTOR_DRIVE_1_Pin|MOTOR_DRIVE_2_Pin|BUZZER_CTL_Pin|DFPLAYER_POWER_EN_Pin
 80028ca:	193b      	adds	r3, r7, r4
 80028cc:	4a1d      	ldr	r2, [pc, #116]	@ (8002944 <MX_GPIO_Init+0x144>)
 80028ce:	601a      	str	r2, [r3, #0]
                          |LED_OUT_1_Pin|LED_OUT_2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80028d0:	193b      	adds	r3, r7, r4
 80028d2:	2201      	movs	r2, #1
 80028d4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028d6:	193b      	adds	r3, r7, r4
 80028d8:	2200      	movs	r2, #0
 80028da:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028dc:	193b      	adds	r3, r7, r4
 80028de:	2200      	movs	r2, #0
 80028e0:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028e2:	193b      	adds	r3, r7, r4
 80028e4:	4a18      	ldr	r2, [pc, #96]	@ (8002948 <MX_GPIO_Init+0x148>)
 80028e6:	0019      	movs	r1, r3
 80028e8:	0010      	movs	r0, r2
 80028ea:	f000 fbb9 	bl	8003060 <HAL_GPIO_Init>

  /*Configure GPIO pin : RS485_DIR_Pin */
  GPIO_InitStruct.Pin = RS485_DIR_Pin;
 80028ee:	0021      	movs	r1, r4
 80028f0:	187b      	adds	r3, r7, r1
 80028f2:	2280      	movs	r2, #128	@ 0x80
 80028f4:	0112      	lsls	r2, r2, #4
 80028f6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80028f8:	187b      	adds	r3, r7, r1
 80028fa:	2201      	movs	r2, #1
 80028fc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028fe:	187b      	adds	r3, r7, r1
 8002900:	2200      	movs	r2, #0
 8002902:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002904:	187b      	adds	r3, r7, r1
 8002906:	2200      	movs	r2, #0
 8002908:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(RS485_DIR_GPIO_Port, &GPIO_InitStruct);
 800290a:	187a      	adds	r2, r7, r1
 800290c:	2390      	movs	r3, #144	@ 0x90
 800290e:	05db      	lsls	r3, r3, #23
 8002910:	0011      	movs	r1, r2
 8002912:	0018      	movs	r0, r3
 8002914:	f000 fba4 	bl	8003060 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_3_IRQn, 0, 0);
 8002918:	2200      	movs	r2, #0
 800291a:	2100      	movs	r1, #0
 800291c:	2006      	movs	r0, #6
 800291e:	f000 faef 	bl	8002f00 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 8002922:	2006      	movs	r0, #6
 8002924:	f000 fb01 	bl	8002f2a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8002928:	2200      	movs	r2, #0
 800292a:	2100      	movs	r1, #0
 800292c:	2007      	movs	r0, #7
 800292e:	f000 fae7 	bl	8002f00 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8002932:	2007      	movs	r0, #7
 8002934:	f000 faf9 	bl	8002f2a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002938:	46c0      	nop			@ (mov r8, r8)
 800293a:	46bd      	mov	sp, r7
 800293c:	b009      	add	sp, #36	@ 0x24
 800293e:	bd90      	pop	{r4, r7, pc}
 8002940:	40021000 	.word	0x40021000
 8002944:	0000f0c0 	.word	0x0000f0c0
 8002948:	48000400 	.word	0x48000400

0800294c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002950:	b672      	cpsid	i
}
 8002952:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002954:	46c0      	nop			@ (mov r8, r8)
 8002956:	e7fd      	b.n	8002954 <Error_Handler+0x8>

08002958 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b082      	sub	sp, #8
 800295c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800295e:	4b0f      	ldr	r3, [pc, #60]	@ (800299c <HAL_MspInit+0x44>)
 8002960:	699a      	ldr	r2, [r3, #24]
 8002962:	4b0e      	ldr	r3, [pc, #56]	@ (800299c <HAL_MspInit+0x44>)
 8002964:	2101      	movs	r1, #1
 8002966:	430a      	orrs	r2, r1
 8002968:	619a      	str	r2, [r3, #24]
 800296a:	4b0c      	ldr	r3, [pc, #48]	@ (800299c <HAL_MspInit+0x44>)
 800296c:	699b      	ldr	r3, [r3, #24]
 800296e:	2201      	movs	r2, #1
 8002970:	4013      	ands	r3, r2
 8002972:	607b      	str	r3, [r7, #4]
 8002974:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002976:	4b09      	ldr	r3, [pc, #36]	@ (800299c <HAL_MspInit+0x44>)
 8002978:	69da      	ldr	r2, [r3, #28]
 800297a:	4b08      	ldr	r3, [pc, #32]	@ (800299c <HAL_MspInit+0x44>)
 800297c:	2180      	movs	r1, #128	@ 0x80
 800297e:	0549      	lsls	r1, r1, #21
 8002980:	430a      	orrs	r2, r1
 8002982:	61da      	str	r2, [r3, #28]
 8002984:	4b05      	ldr	r3, [pc, #20]	@ (800299c <HAL_MspInit+0x44>)
 8002986:	69da      	ldr	r2, [r3, #28]
 8002988:	2380      	movs	r3, #128	@ 0x80
 800298a:	055b      	lsls	r3, r3, #21
 800298c:	4013      	ands	r3, r2
 800298e:	603b      	str	r3, [r7, #0]
 8002990:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002992:	46c0      	nop			@ (mov r8, r8)
 8002994:	46bd      	mov	sp, r7
 8002996:	b002      	add	sp, #8
 8002998:	bd80      	pop	{r7, pc}
 800299a:	46c0      	nop			@ (mov r8, r8)
 800299c:	40021000 	.word	0x40021000

080029a0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80029a0:	b590      	push	{r4, r7, lr}
 80029a2:	b08b      	sub	sp, #44	@ 0x2c
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029a8:	2414      	movs	r4, #20
 80029aa:	193b      	adds	r3, r7, r4
 80029ac:	0018      	movs	r0, r3
 80029ae:	2314      	movs	r3, #20
 80029b0:	001a      	movs	r2, r3
 80029b2:	2100      	movs	r1, #0
 80029b4:	f005 fb82 	bl	80080bc <memset>
  if(huart->Instance==USART1)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4a21      	ldr	r2, [pc, #132]	@ (8002a44 <HAL_UART_MspInit+0xa4>)
 80029be:	4293      	cmp	r3, r2
 80029c0:	d13b      	bne.n	8002a3a <HAL_UART_MspInit+0x9a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80029c2:	4b21      	ldr	r3, [pc, #132]	@ (8002a48 <HAL_UART_MspInit+0xa8>)
 80029c4:	699a      	ldr	r2, [r3, #24]
 80029c6:	4b20      	ldr	r3, [pc, #128]	@ (8002a48 <HAL_UART_MspInit+0xa8>)
 80029c8:	2180      	movs	r1, #128	@ 0x80
 80029ca:	01c9      	lsls	r1, r1, #7
 80029cc:	430a      	orrs	r2, r1
 80029ce:	619a      	str	r2, [r3, #24]
 80029d0:	4b1d      	ldr	r3, [pc, #116]	@ (8002a48 <HAL_UART_MspInit+0xa8>)
 80029d2:	699a      	ldr	r2, [r3, #24]
 80029d4:	2380      	movs	r3, #128	@ 0x80
 80029d6:	01db      	lsls	r3, r3, #7
 80029d8:	4013      	ands	r3, r2
 80029da:	613b      	str	r3, [r7, #16]
 80029dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029de:	4b1a      	ldr	r3, [pc, #104]	@ (8002a48 <HAL_UART_MspInit+0xa8>)
 80029e0:	695a      	ldr	r2, [r3, #20]
 80029e2:	4b19      	ldr	r3, [pc, #100]	@ (8002a48 <HAL_UART_MspInit+0xa8>)
 80029e4:	2180      	movs	r1, #128	@ 0x80
 80029e6:	0289      	lsls	r1, r1, #10
 80029e8:	430a      	orrs	r2, r1
 80029ea:	615a      	str	r2, [r3, #20]
 80029ec:	4b16      	ldr	r3, [pc, #88]	@ (8002a48 <HAL_UART_MspInit+0xa8>)
 80029ee:	695a      	ldr	r2, [r3, #20]
 80029f0:	2380      	movs	r3, #128	@ 0x80
 80029f2:	029b      	lsls	r3, r3, #10
 80029f4:	4013      	ands	r3, r2
 80029f6:	60fb      	str	r3, [r7, #12]
 80029f8:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = RS485_TX_Pin|RS485_RX_Pin;
 80029fa:	193b      	adds	r3, r7, r4
 80029fc:	22c0      	movs	r2, #192	@ 0xc0
 80029fe:	00d2      	lsls	r2, r2, #3
 8002a00:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a02:	0021      	movs	r1, r4
 8002a04:	187b      	adds	r3, r7, r1
 8002a06:	2202      	movs	r2, #2
 8002a08:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a0a:	187b      	adds	r3, r7, r1
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002a10:	187b      	adds	r3, r7, r1
 8002a12:	2203      	movs	r2, #3
 8002a14:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8002a16:	187b      	adds	r3, r7, r1
 8002a18:	2201      	movs	r2, #1
 8002a1a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a1c:	187a      	adds	r2, r7, r1
 8002a1e:	2390      	movs	r3, #144	@ 0x90
 8002a20:	05db      	lsls	r3, r3, #23
 8002a22:	0011      	movs	r1, r2
 8002a24:	0018      	movs	r0, r3
 8002a26:	f000 fb1b 	bl	8003060 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	2100      	movs	r1, #0
 8002a2e:	201b      	movs	r0, #27
 8002a30:	f000 fa66 	bl	8002f00 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002a34:	201b      	movs	r0, #27
 8002a36:	f000 fa78 	bl	8002f2a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002a3a:	46c0      	nop			@ (mov r8, r8)
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	b00b      	add	sp, #44	@ 0x2c
 8002a40:	bd90      	pop	{r4, r7, pc}
 8002a42:	46c0      	nop			@ (mov r8, r8)
 8002a44:	40013800 	.word	0x40013800
 8002a48:	40021000 	.word	0x40021000

08002a4c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002a50:	46c0      	nop			@ (mov r8, r8)
 8002a52:	e7fd      	b.n	8002a50 <NMI_Handler+0x4>

08002a54 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002a58:	46c0      	nop			@ (mov r8, r8)
 8002a5a:	e7fd      	b.n	8002a58 <HardFault_Handler+0x4>

08002a5c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002a60:	46c0      	nop			@ (mov r8, r8)
 8002a62:	46bd      	mov	sp, r7
 8002a64:	bd80      	pop	{r7, pc}

08002a66 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002a66:	b580      	push	{r7, lr}
 8002a68:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002a6a:	46c0      	nop			@ (mov r8, r8)
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	bd80      	pop	{r7, pc}

08002a70 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002a74:	f000 f958 	bl	8002d28 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002a78:	46c0      	nop			@ (mov r8, r8)
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bd80      	pop	{r7, pc}

08002a7e <EXTI2_3_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 and 3 interrupts.
  */
void EXTI2_3_IRQHandler(void)
{
 8002a7e:	b580      	push	{r7, lr}
 8002a80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_3_IRQn 0 */

  /* USER CODE END EXTI2_3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DIGITAL_IN1_Pin);
 8002a82:	2008      	movs	r0, #8
 8002a84:	f000 fcb2 	bl	80033ec <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_3_IRQn 1 */

  /* USER CODE END EXTI2_3_IRQn 1 */
}
 8002a88:	46c0      	nop			@ (mov r8, r8)
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	bd80      	pop	{r7, pc}

08002a8e <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8002a8e:	b580      	push	{r7, lr}
 8002a90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DIGITAL_IN2_Pin);
 8002a92:	2010      	movs	r0, #16
 8002a94:	f000 fcaa 	bl	80033ec <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8002a98:	46c0      	nop			@ (mov r8, r8)
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bd80      	pop	{r7, pc}
	...

08002aa0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002aa4:	4b04      	ldr	r3, [pc, #16]	@ (8002ab8 <USART1_IRQHandler+0x18>)
 8002aa6:	0018      	movs	r0, r3
 8002aa8:	f001 fb32 	bl	8004110 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */
  rs485_receive_package();
 8002aac:	f003 ffb8 	bl	8006a20 <rs485_receive_package>
  /* USER CODE END USART1_IRQn 1 */
}
 8002ab0:	46c0      	nop			@ (mov r8, r8)
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	bd80      	pop	{r7, pc}
 8002ab6:	46c0      	nop			@ (mov r8, r8)
 8002ab8:	20000200 	.word	0x20000200

08002abc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	af00      	add	r7, sp, #0
  return 1;
 8002ac0:	2301      	movs	r3, #1
}
 8002ac2:	0018      	movs	r0, r3
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	bd80      	pop	{r7, pc}

08002ac8 <_kill>:

int _kill(int pid, int sig)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b082      	sub	sp, #8
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
 8002ad0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002ad2:	f005 fb4d 	bl	8008170 <__errno>
 8002ad6:	0003      	movs	r3, r0
 8002ad8:	2216      	movs	r2, #22
 8002ada:	601a      	str	r2, [r3, #0]
  return -1;
 8002adc:	2301      	movs	r3, #1
 8002ade:	425b      	negs	r3, r3
}
 8002ae0:	0018      	movs	r0, r3
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	b002      	add	sp, #8
 8002ae6:	bd80      	pop	{r7, pc}

08002ae8 <_exit>:

void _exit (int status)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b082      	sub	sp, #8
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002af0:	2301      	movs	r3, #1
 8002af2:	425a      	negs	r2, r3
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	0011      	movs	r1, r2
 8002af8:	0018      	movs	r0, r3
 8002afa:	f7ff ffe5 	bl	8002ac8 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002afe:	46c0      	nop			@ (mov r8, r8)
 8002b00:	e7fd      	b.n	8002afe <_exit+0x16>

08002b02 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002b02:	b580      	push	{r7, lr}
 8002b04:	b086      	sub	sp, #24
 8002b06:	af00      	add	r7, sp, #0
 8002b08:	60f8      	str	r0, [r7, #12]
 8002b0a:	60b9      	str	r1, [r7, #8]
 8002b0c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b0e:	2300      	movs	r3, #0
 8002b10:	617b      	str	r3, [r7, #20]
 8002b12:	e00a      	b.n	8002b2a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002b14:	e000      	b.n	8002b18 <_read+0x16>
 8002b16:	bf00      	nop
 8002b18:	0001      	movs	r1, r0
 8002b1a:	68bb      	ldr	r3, [r7, #8]
 8002b1c:	1c5a      	adds	r2, r3, #1
 8002b1e:	60ba      	str	r2, [r7, #8]
 8002b20:	b2ca      	uxtb	r2, r1
 8002b22:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b24:	697b      	ldr	r3, [r7, #20]
 8002b26:	3301      	adds	r3, #1
 8002b28:	617b      	str	r3, [r7, #20]
 8002b2a:	697a      	ldr	r2, [r7, #20]
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	429a      	cmp	r2, r3
 8002b30:	dbf0      	blt.n	8002b14 <_read+0x12>
  }

  return len;
 8002b32:	687b      	ldr	r3, [r7, #4]
}
 8002b34:	0018      	movs	r0, r3
 8002b36:	46bd      	mov	sp, r7
 8002b38:	b006      	add	sp, #24
 8002b3a:	bd80      	pop	{r7, pc}

08002b3c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b086      	sub	sp, #24
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	60f8      	str	r0, [r7, #12]
 8002b44:	60b9      	str	r1, [r7, #8]
 8002b46:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b48:	2300      	movs	r3, #0
 8002b4a:	617b      	str	r3, [r7, #20]
 8002b4c:	e009      	b.n	8002b62 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002b4e:	68bb      	ldr	r3, [r7, #8]
 8002b50:	1c5a      	adds	r2, r3, #1
 8002b52:	60ba      	str	r2, [r7, #8]
 8002b54:	781b      	ldrb	r3, [r3, #0]
 8002b56:	0018      	movs	r0, r3
 8002b58:	e000      	b.n	8002b5c <_write+0x20>
 8002b5a:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b5c:	697b      	ldr	r3, [r7, #20]
 8002b5e:	3301      	adds	r3, #1
 8002b60:	617b      	str	r3, [r7, #20]
 8002b62:	697a      	ldr	r2, [r7, #20]
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	429a      	cmp	r2, r3
 8002b68:	dbf1      	blt.n	8002b4e <_write+0x12>
  }
  return len;
 8002b6a:	687b      	ldr	r3, [r7, #4]
}
 8002b6c:	0018      	movs	r0, r3
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	b006      	add	sp, #24
 8002b72:	bd80      	pop	{r7, pc}

08002b74 <_close>:

int _close(int file)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b082      	sub	sp, #8
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002b7c:	2301      	movs	r3, #1
 8002b7e:	425b      	negs	r3, r3
}
 8002b80:	0018      	movs	r0, r3
 8002b82:	46bd      	mov	sp, r7
 8002b84:	b002      	add	sp, #8
 8002b86:	bd80      	pop	{r7, pc}

08002b88 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b082      	sub	sp, #8
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
 8002b90:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	2280      	movs	r2, #128	@ 0x80
 8002b96:	0192      	lsls	r2, r2, #6
 8002b98:	605a      	str	r2, [r3, #4]
  return 0;
 8002b9a:	2300      	movs	r3, #0
}
 8002b9c:	0018      	movs	r0, r3
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	b002      	add	sp, #8
 8002ba2:	bd80      	pop	{r7, pc}

08002ba4 <_isatty>:

int _isatty(int file)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b082      	sub	sp, #8
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002bac:	2301      	movs	r3, #1
}
 8002bae:	0018      	movs	r0, r3
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	b002      	add	sp, #8
 8002bb4:	bd80      	pop	{r7, pc}

08002bb6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002bb6:	b580      	push	{r7, lr}
 8002bb8:	b084      	sub	sp, #16
 8002bba:	af00      	add	r7, sp, #0
 8002bbc:	60f8      	str	r0, [r7, #12]
 8002bbe:	60b9      	str	r1, [r7, #8]
 8002bc0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002bc2:	2300      	movs	r3, #0
}
 8002bc4:	0018      	movs	r0, r3
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	b004      	add	sp, #16
 8002bca:	bd80      	pop	{r7, pc}

08002bcc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b086      	sub	sp, #24
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002bd4:	4a14      	ldr	r2, [pc, #80]	@ (8002c28 <_sbrk+0x5c>)
 8002bd6:	4b15      	ldr	r3, [pc, #84]	@ (8002c2c <_sbrk+0x60>)
 8002bd8:	1ad3      	subs	r3, r2, r3
 8002bda:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002bdc:	697b      	ldr	r3, [r7, #20]
 8002bde:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002be0:	4b13      	ldr	r3, [pc, #76]	@ (8002c30 <_sbrk+0x64>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d102      	bne.n	8002bee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002be8:	4b11      	ldr	r3, [pc, #68]	@ (8002c30 <_sbrk+0x64>)
 8002bea:	4a12      	ldr	r2, [pc, #72]	@ (8002c34 <_sbrk+0x68>)
 8002bec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002bee:	4b10      	ldr	r3, [pc, #64]	@ (8002c30 <_sbrk+0x64>)
 8002bf0:	681a      	ldr	r2, [r3, #0]
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	18d3      	adds	r3, r2, r3
 8002bf6:	693a      	ldr	r2, [r7, #16]
 8002bf8:	429a      	cmp	r2, r3
 8002bfa:	d207      	bcs.n	8002c0c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002bfc:	f005 fab8 	bl	8008170 <__errno>
 8002c00:	0003      	movs	r3, r0
 8002c02:	220c      	movs	r2, #12
 8002c04:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002c06:	2301      	movs	r3, #1
 8002c08:	425b      	negs	r3, r3
 8002c0a:	e009      	b.n	8002c20 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002c0c:	4b08      	ldr	r3, [pc, #32]	@ (8002c30 <_sbrk+0x64>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002c12:	4b07      	ldr	r3, [pc, #28]	@ (8002c30 <_sbrk+0x64>)
 8002c14:	681a      	ldr	r2, [r3, #0]
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	18d2      	adds	r2, r2, r3
 8002c1a:	4b05      	ldr	r3, [pc, #20]	@ (8002c30 <_sbrk+0x64>)
 8002c1c:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8002c1e:	68fb      	ldr	r3, [r7, #12]
}
 8002c20:	0018      	movs	r0, r3
 8002c22:	46bd      	mov	sp, r7
 8002c24:	b006      	add	sp, #24
 8002c26:	bd80      	pop	{r7, pc}
 8002c28:	20002000 	.word	0x20002000
 8002c2c:	00000400 	.word	0x00000400
 8002c30:	20000288 	.word	0x20000288
 8002c34:	20000630 	.word	0x20000630

08002c38 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8002c3c:	46c0      	nop			@ (mov r8, r8)
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bd80      	pop	{r7, pc}
	...

08002c44 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002c44:	480d      	ldr	r0, [pc, #52]	@ (8002c7c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002c46:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002c48:	f7ff fff6 	bl	8002c38 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002c4c:	480c      	ldr	r0, [pc, #48]	@ (8002c80 <LoopForever+0x6>)
  ldr r1, =_edata
 8002c4e:	490d      	ldr	r1, [pc, #52]	@ (8002c84 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002c50:	4a0d      	ldr	r2, [pc, #52]	@ (8002c88 <LoopForever+0xe>)
  movs r3, #0
 8002c52:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002c54:	e002      	b.n	8002c5c <LoopCopyDataInit>

08002c56 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002c56:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002c58:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002c5a:	3304      	adds	r3, #4

08002c5c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002c5c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002c5e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002c60:	d3f9      	bcc.n	8002c56 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002c62:	4a0a      	ldr	r2, [pc, #40]	@ (8002c8c <LoopForever+0x12>)
  ldr r4, =_ebss
 8002c64:	4c0a      	ldr	r4, [pc, #40]	@ (8002c90 <LoopForever+0x16>)
  movs r3, #0
 8002c66:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002c68:	e001      	b.n	8002c6e <LoopFillZerobss>

08002c6a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002c6a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002c6c:	3204      	adds	r2, #4

08002c6e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002c6e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002c70:	d3fb      	bcc.n	8002c6a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002c72:	f005 fa83 	bl	800817c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002c76:	f7ff fd25 	bl	80026c4 <main>

08002c7a <LoopForever>:

LoopForever:
    b LoopForever
 8002c7a:	e7fe      	b.n	8002c7a <LoopForever>
  ldr   r0, =_estack
 8002c7c:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8002c80:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002c84:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8002c88:	0800c398 	.word	0x0800c398
  ldr r2, =_sbss
 8002c8c:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8002c90:	2000062c 	.word	0x2000062c

08002c94 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002c94:	e7fe      	b.n	8002c94 <ADC1_IRQHandler>
	...

08002c98 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002c9c:	4b07      	ldr	r3, [pc, #28]	@ (8002cbc <HAL_Init+0x24>)
 8002c9e:	681a      	ldr	r2, [r3, #0]
 8002ca0:	4b06      	ldr	r3, [pc, #24]	@ (8002cbc <HAL_Init+0x24>)
 8002ca2:	2110      	movs	r1, #16
 8002ca4:	430a      	orrs	r2, r1
 8002ca6:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8002ca8:	2003      	movs	r0, #3
 8002caa:	f000 f809 	bl	8002cc0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002cae:	f7ff fe53 	bl	8002958 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002cb2:	2300      	movs	r3, #0
}
 8002cb4:	0018      	movs	r0, r3
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	bd80      	pop	{r7, pc}
 8002cba:	46c0      	nop			@ (mov r8, r8)
 8002cbc:	40022000 	.word	0x40022000

08002cc0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002cc0:	b590      	push	{r4, r7, lr}
 8002cc2:	b083      	sub	sp, #12
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002cc8:	4b14      	ldr	r3, [pc, #80]	@ (8002d1c <HAL_InitTick+0x5c>)
 8002cca:	681c      	ldr	r4, [r3, #0]
 8002ccc:	4b14      	ldr	r3, [pc, #80]	@ (8002d20 <HAL_InitTick+0x60>)
 8002cce:	781b      	ldrb	r3, [r3, #0]
 8002cd0:	0019      	movs	r1, r3
 8002cd2:	23fa      	movs	r3, #250	@ 0xfa
 8002cd4:	0098      	lsls	r0, r3, #2
 8002cd6:	f7fd fa33 	bl	8000140 <__udivsi3>
 8002cda:	0003      	movs	r3, r0
 8002cdc:	0019      	movs	r1, r3
 8002cde:	0020      	movs	r0, r4
 8002ce0:	f7fd fa2e 	bl	8000140 <__udivsi3>
 8002ce4:	0003      	movs	r3, r0
 8002ce6:	0018      	movs	r0, r3
 8002ce8:	f000 f92f 	bl	8002f4a <HAL_SYSTICK_Config>
 8002cec:	1e03      	subs	r3, r0, #0
 8002cee:	d001      	beq.n	8002cf4 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	e00f      	b.n	8002d14 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2b03      	cmp	r3, #3
 8002cf8:	d80b      	bhi.n	8002d12 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002cfa:	6879      	ldr	r1, [r7, #4]
 8002cfc:	2301      	movs	r3, #1
 8002cfe:	425b      	negs	r3, r3
 8002d00:	2200      	movs	r2, #0
 8002d02:	0018      	movs	r0, r3
 8002d04:	f000 f8fc 	bl	8002f00 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002d08:	4b06      	ldr	r3, [pc, #24]	@ (8002d24 <HAL_InitTick+0x64>)
 8002d0a:	687a      	ldr	r2, [r7, #4]
 8002d0c:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8002d0e:	2300      	movs	r3, #0
 8002d10:	e000      	b.n	8002d14 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8002d12:	2301      	movs	r3, #1
}
 8002d14:	0018      	movs	r0, r3
 8002d16:	46bd      	mov	sp, r7
 8002d18:	b003      	add	sp, #12
 8002d1a:	bd90      	pop	{r4, r7, pc}
 8002d1c:	20000000 	.word	0x20000000
 8002d20:	20000008 	.word	0x20000008
 8002d24:	20000004 	.word	0x20000004

08002d28 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002d2c:	4b05      	ldr	r3, [pc, #20]	@ (8002d44 <HAL_IncTick+0x1c>)
 8002d2e:	781b      	ldrb	r3, [r3, #0]
 8002d30:	001a      	movs	r2, r3
 8002d32:	4b05      	ldr	r3, [pc, #20]	@ (8002d48 <HAL_IncTick+0x20>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	18d2      	adds	r2, r2, r3
 8002d38:	4b03      	ldr	r3, [pc, #12]	@ (8002d48 <HAL_IncTick+0x20>)
 8002d3a:	601a      	str	r2, [r3, #0]
}
 8002d3c:	46c0      	nop			@ (mov r8, r8)
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	bd80      	pop	{r7, pc}
 8002d42:	46c0      	nop			@ (mov r8, r8)
 8002d44:	20000008 	.word	0x20000008
 8002d48:	2000028c 	.word	0x2000028c

08002d4c <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	af00      	add	r7, sp, #0
  return uwTick;
 8002d50:	4b02      	ldr	r3, [pc, #8]	@ (8002d5c <HAL_GetTick+0x10>)
 8002d52:	681b      	ldr	r3, [r3, #0]
}
 8002d54:	0018      	movs	r0, r3
 8002d56:	46bd      	mov	sp, r7
 8002d58:	bd80      	pop	{r7, pc}
 8002d5a:	46c0      	nop			@ (mov r8, r8)
 8002d5c:	2000028c 	.word	0x2000028c

08002d60 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b084      	sub	sp, #16
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002d68:	f7ff fff0 	bl	8002d4c <HAL_GetTick>
 8002d6c:	0003      	movs	r3, r0
 8002d6e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	3301      	adds	r3, #1
 8002d78:	d005      	beq.n	8002d86 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002d7a:	4b0a      	ldr	r3, [pc, #40]	@ (8002da4 <HAL_Delay+0x44>)
 8002d7c:	781b      	ldrb	r3, [r3, #0]
 8002d7e:	001a      	movs	r2, r3
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	189b      	adds	r3, r3, r2
 8002d84:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8002d86:	46c0      	nop			@ (mov r8, r8)
 8002d88:	f7ff ffe0 	bl	8002d4c <HAL_GetTick>
 8002d8c:	0002      	movs	r2, r0
 8002d8e:	68bb      	ldr	r3, [r7, #8]
 8002d90:	1ad3      	subs	r3, r2, r3
 8002d92:	68fa      	ldr	r2, [r7, #12]
 8002d94:	429a      	cmp	r2, r3
 8002d96:	d8f7      	bhi.n	8002d88 <HAL_Delay+0x28>
  {
  }
}
 8002d98:	46c0      	nop			@ (mov r8, r8)
 8002d9a:	46c0      	nop			@ (mov r8, r8)
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	b004      	add	sp, #16
 8002da0:	bd80      	pop	{r7, pc}
 8002da2:	46c0      	nop			@ (mov r8, r8)
 8002da4:	20000008 	.word	0x20000008

08002da8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b082      	sub	sp, #8
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	0002      	movs	r2, r0
 8002db0:	1dfb      	adds	r3, r7, #7
 8002db2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002db4:	1dfb      	adds	r3, r7, #7
 8002db6:	781b      	ldrb	r3, [r3, #0]
 8002db8:	2b7f      	cmp	r3, #127	@ 0x7f
 8002dba:	d809      	bhi.n	8002dd0 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002dbc:	1dfb      	adds	r3, r7, #7
 8002dbe:	781b      	ldrb	r3, [r3, #0]
 8002dc0:	001a      	movs	r2, r3
 8002dc2:	231f      	movs	r3, #31
 8002dc4:	401a      	ands	r2, r3
 8002dc6:	4b04      	ldr	r3, [pc, #16]	@ (8002dd8 <__NVIC_EnableIRQ+0x30>)
 8002dc8:	2101      	movs	r1, #1
 8002dca:	4091      	lsls	r1, r2
 8002dcc:	000a      	movs	r2, r1
 8002dce:	601a      	str	r2, [r3, #0]
  }
}
 8002dd0:	46c0      	nop			@ (mov r8, r8)
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	b002      	add	sp, #8
 8002dd6:	bd80      	pop	{r7, pc}
 8002dd8:	e000e100 	.word	0xe000e100

08002ddc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ddc:	b590      	push	{r4, r7, lr}
 8002dde:	b083      	sub	sp, #12
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	0002      	movs	r2, r0
 8002de4:	6039      	str	r1, [r7, #0]
 8002de6:	1dfb      	adds	r3, r7, #7
 8002de8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002dea:	1dfb      	adds	r3, r7, #7
 8002dec:	781b      	ldrb	r3, [r3, #0]
 8002dee:	2b7f      	cmp	r3, #127	@ 0x7f
 8002df0:	d828      	bhi.n	8002e44 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002df2:	4a2f      	ldr	r2, [pc, #188]	@ (8002eb0 <__NVIC_SetPriority+0xd4>)
 8002df4:	1dfb      	adds	r3, r7, #7
 8002df6:	781b      	ldrb	r3, [r3, #0]
 8002df8:	b25b      	sxtb	r3, r3
 8002dfa:	089b      	lsrs	r3, r3, #2
 8002dfc:	33c0      	adds	r3, #192	@ 0xc0
 8002dfe:	009b      	lsls	r3, r3, #2
 8002e00:	589b      	ldr	r3, [r3, r2]
 8002e02:	1dfa      	adds	r2, r7, #7
 8002e04:	7812      	ldrb	r2, [r2, #0]
 8002e06:	0011      	movs	r1, r2
 8002e08:	2203      	movs	r2, #3
 8002e0a:	400a      	ands	r2, r1
 8002e0c:	00d2      	lsls	r2, r2, #3
 8002e0e:	21ff      	movs	r1, #255	@ 0xff
 8002e10:	4091      	lsls	r1, r2
 8002e12:	000a      	movs	r2, r1
 8002e14:	43d2      	mvns	r2, r2
 8002e16:	401a      	ands	r2, r3
 8002e18:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	019b      	lsls	r3, r3, #6
 8002e1e:	22ff      	movs	r2, #255	@ 0xff
 8002e20:	401a      	ands	r2, r3
 8002e22:	1dfb      	adds	r3, r7, #7
 8002e24:	781b      	ldrb	r3, [r3, #0]
 8002e26:	0018      	movs	r0, r3
 8002e28:	2303      	movs	r3, #3
 8002e2a:	4003      	ands	r3, r0
 8002e2c:	00db      	lsls	r3, r3, #3
 8002e2e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002e30:	481f      	ldr	r0, [pc, #124]	@ (8002eb0 <__NVIC_SetPriority+0xd4>)
 8002e32:	1dfb      	adds	r3, r7, #7
 8002e34:	781b      	ldrb	r3, [r3, #0]
 8002e36:	b25b      	sxtb	r3, r3
 8002e38:	089b      	lsrs	r3, r3, #2
 8002e3a:	430a      	orrs	r2, r1
 8002e3c:	33c0      	adds	r3, #192	@ 0xc0
 8002e3e:	009b      	lsls	r3, r3, #2
 8002e40:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8002e42:	e031      	b.n	8002ea8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002e44:	4a1b      	ldr	r2, [pc, #108]	@ (8002eb4 <__NVIC_SetPriority+0xd8>)
 8002e46:	1dfb      	adds	r3, r7, #7
 8002e48:	781b      	ldrb	r3, [r3, #0]
 8002e4a:	0019      	movs	r1, r3
 8002e4c:	230f      	movs	r3, #15
 8002e4e:	400b      	ands	r3, r1
 8002e50:	3b08      	subs	r3, #8
 8002e52:	089b      	lsrs	r3, r3, #2
 8002e54:	3306      	adds	r3, #6
 8002e56:	009b      	lsls	r3, r3, #2
 8002e58:	18d3      	adds	r3, r2, r3
 8002e5a:	3304      	adds	r3, #4
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	1dfa      	adds	r2, r7, #7
 8002e60:	7812      	ldrb	r2, [r2, #0]
 8002e62:	0011      	movs	r1, r2
 8002e64:	2203      	movs	r2, #3
 8002e66:	400a      	ands	r2, r1
 8002e68:	00d2      	lsls	r2, r2, #3
 8002e6a:	21ff      	movs	r1, #255	@ 0xff
 8002e6c:	4091      	lsls	r1, r2
 8002e6e:	000a      	movs	r2, r1
 8002e70:	43d2      	mvns	r2, r2
 8002e72:	401a      	ands	r2, r3
 8002e74:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	019b      	lsls	r3, r3, #6
 8002e7a:	22ff      	movs	r2, #255	@ 0xff
 8002e7c:	401a      	ands	r2, r3
 8002e7e:	1dfb      	adds	r3, r7, #7
 8002e80:	781b      	ldrb	r3, [r3, #0]
 8002e82:	0018      	movs	r0, r3
 8002e84:	2303      	movs	r3, #3
 8002e86:	4003      	ands	r3, r0
 8002e88:	00db      	lsls	r3, r3, #3
 8002e8a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002e8c:	4809      	ldr	r0, [pc, #36]	@ (8002eb4 <__NVIC_SetPriority+0xd8>)
 8002e8e:	1dfb      	adds	r3, r7, #7
 8002e90:	781b      	ldrb	r3, [r3, #0]
 8002e92:	001c      	movs	r4, r3
 8002e94:	230f      	movs	r3, #15
 8002e96:	4023      	ands	r3, r4
 8002e98:	3b08      	subs	r3, #8
 8002e9a:	089b      	lsrs	r3, r3, #2
 8002e9c:	430a      	orrs	r2, r1
 8002e9e:	3306      	adds	r3, #6
 8002ea0:	009b      	lsls	r3, r3, #2
 8002ea2:	18c3      	adds	r3, r0, r3
 8002ea4:	3304      	adds	r3, #4
 8002ea6:	601a      	str	r2, [r3, #0]
}
 8002ea8:	46c0      	nop			@ (mov r8, r8)
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	b003      	add	sp, #12
 8002eae:	bd90      	pop	{r4, r7, pc}
 8002eb0:	e000e100 	.word	0xe000e100
 8002eb4:	e000ed00 	.word	0xe000ed00

08002eb8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b082      	sub	sp, #8
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	1e5a      	subs	r2, r3, #1
 8002ec4:	2380      	movs	r3, #128	@ 0x80
 8002ec6:	045b      	lsls	r3, r3, #17
 8002ec8:	429a      	cmp	r2, r3
 8002eca:	d301      	bcc.n	8002ed0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002ecc:	2301      	movs	r3, #1
 8002ece:	e010      	b.n	8002ef2 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002ed0:	4b0a      	ldr	r3, [pc, #40]	@ (8002efc <SysTick_Config+0x44>)
 8002ed2:	687a      	ldr	r2, [r7, #4]
 8002ed4:	3a01      	subs	r2, #1
 8002ed6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002ed8:	2301      	movs	r3, #1
 8002eda:	425b      	negs	r3, r3
 8002edc:	2103      	movs	r1, #3
 8002ede:	0018      	movs	r0, r3
 8002ee0:	f7ff ff7c 	bl	8002ddc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002ee4:	4b05      	ldr	r3, [pc, #20]	@ (8002efc <SysTick_Config+0x44>)
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002eea:	4b04      	ldr	r3, [pc, #16]	@ (8002efc <SysTick_Config+0x44>)
 8002eec:	2207      	movs	r2, #7
 8002eee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002ef0:	2300      	movs	r3, #0
}
 8002ef2:	0018      	movs	r0, r3
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	b002      	add	sp, #8
 8002ef8:	bd80      	pop	{r7, pc}
 8002efa:	46c0      	nop			@ (mov r8, r8)
 8002efc:	e000e010 	.word	0xe000e010

08002f00 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b084      	sub	sp, #16
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	60b9      	str	r1, [r7, #8]
 8002f08:	607a      	str	r2, [r7, #4]
 8002f0a:	210f      	movs	r1, #15
 8002f0c:	187b      	adds	r3, r7, r1
 8002f0e:	1c02      	adds	r2, r0, #0
 8002f10:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8002f12:	68ba      	ldr	r2, [r7, #8]
 8002f14:	187b      	adds	r3, r7, r1
 8002f16:	781b      	ldrb	r3, [r3, #0]
 8002f18:	b25b      	sxtb	r3, r3
 8002f1a:	0011      	movs	r1, r2
 8002f1c:	0018      	movs	r0, r3
 8002f1e:	f7ff ff5d 	bl	8002ddc <__NVIC_SetPriority>
}
 8002f22:	46c0      	nop			@ (mov r8, r8)
 8002f24:	46bd      	mov	sp, r7
 8002f26:	b004      	add	sp, #16
 8002f28:	bd80      	pop	{r7, pc}

08002f2a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f2a:	b580      	push	{r7, lr}
 8002f2c:	b082      	sub	sp, #8
 8002f2e:	af00      	add	r7, sp, #0
 8002f30:	0002      	movs	r2, r0
 8002f32:	1dfb      	adds	r3, r7, #7
 8002f34:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002f36:	1dfb      	adds	r3, r7, #7
 8002f38:	781b      	ldrb	r3, [r3, #0]
 8002f3a:	b25b      	sxtb	r3, r3
 8002f3c:	0018      	movs	r0, r3
 8002f3e:	f7ff ff33 	bl	8002da8 <__NVIC_EnableIRQ>
}
 8002f42:	46c0      	nop			@ (mov r8, r8)
 8002f44:	46bd      	mov	sp, r7
 8002f46:	b002      	add	sp, #8
 8002f48:	bd80      	pop	{r7, pc}

08002f4a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002f4a:	b580      	push	{r7, lr}
 8002f4c:	b082      	sub	sp, #8
 8002f4e:	af00      	add	r7, sp, #0
 8002f50:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	0018      	movs	r0, r3
 8002f56:	f7ff ffaf 	bl	8002eb8 <SysTick_Config>
 8002f5a:	0003      	movs	r3, r0
}
 8002f5c:	0018      	movs	r0, r3
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	b002      	add	sp, #8
 8002f62:	bd80      	pop	{r7, pc}

08002f64 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b082      	sub	sp, #8
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2221      	movs	r2, #33	@ 0x21
 8002f70:	5c9b      	ldrb	r3, [r3, r2]
 8002f72:	b2db      	uxtb	r3, r3
 8002f74:	2b02      	cmp	r3, #2
 8002f76:	d008      	beq.n	8002f8a <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2204      	movs	r2, #4
 8002f7c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	2220      	movs	r2, #32
 8002f82:	2100      	movs	r1, #0
 8002f84:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8002f86:	2301      	movs	r3, #1
 8002f88:	e020      	b.n	8002fcc <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	681a      	ldr	r2, [r3, #0]
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	210e      	movs	r1, #14
 8002f96:	438a      	bics	r2, r1
 8002f98:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	681a      	ldr	r2, [r3, #0]
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	2101      	movs	r1, #1
 8002fa6:	438a      	bics	r2, r1
 8002fa8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002fb2:	2101      	movs	r1, #1
 8002fb4:	4091      	lsls	r1, r2
 8002fb6:	000a      	movs	r2, r1
 8002fb8:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	2221      	movs	r2, #33	@ 0x21
 8002fbe:	2101      	movs	r1, #1
 8002fc0:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	2220      	movs	r2, #32
 8002fc6:	2100      	movs	r1, #0
 8002fc8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002fca:	2300      	movs	r3, #0
}
 8002fcc:	0018      	movs	r0, r3
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	b002      	add	sp, #8
 8002fd2:	bd80      	pop	{r7, pc}

08002fd4 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b084      	sub	sp, #16
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002fdc:	210f      	movs	r1, #15
 8002fde:	187b      	adds	r3, r7, r1
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	701a      	strb	r2, [r3, #0]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2221      	movs	r2, #33	@ 0x21
 8002fe8:	5c9b      	ldrb	r3, [r3, r2]
 8002fea:	b2db      	uxtb	r3, r3
 8002fec:	2b02      	cmp	r3, #2
 8002fee:	d006      	beq.n	8002ffe <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2204      	movs	r2, #4
 8002ff4:	639a      	str	r2, [r3, #56]	@ 0x38

    status = HAL_ERROR;
 8002ff6:	187b      	adds	r3, r7, r1
 8002ff8:	2201      	movs	r2, #1
 8002ffa:	701a      	strb	r2, [r3, #0]
 8002ffc:	e028      	b.n	8003050 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  {

    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	681a      	ldr	r2, [r3, #0]
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	210e      	movs	r1, #14
 800300a:	438a      	bics	r2, r1
 800300c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	681a      	ldr	r2, [r3, #0]
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	2101      	movs	r1, #1
 800301a:	438a      	bics	r2, r1
 800301c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003026:	2101      	movs	r1, #1
 8003028:	4091      	lsls	r1, r2
 800302a:	000a      	movs	r2, r1
 800302c:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	2221      	movs	r2, #33	@ 0x21
 8003032:	2101      	movs	r1, #1
 8003034:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	2220      	movs	r2, #32
 800303a:	2100      	movs	r1, #0
 800303c:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003042:	2b00      	cmp	r3, #0
 8003044:	d004      	beq.n	8003050 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800304a:	687a      	ldr	r2, [r7, #4]
 800304c:	0010      	movs	r0, r2
 800304e:	4798      	blx	r3
    }
  }
  return status;
 8003050:	230f      	movs	r3, #15
 8003052:	18fb      	adds	r3, r7, r3
 8003054:	781b      	ldrb	r3, [r3, #0]
}
 8003056:	0018      	movs	r0, r3
 8003058:	46bd      	mov	sp, r7
 800305a:	b004      	add	sp, #16
 800305c:	bd80      	pop	{r7, pc}
	...

08003060 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	b086      	sub	sp, #24
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
 8003068:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800306a:	2300      	movs	r3, #0
 800306c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800306e:	e14f      	b.n	8003310 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	2101      	movs	r1, #1
 8003076:	697a      	ldr	r2, [r7, #20]
 8003078:	4091      	lsls	r1, r2
 800307a:	000a      	movs	r2, r1
 800307c:	4013      	ands	r3, r2
 800307e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	2b00      	cmp	r3, #0
 8003084:	d100      	bne.n	8003088 <HAL_GPIO_Init+0x28>
 8003086:	e140      	b.n	800330a <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	685b      	ldr	r3, [r3, #4]
 800308c:	2203      	movs	r2, #3
 800308e:	4013      	ands	r3, r2
 8003090:	2b01      	cmp	r3, #1
 8003092:	d005      	beq.n	80030a0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	685b      	ldr	r3, [r3, #4]
 8003098:	2203      	movs	r2, #3
 800309a:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800309c:	2b02      	cmp	r3, #2
 800309e:	d130      	bne.n	8003102 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	689b      	ldr	r3, [r3, #8]
 80030a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80030a6:	697b      	ldr	r3, [r7, #20]
 80030a8:	005b      	lsls	r3, r3, #1
 80030aa:	2203      	movs	r2, #3
 80030ac:	409a      	lsls	r2, r3
 80030ae:	0013      	movs	r3, r2
 80030b0:	43da      	mvns	r2, r3
 80030b2:	693b      	ldr	r3, [r7, #16]
 80030b4:	4013      	ands	r3, r2
 80030b6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	68da      	ldr	r2, [r3, #12]
 80030bc:	697b      	ldr	r3, [r7, #20]
 80030be:	005b      	lsls	r3, r3, #1
 80030c0:	409a      	lsls	r2, r3
 80030c2:	0013      	movs	r3, r2
 80030c4:	693a      	ldr	r2, [r7, #16]
 80030c6:	4313      	orrs	r3, r2
 80030c8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	693a      	ldr	r2, [r7, #16]
 80030ce:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	685b      	ldr	r3, [r3, #4]
 80030d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80030d6:	2201      	movs	r2, #1
 80030d8:	697b      	ldr	r3, [r7, #20]
 80030da:	409a      	lsls	r2, r3
 80030dc:	0013      	movs	r3, r2
 80030de:	43da      	mvns	r2, r3
 80030e0:	693b      	ldr	r3, [r7, #16]
 80030e2:	4013      	ands	r3, r2
 80030e4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	685b      	ldr	r3, [r3, #4]
 80030ea:	091b      	lsrs	r3, r3, #4
 80030ec:	2201      	movs	r2, #1
 80030ee:	401a      	ands	r2, r3
 80030f0:	697b      	ldr	r3, [r7, #20]
 80030f2:	409a      	lsls	r2, r3
 80030f4:	0013      	movs	r3, r2
 80030f6:	693a      	ldr	r2, [r7, #16]
 80030f8:	4313      	orrs	r3, r2
 80030fa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	693a      	ldr	r2, [r7, #16]
 8003100:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003102:	683b      	ldr	r3, [r7, #0]
 8003104:	685b      	ldr	r3, [r3, #4]
 8003106:	2203      	movs	r2, #3
 8003108:	4013      	ands	r3, r2
 800310a:	2b03      	cmp	r3, #3
 800310c:	d017      	beq.n	800313e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	68db      	ldr	r3, [r3, #12]
 8003112:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003114:	697b      	ldr	r3, [r7, #20]
 8003116:	005b      	lsls	r3, r3, #1
 8003118:	2203      	movs	r2, #3
 800311a:	409a      	lsls	r2, r3
 800311c:	0013      	movs	r3, r2
 800311e:	43da      	mvns	r2, r3
 8003120:	693b      	ldr	r3, [r7, #16]
 8003122:	4013      	ands	r3, r2
 8003124:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	689a      	ldr	r2, [r3, #8]
 800312a:	697b      	ldr	r3, [r7, #20]
 800312c:	005b      	lsls	r3, r3, #1
 800312e:	409a      	lsls	r2, r3
 8003130:	0013      	movs	r3, r2
 8003132:	693a      	ldr	r2, [r7, #16]
 8003134:	4313      	orrs	r3, r2
 8003136:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	693a      	ldr	r2, [r7, #16]
 800313c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	685b      	ldr	r3, [r3, #4]
 8003142:	2203      	movs	r2, #3
 8003144:	4013      	ands	r3, r2
 8003146:	2b02      	cmp	r3, #2
 8003148:	d123      	bne.n	8003192 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800314a:	697b      	ldr	r3, [r7, #20]
 800314c:	08da      	lsrs	r2, r3, #3
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	3208      	adds	r2, #8
 8003152:	0092      	lsls	r2, r2, #2
 8003154:	58d3      	ldr	r3, [r2, r3]
 8003156:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003158:	697b      	ldr	r3, [r7, #20]
 800315a:	2207      	movs	r2, #7
 800315c:	4013      	ands	r3, r2
 800315e:	009b      	lsls	r3, r3, #2
 8003160:	220f      	movs	r2, #15
 8003162:	409a      	lsls	r2, r3
 8003164:	0013      	movs	r3, r2
 8003166:	43da      	mvns	r2, r3
 8003168:	693b      	ldr	r3, [r7, #16]
 800316a:	4013      	ands	r3, r2
 800316c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	691a      	ldr	r2, [r3, #16]
 8003172:	697b      	ldr	r3, [r7, #20]
 8003174:	2107      	movs	r1, #7
 8003176:	400b      	ands	r3, r1
 8003178:	009b      	lsls	r3, r3, #2
 800317a:	409a      	lsls	r2, r3
 800317c:	0013      	movs	r3, r2
 800317e:	693a      	ldr	r2, [r7, #16]
 8003180:	4313      	orrs	r3, r2
 8003182:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003184:	697b      	ldr	r3, [r7, #20]
 8003186:	08da      	lsrs	r2, r3, #3
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	3208      	adds	r2, #8
 800318c:	0092      	lsls	r2, r2, #2
 800318e:	6939      	ldr	r1, [r7, #16]
 8003190:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003198:	697b      	ldr	r3, [r7, #20]
 800319a:	005b      	lsls	r3, r3, #1
 800319c:	2203      	movs	r2, #3
 800319e:	409a      	lsls	r2, r3
 80031a0:	0013      	movs	r3, r2
 80031a2:	43da      	mvns	r2, r3
 80031a4:	693b      	ldr	r3, [r7, #16]
 80031a6:	4013      	ands	r3, r2
 80031a8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	685b      	ldr	r3, [r3, #4]
 80031ae:	2203      	movs	r2, #3
 80031b0:	401a      	ands	r2, r3
 80031b2:	697b      	ldr	r3, [r7, #20]
 80031b4:	005b      	lsls	r3, r3, #1
 80031b6:	409a      	lsls	r2, r3
 80031b8:	0013      	movs	r3, r2
 80031ba:	693a      	ldr	r2, [r7, #16]
 80031bc:	4313      	orrs	r3, r2
 80031be:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	693a      	ldr	r2, [r7, #16]
 80031c4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	685a      	ldr	r2, [r3, #4]
 80031ca:	23c0      	movs	r3, #192	@ 0xc0
 80031cc:	029b      	lsls	r3, r3, #10
 80031ce:	4013      	ands	r3, r2
 80031d0:	d100      	bne.n	80031d4 <HAL_GPIO_Init+0x174>
 80031d2:	e09a      	b.n	800330a <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80031d4:	4b54      	ldr	r3, [pc, #336]	@ (8003328 <HAL_GPIO_Init+0x2c8>)
 80031d6:	699a      	ldr	r2, [r3, #24]
 80031d8:	4b53      	ldr	r3, [pc, #332]	@ (8003328 <HAL_GPIO_Init+0x2c8>)
 80031da:	2101      	movs	r1, #1
 80031dc:	430a      	orrs	r2, r1
 80031de:	619a      	str	r2, [r3, #24]
 80031e0:	4b51      	ldr	r3, [pc, #324]	@ (8003328 <HAL_GPIO_Init+0x2c8>)
 80031e2:	699b      	ldr	r3, [r3, #24]
 80031e4:	2201      	movs	r2, #1
 80031e6:	4013      	ands	r3, r2
 80031e8:	60bb      	str	r3, [r7, #8]
 80031ea:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80031ec:	4a4f      	ldr	r2, [pc, #316]	@ (800332c <HAL_GPIO_Init+0x2cc>)
 80031ee:	697b      	ldr	r3, [r7, #20]
 80031f0:	089b      	lsrs	r3, r3, #2
 80031f2:	3302      	adds	r3, #2
 80031f4:	009b      	lsls	r3, r3, #2
 80031f6:	589b      	ldr	r3, [r3, r2]
 80031f8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80031fa:	697b      	ldr	r3, [r7, #20]
 80031fc:	2203      	movs	r2, #3
 80031fe:	4013      	ands	r3, r2
 8003200:	009b      	lsls	r3, r3, #2
 8003202:	220f      	movs	r2, #15
 8003204:	409a      	lsls	r2, r3
 8003206:	0013      	movs	r3, r2
 8003208:	43da      	mvns	r2, r3
 800320a:	693b      	ldr	r3, [r7, #16]
 800320c:	4013      	ands	r3, r2
 800320e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003210:	687a      	ldr	r2, [r7, #4]
 8003212:	2390      	movs	r3, #144	@ 0x90
 8003214:	05db      	lsls	r3, r3, #23
 8003216:	429a      	cmp	r2, r3
 8003218:	d013      	beq.n	8003242 <HAL_GPIO_Init+0x1e2>
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	4a44      	ldr	r2, [pc, #272]	@ (8003330 <HAL_GPIO_Init+0x2d0>)
 800321e:	4293      	cmp	r3, r2
 8003220:	d00d      	beq.n	800323e <HAL_GPIO_Init+0x1de>
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	4a43      	ldr	r2, [pc, #268]	@ (8003334 <HAL_GPIO_Init+0x2d4>)
 8003226:	4293      	cmp	r3, r2
 8003228:	d007      	beq.n	800323a <HAL_GPIO_Init+0x1da>
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	4a42      	ldr	r2, [pc, #264]	@ (8003338 <HAL_GPIO_Init+0x2d8>)
 800322e:	4293      	cmp	r3, r2
 8003230:	d101      	bne.n	8003236 <HAL_GPIO_Init+0x1d6>
 8003232:	2303      	movs	r3, #3
 8003234:	e006      	b.n	8003244 <HAL_GPIO_Init+0x1e4>
 8003236:	2305      	movs	r3, #5
 8003238:	e004      	b.n	8003244 <HAL_GPIO_Init+0x1e4>
 800323a:	2302      	movs	r3, #2
 800323c:	e002      	b.n	8003244 <HAL_GPIO_Init+0x1e4>
 800323e:	2301      	movs	r3, #1
 8003240:	e000      	b.n	8003244 <HAL_GPIO_Init+0x1e4>
 8003242:	2300      	movs	r3, #0
 8003244:	697a      	ldr	r2, [r7, #20]
 8003246:	2103      	movs	r1, #3
 8003248:	400a      	ands	r2, r1
 800324a:	0092      	lsls	r2, r2, #2
 800324c:	4093      	lsls	r3, r2
 800324e:	693a      	ldr	r2, [r7, #16]
 8003250:	4313      	orrs	r3, r2
 8003252:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003254:	4935      	ldr	r1, [pc, #212]	@ (800332c <HAL_GPIO_Init+0x2cc>)
 8003256:	697b      	ldr	r3, [r7, #20]
 8003258:	089b      	lsrs	r3, r3, #2
 800325a:	3302      	adds	r3, #2
 800325c:	009b      	lsls	r3, r3, #2
 800325e:	693a      	ldr	r2, [r7, #16]
 8003260:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003262:	4b36      	ldr	r3, [pc, #216]	@ (800333c <HAL_GPIO_Init+0x2dc>)
 8003264:	689b      	ldr	r3, [r3, #8]
 8003266:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	43da      	mvns	r2, r3
 800326c:	693b      	ldr	r3, [r7, #16]
 800326e:	4013      	ands	r3, r2
 8003270:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	685a      	ldr	r2, [r3, #4]
 8003276:	2380      	movs	r3, #128	@ 0x80
 8003278:	035b      	lsls	r3, r3, #13
 800327a:	4013      	ands	r3, r2
 800327c:	d003      	beq.n	8003286 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 800327e:	693a      	ldr	r2, [r7, #16]
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	4313      	orrs	r3, r2
 8003284:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003286:	4b2d      	ldr	r3, [pc, #180]	@ (800333c <HAL_GPIO_Init+0x2dc>)
 8003288:	693a      	ldr	r2, [r7, #16]
 800328a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 800328c:	4b2b      	ldr	r3, [pc, #172]	@ (800333c <HAL_GPIO_Init+0x2dc>)
 800328e:	68db      	ldr	r3, [r3, #12]
 8003290:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	43da      	mvns	r2, r3
 8003296:	693b      	ldr	r3, [r7, #16]
 8003298:	4013      	ands	r3, r2
 800329a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	685a      	ldr	r2, [r3, #4]
 80032a0:	2380      	movs	r3, #128	@ 0x80
 80032a2:	039b      	lsls	r3, r3, #14
 80032a4:	4013      	ands	r3, r2
 80032a6:	d003      	beq.n	80032b0 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 80032a8:	693a      	ldr	r2, [r7, #16]
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	4313      	orrs	r3, r2
 80032ae:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80032b0:	4b22      	ldr	r3, [pc, #136]	@ (800333c <HAL_GPIO_Init+0x2dc>)
 80032b2:	693a      	ldr	r2, [r7, #16]
 80032b4:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 80032b6:	4b21      	ldr	r3, [pc, #132]	@ (800333c <HAL_GPIO_Init+0x2dc>)
 80032b8:	685b      	ldr	r3, [r3, #4]
 80032ba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	43da      	mvns	r2, r3
 80032c0:	693b      	ldr	r3, [r7, #16]
 80032c2:	4013      	ands	r3, r2
 80032c4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	685a      	ldr	r2, [r3, #4]
 80032ca:	2380      	movs	r3, #128	@ 0x80
 80032cc:	029b      	lsls	r3, r3, #10
 80032ce:	4013      	ands	r3, r2
 80032d0:	d003      	beq.n	80032da <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 80032d2:	693a      	ldr	r2, [r7, #16]
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	4313      	orrs	r3, r2
 80032d8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80032da:	4b18      	ldr	r3, [pc, #96]	@ (800333c <HAL_GPIO_Init+0x2dc>)
 80032dc:	693a      	ldr	r2, [r7, #16]
 80032de:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 80032e0:	4b16      	ldr	r3, [pc, #88]	@ (800333c <HAL_GPIO_Init+0x2dc>)
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	43da      	mvns	r2, r3
 80032ea:	693b      	ldr	r3, [r7, #16]
 80032ec:	4013      	ands	r3, r2
 80032ee:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	685a      	ldr	r2, [r3, #4]
 80032f4:	2380      	movs	r3, #128	@ 0x80
 80032f6:	025b      	lsls	r3, r3, #9
 80032f8:	4013      	ands	r3, r2
 80032fa:	d003      	beq.n	8003304 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 80032fc:	693a      	ldr	r2, [r7, #16]
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	4313      	orrs	r3, r2
 8003302:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003304:	4b0d      	ldr	r3, [pc, #52]	@ (800333c <HAL_GPIO_Init+0x2dc>)
 8003306:	693a      	ldr	r2, [r7, #16]
 8003308:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800330a:	697b      	ldr	r3, [r7, #20]
 800330c:	3301      	adds	r3, #1
 800330e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	681a      	ldr	r2, [r3, #0]
 8003314:	697b      	ldr	r3, [r7, #20]
 8003316:	40da      	lsrs	r2, r3
 8003318:	1e13      	subs	r3, r2, #0
 800331a:	d000      	beq.n	800331e <HAL_GPIO_Init+0x2be>
 800331c:	e6a8      	b.n	8003070 <HAL_GPIO_Init+0x10>
  } 
}
 800331e:	46c0      	nop			@ (mov r8, r8)
 8003320:	46c0      	nop			@ (mov r8, r8)
 8003322:	46bd      	mov	sp, r7
 8003324:	b006      	add	sp, #24
 8003326:	bd80      	pop	{r7, pc}
 8003328:	40021000 	.word	0x40021000
 800332c:	40010000 	.word	0x40010000
 8003330:	48000400 	.word	0x48000400
 8003334:	48000800 	.word	0x48000800
 8003338:	48000c00 	.word	0x48000c00
 800333c:	40010400 	.word	0x40010400

08003340 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	b084      	sub	sp, #16
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
 8003348:	000a      	movs	r2, r1
 800334a:	1cbb      	adds	r3, r7, #2
 800334c:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	691b      	ldr	r3, [r3, #16]
 8003352:	1cba      	adds	r2, r7, #2
 8003354:	8812      	ldrh	r2, [r2, #0]
 8003356:	4013      	ands	r3, r2
 8003358:	d004      	beq.n	8003364 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 800335a:	230f      	movs	r3, #15
 800335c:	18fb      	adds	r3, r7, r3
 800335e:	2201      	movs	r2, #1
 8003360:	701a      	strb	r2, [r3, #0]
 8003362:	e003      	b.n	800336c <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003364:	230f      	movs	r3, #15
 8003366:	18fb      	adds	r3, r7, r3
 8003368:	2200      	movs	r2, #0
 800336a:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 800336c:	230f      	movs	r3, #15
 800336e:	18fb      	adds	r3, r7, r3
 8003370:	781b      	ldrb	r3, [r3, #0]
  }
 8003372:	0018      	movs	r0, r3
 8003374:	46bd      	mov	sp, r7
 8003376:	b004      	add	sp, #16
 8003378:	bd80      	pop	{r7, pc}

0800337a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800337a:	b580      	push	{r7, lr}
 800337c:	b082      	sub	sp, #8
 800337e:	af00      	add	r7, sp, #0
 8003380:	6078      	str	r0, [r7, #4]
 8003382:	0008      	movs	r0, r1
 8003384:	0011      	movs	r1, r2
 8003386:	1cbb      	adds	r3, r7, #2
 8003388:	1c02      	adds	r2, r0, #0
 800338a:	801a      	strh	r2, [r3, #0]
 800338c:	1c7b      	adds	r3, r7, #1
 800338e:	1c0a      	adds	r2, r1, #0
 8003390:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003392:	1c7b      	adds	r3, r7, #1
 8003394:	781b      	ldrb	r3, [r3, #0]
 8003396:	2b00      	cmp	r3, #0
 8003398:	d004      	beq.n	80033a4 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800339a:	1cbb      	adds	r3, r7, #2
 800339c:	881a      	ldrh	r2, [r3, #0]
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80033a2:	e003      	b.n	80033ac <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80033a4:	1cbb      	adds	r3, r7, #2
 80033a6:	881a      	ldrh	r2, [r3, #0]
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80033ac:	46c0      	nop			@ (mov r8, r8)
 80033ae:	46bd      	mov	sp, r7
 80033b0:	b002      	add	sp, #8
 80033b2:	bd80      	pop	{r7, pc}

080033b4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b084      	sub	sp, #16
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
 80033bc:	000a      	movs	r2, r1
 80033be:	1cbb      	adds	r3, r7, #2
 80033c0:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	695b      	ldr	r3, [r3, #20]
 80033c6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80033c8:	1cbb      	adds	r3, r7, #2
 80033ca:	881b      	ldrh	r3, [r3, #0]
 80033cc:	68fa      	ldr	r2, [r7, #12]
 80033ce:	4013      	ands	r3, r2
 80033d0:	041a      	lsls	r2, r3, #16
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	43db      	mvns	r3, r3
 80033d6:	1cb9      	adds	r1, r7, #2
 80033d8:	8809      	ldrh	r1, [r1, #0]
 80033da:	400b      	ands	r3, r1
 80033dc:	431a      	orrs	r2, r3
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	619a      	str	r2, [r3, #24]
}
 80033e2:	46c0      	nop			@ (mov r8, r8)
 80033e4:	46bd      	mov	sp, r7
 80033e6:	b004      	add	sp, #16
 80033e8:	bd80      	pop	{r7, pc}
	...

080033ec <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b082      	sub	sp, #8
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	0002      	movs	r2, r0
 80033f4:	1dbb      	adds	r3, r7, #6
 80033f6:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80033f8:	4b09      	ldr	r3, [pc, #36]	@ (8003420 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 80033fa:	695b      	ldr	r3, [r3, #20]
 80033fc:	1dba      	adds	r2, r7, #6
 80033fe:	8812      	ldrh	r2, [r2, #0]
 8003400:	4013      	ands	r3, r2
 8003402:	d008      	beq.n	8003416 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003404:	4b06      	ldr	r3, [pc, #24]	@ (8003420 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8003406:	1dba      	adds	r2, r7, #6
 8003408:	8812      	ldrh	r2, [r2, #0]
 800340a:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800340c:	1dbb      	adds	r3, r7, #6
 800340e:	881b      	ldrh	r3, [r3, #0]
 8003410:	0018      	movs	r0, r3
 8003412:	f001 ff83 	bl	800531c <HAL_GPIO_EXTI_Callback>
  }
}
 8003416:	46c0      	nop			@ (mov r8, r8)
 8003418:	46bd      	mov	sp, r7
 800341a:	b002      	add	sp, #8
 800341c:	bd80      	pop	{r7, pc}
 800341e:	46c0      	nop			@ (mov r8, r8)
 8003420:	40010400 	.word	0x40010400

08003424 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	b088      	sub	sp, #32
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2b00      	cmp	r3, #0
 8003430:	d101      	bne.n	8003436 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003432:	2301      	movs	r3, #1
 8003434:	e301      	b.n	8003a3a <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	2201      	movs	r2, #1
 800343c:	4013      	ands	r3, r2
 800343e:	d100      	bne.n	8003442 <HAL_RCC_OscConfig+0x1e>
 8003440:	e08d      	b.n	800355e <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003442:	4bc3      	ldr	r3, [pc, #780]	@ (8003750 <HAL_RCC_OscConfig+0x32c>)
 8003444:	685b      	ldr	r3, [r3, #4]
 8003446:	220c      	movs	r2, #12
 8003448:	4013      	ands	r3, r2
 800344a:	2b04      	cmp	r3, #4
 800344c:	d00e      	beq.n	800346c <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800344e:	4bc0      	ldr	r3, [pc, #768]	@ (8003750 <HAL_RCC_OscConfig+0x32c>)
 8003450:	685b      	ldr	r3, [r3, #4]
 8003452:	220c      	movs	r2, #12
 8003454:	4013      	ands	r3, r2
 8003456:	2b08      	cmp	r3, #8
 8003458:	d116      	bne.n	8003488 <HAL_RCC_OscConfig+0x64>
 800345a:	4bbd      	ldr	r3, [pc, #756]	@ (8003750 <HAL_RCC_OscConfig+0x32c>)
 800345c:	685a      	ldr	r2, [r3, #4]
 800345e:	2380      	movs	r3, #128	@ 0x80
 8003460:	025b      	lsls	r3, r3, #9
 8003462:	401a      	ands	r2, r3
 8003464:	2380      	movs	r3, #128	@ 0x80
 8003466:	025b      	lsls	r3, r3, #9
 8003468:	429a      	cmp	r2, r3
 800346a:	d10d      	bne.n	8003488 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800346c:	4bb8      	ldr	r3, [pc, #736]	@ (8003750 <HAL_RCC_OscConfig+0x32c>)
 800346e:	681a      	ldr	r2, [r3, #0]
 8003470:	2380      	movs	r3, #128	@ 0x80
 8003472:	029b      	lsls	r3, r3, #10
 8003474:	4013      	ands	r3, r2
 8003476:	d100      	bne.n	800347a <HAL_RCC_OscConfig+0x56>
 8003478:	e070      	b.n	800355c <HAL_RCC_OscConfig+0x138>
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	685b      	ldr	r3, [r3, #4]
 800347e:	2b00      	cmp	r3, #0
 8003480:	d000      	beq.n	8003484 <HAL_RCC_OscConfig+0x60>
 8003482:	e06b      	b.n	800355c <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8003484:	2301      	movs	r3, #1
 8003486:	e2d8      	b.n	8003a3a <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	685b      	ldr	r3, [r3, #4]
 800348c:	2b01      	cmp	r3, #1
 800348e:	d107      	bne.n	80034a0 <HAL_RCC_OscConfig+0x7c>
 8003490:	4baf      	ldr	r3, [pc, #700]	@ (8003750 <HAL_RCC_OscConfig+0x32c>)
 8003492:	681a      	ldr	r2, [r3, #0]
 8003494:	4bae      	ldr	r3, [pc, #696]	@ (8003750 <HAL_RCC_OscConfig+0x32c>)
 8003496:	2180      	movs	r1, #128	@ 0x80
 8003498:	0249      	lsls	r1, r1, #9
 800349a:	430a      	orrs	r2, r1
 800349c:	601a      	str	r2, [r3, #0]
 800349e:	e02f      	b.n	8003500 <HAL_RCC_OscConfig+0xdc>
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	685b      	ldr	r3, [r3, #4]
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d10c      	bne.n	80034c2 <HAL_RCC_OscConfig+0x9e>
 80034a8:	4ba9      	ldr	r3, [pc, #676]	@ (8003750 <HAL_RCC_OscConfig+0x32c>)
 80034aa:	681a      	ldr	r2, [r3, #0]
 80034ac:	4ba8      	ldr	r3, [pc, #672]	@ (8003750 <HAL_RCC_OscConfig+0x32c>)
 80034ae:	49a9      	ldr	r1, [pc, #676]	@ (8003754 <HAL_RCC_OscConfig+0x330>)
 80034b0:	400a      	ands	r2, r1
 80034b2:	601a      	str	r2, [r3, #0]
 80034b4:	4ba6      	ldr	r3, [pc, #664]	@ (8003750 <HAL_RCC_OscConfig+0x32c>)
 80034b6:	681a      	ldr	r2, [r3, #0]
 80034b8:	4ba5      	ldr	r3, [pc, #660]	@ (8003750 <HAL_RCC_OscConfig+0x32c>)
 80034ba:	49a7      	ldr	r1, [pc, #668]	@ (8003758 <HAL_RCC_OscConfig+0x334>)
 80034bc:	400a      	ands	r2, r1
 80034be:	601a      	str	r2, [r3, #0]
 80034c0:	e01e      	b.n	8003500 <HAL_RCC_OscConfig+0xdc>
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	685b      	ldr	r3, [r3, #4]
 80034c6:	2b05      	cmp	r3, #5
 80034c8:	d10e      	bne.n	80034e8 <HAL_RCC_OscConfig+0xc4>
 80034ca:	4ba1      	ldr	r3, [pc, #644]	@ (8003750 <HAL_RCC_OscConfig+0x32c>)
 80034cc:	681a      	ldr	r2, [r3, #0]
 80034ce:	4ba0      	ldr	r3, [pc, #640]	@ (8003750 <HAL_RCC_OscConfig+0x32c>)
 80034d0:	2180      	movs	r1, #128	@ 0x80
 80034d2:	02c9      	lsls	r1, r1, #11
 80034d4:	430a      	orrs	r2, r1
 80034d6:	601a      	str	r2, [r3, #0]
 80034d8:	4b9d      	ldr	r3, [pc, #628]	@ (8003750 <HAL_RCC_OscConfig+0x32c>)
 80034da:	681a      	ldr	r2, [r3, #0]
 80034dc:	4b9c      	ldr	r3, [pc, #624]	@ (8003750 <HAL_RCC_OscConfig+0x32c>)
 80034de:	2180      	movs	r1, #128	@ 0x80
 80034e0:	0249      	lsls	r1, r1, #9
 80034e2:	430a      	orrs	r2, r1
 80034e4:	601a      	str	r2, [r3, #0]
 80034e6:	e00b      	b.n	8003500 <HAL_RCC_OscConfig+0xdc>
 80034e8:	4b99      	ldr	r3, [pc, #612]	@ (8003750 <HAL_RCC_OscConfig+0x32c>)
 80034ea:	681a      	ldr	r2, [r3, #0]
 80034ec:	4b98      	ldr	r3, [pc, #608]	@ (8003750 <HAL_RCC_OscConfig+0x32c>)
 80034ee:	4999      	ldr	r1, [pc, #612]	@ (8003754 <HAL_RCC_OscConfig+0x330>)
 80034f0:	400a      	ands	r2, r1
 80034f2:	601a      	str	r2, [r3, #0]
 80034f4:	4b96      	ldr	r3, [pc, #600]	@ (8003750 <HAL_RCC_OscConfig+0x32c>)
 80034f6:	681a      	ldr	r2, [r3, #0]
 80034f8:	4b95      	ldr	r3, [pc, #596]	@ (8003750 <HAL_RCC_OscConfig+0x32c>)
 80034fa:	4997      	ldr	r1, [pc, #604]	@ (8003758 <HAL_RCC_OscConfig+0x334>)
 80034fc:	400a      	ands	r2, r1
 80034fe:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	685b      	ldr	r3, [r3, #4]
 8003504:	2b00      	cmp	r3, #0
 8003506:	d014      	beq.n	8003532 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003508:	f7ff fc20 	bl	8002d4c <HAL_GetTick>
 800350c:	0003      	movs	r3, r0
 800350e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003510:	e008      	b.n	8003524 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003512:	f7ff fc1b 	bl	8002d4c <HAL_GetTick>
 8003516:	0002      	movs	r2, r0
 8003518:	69bb      	ldr	r3, [r7, #24]
 800351a:	1ad3      	subs	r3, r2, r3
 800351c:	2b64      	cmp	r3, #100	@ 0x64
 800351e:	d901      	bls.n	8003524 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8003520:	2303      	movs	r3, #3
 8003522:	e28a      	b.n	8003a3a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003524:	4b8a      	ldr	r3, [pc, #552]	@ (8003750 <HAL_RCC_OscConfig+0x32c>)
 8003526:	681a      	ldr	r2, [r3, #0]
 8003528:	2380      	movs	r3, #128	@ 0x80
 800352a:	029b      	lsls	r3, r3, #10
 800352c:	4013      	ands	r3, r2
 800352e:	d0f0      	beq.n	8003512 <HAL_RCC_OscConfig+0xee>
 8003530:	e015      	b.n	800355e <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003532:	f7ff fc0b 	bl	8002d4c <HAL_GetTick>
 8003536:	0003      	movs	r3, r0
 8003538:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800353a:	e008      	b.n	800354e <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800353c:	f7ff fc06 	bl	8002d4c <HAL_GetTick>
 8003540:	0002      	movs	r2, r0
 8003542:	69bb      	ldr	r3, [r7, #24]
 8003544:	1ad3      	subs	r3, r2, r3
 8003546:	2b64      	cmp	r3, #100	@ 0x64
 8003548:	d901      	bls.n	800354e <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 800354a:	2303      	movs	r3, #3
 800354c:	e275      	b.n	8003a3a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800354e:	4b80      	ldr	r3, [pc, #512]	@ (8003750 <HAL_RCC_OscConfig+0x32c>)
 8003550:	681a      	ldr	r2, [r3, #0]
 8003552:	2380      	movs	r3, #128	@ 0x80
 8003554:	029b      	lsls	r3, r3, #10
 8003556:	4013      	ands	r3, r2
 8003558:	d1f0      	bne.n	800353c <HAL_RCC_OscConfig+0x118>
 800355a:	e000      	b.n	800355e <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800355c:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	2202      	movs	r2, #2
 8003564:	4013      	ands	r3, r2
 8003566:	d100      	bne.n	800356a <HAL_RCC_OscConfig+0x146>
 8003568:	e069      	b.n	800363e <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800356a:	4b79      	ldr	r3, [pc, #484]	@ (8003750 <HAL_RCC_OscConfig+0x32c>)
 800356c:	685b      	ldr	r3, [r3, #4]
 800356e:	220c      	movs	r2, #12
 8003570:	4013      	ands	r3, r2
 8003572:	d00b      	beq.n	800358c <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003574:	4b76      	ldr	r3, [pc, #472]	@ (8003750 <HAL_RCC_OscConfig+0x32c>)
 8003576:	685b      	ldr	r3, [r3, #4]
 8003578:	220c      	movs	r2, #12
 800357a:	4013      	ands	r3, r2
 800357c:	2b08      	cmp	r3, #8
 800357e:	d11c      	bne.n	80035ba <HAL_RCC_OscConfig+0x196>
 8003580:	4b73      	ldr	r3, [pc, #460]	@ (8003750 <HAL_RCC_OscConfig+0x32c>)
 8003582:	685a      	ldr	r2, [r3, #4]
 8003584:	2380      	movs	r3, #128	@ 0x80
 8003586:	025b      	lsls	r3, r3, #9
 8003588:	4013      	ands	r3, r2
 800358a:	d116      	bne.n	80035ba <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800358c:	4b70      	ldr	r3, [pc, #448]	@ (8003750 <HAL_RCC_OscConfig+0x32c>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	2202      	movs	r2, #2
 8003592:	4013      	ands	r3, r2
 8003594:	d005      	beq.n	80035a2 <HAL_RCC_OscConfig+0x17e>
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	68db      	ldr	r3, [r3, #12]
 800359a:	2b01      	cmp	r3, #1
 800359c:	d001      	beq.n	80035a2 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800359e:	2301      	movs	r3, #1
 80035a0:	e24b      	b.n	8003a3a <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035a2:	4b6b      	ldr	r3, [pc, #428]	@ (8003750 <HAL_RCC_OscConfig+0x32c>)
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	22f8      	movs	r2, #248	@ 0xf8
 80035a8:	4393      	bics	r3, r2
 80035aa:	0019      	movs	r1, r3
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	691b      	ldr	r3, [r3, #16]
 80035b0:	00da      	lsls	r2, r3, #3
 80035b2:	4b67      	ldr	r3, [pc, #412]	@ (8003750 <HAL_RCC_OscConfig+0x32c>)
 80035b4:	430a      	orrs	r2, r1
 80035b6:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80035b8:	e041      	b.n	800363e <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	68db      	ldr	r3, [r3, #12]
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d024      	beq.n	800360c <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80035c2:	4b63      	ldr	r3, [pc, #396]	@ (8003750 <HAL_RCC_OscConfig+0x32c>)
 80035c4:	681a      	ldr	r2, [r3, #0]
 80035c6:	4b62      	ldr	r3, [pc, #392]	@ (8003750 <HAL_RCC_OscConfig+0x32c>)
 80035c8:	2101      	movs	r1, #1
 80035ca:	430a      	orrs	r2, r1
 80035cc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035ce:	f7ff fbbd 	bl	8002d4c <HAL_GetTick>
 80035d2:	0003      	movs	r3, r0
 80035d4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035d6:	e008      	b.n	80035ea <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80035d8:	f7ff fbb8 	bl	8002d4c <HAL_GetTick>
 80035dc:	0002      	movs	r2, r0
 80035de:	69bb      	ldr	r3, [r7, #24]
 80035e0:	1ad3      	subs	r3, r2, r3
 80035e2:	2b02      	cmp	r3, #2
 80035e4:	d901      	bls.n	80035ea <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 80035e6:	2303      	movs	r3, #3
 80035e8:	e227      	b.n	8003a3a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035ea:	4b59      	ldr	r3, [pc, #356]	@ (8003750 <HAL_RCC_OscConfig+0x32c>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	2202      	movs	r2, #2
 80035f0:	4013      	ands	r3, r2
 80035f2:	d0f1      	beq.n	80035d8 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035f4:	4b56      	ldr	r3, [pc, #344]	@ (8003750 <HAL_RCC_OscConfig+0x32c>)
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	22f8      	movs	r2, #248	@ 0xf8
 80035fa:	4393      	bics	r3, r2
 80035fc:	0019      	movs	r1, r3
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	691b      	ldr	r3, [r3, #16]
 8003602:	00da      	lsls	r2, r3, #3
 8003604:	4b52      	ldr	r3, [pc, #328]	@ (8003750 <HAL_RCC_OscConfig+0x32c>)
 8003606:	430a      	orrs	r2, r1
 8003608:	601a      	str	r2, [r3, #0]
 800360a:	e018      	b.n	800363e <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800360c:	4b50      	ldr	r3, [pc, #320]	@ (8003750 <HAL_RCC_OscConfig+0x32c>)
 800360e:	681a      	ldr	r2, [r3, #0]
 8003610:	4b4f      	ldr	r3, [pc, #316]	@ (8003750 <HAL_RCC_OscConfig+0x32c>)
 8003612:	2101      	movs	r1, #1
 8003614:	438a      	bics	r2, r1
 8003616:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003618:	f7ff fb98 	bl	8002d4c <HAL_GetTick>
 800361c:	0003      	movs	r3, r0
 800361e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003620:	e008      	b.n	8003634 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003622:	f7ff fb93 	bl	8002d4c <HAL_GetTick>
 8003626:	0002      	movs	r2, r0
 8003628:	69bb      	ldr	r3, [r7, #24]
 800362a:	1ad3      	subs	r3, r2, r3
 800362c:	2b02      	cmp	r3, #2
 800362e:	d901      	bls.n	8003634 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8003630:	2303      	movs	r3, #3
 8003632:	e202      	b.n	8003a3a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003634:	4b46      	ldr	r3, [pc, #280]	@ (8003750 <HAL_RCC_OscConfig+0x32c>)
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	2202      	movs	r2, #2
 800363a:	4013      	ands	r3, r2
 800363c:	d1f1      	bne.n	8003622 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	2208      	movs	r2, #8
 8003644:	4013      	ands	r3, r2
 8003646:	d036      	beq.n	80036b6 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	69db      	ldr	r3, [r3, #28]
 800364c:	2b00      	cmp	r3, #0
 800364e:	d019      	beq.n	8003684 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003650:	4b3f      	ldr	r3, [pc, #252]	@ (8003750 <HAL_RCC_OscConfig+0x32c>)
 8003652:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003654:	4b3e      	ldr	r3, [pc, #248]	@ (8003750 <HAL_RCC_OscConfig+0x32c>)
 8003656:	2101      	movs	r1, #1
 8003658:	430a      	orrs	r2, r1
 800365a:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800365c:	f7ff fb76 	bl	8002d4c <HAL_GetTick>
 8003660:	0003      	movs	r3, r0
 8003662:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003664:	e008      	b.n	8003678 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003666:	f7ff fb71 	bl	8002d4c <HAL_GetTick>
 800366a:	0002      	movs	r2, r0
 800366c:	69bb      	ldr	r3, [r7, #24]
 800366e:	1ad3      	subs	r3, r2, r3
 8003670:	2b02      	cmp	r3, #2
 8003672:	d901      	bls.n	8003678 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8003674:	2303      	movs	r3, #3
 8003676:	e1e0      	b.n	8003a3a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003678:	4b35      	ldr	r3, [pc, #212]	@ (8003750 <HAL_RCC_OscConfig+0x32c>)
 800367a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800367c:	2202      	movs	r2, #2
 800367e:	4013      	ands	r3, r2
 8003680:	d0f1      	beq.n	8003666 <HAL_RCC_OscConfig+0x242>
 8003682:	e018      	b.n	80036b6 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003684:	4b32      	ldr	r3, [pc, #200]	@ (8003750 <HAL_RCC_OscConfig+0x32c>)
 8003686:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003688:	4b31      	ldr	r3, [pc, #196]	@ (8003750 <HAL_RCC_OscConfig+0x32c>)
 800368a:	2101      	movs	r1, #1
 800368c:	438a      	bics	r2, r1
 800368e:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003690:	f7ff fb5c 	bl	8002d4c <HAL_GetTick>
 8003694:	0003      	movs	r3, r0
 8003696:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003698:	e008      	b.n	80036ac <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800369a:	f7ff fb57 	bl	8002d4c <HAL_GetTick>
 800369e:	0002      	movs	r2, r0
 80036a0:	69bb      	ldr	r3, [r7, #24]
 80036a2:	1ad3      	subs	r3, r2, r3
 80036a4:	2b02      	cmp	r3, #2
 80036a6:	d901      	bls.n	80036ac <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 80036a8:	2303      	movs	r3, #3
 80036aa:	e1c6      	b.n	8003a3a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80036ac:	4b28      	ldr	r3, [pc, #160]	@ (8003750 <HAL_RCC_OscConfig+0x32c>)
 80036ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036b0:	2202      	movs	r2, #2
 80036b2:	4013      	ands	r3, r2
 80036b4:	d1f1      	bne.n	800369a <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	2204      	movs	r2, #4
 80036bc:	4013      	ands	r3, r2
 80036be:	d100      	bne.n	80036c2 <HAL_RCC_OscConfig+0x29e>
 80036c0:	e0b4      	b.n	800382c <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 80036c2:	201f      	movs	r0, #31
 80036c4:	183b      	adds	r3, r7, r0
 80036c6:	2200      	movs	r2, #0
 80036c8:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80036ca:	4b21      	ldr	r3, [pc, #132]	@ (8003750 <HAL_RCC_OscConfig+0x32c>)
 80036cc:	69da      	ldr	r2, [r3, #28]
 80036ce:	2380      	movs	r3, #128	@ 0x80
 80036d0:	055b      	lsls	r3, r3, #21
 80036d2:	4013      	ands	r3, r2
 80036d4:	d110      	bne.n	80036f8 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80036d6:	4b1e      	ldr	r3, [pc, #120]	@ (8003750 <HAL_RCC_OscConfig+0x32c>)
 80036d8:	69da      	ldr	r2, [r3, #28]
 80036da:	4b1d      	ldr	r3, [pc, #116]	@ (8003750 <HAL_RCC_OscConfig+0x32c>)
 80036dc:	2180      	movs	r1, #128	@ 0x80
 80036de:	0549      	lsls	r1, r1, #21
 80036e0:	430a      	orrs	r2, r1
 80036e2:	61da      	str	r2, [r3, #28]
 80036e4:	4b1a      	ldr	r3, [pc, #104]	@ (8003750 <HAL_RCC_OscConfig+0x32c>)
 80036e6:	69da      	ldr	r2, [r3, #28]
 80036e8:	2380      	movs	r3, #128	@ 0x80
 80036ea:	055b      	lsls	r3, r3, #21
 80036ec:	4013      	ands	r3, r2
 80036ee:	60fb      	str	r3, [r7, #12]
 80036f0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80036f2:	183b      	adds	r3, r7, r0
 80036f4:	2201      	movs	r2, #1
 80036f6:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036f8:	4b18      	ldr	r3, [pc, #96]	@ (800375c <HAL_RCC_OscConfig+0x338>)
 80036fa:	681a      	ldr	r2, [r3, #0]
 80036fc:	2380      	movs	r3, #128	@ 0x80
 80036fe:	005b      	lsls	r3, r3, #1
 8003700:	4013      	ands	r3, r2
 8003702:	d11a      	bne.n	800373a <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003704:	4b15      	ldr	r3, [pc, #84]	@ (800375c <HAL_RCC_OscConfig+0x338>)
 8003706:	681a      	ldr	r2, [r3, #0]
 8003708:	4b14      	ldr	r3, [pc, #80]	@ (800375c <HAL_RCC_OscConfig+0x338>)
 800370a:	2180      	movs	r1, #128	@ 0x80
 800370c:	0049      	lsls	r1, r1, #1
 800370e:	430a      	orrs	r2, r1
 8003710:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003712:	f7ff fb1b 	bl	8002d4c <HAL_GetTick>
 8003716:	0003      	movs	r3, r0
 8003718:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800371a:	e008      	b.n	800372e <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800371c:	f7ff fb16 	bl	8002d4c <HAL_GetTick>
 8003720:	0002      	movs	r2, r0
 8003722:	69bb      	ldr	r3, [r7, #24]
 8003724:	1ad3      	subs	r3, r2, r3
 8003726:	2b64      	cmp	r3, #100	@ 0x64
 8003728:	d901      	bls.n	800372e <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 800372a:	2303      	movs	r3, #3
 800372c:	e185      	b.n	8003a3a <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800372e:	4b0b      	ldr	r3, [pc, #44]	@ (800375c <HAL_RCC_OscConfig+0x338>)
 8003730:	681a      	ldr	r2, [r3, #0]
 8003732:	2380      	movs	r3, #128	@ 0x80
 8003734:	005b      	lsls	r3, r3, #1
 8003736:	4013      	ands	r3, r2
 8003738:	d0f0      	beq.n	800371c <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	689b      	ldr	r3, [r3, #8]
 800373e:	2b01      	cmp	r3, #1
 8003740:	d10e      	bne.n	8003760 <HAL_RCC_OscConfig+0x33c>
 8003742:	4b03      	ldr	r3, [pc, #12]	@ (8003750 <HAL_RCC_OscConfig+0x32c>)
 8003744:	6a1a      	ldr	r2, [r3, #32]
 8003746:	4b02      	ldr	r3, [pc, #8]	@ (8003750 <HAL_RCC_OscConfig+0x32c>)
 8003748:	2101      	movs	r1, #1
 800374a:	430a      	orrs	r2, r1
 800374c:	621a      	str	r2, [r3, #32]
 800374e:	e035      	b.n	80037bc <HAL_RCC_OscConfig+0x398>
 8003750:	40021000 	.word	0x40021000
 8003754:	fffeffff 	.word	0xfffeffff
 8003758:	fffbffff 	.word	0xfffbffff
 800375c:	40007000 	.word	0x40007000
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	689b      	ldr	r3, [r3, #8]
 8003764:	2b00      	cmp	r3, #0
 8003766:	d10c      	bne.n	8003782 <HAL_RCC_OscConfig+0x35e>
 8003768:	4bb6      	ldr	r3, [pc, #728]	@ (8003a44 <HAL_RCC_OscConfig+0x620>)
 800376a:	6a1a      	ldr	r2, [r3, #32]
 800376c:	4bb5      	ldr	r3, [pc, #724]	@ (8003a44 <HAL_RCC_OscConfig+0x620>)
 800376e:	2101      	movs	r1, #1
 8003770:	438a      	bics	r2, r1
 8003772:	621a      	str	r2, [r3, #32]
 8003774:	4bb3      	ldr	r3, [pc, #716]	@ (8003a44 <HAL_RCC_OscConfig+0x620>)
 8003776:	6a1a      	ldr	r2, [r3, #32]
 8003778:	4bb2      	ldr	r3, [pc, #712]	@ (8003a44 <HAL_RCC_OscConfig+0x620>)
 800377a:	2104      	movs	r1, #4
 800377c:	438a      	bics	r2, r1
 800377e:	621a      	str	r2, [r3, #32]
 8003780:	e01c      	b.n	80037bc <HAL_RCC_OscConfig+0x398>
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	689b      	ldr	r3, [r3, #8]
 8003786:	2b05      	cmp	r3, #5
 8003788:	d10c      	bne.n	80037a4 <HAL_RCC_OscConfig+0x380>
 800378a:	4bae      	ldr	r3, [pc, #696]	@ (8003a44 <HAL_RCC_OscConfig+0x620>)
 800378c:	6a1a      	ldr	r2, [r3, #32]
 800378e:	4bad      	ldr	r3, [pc, #692]	@ (8003a44 <HAL_RCC_OscConfig+0x620>)
 8003790:	2104      	movs	r1, #4
 8003792:	430a      	orrs	r2, r1
 8003794:	621a      	str	r2, [r3, #32]
 8003796:	4bab      	ldr	r3, [pc, #684]	@ (8003a44 <HAL_RCC_OscConfig+0x620>)
 8003798:	6a1a      	ldr	r2, [r3, #32]
 800379a:	4baa      	ldr	r3, [pc, #680]	@ (8003a44 <HAL_RCC_OscConfig+0x620>)
 800379c:	2101      	movs	r1, #1
 800379e:	430a      	orrs	r2, r1
 80037a0:	621a      	str	r2, [r3, #32]
 80037a2:	e00b      	b.n	80037bc <HAL_RCC_OscConfig+0x398>
 80037a4:	4ba7      	ldr	r3, [pc, #668]	@ (8003a44 <HAL_RCC_OscConfig+0x620>)
 80037a6:	6a1a      	ldr	r2, [r3, #32]
 80037a8:	4ba6      	ldr	r3, [pc, #664]	@ (8003a44 <HAL_RCC_OscConfig+0x620>)
 80037aa:	2101      	movs	r1, #1
 80037ac:	438a      	bics	r2, r1
 80037ae:	621a      	str	r2, [r3, #32]
 80037b0:	4ba4      	ldr	r3, [pc, #656]	@ (8003a44 <HAL_RCC_OscConfig+0x620>)
 80037b2:	6a1a      	ldr	r2, [r3, #32]
 80037b4:	4ba3      	ldr	r3, [pc, #652]	@ (8003a44 <HAL_RCC_OscConfig+0x620>)
 80037b6:	2104      	movs	r1, #4
 80037b8:	438a      	bics	r2, r1
 80037ba:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	689b      	ldr	r3, [r3, #8]
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d014      	beq.n	80037ee <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80037c4:	f7ff fac2 	bl	8002d4c <HAL_GetTick>
 80037c8:	0003      	movs	r3, r0
 80037ca:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037cc:	e009      	b.n	80037e2 <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80037ce:	f7ff fabd 	bl	8002d4c <HAL_GetTick>
 80037d2:	0002      	movs	r2, r0
 80037d4:	69bb      	ldr	r3, [r7, #24]
 80037d6:	1ad3      	subs	r3, r2, r3
 80037d8:	4a9b      	ldr	r2, [pc, #620]	@ (8003a48 <HAL_RCC_OscConfig+0x624>)
 80037da:	4293      	cmp	r3, r2
 80037dc:	d901      	bls.n	80037e2 <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 80037de:	2303      	movs	r3, #3
 80037e0:	e12b      	b.n	8003a3a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037e2:	4b98      	ldr	r3, [pc, #608]	@ (8003a44 <HAL_RCC_OscConfig+0x620>)
 80037e4:	6a1b      	ldr	r3, [r3, #32]
 80037e6:	2202      	movs	r2, #2
 80037e8:	4013      	ands	r3, r2
 80037ea:	d0f0      	beq.n	80037ce <HAL_RCC_OscConfig+0x3aa>
 80037ec:	e013      	b.n	8003816 <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80037ee:	f7ff faad 	bl	8002d4c <HAL_GetTick>
 80037f2:	0003      	movs	r3, r0
 80037f4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80037f6:	e009      	b.n	800380c <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80037f8:	f7ff faa8 	bl	8002d4c <HAL_GetTick>
 80037fc:	0002      	movs	r2, r0
 80037fe:	69bb      	ldr	r3, [r7, #24]
 8003800:	1ad3      	subs	r3, r2, r3
 8003802:	4a91      	ldr	r2, [pc, #580]	@ (8003a48 <HAL_RCC_OscConfig+0x624>)
 8003804:	4293      	cmp	r3, r2
 8003806:	d901      	bls.n	800380c <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8003808:	2303      	movs	r3, #3
 800380a:	e116      	b.n	8003a3a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800380c:	4b8d      	ldr	r3, [pc, #564]	@ (8003a44 <HAL_RCC_OscConfig+0x620>)
 800380e:	6a1b      	ldr	r3, [r3, #32]
 8003810:	2202      	movs	r2, #2
 8003812:	4013      	ands	r3, r2
 8003814:	d1f0      	bne.n	80037f8 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003816:	231f      	movs	r3, #31
 8003818:	18fb      	adds	r3, r7, r3
 800381a:	781b      	ldrb	r3, [r3, #0]
 800381c:	2b01      	cmp	r3, #1
 800381e:	d105      	bne.n	800382c <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003820:	4b88      	ldr	r3, [pc, #544]	@ (8003a44 <HAL_RCC_OscConfig+0x620>)
 8003822:	69da      	ldr	r2, [r3, #28]
 8003824:	4b87      	ldr	r3, [pc, #540]	@ (8003a44 <HAL_RCC_OscConfig+0x620>)
 8003826:	4989      	ldr	r1, [pc, #548]	@ (8003a4c <HAL_RCC_OscConfig+0x628>)
 8003828:	400a      	ands	r2, r1
 800382a:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	2210      	movs	r2, #16
 8003832:	4013      	ands	r3, r2
 8003834:	d063      	beq.n	80038fe <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	695b      	ldr	r3, [r3, #20]
 800383a:	2b01      	cmp	r3, #1
 800383c:	d12a      	bne.n	8003894 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800383e:	4b81      	ldr	r3, [pc, #516]	@ (8003a44 <HAL_RCC_OscConfig+0x620>)
 8003840:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003842:	4b80      	ldr	r3, [pc, #512]	@ (8003a44 <HAL_RCC_OscConfig+0x620>)
 8003844:	2104      	movs	r1, #4
 8003846:	430a      	orrs	r2, r1
 8003848:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800384a:	4b7e      	ldr	r3, [pc, #504]	@ (8003a44 <HAL_RCC_OscConfig+0x620>)
 800384c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800384e:	4b7d      	ldr	r3, [pc, #500]	@ (8003a44 <HAL_RCC_OscConfig+0x620>)
 8003850:	2101      	movs	r1, #1
 8003852:	430a      	orrs	r2, r1
 8003854:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003856:	f7ff fa79 	bl	8002d4c <HAL_GetTick>
 800385a:	0003      	movs	r3, r0
 800385c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800385e:	e008      	b.n	8003872 <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8003860:	f7ff fa74 	bl	8002d4c <HAL_GetTick>
 8003864:	0002      	movs	r2, r0
 8003866:	69bb      	ldr	r3, [r7, #24]
 8003868:	1ad3      	subs	r3, r2, r3
 800386a:	2b02      	cmp	r3, #2
 800386c:	d901      	bls.n	8003872 <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 800386e:	2303      	movs	r3, #3
 8003870:	e0e3      	b.n	8003a3a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8003872:	4b74      	ldr	r3, [pc, #464]	@ (8003a44 <HAL_RCC_OscConfig+0x620>)
 8003874:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003876:	2202      	movs	r2, #2
 8003878:	4013      	ands	r3, r2
 800387a:	d0f1      	beq.n	8003860 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800387c:	4b71      	ldr	r3, [pc, #452]	@ (8003a44 <HAL_RCC_OscConfig+0x620>)
 800387e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003880:	22f8      	movs	r2, #248	@ 0xf8
 8003882:	4393      	bics	r3, r2
 8003884:	0019      	movs	r1, r3
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	699b      	ldr	r3, [r3, #24]
 800388a:	00da      	lsls	r2, r3, #3
 800388c:	4b6d      	ldr	r3, [pc, #436]	@ (8003a44 <HAL_RCC_OscConfig+0x620>)
 800388e:	430a      	orrs	r2, r1
 8003890:	635a      	str	r2, [r3, #52]	@ 0x34
 8003892:	e034      	b.n	80038fe <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	695b      	ldr	r3, [r3, #20]
 8003898:	3305      	adds	r3, #5
 800389a:	d111      	bne.n	80038c0 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 800389c:	4b69      	ldr	r3, [pc, #420]	@ (8003a44 <HAL_RCC_OscConfig+0x620>)
 800389e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80038a0:	4b68      	ldr	r3, [pc, #416]	@ (8003a44 <HAL_RCC_OscConfig+0x620>)
 80038a2:	2104      	movs	r1, #4
 80038a4:	438a      	bics	r2, r1
 80038a6:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80038a8:	4b66      	ldr	r3, [pc, #408]	@ (8003a44 <HAL_RCC_OscConfig+0x620>)
 80038aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80038ac:	22f8      	movs	r2, #248	@ 0xf8
 80038ae:	4393      	bics	r3, r2
 80038b0:	0019      	movs	r1, r3
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	699b      	ldr	r3, [r3, #24]
 80038b6:	00da      	lsls	r2, r3, #3
 80038b8:	4b62      	ldr	r3, [pc, #392]	@ (8003a44 <HAL_RCC_OscConfig+0x620>)
 80038ba:	430a      	orrs	r2, r1
 80038bc:	635a      	str	r2, [r3, #52]	@ 0x34
 80038be:	e01e      	b.n	80038fe <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80038c0:	4b60      	ldr	r3, [pc, #384]	@ (8003a44 <HAL_RCC_OscConfig+0x620>)
 80038c2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80038c4:	4b5f      	ldr	r3, [pc, #380]	@ (8003a44 <HAL_RCC_OscConfig+0x620>)
 80038c6:	2104      	movs	r1, #4
 80038c8:	430a      	orrs	r2, r1
 80038ca:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80038cc:	4b5d      	ldr	r3, [pc, #372]	@ (8003a44 <HAL_RCC_OscConfig+0x620>)
 80038ce:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80038d0:	4b5c      	ldr	r3, [pc, #368]	@ (8003a44 <HAL_RCC_OscConfig+0x620>)
 80038d2:	2101      	movs	r1, #1
 80038d4:	438a      	bics	r2, r1
 80038d6:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038d8:	f7ff fa38 	bl	8002d4c <HAL_GetTick>
 80038dc:	0003      	movs	r3, r0
 80038de:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80038e0:	e008      	b.n	80038f4 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80038e2:	f7ff fa33 	bl	8002d4c <HAL_GetTick>
 80038e6:	0002      	movs	r2, r0
 80038e8:	69bb      	ldr	r3, [r7, #24]
 80038ea:	1ad3      	subs	r3, r2, r3
 80038ec:	2b02      	cmp	r3, #2
 80038ee:	d901      	bls.n	80038f4 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 80038f0:	2303      	movs	r3, #3
 80038f2:	e0a2      	b.n	8003a3a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80038f4:	4b53      	ldr	r3, [pc, #332]	@ (8003a44 <HAL_RCC_OscConfig+0x620>)
 80038f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80038f8:	2202      	movs	r2, #2
 80038fa:	4013      	ands	r3, r2
 80038fc:	d1f1      	bne.n	80038e2 <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6a1b      	ldr	r3, [r3, #32]
 8003902:	2b00      	cmp	r3, #0
 8003904:	d100      	bne.n	8003908 <HAL_RCC_OscConfig+0x4e4>
 8003906:	e097      	b.n	8003a38 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003908:	4b4e      	ldr	r3, [pc, #312]	@ (8003a44 <HAL_RCC_OscConfig+0x620>)
 800390a:	685b      	ldr	r3, [r3, #4]
 800390c:	220c      	movs	r2, #12
 800390e:	4013      	ands	r3, r2
 8003910:	2b08      	cmp	r3, #8
 8003912:	d100      	bne.n	8003916 <HAL_RCC_OscConfig+0x4f2>
 8003914:	e06b      	b.n	80039ee <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6a1b      	ldr	r3, [r3, #32]
 800391a:	2b02      	cmp	r3, #2
 800391c:	d14c      	bne.n	80039b8 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800391e:	4b49      	ldr	r3, [pc, #292]	@ (8003a44 <HAL_RCC_OscConfig+0x620>)
 8003920:	681a      	ldr	r2, [r3, #0]
 8003922:	4b48      	ldr	r3, [pc, #288]	@ (8003a44 <HAL_RCC_OscConfig+0x620>)
 8003924:	494a      	ldr	r1, [pc, #296]	@ (8003a50 <HAL_RCC_OscConfig+0x62c>)
 8003926:	400a      	ands	r2, r1
 8003928:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800392a:	f7ff fa0f 	bl	8002d4c <HAL_GetTick>
 800392e:	0003      	movs	r3, r0
 8003930:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003932:	e008      	b.n	8003946 <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003934:	f7ff fa0a 	bl	8002d4c <HAL_GetTick>
 8003938:	0002      	movs	r2, r0
 800393a:	69bb      	ldr	r3, [r7, #24]
 800393c:	1ad3      	subs	r3, r2, r3
 800393e:	2b02      	cmp	r3, #2
 8003940:	d901      	bls.n	8003946 <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 8003942:	2303      	movs	r3, #3
 8003944:	e079      	b.n	8003a3a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003946:	4b3f      	ldr	r3, [pc, #252]	@ (8003a44 <HAL_RCC_OscConfig+0x620>)
 8003948:	681a      	ldr	r2, [r3, #0]
 800394a:	2380      	movs	r3, #128	@ 0x80
 800394c:	049b      	lsls	r3, r3, #18
 800394e:	4013      	ands	r3, r2
 8003950:	d1f0      	bne.n	8003934 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003952:	4b3c      	ldr	r3, [pc, #240]	@ (8003a44 <HAL_RCC_OscConfig+0x620>)
 8003954:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003956:	220f      	movs	r2, #15
 8003958:	4393      	bics	r3, r2
 800395a:	0019      	movs	r1, r3
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003960:	4b38      	ldr	r3, [pc, #224]	@ (8003a44 <HAL_RCC_OscConfig+0x620>)
 8003962:	430a      	orrs	r2, r1
 8003964:	62da      	str	r2, [r3, #44]	@ 0x2c
 8003966:	4b37      	ldr	r3, [pc, #220]	@ (8003a44 <HAL_RCC_OscConfig+0x620>)
 8003968:	685b      	ldr	r3, [r3, #4]
 800396a:	4a3a      	ldr	r2, [pc, #232]	@ (8003a54 <HAL_RCC_OscConfig+0x630>)
 800396c:	4013      	ands	r3, r2
 800396e:	0019      	movs	r1, r3
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003978:	431a      	orrs	r2, r3
 800397a:	4b32      	ldr	r3, [pc, #200]	@ (8003a44 <HAL_RCC_OscConfig+0x620>)
 800397c:	430a      	orrs	r2, r1
 800397e:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003980:	4b30      	ldr	r3, [pc, #192]	@ (8003a44 <HAL_RCC_OscConfig+0x620>)
 8003982:	681a      	ldr	r2, [r3, #0]
 8003984:	4b2f      	ldr	r3, [pc, #188]	@ (8003a44 <HAL_RCC_OscConfig+0x620>)
 8003986:	2180      	movs	r1, #128	@ 0x80
 8003988:	0449      	lsls	r1, r1, #17
 800398a:	430a      	orrs	r2, r1
 800398c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800398e:	f7ff f9dd 	bl	8002d4c <HAL_GetTick>
 8003992:	0003      	movs	r3, r0
 8003994:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003996:	e008      	b.n	80039aa <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003998:	f7ff f9d8 	bl	8002d4c <HAL_GetTick>
 800399c:	0002      	movs	r2, r0
 800399e:	69bb      	ldr	r3, [r7, #24]
 80039a0:	1ad3      	subs	r3, r2, r3
 80039a2:	2b02      	cmp	r3, #2
 80039a4:	d901      	bls.n	80039aa <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 80039a6:	2303      	movs	r3, #3
 80039a8:	e047      	b.n	8003a3a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80039aa:	4b26      	ldr	r3, [pc, #152]	@ (8003a44 <HAL_RCC_OscConfig+0x620>)
 80039ac:	681a      	ldr	r2, [r3, #0]
 80039ae:	2380      	movs	r3, #128	@ 0x80
 80039b0:	049b      	lsls	r3, r3, #18
 80039b2:	4013      	ands	r3, r2
 80039b4:	d0f0      	beq.n	8003998 <HAL_RCC_OscConfig+0x574>
 80039b6:	e03f      	b.n	8003a38 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039b8:	4b22      	ldr	r3, [pc, #136]	@ (8003a44 <HAL_RCC_OscConfig+0x620>)
 80039ba:	681a      	ldr	r2, [r3, #0]
 80039bc:	4b21      	ldr	r3, [pc, #132]	@ (8003a44 <HAL_RCC_OscConfig+0x620>)
 80039be:	4924      	ldr	r1, [pc, #144]	@ (8003a50 <HAL_RCC_OscConfig+0x62c>)
 80039c0:	400a      	ands	r2, r1
 80039c2:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039c4:	f7ff f9c2 	bl	8002d4c <HAL_GetTick>
 80039c8:	0003      	movs	r3, r0
 80039ca:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80039cc:	e008      	b.n	80039e0 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80039ce:	f7ff f9bd 	bl	8002d4c <HAL_GetTick>
 80039d2:	0002      	movs	r2, r0
 80039d4:	69bb      	ldr	r3, [r7, #24]
 80039d6:	1ad3      	subs	r3, r2, r3
 80039d8:	2b02      	cmp	r3, #2
 80039da:	d901      	bls.n	80039e0 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 80039dc:	2303      	movs	r3, #3
 80039de:	e02c      	b.n	8003a3a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80039e0:	4b18      	ldr	r3, [pc, #96]	@ (8003a44 <HAL_RCC_OscConfig+0x620>)
 80039e2:	681a      	ldr	r2, [r3, #0]
 80039e4:	2380      	movs	r3, #128	@ 0x80
 80039e6:	049b      	lsls	r3, r3, #18
 80039e8:	4013      	ands	r3, r2
 80039ea:	d1f0      	bne.n	80039ce <HAL_RCC_OscConfig+0x5aa>
 80039ec:	e024      	b.n	8003a38 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6a1b      	ldr	r3, [r3, #32]
 80039f2:	2b01      	cmp	r3, #1
 80039f4:	d101      	bne.n	80039fa <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 80039f6:	2301      	movs	r3, #1
 80039f8:	e01f      	b.n	8003a3a <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80039fa:	4b12      	ldr	r3, [pc, #72]	@ (8003a44 <HAL_RCC_OscConfig+0x620>)
 80039fc:	685b      	ldr	r3, [r3, #4]
 80039fe:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8003a00:	4b10      	ldr	r3, [pc, #64]	@ (8003a44 <HAL_RCC_OscConfig+0x620>)
 8003a02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a04:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a06:	697a      	ldr	r2, [r7, #20]
 8003a08:	2380      	movs	r3, #128	@ 0x80
 8003a0a:	025b      	lsls	r3, r3, #9
 8003a0c:	401a      	ands	r2, r3
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a12:	429a      	cmp	r2, r3
 8003a14:	d10e      	bne.n	8003a34 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8003a16:	693b      	ldr	r3, [r7, #16]
 8003a18:	220f      	movs	r2, #15
 8003a1a:	401a      	ands	r2, r3
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a20:	429a      	cmp	r2, r3
 8003a22:	d107      	bne.n	8003a34 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8003a24:	697a      	ldr	r2, [r7, #20]
 8003a26:	23f0      	movs	r3, #240	@ 0xf0
 8003a28:	039b      	lsls	r3, r3, #14
 8003a2a:	401a      	ands	r2, r3
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8003a30:	429a      	cmp	r2, r3
 8003a32:	d001      	beq.n	8003a38 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8003a34:	2301      	movs	r3, #1
 8003a36:	e000      	b.n	8003a3a <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8003a38:	2300      	movs	r3, #0
}
 8003a3a:	0018      	movs	r0, r3
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	b008      	add	sp, #32
 8003a40:	bd80      	pop	{r7, pc}
 8003a42:	46c0      	nop			@ (mov r8, r8)
 8003a44:	40021000 	.word	0x40021000
 8003a48:	00001388 	.word	0x00001388
 8003a4c:	efffffff 	.word	0xefffffff
 8003a50:	feffffff 	.word	0xfeffffff
 8003a54:	ffc2ffff 	.word	0xffc2ffff

08003a58 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b084      	sub	sp, #16
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
 8003a60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d101      	bne.n	8003a6c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003a68:	2301      	movs	r3, #1
 8003a6a:	e0b3      	b.n	8003bd4 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003a6c:	4b5b      	ldr	r3, [pc, #364]	@ (8003bdc <HAL_RCC_ClockConfig+0x184>)
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	2201      	movs	r2, #1
 8003a72:	4013      	ands	r3, r2
 8003a74:	683a      	ldr	r2, [r7, #0]
 8003a76:	429a      	cmp	r2, r3
 8003a78:	d911      	bls.n	8003a9e <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a7a:	4b58      	ldr	r3, [pc, #352]	@ (8003bdc <HAL_RCC_ClockConfig+0x184>)
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	2201      	movs	r2, #1
 8003a80:	4393      	bics	r3, r2
 8003a82:	0019      	movs	r1, r3
 8003a84:	4b55      	ldr	r3, [pc, #340]	@ (8003bdc <HAL_RCC_ClockConfig+0x184>)
 8003a86:	683a      	ldr	r2, [r7, #0]
 8003a88:	430a      	orrs	r2, r1
 8003a8a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a8c:	4b53      	ldr	r3, [pc, #332]	@ (8003bdc <HAL_RCC_ClockConfig+0x184>)
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	2201      	movs	r2, #1
 8003a92:	4013      	ands	r3, r2
 8003a94:	683a      	ldr	r2, [r7, #0]
 8003a96:	429a      	cmp	r2, r3
 8003a98:	d001      	beq.n	8003a9e <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8003a9a:	2301      	movs	r3, #1
 8003a9c:	e09a      	b.n	8003bd4 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	2202      	movs	r2, #2
 8003aa4:	4013      	ands	r3, r2
 8003aa6:	d015      	beq.n	8003ad4 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	2204      	movs	r2, #4
 8003aae:	4013      	ands	r3, r2
 8003ab0:	d006      	beq.n	8003ac0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8003ab2:	4b4b      	ldr	r3, [pc, #300]	@ (8003be0 <HAL_RCC_ClockConfig+0x188>)
 8003ab4:	685a      	ldr	r2, [r3, #4]
 8003ab6:	4b4a      	ldr	r3, [pc, #296]	@ (8003be0 <HAL_RCC_ClockConfig+0x188>)
 8003ab8:	21e0      	movs	r1, #224	@ 0xe0
 8003aba:	00c9      	lsls	r1, r1, #3
 8003abc:	430a      	orrs	r2, r1
 8003abe:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ac0:	4b47      	ldr	r3, [pc, #284]	@ (8003be0 <HAL_RCC_ClockConfig+0x188>)
 8003ac2:	685b      	ldr	r3, [r3, #4]
 8003ac4:	22f0      	movs	r2, #240	@ 0xf0
 8003ac6:	4393      	bics	r3, r2
 8003ac8:	0019      	movs	r1, r3
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	689a      	ldr	r2, [r3, #8]
 8003ace:	4b44      	ldr	r3, [pc, #272]	@ (8003be0 <HAL_RCC_ClockConfig+0x188>)
 8003ad0:	430a      	orrs	r2, r1
 8003ad2:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	2201      	movs	r2, #1
 8003ada:	4013      	ands	r3, r2
 8003adc:	d040      	beq.n	8003b60 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	685b      	ldr	r3, [r3, #4]
 8003ae2:	2b01      	cmp	r3, #1
 8003ae4:	d107      	bne.n	8003af6 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ae6:	4b3e      	ldr	r3, [pc, #248]	@ (8003be0 <HAL_RCC_ClockConfig+0x188>)
 8003ae8:	681a      	ldr	r2, [r3, #0]
 8003aea:	2380      	movs	r3, #128	@ 0x80
 8003aec:	029b      	lsls	r3, r3, #10
 8003aee:	4013      	ands	r3, r2
 8003af0:	d114      	bne.n	8003b1c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8003af2:	2301      	movs	r3, #1
 8003af4:	e06e      	b.n	8003bd4 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	685b      	ldr	r3, [r3, #4]
 8003afa:	2b02      	cmp	r3, #2
 8003afc:	d107      	bne.n	8003b0e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003afe:	4b38      	ldr	r3, [pc, #224]	@ (8003be0 <HAL_RCC_ClockConfig+0x188>)
 8003b00:	681a      	ldr	r2, [r3, #0]
 8003b02:	2380      	movs	r3, #128	@ 0x80
 8003b04:	049b      	lsls	r3, r3, #18
 8003b06:	4013      	ands	r3, r2
 8003b08:	d108      	bne.n	8003b1c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8003b0a:	2301      	movs	r3, #1
 8003b0c:	e062      	b.n	8003bd4 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b0e:	4b34      	ldr	r3, [pc, #208]	@ (8003be0 <HAL_RCC_ClockConfig+0x188>)
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	2202      	movs	r2, #2
 8003b14:	4013      	ands	r3, r2
 8003b16:	d101      	bne.n	8003b1c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8003b18:	2301      	movs	r3, #1
 8003b1a:	e05b      	b.n	8003bd4 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003b1c:	4b30      	ldr	r3, [pc, #192]	@ (8003be0 <HAL_RCC_ClockConfig+0x188>)
 8003b1e:	685b      	ldr	r3, [r3, #4]
 8003b20:	2203      	movs	r2, #3
 8003b22:	4393      	bics	r3, r2
 8003b24:	0019      	movs	r1, r3
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	685a      	ldr	r2, [r3, #4]
 8003b2a:	4b2d      	ldr	r3, [pc, #180]	@ (8003be0 <HAL_RCC_ClockConfig+0x188>)
 8003b2c:	430a      	orrs	r2, r1
 8003b2e:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003b30:	f7ff f90c 	bl	8002d4c <HAL_GetTick>
 8003b34:	0003      	movs	r3, r0
 8003b36:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b38:	e009      	b.n	8003b4e <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b3a:	f7ff f907 	bl	8002d4c <HAL_GetTick>
 8003b3e:	0002      	movs	r2, r0
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	1ad3      	subs	r3, r2, r3
 8003b44:	4a27      	ldr	r2, [pc, #156]	@ (8003be4 <HAL_RCC_ClockConfig+0x18c>)
 8003b46:	4293      	cmp	r3, r2
 8003b48:	d901      	bls.n	8003b4e <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8003b4a:	2303      	movs	r3, #3
 8003b4c:	e042      	b.n	8003bd4 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b4e:	4b24      	ldr	r3, [pc, #144]	@ (8003be0 <HAL_RCC_ClockConfig+0x188>)
 8003b50:	685b      	ldr	r3, [r3, #4]
 8003b52:	220c      	movs	r2, #12
 8003b54:	401a      	ands	r2, r3
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	685b      	ldr	r3, [r3, #4]
 8003b5a:	009b      	lsls	r3, r3, #2
 8003b5c:	429a      	cmp	r2, r3
 8003b5e:	d1ec      	bne.n	8003b3a <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003b60:	4b1e      	ldr	r3, [pc, #120]	@ (8003bdc <HAL_RCC_ClockConfig+0x184>)
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	2201      	movs	r2, #1
 8003b66:	4013      	ands	r3, r2
 8003b68:	683a      	ldr	r2, [r7, #0]
 8003b6a:	429a      	cmp	r2, r3
 8003b6c:	d211      	bcs.n	8003b92 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b6e:	4b1b      	ldr	r3, [pc, #108]	@ (8003bdc <HAL_RCC_ClockConfig+0x184>)
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	2201      	movs	r2, #1
 8003b74:	4393      	bics	r3, r2
 8003b76:	0019      	movs	r1, r3
 8003b78:	4b18      	ldr	r3, [pc, #96]	@ (8003bdc <HAL_RCC_ClockConfig+0x184>)
 8003b7a:	683a      	ldr	r2, [r7, #0]
 8003b7c:	430a      	orrs	r2, r1
 8003b7e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b80:	4b16      	ldr	r3, [pc, #88]	@ (8003bdc <HAL_RCC_ClockConfig+0x184>)
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	2201      	movs	r2, #1
 8003b86:	4013      	ands	r3, r2
 8003b88:	683a      	ldr	r2, [r7, #0]
 8003b8a:	429a      	cmp	r2, r3
 8003b8c:	d001      	beq.n	8003b92 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8003b8e:	2301      	movs	r3, #1
 8003b90:	e020      	b.n	8003bd4 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	2204      	movs	r2, #4
 8003b98:	4013      	ands	r3, r2
 8003b9a:	d009      	beq.n	8003bb0 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8003b9c:	4b10      	ldr	r3, [pc, #64]	@ (8003be0 <HAL_RCC_ClockConfig+0x188>)
 8003b9e:	685b      	ldr	r3, [r3, #4]
 8003ba0:	4a11      	ldr	r2, [pc, #68]	@ (8003be8 <HAL_RCC_ClockConfig+0x190>)
 8003ba2:	4013      	ands	r3, r2
 8003ba4:	0019      	movs	r1, r3
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	68da      	ldr	r2, [r3, #12]
 8003baa:	4b0d      	ldr	r3, [pc, #52]	@ (8003be0 <HAL_RCC_ClockConfig+0x188>)
 8003bac:	430a      	orrs	r2, r1
 8003bae:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003bb0:	f000 f820 	bl	8003bf4 <HAL_RCC_GetSysClockFreq>
 8003bb4:	0001      	movs	r1, r0
 8003bb6:	4b0a      	ldr	r3, [pc, #40]	@ (8003be0 <HAL_RCC_ClockConfig+0x188>)
 8003bb8:	685b      	ldr	r3, [r3, #4]
 8003bba:	091b      	lsrs	r3, r3, #4
 8003bbc:	220f      	movs	r2, #15
 8003bbe:	4013      	ands	r3, r2
 8003bc0:	4a0a      	ldr	r2, [pc, #40]	@ (8003bec <HAL_RCC_ClockConfig+0x194>)
 8003bc2:	5cd3      	ldrb	r3, [r2, r3]
 8003bc4:	000a      	movs	r2, r1
 8003bc6:	40da      	lsrs	r2, r3
 8003bc8:	4b09      	ldr	r3, [pc, #36]	@ (8003bf0 <HAL_RCC_ClockConfig+0x198>)
 8003bca:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8003bcc:	2003      	movs	r0, #3
 8003bce:	f7ff f877 	bl	8002cc0 <HAL_InitTick>
  
  return HAL_OK;
 8003bd2:	2300      	movs	r3, #0
}
 8003bd4:	0018      	movs	r0, r3
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	b004      	add	sp, #16
 8003bda:	bd80      	pop	{r7, pc}
 8003bdc:	40022000 	.word	0x40022000
 8003be0:	40021000 	.word	0x40021000
 8003be4:	00001388 	.word	0x00001388
 8003be8:	fffff8ff 	.word	0xfffff8ff
 8003bec:	0800bde8 	.word	0x0800bde8
 8003bf0:	20000000 	.word	0x20000000

08003bf4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b086      	sub	sp, #24
 8003bf8:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	60fb      	str	r3, [r7, #12]
 8003bfe:	2300      	movs	r3, #0
 8003c00:	60bb      	str	r3, [r7, #8]
 8003c02:	2300      	movs	r3, #0
 8003c04:	617b      	str	r3, [r7, #20]
 8003c06:	2300      	movs	r3, #0
 8003c08:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8003c0e:	4b20      	ldr	r3, [pc, #128]	@ (8003c90 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003c10:	685b      	ldr	r3, [r3, #4]
 8003c12:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	220c      	movs	r2, #12
 8003c18:	4013      	ands	r3, r2
 8003c1a:	2b04      	cmp	r3, #4
 8003c1c:	d002      	beq.n	8003c24 <HAL_RCC_GetSysClockFreq+0x30>
 8003c1e:	2b08      	cmp	r3, #8
 8003c20:	d003      	beq.n	8003c2a <HAL_RCC_GetSysClockFreq+0x36>
 8003c22:	e02c      	b.n	8003c7e <HAL_RCC_GetSysClockFreq+0x8a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003c24:	4b1b      	ldr	r3, [pc, #108]	@ (8003c94 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003c26:	613b      	str	r3, [r7, #16]
      break;
 8003c28:	e02c      	b.n	8003c84 <HAL_RCC_GetSysClockFreq+0x90>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	0c9b      	lsrs	r3, r3, #18
 8003c2e:	220f      	movs	r2, #15
 8003c30:	4013      	ands	r3, r2
 8003c32:	4a19      	ldr	r2, [pc, #100]	@ (8003c98 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003c34:	5cd3      	ldrb	r3, [r2, r3]
 8003c36:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8003c38:	4b15      	ldr	r3, [pc, #84]	@ (8003c90 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003c3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c3c:	220f      	movs	r2, #15
 8003c3e:	4013      	ands	r3, r2
 8003c40:	4a16      	ldr	r2, [pc, #88]	@ (8003c9c <HAL_RCC_GetSysClockFreq+0xa8>)
 8003c42:	5cd3      	ldrb	r3, [r2, r3]
 8003c44:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003c46:	68fa      	ldr	r2, [r7, #12]
 8003c48:	2380      	movs	r3, #128	@ 0x80
 8003c4a:	025b      	lsls	r3, r3, #9
 8003c4c:	4013      	ands	r3, r2
 8003c4e:	d009      	beq.n	8003c64 <HAL_RCC_GetSysClockFreq+0x70>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003c50:	68b9      	ldr	r1, [r7, #8]
 8003c52:	4810      	ldr	r0, [pc, #64]	@ (8003c94 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003c54:	f7fc fa74 	bl	8000140 <__udivsi3>
 8003c58:	0003      	movs	r3, r0
 8003c5a:	001a      	movs	r2, r3
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	4353      	muls	r3, r2
 8003c60:	617b      	str	r3, [r7, #20]
 8003c62:	e009      	b.n	8003c78 <HAL_RCC_GetSysClockFreq+0x84>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003c64:	6879      	ldr	r1, [r7, #4]
 8003c66:	000a      	movs	r2, r1
 8003c68:	0152      	lsls	r2, r2, #5
 8003c6a:	1a52      	subs	r2, r2, r1
 8003c6c:	0193      	lsls	r3, r2, #6
 8003c6e:	1a9b      	subs	r3, r3, r2
 8003c70:	00db      	lsls	r3, r3, #3
 8003c72:	185b      	adds	r3, r3, r1
 8003c74:	021b      	lsls	r3, r3, #8
 8003c76:	617b      	str	r3, [r7, #20]
#endif
      }
      sysclockfreq = pllclk;
 8003c78:	697b      	ldr	r3, [r7, #20]
 8003c7a:	613b      	str	r3, [r7, #16]
      break;
 8003c7c:	e002      	b.n	8003c84 <HAL_RCC_GetSysClockFreq+0x90>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003c7e:	4b05      	ldr	r3, [pc, #20]	@ (8003c94 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003c80:	613b      	str	r3, [r7, #16]
      break;
 8003c82:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8003c84:	693b      	ldr	r3, [r7, #16]
}
 8003c86:	0018      	movs	r0, r3
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	b006      	add	sp, #24
 8003c8c:	bd80      	pop	{r7, pc}
 8003c8e:	46c0      	nop			@ (mov r8, r8)
 8003c90:	40021000 	.word	0x40021000
 8003c94:	007a1200 	.word	0x007a1200
 8003c98:	0800be00 	.word	0x0800be00
 8003c9c:	0800be10 	.word	0x0800be10

08003ca0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ca4:	4b02      	ldr	r3, [pc, #8]	@ (8003cb0 <HAL_RCC_GetHCLKFreq+0x10>)
 8003ca6:	681b      	ldr	r3, [r3, #0]
}
 8003ca8:	0018      	movs	r0, r3
 8003caa:	46bd      	mov	sp, r7
 8003cac:	bd80      	pop	{r7, pc}
 8003cae:	46c0      	nop			@ (mov r8, r8)
 8003cb0:	20000000 	.word	0x20000000

08003cb4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8003cb8:	f7ff fff2 	bl	8003ca0 <HAL_RCC_GetHCLKFreq>
 8003cbc:	0001      	movs	r1, r0
 8003cbe:	4b06      	ldr	r3, [pc, #24]	@ (8003cd8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003cc0:	685b      	ldr	r3, [r3, #4]
 8003cc2:	0a1b      	lsrs	r3, r3, #8
 8003cc4:	2207      	movs	r2, #7
 8003cc6:	4013      	ands	r3, r2
 8003cc8:	4a04      	ldr	r2, [pc, #16]	@ (8003cdc <HAL_RCC_GetPCLK1Freq+0x28>)
 8003cca:	5cd3      	ldrb	r3, [r2, r3]
 8003ccc:	40d9      	lsrs	r1, r3
 8003cce:	000b      	movs	r3, r1
}    
 8003cd0:	0018      	movs	r0, r3
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	bd80      	pop	{r7, pc}
 8003cd6:	46c0      	nop			@ (mov r8, r8)
 8003cd8:	40021000 	.word	0x40021000
 8003cdc:	0800bdf8 	.word	0x0800bdf8

08003ce0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b086      	sub	sp, #24
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003ce8:	2300      	movs	r3, #0
 8003cea:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8003cec:	2300      	movs	r3, #0
 8003cee:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681a      	ldr	r2, [r3, #0]
 8003cf4:	2380      	movs	r3, #128	@ 0x80
 8003cf6:	025b      	lsls	r3, r3, #9
 8003cf8:	4013      	ands	r3, r2
 8003cfa:	d100      	bne.n	8003cfe <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8003cfc:	e08e      	b.n	8003e1c <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8003cfe:	2017      	movs	r0, #23
 8003d00:	183b      	adds	r3, r7, r0
 8003d02:	2200      	movs	r2, #0
 8003d04:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d06:	4b57      	ldr	r3, [pc, #348]	@ (8003e64 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003d08:	69da      	ldr	r2, [r3, #28]
 8003d0a:	2380      	movs	r3, #128	@ 0x80
 8003d0c:	055b      	lsls	r3, r3, #21
 8003d0e:	4013      	ands	r3, r2
 8003d10:	d110      	bne.n	8003d34 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003d12:	4b54      	ldr	r3, [pc, #336]	@ (8003e64 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003d14:	69da      	ldr	r2, [r3, #28]
 8003d16:	4b53      	ldr	r3, [pc, #332]	@ (8003e64 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003d18:	2180      	movs	r1, #128	@ 0x80
 8003d1a:	0549      	lsls	r1, r1, #21
 8003d1c:	430a      	orrs	r2, r1
 8003d1e:	61da      	str	r2, [r3, #28]
 8003d20:	4b50      	ldr	r3, [pc, #320]	@ (8003e64 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003d22:	69da      	ldr	r2, [r3, #28]
 8003d24:	2380      	movs	r3, #128	@ 0x80
 8003d26:	055b      	lsls	r3, r3, #21
 8003d28:	4013      	ands	r3, r2
 8003d2a:	60bb      	str	r3, [r7, #8]
 8003d2c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d2e:	183b      	adds	r3, r7, r0
 8003d30:	2201      	movs	r2, #1
 8003d32:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d34:	4b4c      	ldr	r3, [pc, #304]	@ (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8003d36:	681a      	ldr	r2, [r3, #0]
 8003d38:	2380      	movs	r3, #128	@ 0x80
 8003d3a:	005b      	lsls	r3, r3, #1
 8003d3c:	4013      	ands	r3, r2
 8003d3e:	d11a      	bne.n	8003d76 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003d40:	4b49      	ldr	r3, [pc, #292]	@ (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8003d42:	681a      	ldr	r2, [r3, #0]
 8003d44:	4b48      	ldr	r3, [pc, #288]	@ (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8003d46:	2180      	movs	r1, #128	@ 0x80
 8003d48:	0049      	lsls	r1, r1, #1
 8003d4a:	430a      	orrs	r2, r1
 8003d4c:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d4e:	f7fe fffd 	bl	8002d4c <HAL_GetTick>
 8003d52:	0003      	movs	r3, r0
 8003d54:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d56:	e008      	b.n	8003d6a <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d58:	f7fe fff8 	bl	8002d4c <HAL_GetTick>
 8003d5c:	0002      	movs	r2, r0
 8003d5e:	693b      	ldr	r3, [r7, #16]
 8003d60:	1ad3      	subs	r3, r2, r3
 8003d62:	2b64      	cmp	r3, #100	@ 0x64
 8003d64:	d901      	bls.n	8003d6a <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8003d66:	2303      	movs	r3, #3
 8003d68:	e077      	b.n	8003e5a <HAL_RCCEx_PeriphCLKConfig+0x17a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d6a:	4b3f      	ldr	r3, [pc, #252]	@ (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8003d6c:	681a      	ldr	r2, [r3, #0]
 8003d6e:	2380      	movs	r3, #128	@ 0x80
 8003d70:	005b      	lsls	r3, r3, #1
 8003d72:	4013      	ands	r3, r2
 8003d74:	d0f0      	beq.n	8003d58 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003d76:	4b3b      	ldr	r3, [pc, #236]	@ (8003e64 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003d78:	6a1a      	ldr	r2, [r3, #32]
 8003d7a:	23c0      	movs	r3, #192	@ 0xc0
 8003d7c:	009b      	lsls	r3, r3, #2
 8003d7e:	4013      	ands	r3, r2
 8003d80:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d034      	beq.n	8003df2 <HAL_RCCEx_PeriphCLKConfig+0x112>
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	685a      	ldr	r2, [r3, #4]
 8003d8c:	23c0      	movs	r3, #192	@ 0xc0
 8003d8e:	009b      	lsls	r3, r3, #2
 8003d90:	4013      	ands	r3, r2
 8003d92:	68fa      	ldr	r2, [r7, #12]
 8003d94:	429a      	cmp	r2, r3
 8003d96:	d02c      	beq.n	8003df2 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003d98:	4b32      	ldr	r3, [pc, #200]	@ (8003e64 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003d9a:	6a1b      	ldr	r3, [r3, #32]
 8003d9c:	4a33      	ldr	r2, [pc, #204]	@ (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8003d9e:	4013      	ands	r3, r2
 8003da0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003da2:	4b30      	ldr	r3, [pc, #192]	@ (8003e64 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003da4:	6a1a      	ldr	r2, [r3, #32]
 8003da6:	4b2f      	ldr	r3, [pc, #188]	@ (8003e64 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003da8:	2180      	movs	r1, #128	@ 0x80
 8003daa:	0249      	lsls	r1, r1, #9
 8003dac:	430a      	orrs	r2, r1
 8003dae:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003db0:	4b2c      	ldr	r3, [pc, #176]	@ (8003e64 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003db2:	6a1a      	ldr	r2, [r3, #32]
 8003db4:	4b2b      	ldr	r3, [pc, #172]	@ (8003e64 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003db6:	492e      	ldr	r1, [pc, #184]	@ (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8003db8:	400a      	ands	r2, r1
 8003dba:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003dbc:	4b29      	ldr	r3, [pc, #164]	@ (8003e64 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003dbe:	68fa      	ldr	r2, [r7, #12]
 8003dc0:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	2201      	movs	r2, #1
 8003dc6:	4013      	ands	r3, r2
 8003dc8:	d013      	beq.n	8003df2 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dca:	f7fe ffbf 	bl	8002d4c <HAL_GetTick>
 8003dce:	0003      	movs	r3, r0
 8003dd0:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003dd2:	e009      	b.n	8003de8 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003dd4:	f7fe ffba 	bl	8002d4c <HAL_GetTick>
 8003dd8:	0002      	movs	r2, r0
 8003dda:	693b      	ldr	r3, [r7, #16]
 8003ddc:	1ad3      	subs	r3, r2, r3
 8003dde:	4a25      	ldr	r2, [pc, #148]	@ (8003e74 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 8003de0:	4293      	cmp	r3, r2
 8003de2:	d901      	bls.n	8003de8 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8003de4:	2303      	movs	r3, #3
 8003de6:	e038      	b.n	8003e5a <HAL_RCCEx_PeriphCLKConfig+0x17a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003de8:	4b1e      	ldr	r3, [pc, #120]	@ (8003e64 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003dea:	6a1b      	ldr	r3, [r3, #32]
 8003dec:	2202      	movs	r2, #2
 8003dee:	4013      	ands	r3, r2
 8003df0:	d0f0      	beq.n	8003dd4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003df2:	4b1c      	ldr	r3, [pc, #112]	@ (8003e64 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003df4:	6a1b      	ldr	r3, [r3, #32]
 8003df6:	4a1d      	ldr	r2, [pc, #116]	@ (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8003df8:	4013      	ands	r3, r2
 8003dfa:	0019      	movs	r1, r3
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	685a      	ldr	r2, [r3, #4]
 8003e00:	4b18      	ldr	r3, [pc, #96]	@ (8003e64 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003e02:	430a      	orrs	r2, r1
 8003e04:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003e06:	2317      	movs	r3, #23
 8003e08:	18fb      	adds	r3, r7, r3
 8003e0a:	781b      	ldrb	r3, [r3, #0]
 8003e0c:	2b01      	cmp	r3, #1
 8003e0e:	d105      	bne.n	8003e1c <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e10:	4b14      	ldr	r3, [pc, #80]	@ (8003e64 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003e12:	69da      	ldr	r2, [r3, #28]
 8003e14:	4b13      	ldr	r3, [pc, #76]	@ (8003e64 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003e16:	4918      	ldr	r1, [pc, #96]	@ (8003e78 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 8003e18:	400a      	ands	r2, r1
 8003e1a:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	2201      	movs	r2, #1
 8003e22:	4013      	ands	r3, r2
 8003e24:	d009      	beq.n	8003e3a <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003e26:	4b0f      	ldr	r3, [pc, #60]	@ (8003e64 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003e28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e2a:	2203      	movs	r2, #3
 8003e2c:	4393      	bics	r3, r2
 8003e2e:	0019      	movs	r1, r3
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	689a      	ldr	r2, [r3, #8]
 8003e34:	4b0b      	ldr	r3, [pc, #44]	@ (8003e64 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003e36:	430a      	orrs	r2, r1
 8003e38:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	2220      	movs	r2, #32
 8003e40:	4013      	ands	r3, r2
 8003e42:	d009      	beq.n	8003e58 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003e44:	4b07      	ldr	r3, [pc, #28]	@ (8003e64 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003e46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e48:	2210      	movs	r2, #16
 8003e4a:	4393      	bics	r3, r2
 8003e4c:	0019      	movs	r1, r3
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	68da      	ldr	r2, [r3, #12]
 8003e52:	4b04      	ldr	r3, [pc, #16]	@ (8003e64 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003e54:	430a      	orrs	r2, r1
 8003e56:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8003e58:	2300      	movs	r3, #0
}
 8003e5a:	0018      	movs	r0, r3
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	b006      	add	sp, #24
 8003e60:	bd80      	pop	{r7, pc}
 8003e62:	46c0      	nop			@ (mov r8, r8)
 8003e64:	40021000 	.word	0x40021000
 8003e68:	40007000 	.word	0x40007000
 8003e6c:	fffffcff 	.word	0xfffffcff
 8003e70:	fffeffff 	.word	0xfffeffff
 8003e74:	00001388 	.word	0x00001388
 8003e78:	efffffff 	.word	0xefffffff

08003e7c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	b082      	sub	sp, #8
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d101      	bne.n	8003e8e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003e8a:	2301      	movs	r3, #1
 8003e8c:	e044      	b.n	8003f18 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d107      	bne.n	8003ea6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	2278      	movs	r2, #120	@ 0x78
 8003e9a:	2100      	movs	r1, #0
 8003e9c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	0018      	movs	r0, r3
 8003ea2:	f7fe fd7d 	bl	80029a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	2224      	movs	r2, #36	@ 0x24
 8003eaa:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	681a      	ldr	r2, [r3, #0]
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	2101      	movs	r1, #1
 8003eb8:	438a      	bics	r2, r1
 8003eba:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	0018      	movs	r0, r3
 8003ec0:	f000 fc12 	bl	80046e8 <UART_SetConfig>
 8003ec4:	0003      	movs	r3, r0
 8003ec6:	2b01      	cmp	r3, #1
 8003ec8:	d101      	bne.n	8003ece <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003eca:	2301      	movs	r3, #1
 8003ecc:	e024      	b.n	8003f18 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d003      	beq.n	8003ede <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	0018      	movs	r0, r3
 8003eda:	f000 fd45 	bl	8004968 <UART_AdvFeatureConfig>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	685a      	ldr	r2, [r3, #4]
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	490d      	ldr	r1, [pc, #52]	@ (8003f20 <HAL_UART_Init+0xa4>)
 8003eea:	400a      	ands	r2, r1
 8003eec:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	689a      	ldr	r2, [r3, #8]
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	2108      	movs	r1, #8
 8003efa:	438a      	bics	r2, r1
 8003efc:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	681a      	ldr	r2, [r3, #0]
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	2101      	movs	r1, #1
 8003f0a:	430a      	orrs	r2, r1
 8003f0c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	0018      	movs	r0, r3
 8003f12:	f000 fddd 	bl	8004ad0 <UART_CheckIdleState>
 8003f16:	0003      	movs	r3, r0
}
 8003f18:	0018      	movs	r0, r3
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	b002      	add	sp, #8
 8003f1e:	bd80      	pop	{r7, pc}
 8003f20:	fffff7ff 	.word	0xfffff7ff

08003f24 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f24:	b580      	push	{r7, lr}
 8003f26:	b08a      	sub	sp, #40	@ 0x28
 8003f28:	af02      	add	r7, sp, #8
 8003f2a:	60f8      	str	r0, [r7, #12]
 8003f2c:	60b9      	str	r1, [r7, #8]
 8003f2e:	603b      	str	r3, [r7, #0]
 8003f30:	1dbb      	adds	r3, r7, #6
 8003f32:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003f38:	2b20      	cmp	r3, #32
 8003f3a:	d000      	beq.n	8003f3e <HAL_UART_Transmit+0x1a>
 8003f3c:	e08c      	b.n	8004058 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 8003f3e:	68bb      	ldr	r3, [r7, #8]
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d003      	beq.n	8003f4c <HAL_UART_Transmit+0x28>
 8003f44:	1dbb      	adds	r3, r7, #6
 8003f46:	881b      	ldrh	r3, [r3, #0]
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d101      	bne.n	8003f50 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8003f4c:	2301      	movs	r3, #1
 8003f4e:	e084      	b.n	800405a <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	689a      	ldr	r2, [r3, #8]
 8003f54:	2380      	movs	r3, #128	@ 0x80
 8003f56:	015b      	lsls	r3, r3, #5
 8003f58:	429a      	cmp	r2, r3
 8003f5a:	d109      	bne.n	8003f70 <HAL_UART_Transmit+0x4c>
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	691b      	ldr	r3, [r3, #16]
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d105      	bne.n	8003f70 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003f64:	68bb      	ldr	r3, [r7, #8]
 8003f66:	2201      	movs	r2, #1
 8003f68:	4013      	ands	r3, r2
 8003f6a:	d001      	beq.n	8003f70 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8003f6c:	2301      	movs	r3, #1
 8003f6e:	e074      	b.n	800405a <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	2284      	movs	r2, #132	@ 0x84
 8003f74:	2100      	movs	r1, #0
 8003f76:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	2221      	movs	r2, #33	@ 0x21
 8003f7c:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003f7e:	f7fe fee5 	bl	8002d4c <HAL_GetTick>
 8003f82:	0003      	movs	r3, r0
 8003f84:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	1dba      	adds	r2, r7, #6
 8003f8a:	2150      	movs	r1, #80	@ 0x50
 8003f8c:	8812      	ldrh	r2, [r2, #0]
 8003f8e:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	1dba      	adds	r2, r7, #6
 8003f94:	2152      	movs	r1, #82	@ 0x52
 8003f96:	8812      	ldrh	r2, [r2, #0]
 8003f98:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	689a      	ldr	r2, [r3, #8]
 8003f9e:	2380      	movs	r3, #128	@ 0x80
 8003fa0:	015b      	lsls	r3, r3, #5
 8003fa2:	429a      	cmp	r2, r3
 8003fa4:	d108      	bne.n	8003fb8 <HAL_UART_Transmit+0x94>
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	691b      	ldr	r3, [r3, #16]
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d104      	bne.n	8003fb8 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 8003fae:	2300      	movs	r3, #0
 8003fb0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003fb2:	68bb      	ldr	r3, [r7, #8]
 8003fb4:	61bb      	str	r3, [r7, #24]
 8003fb6:	e003      	b.n	8003fc0 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8003fb8:	68bb      	ldr	r3, [r7, #8]
 8003fba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003fbc:	2300      	movs	r3, #0
 8003fbe:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003fc0:	e02f      	b.n	8004022 <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003fc2:	697a      	ldr	r2, [r7, #20]
 8003fc4:	68f8      	ldr	r0, [r7, #12]
 8003fc6:	683b      	ldr	r3, [r7, #0]
 8003fc8:	9300      	str	r3, [sp, #0]
 8003fca:	0013      	movs	r3, r2
 8003fcc:	2200      	movs	r2, #0
 8003fce:	2180      	movs	r1, #128	@ 0x80
 8003fd0:	f000 fe26 	bl	8004c20 <UART_WaitOnFlagUntilTimeout>
 8003fd4:	1e03      	subs	r3, r0, #0
 8003fd6:	d004      	beq.n	8003fe2 <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	2220      	movs	r2, #32
 8003fdc:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8003fde:	2303      	movs	r3, #3
 8003fe0:	e03b      	b.n	800405a <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 8003fe2:	69fb      	ldr	r3, [r7, #28]
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d10b      	bne.n	8004000 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003fe8:	69bb      	ldr	r3, [r7, #24]
 8003fea:	881a      	ldrh	r2, [r3, #0]
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	05d2      	lsls	r2, r2, #23
 8003ff2:	0dd2      	lsrs	r2, r2, #23
 8003ff4:	b292      	uxth	r2, r2
 8003ff6:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8003ff8:	69bb      	ldr	r3, [r7, #24]
 8003ffa:	3302      	adds	r3, #2
 8003ffc:	61bb      	str	r3, [r7, #24]
 8003ffe:	e007      	b.n	8004010 <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004000:	69fb      	ldr	r3, [r7, #28]
 8004002:	781a      	ldrb	r2, [r3, #0]
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800400a:	69fb      	ldr	r3, [r7, #28]
 800400c:	3301      	adds	r3, #1
 800400e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	2252      	movs	r2, #82	@ 0x52
 8004014:	5a9b      	ldrh	r3, [r3, r2]
 8004016:	b29b      	uxth	r3, r3
 8004018:	3b01      	subs	r3, #1
 800401a:	b299      	uxth	r1, r3
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	2252      	movs	r2, #82	@ 0x52
 8004020:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	2252      	movs	r2, #82	@ 0x52
 8004026:	5a9b      	ldrh	r3, [r3, r2]
 8004028:	b29b      	uxth	r3, r3
 800402a:	2b00      	cmp	r3, #0
 800402c:	d1c9      	bne.n	8003fc2 <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800402e:	697a      	ldr	r2, [r7, #20]
 8004030:	68f8      	ldr	r0, [r7, #12]
 8004032:	683b      	ldr	r3, [r7, #0]
 8004034:	9300      	str	r3, [sp, #0]
 8004036:	0013      	movs	r3, r2
 8004038:	2200      	movs	r2, #0
 800403a:	2140      	movs	r1, #64	@ 0x40
 800403c:	f000 fdf0 	bl	8004c20 <UART_WaitOnFlagUntilTimeout>
 8004040:	1e03      	subs	r3, r0, #0
 8004042:	d004      	beq.n	800404e <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	2220      	movs	r2, #32
 8004048:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800404a:	2303      	movs	r3, #3
 800404c:	e005      	b.n	800405a <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	2220      	movs	r2, #32
 8004052:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8004054:	2300      	movs	r3, #0
 8004056:	e000      	b.n	800405a <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 8004058:	2302      	movs	r3, #2
  }
}
 800405a:	0018      	movs	r0, r3
 800405c:	46bd      	mov	sp, r7
 800405e:	b008      	add	sp, #32
 8004060:	bd80      	pop	{r7, pc}

08004062 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004062:	b580      	push	{r7, lr}
 8004064:	b088      	sub	sp, #32
 8004066:	af00      	add	r7, sp, #0
 8004068:	60f8      	str	r0, [r7, #12]
 800406a:	60b9      	str	r1, [r7, #8]
 800406c:	1dbb      	adds	r3, r7, #6
 800406e:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	2280      	movs	r2, #128	@ 0x80
 8004074:	589b      	ldr	r3, [r3, r2]
 8004076:	2b20      	cmp	r3, #32
 8004078:	d145      	bne.n	8004106 <HAL_UART_Receive_IT+0xa4>
  {
    if ((pData == NULL) || (Size == 0U))
 800407a:	68bb      	ldr	r3, [r7, #8]
 800407c:	2b00      	cmp	r3, #0
 800407e:	d003      	beq.n	8004088 <HAL_UART_Receive_IT+0x26>
 8004080:	1dbb      	adds	r3, r7, #6
 8004082:	881b      	ldrh	r3, [r3, #0]
 8004084:	2b00      	cmp	r3, #0
 8004086:	d101      	bne.n	800408c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004088:	2301      	movs	r3, #1
 800408a:	e03d      	b.n	8004108 <HAL_UART_Receive_IT+0xa6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	689a      	ldr	r2, [r3, #8]
 8004090:	2380      	movs	r3, #128	@ 0x80
 8004092:	015b      	lsls	r3, r3, #5
 8004094:	429a      	cmp	r2, r3
 8004096:	d109      	bne.n	80040ac <HAL_UART_Receive_IT+0x4a>
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	691b      	ldr	r3, [r3, #16]
 800409c:	2b00      	cmp	r3, #0
 800409e:	d105      	bne.n	80040ac <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80040a0:	68bb      	ldr	r3, [r7, #8]
 80040a2:	2201      	movs	r2, #1
 80040a4:	4013      	ands	r3, r2
 80040a6:	d001      	beq.n	80040ac <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 80040a8:	2301      	movs	r3, #1
 80040aa:	e02d      	b.n	8004108 <HAL_UART_Receive_IT+0xa6>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	2200      	movs	r2, #0
 80040b0:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	685a      	ldr	r2, [r3, #4]
 80040b8:	2380      	movs	r3, #128	@ 0x80
 80040ba:	041b      	lsls	r3, r3, #16
 80040bc:	4013      	ands	r3, r2
 80040be:	d019      	beq.n	80040f4 <HAL_UART_Receive_IT+0x92>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80040c0:	f3ef 8310 	mrs	r3, PRIMASK
 80040c4:	613b      	str	r3, [r7, #16]
  return(result);
 80040c6:	693b      	ldr	r3, [r7, #16]
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80040c8:	61fb      	str	r3, [r7, #28]
 80040ca:	2301      	movs	r3, #1
 80040cc:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040ce:	697b      	ldr	r3, [r7, #20]
 80040d0:	f383 8810 	msr	PRIMASK, r3
}
 80040d4:	46c0      	nop			@ (mov r8, r8)
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	681a      	ldr	r2, [r3, #0]
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	2180      	movs	r1, #128	@ 0x80
 80040e2:	04c9      	lsls	r1, r1, #19
 80040e4:	430a      	orrs	r2, r1
 80040e6:	601a      	str	r2, [r3, #0]
 80040e8:	69fb      	ldr	r3, [r7, #28]
 80040ea:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040ec:	69bb      	ldr	r3, [r7, #24]
 80040ee:	f383 8810 	msr	PRIMASK, r3
}
 80040f2:	46c0      	nop			@ (mov r8, r8)
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80040f4:	1dbb      	adds	r3, r7, #6
 80040f6:	881a      	ldrh	r2, [r3, #0]
 80040f8:	68b9      	ldr	r1, [r7, #8]
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	0018      	movs	r0, r3
 80040fe:	f000 fdf9 	bl	8004cf4 <UART_Start_Receive_IT>
 8004102:	0003      	movs	r3, r0
 8004104:	e000      	b.n	8004108 <HAL_UART_Receive_IT+0xa6>
  }
  else
  {
    return HAL_BUSY;
 8004106:	2302      	movs	r3, #2
  }
}
 8004108:	0018      	movs	r0, r3
 800410a:	46bd      	mov	sp, r7
 800410c:	b008      	add	sp, #32
 800410e:	bd80      	pop	{r7, pc}

08004110 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004110:	b590      	push	{r4, r7, lr}
 8004112:	b0ab      	sub	sp, #172	@ 0xac
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	69db      	ldr	r3, [r3, #28]
 800411e:	22a4      	movs	r2, #164	@ 0xa4
 8004120:	18b9      	adds	r1, r7, r2
 8004122:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	20a0      	movs	r0, #160	@ 0xa0
 800412c:	1839      	adds	r1, r7, r0
 800412e:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	689b      	ldr	r3, [r3, #8]
 8004136:	219c      	movs	r1, #156	@ 0x9c
 8004138:	1879      	adds	r1, r7, r1
 800413a:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800413c:	0011      	movs	r1, r2
 800413e:	18bb      	adds	r3, r7, r2
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	4a99      	ldr	r2, [pc, #612]	@ (80043a8 <HAL_UART_IRQHandler+0x298>)
 8004144:	4013      	ands	r3, r2
 8004146:	2298      	movs	r2, #152	@ 0x98
 8004148:	18bc      	adds	r4, r7, r2
 800414a:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 800414c:	18bb      	adds	r3, r7, r2
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	2b00      	cmp	r3, #0
 8004152:	d114      	bne.n	800417e <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004154:	187b      	adds	r3, r7, r1
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	2220      	movs	r2, #32
 800415a:	4013      	ands	r3, r2
 800415c:	d00f      	beq.n	800417e <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800415e:	183b      	adds	r3, r7, r0
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	2220      	movs	r2, #32
 8004164:	4013      	ands	r3, r2
 8004166:	d00a      	beq.n	800417e <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800416c:	2b00      	cmp	r3, #0
 800416e:	d100      	bne.n	8004172 <HAL_UART_IRQHandler+0x62>
 8004170:	e286      	b.n	8004680 <HAL_UART_IRQHandler+0x570>
      {
        huart->RxISR(huart);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004176:	687a      	ldr	r2, [r7, #4]
 8004178:	0010      	movs	r0, r2
 800417a:	4798      	blx	r3
      }
      return;
 800417c:	e280      	b.n	8004680 <HAL_UART_IRQHandler+0x570>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800417e:	2398      	movs	r3, #152	@ 0x98
 8004180:	18fb      	adds	r3, r7, r3
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	2b00      	cmp	r3, #0
 8004186:	d100      	bne.n	800418a <HAL_UART_IRQHandler+0x7a>
 8004188:	e114      	b.n	80043b4 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800418a:	239c      	movs	r3, #156	@ 0x9c
 800418c:	18fb      	adds	r3, r7, r3
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	2201      	movs	r2, #1
 8004192:	4013      	ands	r3, r2
 8004194:	d106      	bne.n	80041a4 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004196:	23a0      	movs	r3, #160	@ 0xa0
 8004198:	18fb      	adds	r3, r7, r3
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	4a83      	ldr	r2, [pc, #524]	@ (80043ac <HAL_UART_IRQHandler+0x29c>)
 800419e:	4013      	ands	r3, r2
 80041a0:	d100      	bne.n	80041a4 <HAL_UART_IRQHandler+0x94>
 80041a2:	e107      	b.n	80043b4 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80041a4:	23a4      	movs	r3, #164	@ 0xa4
 80041a6:	18fb      	adds	r3, r7, r3
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	2201      	movs	r2, #1
 80041ac:	4013      	ands	r3, r2
 80041ae:	d012      	beq.n	80041d6 <HAL_UART_IRQHandler+0xc6>
 80041b0:	23a0      	movs	r3, #160	@ 0xa0
 80041b2:	18fb      	adds	r3, r7, r3
 80041b4:	681a      	ldr	r2, [r3, #0]
 80041b6:	2380      	movs	r3, #128	@ 0x80
 80041b8:	005b      	lsls	r3, r3, #1
 80041ba:	4013      	ands	r3, r2
 80041bc:	d00b      	beq.n	80041d6 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	2201      	movs	r2, #1
 80041c4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	2284      	movs	r2, #132	@ 0x84
 80041ca:	589b      	ldr	r3, [r3, r2]
 80041cc:	2201      	movs	r2, #1
 80041ce:	431a      	orrs	r2, r3
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2184      	movs	r1, #132	@ 0x84
 80041d4:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80041d6:	23a4      	movs	r3, #164	@ 0xa4
 80041d8:	18fb      	adds	r3, r7, r3
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	2202      	movs	r2, #2
 80041de:	4013      	ands	r3, r2
 80041e0:	d011      	beq.n	8004206 <HAL_UART_IRQHandler+0xf6>
 80041e2:	239c      	movs	r3, #156	@ 0x9c
 80041e4:	18fb      	adds	r3, r7, r3
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	2201      	movs	r2, #1
 80041ea:	4013      	ands	r3, r2
 80041ec:	d00b      	beq.n	8004206 <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	2202      	movs	r2, #2
 80041f4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	2284      	movs	r2, #132	@ 0x84
 80041fa:	589b      	ldr	r3, [r3, r2]
 80041fc:	2204      	movs	r2, #4
 80041fe:	431a      	orrs	r2, r3
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2184      	movs	r1, #132	@ 0x84
 8004204:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004206:	23a4      	movs	r3, #164	@ 0xa4
 8004208:	18fb      	adds	r3, r7, r3
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	2204      	movs	r2, #4
 800420e:	4013      	ands	r3, r2
 8004210:	d011      	beq.n	8004236 <HAL_UART_IRQHandler+0x126>
 8004212:	239c      	movs	r3, #156	@ 0x9c
 8004214:	18fb      	adds	r3, r7, r3
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	2201      	movs	r2, #1
 800421a:	4013      	ands	r3, r2
 800421c:	d00b      	beq.n	8004236 <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	2204      	movs	r2, #4
 8004224:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	2284      	movs	r2, #132	@ 0x84
 800422a:	589b      	ldr	r3, [r3, r2]
 800422c:	2202      	movs	r2, #2
 800422e:	431a      	orrs	r2, r3
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2184      	movs	r1, #132	@ 0x84
 8004234:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004236:	23a4      	movs	r3, #164	@ 0xa4
 8004238:	18fb      	adds	r3, r7, r3
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	2208      	movs	r2, #8
 800423e:	4013      	ands	r3, r2
 8004240:	d017      	beq.n	8004272 <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004242:	23a0      	movs	r3, #160	@ 0xa0
 8004244:	18fb      	adds	r3, r7, r3
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	2220      	movs	r2, #32
 800424a:	4013      	ands	r3, r2
 800424c:	d105      	bne.n	800425a <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800424e:	239c      	movs	r3, #156	@ 0x9c
 8004250:	18fb      	adds	r3, r7, r3
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	2201      	movs	r2, #1
 8004256:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004258:	d00b      	beq.n	8004272 <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	2208      	movs	r2, #8
 8004260:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	2284      	movs	r2, #132	@ 0x84
 8004266:	589b      	ldr	r3, [r3, r2]
 8004268:	2208      	movs	r2, #8
 800426a:	431a      	orrs	r2, r3
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2184      	movs	r1, #132	@ 0x84
 8004270:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004272:	23a4      	movs	r3, #164	@ 0xa4
 8004274:	18fb      	adds	r3, r7, r3
 8004276:	681a      	ldr	r2, [r3, #0]
 8004278:	2380      	movs	r3, #128	@ 0x80
 800427a:	011b      	lsls	r3, r3, #4
 800427c:	4013      	ands	r3, r2
 800427e:	d013      	beq.n	80042a8 <HAL_UART_IRQHandler+0x198>
 8004280:	23a0      	movs	r3, #160	@ 0xa0
 8004282:	18fb      	adds	r3, r7, r3
 8004284:	681a      	ldr	r2, [r3, #0]
 8004286:	2380      	movs	r3, #128	@ 0x80
 8004288:	04db      	lsls	r3, r3, #19
 800428a:	4013      	ands	r3, r2
 800428c:	d00c      	beq.n	80042a8 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	2280      	movs	r2, #128	@ 0x80
 8004294:	0112      	lsls	r2, r2, #4
 8004296:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2284      	movs	r2, #132	@ 0x84
 800429c:	589b      	ldr	r3, [r3, r2]
 800429e:	2220      	movs	r2, #32
 80042a0:	431a      	orrs	r2, r3
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	2184      	movs	r1, #132	@ 0x84
 80042a6:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2284      	movs	r2, #132	@ 0x84
 80042ac:	589b      	ldr	r3, [r3, r2]
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d100      	bne.n	80042b4 <HAL_UART_IRQHandler+0x1a4>
 80042b2:	e1e7      	b.n	8004684 <HAL_UART_IRQHandler+0x574>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80042b4:	23a4      	movs	r3, #164	@ 0xa4
 80042b6:	18fb      	adds	r3, r7, r3
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	2220      	movs	r2, #32
 80042bc:	4013      	ands	r3, r2
 80042be:	d00e      	beq.n	80042de <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80042c0:	23a0      	movs	r3, #160	@ 0xa0
 80042c2:	18fb      	adds	r3, r7, r3
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	2220      	movs	r2, #32
 80042c8:	4013      	ands	r3, r2
 80042ca:	d008      	beq.n	80042de <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d004      	beq.n	80042de <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80042d8:	687a      	ldr	r2, [r7, #4]
 80042da:	0010      	movs	r0, r2
 80042dc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	2284      	movs	r2, #132	@ 0x84
 80042e2:	589b      	ldr	r3, [r3, r2]
 80042e4:	2194      	movs	r1, #148	@ 0x94
 80042e6:	187a      	adds	r2, r7, r1
 80042e8:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	689b      	ldr	r3, [r3, #8]
 80042f0:	2240      	movs	r2, #64	@ 0x40
 80042f2:	4013      	ands	r3, r2
 80042f4:	2b40      	cmp	r3, #64	@ 0x40
 80042f6:	d004      	beq.n	8004302 <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80042f8:	187b      	adds	r3, r7, r1
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	2228      	movs	r2, #40	@ 0x28
 80042fe:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004300:	d047      	beq.n	8004392 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	0018      	movs	r0, r3
 8004306:	f000 fdab 	bl	8004e60 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	689b      	ldr	r3, [r3, #8]
 8004310:	2240      	movs	r2, #64	@ 0x40
 8004312:	4013      	ands	r3, r2
 8004314:	2b40      	cmp	r3, #64	@ 0x40
 8004316:	d137      	bne.n	8004388 <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004318:	f3ef 8310 	mrs	r3, PRIMASK
 800431c:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 800431e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004320:	2090      	movs	r0, #144	@ 0x90
 8004322:	183a      	adds	r2, r7, r0
 8004324:	6013      	str	r3, [r2, #0]
 8004326:	2301      	movs	r3, #1
 8004328:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800432a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800432c:	f383 8810 	msr	PRIMASK, r3
}
 8004330:	46c0      	nop			@ (mov r8, r8)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	689a      	ldr	r2, [r3, #8]
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	2140      	movs	r1, #64	@ 0x40
 800433e:	438a      	bics	r2, r1
 8004340:	609a      	str	r2, [r3, #8]
 8004342:	183b      	adds	r3, r7, r0
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004348:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800434a:	f383 8810 	msr	PRIMASK, r3
}
 800434e:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004354:	2b00      	cmp	r3, #0
 8004356:	d012      	beq.n	800437e <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800435c:	4a14      	ldr	r2, [pc, #80]	@ (80043b0 <HAL_UART_IRQHandler+0x2a0>)
 800435e:	635a      	str	r2, [r3, #52]	@ 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004364:	0018      	movs	r0, r3
 8004366:	f7fe fe35 	bl	8002fd4 <HAL_DMA_Abort_IT>
 800436a:	1e03      	subs	r3, r0, #0
 800436c:	d01a      	beq.n	80043a4 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004372:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004378:	0018      	movs	r0, r3
 800437a:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800437c:	e012      	b.n	80043a4 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	0018      	movs	r0, r3
 8004382:	f000 f99d 	bl	80046c0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004386:	e00d      	b.n	80043a4 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	0018      	movs	r0, r3
 800438c:	f000 f998 	bl	80046c0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004390:	e008      	b.n	80043a4 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	0018      	movs	r0, r3
 8004396:	f000 f993 	bl	80046c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	2284      	movs	r2, #132	@ 0x84
 800439e:	2100      	movs	r1, #0
 80043a0:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 80043a2:	e16f      	b.n	8004684 <HAL_UART_IRQHandler+0x574>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043a4:	46c0      	nop			@ (mov r8, r8)
    return;
 80043a6:	e16d      	b.n	8004684 <HAL_UART_IRQHandler+0x574>
 80043a8:	0000080f 	.word	0x0000080f
 80043ac:	04000120 	.word	0x04000120
 80043b0:	08004f29 	.word	0x08004f29

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80043b8:	2b01      	cmp	r3, #1
 80043ba:	d000      	beq.n	80043be <HAL_UART_IRQHandler+0x2ae>
 80043bc:	e139      	b.n	8004632 <HAL_UART_IRQHandler+0x522>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80043be:	23a4      	movs	r3, #164	@ 0xa4
 80043c0:	18fb      	adds	r3, r7, r3
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	2210      	movs	r2, #16
 80043c6:	4013      	ands	r3, r2
 80043c8:	d100      	bne.n	80043cc <HAL_UART_IRQHandler+0x2bc>
 80043ca:	e132      	b.n	8004632 <HAL_UART_IRQHandler+0x522>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80043cc:	23a0      	movs	r3, #160	@ 0xa0
 80043ce:	18fb      	adds	r3, r7, r3
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	2210      	movs	r2, #16
 80043d4:	4013      	ands	r3, r2
 80043d6:	d100      	bne.n	80043da <HAL_UART_IRQHandler+0x2ca>
 80043d8:	e12b      	b.n	8004632 <HAL_UART_IRQHandler+0x522>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	2210      	movs	r2, #16
 80043e0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	689b      	ldr	r3, [r3, #8]
 80043e8:	2240      	movs	r2, #64	@ 0x40
 80043ea:	4013      	ands	r3, r2
 80043ec:	2b40      	cmp	r3, #64	@ 0x40
 80043ee:	d000      	beq.n	80043f2 <HAL_UART_IRQHandler+0x2e2>
 80043f0:	e09f      	b.n	8004532 <HAL_UART_IRQHandler+0x422>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	685a      	ldr	r2, [r3, #4]
 80043fa:	217e      	movs	r1, #126	@ 0x7e
 80043fc:	187b      	adds	r3, r7, r1
 80043fe:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8004400:	187b      	adds	r3, r7, r1
 8004402:	881b      	ldrh	r3, [r3, #0]
 8004404:	2b00      	cmp	r3, #0
 8004406:	d100      	bne.n	800440a <HAL_UART_IRQHandler+0x2fa>
 8004408:	e13e      	b.n	8004688 <HAL_UART_IRQHandler+0x578>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	2258      	movs	r2, #88	@ 0x58
 800440e:	5a9b      	ldrh	r3, [r3, r2]
 8004410:	187a      	adds	r2, r7, r1
 8004412:	8812      	ldrh	r2, [r2, #0]
 8004414:	429a      	cmp	r2, r3
 8004416:	d300      	bcc.n	800441a <HAL_UART_IRQHandler+0x30a>
 8004418:	e136      	b.n	8004688 <HAL_UART_IRQHandler+0x578>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	187a      	adds	r2, r7, r1
 800441e:	215a      	movs	r1, #90	@ 0x5a
 8004420:	8812      	ldrh	r2, [r2, #0]
 8004422:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004428:	699b      	ldr	r3, [r3, #24]
 800442a:	2b20      	cmp	r3, #32
 800442c:	d06f      	beq.n	800450e <HAL_UART_IRQHandler+0x3fe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800442e:	f3ef 8310 	mrs	r3, PRIMASK
 8004432:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8004434:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004436:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004438:	2301      	movs	r3, #1
 800443a:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800443c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800443e:	f383 8810 	msr	PRIMASK, r3
}
 8004442:	46c0      	nop			@ (mov r8, r8)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	681a      	ldr	r2, [r3, #0]
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	4992      	ldr	r1, [pc, #584]	@ (8004698 <HAL_UART_IRQHandler+0x588>)
 8004450:	400a      	ands	r2, r1
 8004452:	601a      	str	r2, [r3, #0]
 8004454:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004456:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004458:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800445a:	f383 8810 	msr	PRIMASK, r3
}
 800445e:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004460:	f3ef 8310 	mrs	r3, PRIMASK
 8004464:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 8004466:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004468:	677b      	str	r3, [r7, #116]	@ 0x74
 800446a:	2301      	movs	r3, #1
 800446c:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800446e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004470:	f383 8810 	msr	PRIMASK, r3
}
 8004474:	46c0      	nop			@ (mov r8, r8)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	689a      	ldr	r2, [r3, #8]
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	2101      	movs	r1, #1
 8004482:	438a      	bics	r2, r1
 8004484:	609a      	str	r2, [r3, #8]
 8004486:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004488:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800448a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800448c:	f383 8810 	msr	PRIMASK, r3
}
 8004490:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004492:	f3ef 8310 	mrs	r3, PRIMASK
 8004496:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 8004498:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800449a:	673b      	str	r3, [r7, #112]	@ 0x70
 800449c:	2301      	movs	r3, #1
 800449e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80044a0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80044a2:	f383 8810 	msr	PRIMASK, r3
}
 80044a6:	46c0      	nop			@ (mov r8, r8)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	689a      	ldr	r2, [r3, #8]
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	2140      	movs	r1, #64	@ 0x40
 80044b4:	438a      	bics	r2, r1
 80044b6:	609a      	str	r2, [r3, #8]
 80044b8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80044ba:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80044bc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80044be:	f383 8810 	msr	PRIMASK, r3
}
 80044c2:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2280      	movs	r2, #128	@ 0x80
 80044c8:	2120      	movs	r1, #32
 80044ca:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2200      	movs	r2, #0
 80044d0:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80044d2:	f3ef 8310 	mrs	r3, PRIMASK
 80044d6:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 80044d8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80044da:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80044dc:	2301      	movs	r3, #1
 80044de:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80044e0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80044e2:	f383 8810 	msr	PRIMASK, r3
}
 80044e6:	46c0      	nop			@ (mov r8, r8)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	681a      	ldr	r2, [r3, #0]
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	2110      	movs	r1, #16
 80044f4:	438a      	bics	r2, r1
 80044f6:	601a      	str	r2, [r3, #0]
 80044f8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80044fa:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80044fc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80044fe:	f383 8810 	msr	PRIMASK, r3
}
 8004502:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004508:	0018      	movs	r0, r3
 800450a:	f7fe fd2b 	bl	8002f64 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	2202      	movs	r2, #2
 8004512:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2258      	movs	r2, #88	@ 0x58
 8004518:	5a9a      	ldrh	r2, [r3, r2]
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	215a      	movs	r1, #90	@ 0x5a
 800451e:	5a5b      	ldrh	r3, [r3, r1]
 8004520:	b29b      	uxth	r3, r3
 8004522:	1ad3      	subs	r3, r2, r3
 8004524:	b29a      	uxth	r2, r3
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	0011      	movs	r1, r2
 800452a:	0018      	movs	r0, r3
 800452c:	f000 f8d0 	bl	80046d0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004530:	e0aa      	b.n	8004688 <HAL_UART_IRQHandler+0x578>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	2258      	movs	r2, #88	@ 0x58
 8004536:	5a99      	ldrh	r1, [r3, r2]
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	225a      	movs	r2, #90	@ 0x5a
 800453c:	5a9b      	ldrh	r3, [r3, r2]
 800453e:	b29a      	uxth	r2, r3
 8004540:	208e      	movs	r0, #142	@ 0x8e
 8004542:	183b      	adds	r3, r7, r0
 8004544:	1a8a      	subs	r2, r1, r2
 8004546:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	225a      	movs	r2, #90	@ 0x5a
 800454c:	5a9b      	ldrh	r3, [r3, r2]
 800454e:	b29b      	uxth	r3, r3
 8004550:	2b00      	cmp	r3, #0
 8004552:	d100      	bne.n	8004556 <HAL_UART_IRQHandler+0x446>
 8004554:	e09a      	b.n	800468c <HAL_UART_IRQHandler+0x57c>
          && (nb_rx_data > 0U))
 8004556:	183b      	adds	r3, r7, r0
 8004558:	881b      	ldrh	r3, [r3, #0]
 800455a:	2b00      	cmp	r3, #0
 800455c:	d100      	bne.n	8004560 <HAL_UART_IRQHandler+0x450>
 800455e:	e095      	b.n	800468c <HAL_UART_IRQHandler+0x57c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004560:	f3ef 8310 	mrs	r3, PRIMASK
 8004564:	60fb      	str	r3, [r7, #12]
  return(result);
 8004566:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004568:	2488      	movs	r4, #136	@ 0x88
 800456a:	193a      	adds	r2, r7, r4
 800456c:	6013      	str	r3, [r2, #0]
 800456e:	2301      	movs	r3, #1
 8004570:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004572:	693b      	ldr	r3, [r7, #16]
 8004574:	f383 8810 	msr	PRIMASK, r3
}
 8004578:	46c0      	nop			@ (mov r8, r8)
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	681a      	ldr	r2, [r3, #0]
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	4945      	ldr	r1, [pc, #276]	@ (800469c <HAL_UART_IRQHandler+0x58c>)
 8004586:	400a      	ands	r2, r1
 8004588:	601a      	str	r2, [r3, #0]
 800458a:	193b      	adds	r3, r7, r4
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004590:	697b      	ldr	r3, [r7, #20]
 8004592:	f383 8810 	msr	PRIMASK, r3
}
 8004596:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004598:	f3ef 8310 	mrs	r3, PRIMASK
 800459c:	61bb      	str	r3, [r7, #24]
  return(result);
 800459e:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045a0:	2484      	movs	r4, #132	@ 0x84
 80045a2:	193a      	adds	r2, r7, r4
 80045a4:	6013      	str	r3, [r2, #0]
 80045a6:	2301      	movs	r3, #1
 80045a8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80045aa:	69fb      	ldr	r3, [r7, #28]
 80045ac:	f383 8810 	msr	PRIMASK, r3
}
 80045b0:	46c0      	nop			@ (mov r8, r8)
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	689a      	ldr	r2, [r3, #8]
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	2101      	movs	r1, #1
 80045be:	438a      	bics	r2, r1
 80045c0:	609a      	str	r2, [r3, #8]
 80045c2:	193b      	adds	r3, r7, r4
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80045c8:	6a3b      	ldr	r3, [r7, #32]
 80045ca:	f383 8810 	msr	PRIMASK, r3
}
 80045ce:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2280      	movs	r2, #128	@ 0x80
 80045d4:	2120      	movs	r1, #32
 80045d6:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2200      	movs	r2, #0
 80045dc:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	2200      	movs	r2, #0
 80045e2:	669a      	str	r2, [r3, #104]	@ 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80045e4:	f3ef 8310 	mrs	r3, PRIMASK
 80045e8:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80045ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80045ec:	2480      	movs	r4, #128	@ 0x80
 80045ee:	193a      	adds	r2, r7, r4
 80045f0:	6013      	str	r3, [r2, #0]
 80045f2:	2301      	movs	r3, #1
 80045f4:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80045f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045f8:	f383 8810 	msr	PRIMASK, r3
}
 80045fc:	46c0      	nop			@ (mov r8, r8)
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	681a      	ldr	r2, [r3, #0]
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	2110      	movs	r1, #16
 800460a:	438a      	bics	r2, r1
 800460c:	601a      	str	r2, [r3, #0]
 800460e:	193b      	adds	r3, r7, r4
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004614:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004616:	f383 8810 	msr	PRIMASK, r3
}
 800461a:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2202      	movs	r2, #2
 8004620:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004622:	183b      	adds	r3, r7, r0
 8004624:	881a      	ldrh	r2, [r3, #0]
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	0011      	movs	r1, r2
 800462a:	0018      	movs	r0, r3
 800462c:	f000 f850 	bl	80046d0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004630:	e02c      	b.n	800468c <HAL_UART_IRQHandler+0x57c>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004632:	23a4      	movs	r3, #164	@ 0xa4
 8004634:	18fb      	adds	r3, r7, r3
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	2280      	movs	r2, #128	@ 0x80
 800463a:	4013      	ands	r3, r2
 800463c:	d00f      	beq.n	800465e <HAL_UART_IRQHandler+0x54e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800463e:	23a0      	movs	r3, #160	@ 0xa0
 8004640:	18fb      	adds	r3, r7, r3
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	2280      	movs	r2, #128	@ 0x80
 8004646:	4013      	ands	r3, r2
 8004648:	d009      	beq.n	800465e <HAL_UART_IRQHandler+0x54e>
  {
    if (huart->TxISR != NULL)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800464e:	2b00      	cmp	r3, #0
 8004650:	d01e      	beq.n	8004690 <HAL_UART_IRQHandler+0x580>
    {
      huart->TxISR(huart);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004656:	687a      	ldr	r2, [r7, #4]
 8004658:	0010      	movs	r0, r2
 800465a:	4798      	blx	r3
    }
    return;
 800465c:	e018      	b.n	8004690 <HAL_UART_IRQHandler+0x580>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800465e:	23a4      	movs	r3, #164	@ 0xa4
 8004660:	18fb      	adds	r3, r7, r3
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	2240      	movs	r2, #64	@ 0x40
 8004666:	4013      	ands	r3, r2
 8004668:	d013      	beq.n	8004692 <HAL_UART_IRQHandler+0x582>
 800466a:	23a0      	movs	r3, #160	@ 0xa0
 800466c:	18fb      	adds	r3, r7, r3
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	2240      	movs	r2, #64	@ 0x40
 8004672:	4013      	ands	r3, r2
 8004674:	d00d      	beq.n	8004692 <HAL_UART_IRQHandler+0x582>
  {
    UART_EndTransmit_IT(huart);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	0018      	movs	r0, r3
 800467a:	f000 fc6c 	bl	8004f56 <UART_EndTransmit_IT>
    return;
 800467e:	e008      	b.n	8004692 <HAL_UART_IRQHandler+0x582>
      return;
 8004680:	46c0      	nop			@ (mov r8, r8)
 8004682:	e006      	b.n	8004692 <HAL_UART_IRQHandler+0x582>
    return;
 8004684:	46c0      	nop			@ (mov r8, r8)
 8004686:	e004      	b.n	8004692 <HAL_UART_IRQHandler+0x582>
      return;
 8004688:	46c0      	nop			@ (mov r8, r8)
 800468a:	e002      	b.n	8004692 <HAL_UART_IRQHandler+0x582>
      return;
 800468c:	46c0      	nop			@ (mov r8, r8)
 800468e:	e000      	b.n	8004692 <HAL_UART_IRQHandler+0x582>
    return;
 8004690:	46c0      	nop			@ (mov r8, r8)
  }

}
 8004692:	46bd      	mov	sp, r7
 8004694:	b02b      	add	sp, #172	@ 0xac
 8004696:	bd90      	pop	{r4, r7, pc}
 8004698:	fffffeff 	.word	0xfffffeff
 800469c:	fffffedf 	.word	0xfffffedf

080046a0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80046a0:	b580      	push	{r7, lr}
 80046a2:	b082      	sub	sp, #8
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80046a8:	46c0      	nop			@ (mov r8, r8)
 80046aa:	46bd      	mov	sp, r7
 80046ac:	b002      	add	sp, #8
 80046ae:	bd80      	pop	{r7, pc}

080046b0 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80046b0:	b580      	push	{r7, lr}
 80046b2:	b082      	sub	sp, #8
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 80046b8:	46c0      	nop			@ (mov r8, r8)
 80046ba:	46bd      	mov	sp, r7
 80046bc:	b002      	add	sp, #8
 80046be:	bd80      	pop	{r7, pc}

080046c0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80046c0:	b580      	push	{r7, lr}
 80046c2:	b082      	sub	sp, #8
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80046c8:	46c0      	nop			@ (mov r8, r8)
 80046ca:	46bd      	mov	sp, r7
 80046cc:	b002      	add	sp, #8
 80046ce:	bd80      	pop	{r7, pc}

080046d0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80046d0:	b580      	push	{r7, lr}
 80046d2:	b082      	sub	sp, #8
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
 80046d8:	000a      	movs	r2, r1
 80046da:	1cbb      	adds	r3, r7, #2
 80046dc:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80046de:	46c0      	nop			@ (mov r8, r8)
 80046e0:	46bd      	mov	sp, r7
 80046e2:	b002      	add	sp, #8
 80046e4:	bd80      	pop	{r7, pc}
	...

080046e8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80046e8:	b580      	push	{r7, lr}
 80046ea:	b088      	sub	sp, #32
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80046f0:	231e      	movs	r3, #30
 80046f2:	18fb      	adds	r3, r7, r3
 80046f4:	2200      	movs	r2, #0
 80046f6:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	689a      	ldr	r2, [r3, #8]
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	691b      	ldr	r3, [r3, #16]
 8004700:	431a      	orrs	r2, r3
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	695b      	ldr	r3, [r3, #20]
 8004706:	431a      	orrs	r2, r3
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	69db      	ldr	r3, [r3, #28]
 800470c:	4313      	orrs	r3, r2
 800470e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	4a8d      	ldr	r2, [pc, #564]	@ (800494c <UART_SetConfig+0x264>)
 8004718:	4013      	ands	r3, r2
 800471a:	0019      	movs	r1, r3
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	697a      	ldr	r2, [r7, #20]
 8004722:	430a      	orrs	r2, r1
 8004724:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	685b      	ldr	r3, [r3, #4]
 800472c:	4a88      	ldr	r2, [pc, #544]	@ (8004950 <UART_SetConfig+0x268>)
 800472e:	4013      	ands	r3, r2
 8004730:	0019      	movs	r1, r3
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	68da      	ldr	r2, [r3, #12]
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	430a      	orrs	r2, r1
 800473c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	699b      	ldr	r3, [r3, #24]
 8004742:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	6a1b      	ldr	r3, [r3, #32]
 8004748:	697a      	ldr	r2, [r7, #20]
 800474a:	4313      	orrs	r3, r2
 800474c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	689b      	ldr	r3, [r3, #8]
 8004754:	4a7f      	ldr	r2, [pc, #508]	@ (8004954 <UART_SetConfig+0x26c>)
 8004756:	4013      	ands	r3, r2
 8004758:	0019      	movs	r1, r3
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	697a      	ldr	r2, [r7, #20]
 8004760:	430a      	orrs	r2, r1
 8004762:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	4a7b      	ldr	r2, [pc, #492]	@ (8004958 <UART_SetConfig+0x270>)
 800476a:	4293      	cmp	r3, r2
 800476c:	d127      	bne.n	80047be <UART_SetConfig+0xd6>
 800476e:	4b7b      	ldr	r3, [pc, #492]	@ (800495c <UART_SetConfig+0x274>)
 8004770:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004772:	2203      	movs	r2, #3
 8004774:	4013      	ands	r3, r2
 8004776:	2b03      	cmp	r3, #3
 8004778:	d00d      	beq.n	8004796 <UART_SetConfig+0xae>
 800477a:	d81b      	bhi.n	80047b4 <UART_SetConfig+0xcc>
 800477c:	2b02      	cmp	r3, #2
 800477e:	d014      	beq.n	80047aa <UART_SetConfig+0xc2>
 8004780:	d818      	bhi.n	80047b4 <UART_SetConfig+0xcc>
 8004782:	2b00      	cmp	r3, #0
 8004784:	d002      	beq.n	800478c <UART_SetConfig+0xa4>
 8004786:	2b01      	cmp	r3, #1
 8004788:	d00a      	beq.n	80047a0 <UART_SetConfig+0xb8>
 800478a:	e013      	b.n	80047b4 <UART_SetConfig+0xcc>
 800478c:	231f      	movs	r3, #31
 800478e:	18fb      	adds	r3, r7, r3
 8004790:	2200      	movs	r2, #0
 8004792:	701a      	strb	r2, [r3, #0]
 8004794:	e021      	b.n	80047da <UART_SetConfig+0xf2>
 8004796:	231f      	movs	r3, #31
 8004798:	18fb      	adds	r3, r7, r3
 800479a:	2202      	movs	r2, #2
 800479c:	701a      	strb	r2, [r3, #0]
 800479e:	e01c      	b.n	80047da <UART_SetConfig+0xf2>
 80047a0:	231f      	movs	r3, #31
 80047a2:	18fb      	adds	r3, r7, r3
 80047a4:	2204      	movs	r2, #4
 80047a6:	701a      	strb	r2, [r3, #0]
 80047a8:	e017      	b.n	80047da <UART_SetConfig+0xf2>
 80047aa:	231f      	movs	r3, #31
 80047ac:	18fb      	adds	r3, r7, r3
 80047ae:	2208      	movs	r2, #8
 80047b0:	701a      	strb	r2, [r3, #0]
 80047b2:	e012      	b.n	80047da <UART_SetConfig+0xf2>
 80047b4:	231f      	movs	r3, #31
 80047b6:	18fb      	adds	r3, r7, r3
 80047b8:	2210      	movs	r2, #16
 80047ba:	701a      	strb	r2, [r3, #0]
 80047bc:	e00d      	b.n	80047da <UART_SetConfig+0xf2>
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	4a67      	ldr	r2, [pc, #412]	@ (8004960 <UART_SetConfig+0x278>)
 80047c4:	4293      	cmp	r3, r2
 80047c6:	d104      	bne.n	80047d2 <UART_SetConfig+0xea>
 80047c8:	231f      	movs	r3, #31
 80047ca:	18fb      	adds	r3, r7, r3
 80047cc:	2200      	movs	r2, #0
 80047ce:	701a      	strb	r2, [r3, #0]
 80047d0:	e003      	b.n	80047da <UART_SetConfig+0xf2>
 80047d2:	231f      	movs	r3, #31
 80047d4:	18fb      	adds	r3, r7, r3
 80047d6:	2210      	movs	r2, #16
 80047d8:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	69da      	ldr	r2, [r3, #28]
 80047de:	2380      	movs	r3, #128	@ 0x80
 80047e0:	021b      	lsls	r3, r3, #8
 80047e2:	429a      	cmp	r2, r3
 80047e4:	d15c      	bne.n	80048a0 <UART_SetConfig+0x1b8>
  {
    switch (clocksource)
 80047e6:	231f      	movs	r3, #31
 80047e8:	18fb      	adds	r3, r7, r3
 80047ea:	781b      	ldrb	r3, [r3, #0]
 80047ec:	2b08      	cmp	r3, #8
 80047ee:	d015      	beq.n	800481c <UART_SetConfig+0x134>
 80047f0:	dc18      	bgt.n	8004824 <UART_SetConfig+0x13c>
 80047f2:	2b04      	cmp	r3, #4
 80047f4:	d00d      	beq.n	8004812 <UART_SetConfig+0x12a>
 80047f6:	dc15      	bgt.n	8004824 <UART_SetConfig+0x13c>
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d002      	beq.n	8004802 <UART_SetConfig+0x11a>
 80047fc:	2b02      	cmp	r3, #2
 80047fe:	d005      	beq.n	800480c <UART_SetConfig+0x124>
 8004800:	e010      	b.n	8004824 <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004802:	f7ff fa57 	bl	8003cb4 <HAL_RCC_GetPCLK1Freq>
 8004806:	0003      	movs	r3, r0
 8004808:	61bb      	str	r3, [r7, #24]
        break;
 800480a:	e012      	b.n	8004832 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800480c:	4b55      	ldr	r3, [pc, #340]	@ (8004964 <UART_SetConfig+0x27c>)
 800480e:	61bb      	str	r3, [r7, #24]
        break;
 8004810:	e00f      	b.n	8004832 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004812:	f7ff f9ef 	bl	8003bf4 <HAL_RCC_GetSysClockFreq>
 8004816:	0003      	movs	r3, r0
 8004818:	61bb      	str	r3, [r7, #24]
        break;
 800481a:	e00a      	b.n	8004832 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800481c:	2380      	movs	r3, #128	@ 0x80
 800481e:	021b      	lsls	r3, r3, #8
 8004820:	61bb      	str	r3, [r7, #24]
        break;
 8004822:	e006      	b.n	8004832 <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 8004824:	2300      	movs	r3, #0
 8004826:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004828:	231e      	movs	r3, #30
 800482a:	18fb      	adds	r3, r7, r3
 800482c:	2201      	movs	r2, #1
 800482e:	701a      	strb	r2, [r3, #0]
        break;
 8004830:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004832:	69bb      	ldr	r3, [r7, #24]
 8004834:	2b00      	cmp	r3, #0
 8004836:	d100      	bne.n	800483a <UART_SetConfig+0x152>
 8004838:	e07a      	b.n	8004930 <UART_SetConfig+0x248>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800483a:	69bb      	ldr	r3, [r7, #24]
 800483c:	005a      	lsls	r2, r3, #1
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	685b      	ldr	r3, [r3, #4]
 8004842:	085b      	lsrs	r3, r3, #1
 8004844:	18d2      	adds	r2, r2, r3
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	685b      	ldr	r3, [r3, #4]
 800484a:	0019      	movs	r1, r3
 800484c:	0010      	movs	r0, r2
 800484e:	f7fb fc77 	bl	8000140 <__udivsi3>
 8004852:	0003      	movs	r3, r0
 8004854:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004856:	693b      	ldr	r3, [r7, #16]
 8004858:	2b0f      	cmp	r3, #15
 800485a:	d91c      	bls.n	8004896 <UART_SetConfig+0x1ae>
 800485c:	693a      	ldr	r2, [r7, #16]
 800485e:	2380      	movs	r3, #128	@ 0x80
 8004860:	025b      	lsls	r3, r3, #9
 8004862:	429a      	cmp	r2, r3
 8004864:	d217      	bcs.n	8004896 <UART_SetConfig+0x1ae>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004866:	693b      	ldr	r3, [r7, #16]
 8004868:	b29a      	uxth	r2, r3
 800486a:	200e      	movs	r0, #14
 800486c:	183b      	adds	r3, r7, r0
 800486e:	210f      	movs	r1, #15
 8004870:	438a      	bics	r2, r1
 8004872:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004874:	693b      	ldr	r3, [r7, #16]
 8004876:	085b      	lsrs	r3, r3, #1
 8004878:	b29b      	uxth	r3, r3
 800487a:	2207      	movs	r2, #7
 800487c:	4013      	ands	r3, r2
 800487e:	b299      	uxth	r1, r3
 8004880:	183b      	adds	r3, r7, r0
 8004882:	183a      	adds	r2, r7, r0
 8004884:	8812      	ldrh	r2, [r2, #0]
 8004886:	430a      	orrs	r2, r1
 8004888:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	183a      	adds	r2, r7, r0
 8004890:	8812      	ldrh	r2, [r2, #0]
 8004892:	60da      	str	r2, [r3, #12]
 8004894:	e04c      	b.n	8004930 <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 8004896:	231e      	movs	r3, #30
 8004898:	18fb      	adds	r3, r7, r3
 800489a:	2201      	movs	r2, #1
 800489c:	701a      	strb	r2, [r3, #0]
 800489e:	e047      	b.n	8004930 <UART_SetConfig+0x248>
      }
    }
  }
  else
  {
    switch (clocksource)
 80048a0:	231f      	movs	r3, #31
 80048a2:	18fb      	adds	r3, r7, r3
 80048a4:	781b      	ldrb	r3, [r3, #0]
 80048a6:	2b08      	cmp	r3, #8
 80048a8:	d015      	beq.n	80048d6 <UART_SetConfig+0x1ee>
 80048aa:	dc18      	bgt.n	80048de <UART_SetConfig+0x1f6>
 80048ac:	2b04      	cmp	r3, #4
 80048ae:	d00d      	beq.n	80048cc <UART_SetConfig+0x1e4>
 80048b0:	dc15      	bgt.n	80048de <UART_SetConfig+0x1f6>
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d002      	beq.n	80048bc <UART_SetConfig+0x1d4>
 80048b6:	2b02      	cmp	r3, #2
 80048b8:	d005      	beq.n	80048c6 <UART_SetConfig+0x1de>
 80048ba:	e010      	b.n	80048de <UART_SetConfig+0x1f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80048bc:	f7ff f9fa 	bl	8003cb4 <HAL_RCC_GetPCLK1Freq>
 80048c0:	0003      	movs	r3, r0
 80048c2:	61bb      	str	r3, [r7, #24]
        break;
 80048c4:	e012      	b.n	80048ec <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80048c6:	4b27      	ldr	r3, [pc, #156]	@ (8004964 <UART_SetConfig+0x27c>)
 80048c8:	61bb      	str	r3, [r7, #24]
        break;
 80048ca:	e00f      	b.n	80048ec <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80048cc:	f7ff f992 	bl	8003bf4 <HAL_RCC_GetSysClockFreq>
 80048d0:	0003      	movs	r3, r0
 80048d2:	61bb      	str	r3, [r7, #24]
        break;
 80048d4:	e00a      	b.n	80048ec <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80048d6:	2380      	movs	r3, #128	@ 0x80
 80048d8:	021b      	lsls	r3, r3, #8
 80048da:	61bb      	str	r3, [r7, #24]
        break;
 80048dc:	e006      	b.n	80048ec <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 80048de:	2300      	movs	r3, #0
 80048e0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80048e2:	231e      	movs	r3, #30
 80048e4:	18fb      	adds	r3, r7, r3
 80048e6:	2201      	movs	r2, #1
 80048e8:	701a      	strb	r2, [r3, #0]
        break;
 80048ea:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 80048ec:	69bb      	ldr	r3, [r7, #24]
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d01e      	beq.n	8004930 <UART_SetConfig+0x248>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	685b      	ldr	r3, [r3, #4]
 80048f6:	085a      	lsrs	r2, r3, #1
 80048f8:	69bb      	ldr	r3, [r7, #24]
 80048fa:	18d2      	adds	r2, r2, r3
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	685b      	ldr	r3, [r3, #4]
 8004900:	0019      	movs	r1, r3
 8004902:	0010      	movs	r0, r2
 8004904:	f7fb fc1c 	bl	8000140 <__udivsi3>
 8004908:	0003      	movs	r3, r0
 800490a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800490c:	693b      	ldr	r3, [r7, #16]
 800490e:	2b0f      	cmp	r3, #15
 8004910:	d90a      	bls.n	8004928 <UART_SetConfig+0x240>
 8004912:	693a      	ldr	r2, [r7, #16]
 8004914:	2380      	movs	r3, #128	@ 0x80
 8004916:	025b      	lsls	r3, r3, #9
 8004918:	429a      	cmp	r2, r3
 800491a:	d205      	bcs.n	8004928 <UART_SetConfig+0x240>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800491c:	693b      	ldr	r3, [r7, #16]
 800491e:	b29a      	uxth	r2, r3
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	60da      	str	r2, [r3, #12]
 8004926:	e003      	b.n	8004930 <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 8004928:	231e      	movs	r3, #30
 800492a:	18fb      	adds	r3, r7, r3
 800492c:	2201      	movs	r2, #1
 800492e:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2200      	movs	r2, #0
 8004934:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	2200      	movs	r2, #0
 800493a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800493c:	231e      	movs	r3, #30
 800493e:	18fb      	adds	r3, r7, r3
 8004940:	781b      	ldrb	r3, [r3, #0]
}
 8004942:	0018      	movs	r0, r3
 8004944:	46bd      	mov	sp, r7
 8004946:	b008      	add	sp, #32
 8004948:	bd80      	pop	{r7, pc}
 800494a:	46c0      	nop			@ (mov r8, r8)
 800494c:	ffff69f3 	.word	0xffff69f3
 8004950:	ffffcfff 	.word	0xffffcfff
 8004954:	fffff4ff 	.word	0xfffff4ff
 8004958:	40013800 	.word	0x40013800
 800495c:	40021000 	.word	0x40021000
 8004960:	40004400 	.word	0x40004400
 8004964:	007a1200 	.word	0x007a1200

08004968 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004968:	b580      	push	{r7, lr}
 800496a:	b082      	sub	sp, #8
 800496c:	af00      	add	r7, sp, #0
 800496e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004974:	2201      	movs	r2, #1
 8004976:	4013      	ands	r3, r2
 8004978:	d00b      	beq.n	8004992 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	685b      	ldr	r3, [r3, #4]
 8004980:	4a4a      	ldr	r2, [pc, #296]	@ (8004aac <UART_AdvFeatureConfig+0x144>)
 8004982:	4013      	ands	r3, r2
 8004984:	0019      	movs	r1, r3
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	430a      	orrs	r2, r1
 8004990:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004996:	2202      	movs	r2, #2
 8004998:	4013      	ands	r3, r2
 800499a:	d00b      	beq.n	80049b4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	685b      	ldr	r3, [r3, #4]
 80049a2:	4a43      	ldr	r2, [pc, #268]	@ (8004ab0 <UART_AdvFeatureConfig+0x148>)
 80049a4:	4013      	ands	r3, r2
 80049a6:	0019      	movs	r1, r3
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	430a      	orrs	r2, r1
 80049b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049b8:	2204      	movs	r2, #4
 80049ba:	4013      	ands	r3, r2
 80049bc:	d00b      	beq.n	80049d6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	685b      	ldr	r3, [r3, #4]
 80049c4:	4a3b      	ldr	r2, [pc, #236]	@ (8004ab4 <UART_AdvFeatureConfig+0x14c>)
 80049c6:	4013      	ands	r3, r2
 80049c8:	0019      	movs	r1, r3
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	430a      	orrs	r2, r1
 80049d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049da:	2208      	movs	r2, #8
 80049dc:	4013      	ands	r3, r2
 80049de:	d00b      	beq.n	80049f8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	685b      	ldr	r3, [r3, #4]
 80049e6:	4a34      	ldr	r2, [pc, #208]	@ (8004ab8 <UART_AdvFeatureConfig+0x150>)
 80049e8:	4013      	ands	r3, r2
 80049ea:	0019      	movs	r1, r3
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	430a      	orrs	r2, r1
 80049f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049fc:	2210      	movs	r2, #16
 80049fe:	4013      	ands	r3, r2
 8004a00:	d00b      	beq.n	8004a1a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	689b      	ldr	r3, [r3, #8]
 8004a08:	4a2c      	ldr	r2, [pc, #176]	@ (8004abc <UART_AdvFeatureConfig+0x154>)
 8004a0a:	4013      	ands	r3, r2
 8004a0c:	0019      	movs	r1, r3
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	430a      	orrs	r2, r1
 8004a18:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a1e:	2220      	movs	r2, #32
 8004a20:	4013      	ands	r3, r2
 8004a22:	d00b      	beq.n	8004a3c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	689b      	ldr	r3, [r3, #8]
 8004a2a:	4a25      	ldr	r2, [pc, #148]	@ (8004ac0 <UART_AdvFeatureConfig+0x158>)
 8004a2c:	4013      	ands	r3, r2
 8004a2e:	0019      	movs	r1, r3
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	430a      	orrs	r2, r1
 8004a3a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a40:	2240      	movs	r2, #64	@ 0x40
 8004a42:	4013      	ands	r3, r2
 8004a44:	d01d      	beq.n	8004a82 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	685b      	ldr	r3, [r3, #4]
 8004a4c:	4a1d      	ldr	r2, [pc, #116]	@ (8004ac4 <UART_AdvFeatureConfig+0x15c>)
 8004a4e:	4013      	ands	r3, r2
 8004a50:	0019      	movs	r1, r3
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	430a      	orrs	r2, r1
 8004a5c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004a62:	2380      	movs	r3, #128	@ 0x80
 8004a64:	035b      	lsls	r3, r3, #13
 8004a66:	429a      	cmp	r2, r3
 8004a68:	d10b      	bne.n	8004a82 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	685b      	ldr	r3, [r3, #4]
 8004a70:	4a15      	ldr	r2, [pc, #84]	@ (8004ac8 <UART_AdvFeatureConfig+0x160>)
 8004a72:	4013      	ands	r3, r2
 8004a74:	0019      	movs	r1, r3
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	430a      	orrs	r2, r1
 8004a80:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a86:	2280      	movs	r2, #128	@ 0x80
 8004a88:	4013      	ands	r3, r2
 8004a8a:	d00b      	beq.n	8004aa4 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	685b      	ldr	r3, [r3, #4]
 8004a92:	4a0e      	ldr	r2, [pc, #56]	@ (8004acc <UART_AdvFeatureConfig+0x164>)
 8004a94:	4013      	ands	r3, r2
 8004a96:	0019      	movs	r1, r3
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	430a      	orrs	r2, r1
 8004aa2:	605a      	str	r2, [r3, #4]
  }
}
 8004aa4:	46c0      	nop			@ (mov r8, r8)
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	b002      	add	sp, #8
 8004aaa:	bd80      	pop	{r7, pc}
 8004aac:	fffdffff 	.word	0xfffdffff
 8004ab0:	fffeffff 	.word	0xfffeffff
 8004ab4:	fffbffff 	.word	0xfffbffff
 8004ab8:	ffff7fff 	.word	0xffff7fff
 8004abc:	ffffefff 	.word	0xffffefff
 8004ac0:	ffffdfff 	.word	0xffffdfff
 8004ac4:	ffefffff 	.word	0xffefffff
 8004ac8:	ff9fffff 	.word	0xff9fffff
 8004acc:	fff7ffff 	.word	0xfff7ffff

08004ad0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	b092      	sub	sp, #72	@ 0x48
 8004ad4:	af02      	add	r7, sp, #8
 8004ad6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	2284      	movs	r2, #132	@ 0x84
 8004adc:	2100      	movs	r1, #0
 8004ade:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004ae0:	f7fe f934 	bl	8002d4c <HAL_GetTick>
 8004ae4:	0003      	movs	r3, r0
 8004ae6:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	2208      	movs	r2, #8
 8004af0:	4013      	ands	r3, r2
 8004af2:	2b08      	cmp	r3, #8
 8004af4:	d12c      	bne.n	8004b50 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004af6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004af8:	2280      	movs	r2, #128	@ 0x80
 8004afa:	0391      	lsls	r1, r2, #14
 8004afc:	6878      	ldr	r0, [r7, #4]
 8004afe:	4a46      	ldr	r2, [pc, #280]	@ (8004c18 <UART_CheckIdleState+0x148>)
 8004b00:	9200      	str	r2, [sp, #0]
 8004b02:	2200      	movs	r2, #0
 8004b04:	f000 f88c 	bl	8004c20 <UART_WaitOnFlagUntilTimeout>
 8004b08:	1e03      	subs	r3, r0, #0
 8004b0a:	d021      	beq.n	8004b50 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004b0c:	f3ef 8310 	mrs	r3, PRIMASK
 8004b10:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8004b12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004b14:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004b16:	2301      	movs	r3, #1
 8004b18:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b1c:	f383 8810 	msr	PRIMASK, r3
}
 8004b20:	46c0      	nop			@ (mov r8, r8)
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	681a      	ldr	r2, [r3, #0]
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	2180      	movs	r1, #128	@ 0x80
 8004b2e:	438a      	bics	r2, r1
 8004b30:	601a      	str	r2, [r3, #0]
 8004b32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b34:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b38:	f383 8810 	msr	PRIMASK, r3
}
 8004b3c:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	2220      	movs	r2, #32
 8004b42:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2278      	movs	r2, #120	@ 0x78
 8004b48:	2100      	movs	r1, #0
 8004b4a:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004b4c:	2303      	movs	r3, #3
 8004b4e:	e05f      	b.n	8004c10 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	2204      	movs	r2, #4
 8004b58:	4013      	ands	r3, r2
 8004b5a:	2b04      	cmp	r3, #4
 8004b5c:	d146      	bne.n	8004bec <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004b5e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004b60:	2280      	movs	r2, #128	@ 0x80
 8004b62:	03d1      	lsls	r1, r2, #15
 8004b64:	6878      	ldr	r0, [r7, #4]
 8004b66:	4a2c      	ldr	r2, [pc, #176]	@ (8004c18 <UART_CheckIdleState+0x148>)
 8004b68:	9200      	str	r2, [sp, #0]
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	f000 f858 	bl	8004c20 <UART_WaitOnFlagUntilTimeout>
 8004b70:	1e03      	subs	r3, r0, #0
 8004b72:	d03b      	beq.n	8004bec <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004b74:	f3ef 8310 	mrs	r3, PRIMASK
 8004b78:	60fb      	str	r3, [r7, #12]
  return(result);
 8004b7a:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004b7c:	637b      	str	r3, [r7, #52]	@ 0x34
 8004b7e:	2301      	movs	r3, #1
 8004b80:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b82:	693b      	ldr	r3, [r7, #16]
 8004b84:	f383 8810 	msr	PRIMASK, r3
}
 8004b88:	46c0      	nop			@ (mov r8, r8)
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	681a      	ldr	r2, [r3, #0]
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	4921      	ldr	r1, [pc, #132]	@ (8004c1c <UART_CheckIdleState+0x14c>)
 8004b96:	400a      	ands	r2, r1
 8004b98:	601a      	str	r2, [r3, #0]
 8004b9a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004b9c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b9e:	697b      	ldr	r3, [r7, #20]
 8004ba0:	f383 8810 	msr	PRIMASK, r3
}
 8004ba4:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004ba6:	f3ef 8310 	mrs	r3, PRIMASK
 8004baa:	61bb      	str	r3, [r7, #24]
  return(result);
 8004bac:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004bae:	633b      	str	r3, [r7, #48]	@ 0x30
 8004bb0:	2301      	movs	r3, #1
 8004bb2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004bb4:	69fb      	ldr	r3, [r7, #28]
 8004bb6:	f383 8810 	msr	PRIMASK, r3
}
 8004bba:	46c0      	nop			@ (mov r8, r8)
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	689a      	ldr	r2, [r3, #8]
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	2101      	movs	r1, #1
 8004bc8:	438a      	bics	r2, r1
 8004bca:	609a      	str	r2, [r3, #8]
 8004bcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bce:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004bd0:	6a3b      	ldr	r3, [r7, #32]
 8004bd2:	f383 8810 	msr	PRIMASK, r3
}
 8004bd6:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	2280      	movs	r2, #128	@ 0x80
 8004bdc:	2120      	movs	r1, #32
 8004bde:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2278      	movs	r2, #120	@ 0x78
 8004be4:	2100      	movs	r1, #0
 8004be6:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004be8:	2303      	movs	r3, #3
 8004bea:	e011      	b.n	8004c10 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	2220      	movs	r2, #32
 8004bf0:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	2280      	movs	r2, #128	@ 0x80
 8004bf6:	2120      	movs	r1, #32
 8004bf8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2200      	movs	r2, #0
 8004c04:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	2278      	movs	r2, #120	@ 0x78
 8004c0a:	2100      	movs	r1, #0
 8004c0c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004c0e:	2300      	movs	r3, #0
}
 8004c10:	0018      	movs	r0, r3
 8004c12:	46bd      	mov	sp, r7
 8004c14:	b010      	add	sp, #64	@ 0x40
 8004c16:	bd80      	pop	{r7, pc}
 8004c18:	01ffffff 	.word	0x01ffffff
 8004c1c:	fffffedf 	.word	0xfffffedf

08004c20 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004c20:	b580      	push	{r7, lr}
 8004c22:	b084      	sub	sp, #16
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	60f8      	str	r0, [r7, #12]
 8004c28:	60b9      	str	r1, [r7, #8]
 8004c2a:	603b      	str	r3, [r7, #0]
 8004c2c:	1dfb      	adds	r3, r7, #7
 8004c2e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c30:	e04b      	b.n	8004cca <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c32:	69bb      	ldr	r3, [r7, #24]
 8004c34:	3301      	adds	r3, #1
 8004c36:	d048      	beq.n	8004cca <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c38:	f7fe f888 	bl	8002d4c <HAL_GetTick>
 8004c3c:	0002      	movs	r2, r0
 8004c3e:	683b      	ldr	r3, [r7, #0]
 8004c40:	1ad3      	subs	r3, r2, r3
 8004c42:	69ba      	ldr	r2, [r7, #24]
 8004c44:	429a      	cmp	r2, r3
 8004c46:	d302      	bcc.n	8004c4e <UART_WaitOnFlagUntilTimeout+0x2e>
 8004c48:	69bb      	ldr	r3, [r7, #24]
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d101      	bne.n	8004c52 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8004c4e:	2303      	movs	r3, #3
 8004c50:	e04b      	b.n	8004cea <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	2204      	movs	r2, #4
 8004c5a:	4013      	ands	r3, r2
 8004c5c:	d035      	beq.n	8004cca <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	69db      	ldr	r3, [r3, #28]
 8004c64:	2208      	movs	r2, #8
 8004c66:	4013      	ands	r3, r2
 8004c68:	2b08      	cmp	r3, #8
 8004c6a:	d111      	bne.n	8004c90 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	2208      	movs	r2, #8
 8004c72:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	0018      	movs	r0, r3
 8004c78:	f000 f8f2 	bl	8004e60 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	2284      	movs	r2, #132	@ 0x84
 8004c80:	2108      	movs	r1, #8
 8004c82:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	2278      	movs	r2, #120	@ 0x78
 8004c88:	2100      	movs	r1, #0
 8004c8a:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8004c8c:	2301      	movs	r3, #1
 8004c8e:	e02c      	b.n	8004cea <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	69da      	ldr	r2, [r3, #28]
 8004c96:	2380      	movs	r3, #128	@ 0x80
 8004c98:	011b      	lsls	r3, r3, #4
 8004c9a:	401a      	ands	r2, r3
 8004c9c:	2380      	movs	r3, #128	@ 0x80
 8004c9e:	011b      	lsls	r3, r3, #4
 8004ca0:	429a      	cmp	r2, r3
 8004ca2:	d112      	bne.n	8004cca <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	2280      	movs	r2, #128	@ 0x80
 8004caa:	0112      	lsls	r2, r2, #4
 8004cac:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	0018      	movs	r0, r3
 8004cb2:	f000 f8d5 	bl	8004e60 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	2284      	movs	r2, #132	@ 0x84
 8004cba:	2120      	movs	r1, #32
 8004cbc:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	2278      	movs	r2, #120	@ 0x78
 8004cc2:	2100      	movs	r1, #0
 8004cc4:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8004cc6:	2303      	movs	r3, #3
 8004cc8:	e00f      	b.n	8004cea <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	69db      	ldr	r3, [r3, #28]
 8004cd0:	68ba      	ldr	r2, [r7, #8]
 8004cd2:	4013      	ands	r3, r2
 8004cd4:	68ba      	ldr	r2, [r7, #8]
 8004cd6:	1ad3      	subs	r3, r2, r3
 8004cd8:	425a      	negs	r2, r3
 8004cda:	4153      	adcs	r3, r2
 8004cdc:	b2db      	uxtb	r3, r3
 8004cde:	001a      	movs	r2, r3
 8004ce0:	1dfb      	adds	r3, r7, #7
 8004ce2:	781b      	ldrb	r3, [r3, #0]
 8004ce4:	429a      	cmp	r2, r3
 8004ce6:	d0a4      	beq.n	8004c32 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004ce8:	2300      	movs	r3, #0
}
 8004cea:	0018      	movs	r0, r3
 8004cec:	46bd      	mov	sp, r7
 8004cee:	b004      	add	sp, #16
 8004cf0:	bd80      	pop	{r7, pc}
	...

08004cf4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004cf4:	b580      	push	{r7, lr}
 8004cf6:	b090      	sub	sp, #64	@ 0x40
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	60f8      	str	r0, [r7, #12]
 8004cfc:	60b9      	str	r1, [r7, #8]
 8004cfe:	1dbb      	adds	r3, r7, #6
 8004d00:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	68ba      	ldr	r2, [r7, #8]
 8004d06:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	1dba      	adds	r2, r7, #6
 8004d0c:	2158      	movs	r1, #88	@ 0x58
 8004d0e:	8812      	ldrh	r2, [r2, #0]
 8004d10:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	1dba      	adds	r2, r7, #6
 8004d16:	215a      	movs	r1, #90	@ 0x5a
 8004d18:	8812      	ldrh	r2, [r2, #0]
 8004d1a:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	2200      	movs	r2, #0
 8004d20:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	689a      	ldr	r2, [r3, #8]
 8004d26:	2380      	movs	r3, #128	@ 0x80
 8004d28:	015b      	lsls	r3, r3, #5
 8004d2a:	429a      	cmp	r2, r3
 8004d2c:	d10d      	bne.n	8004d4a <UART_Start_Receive_IT+0x56>
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	691b      	ldr	r3, [r3, #16]
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d104      	bne.n	8004d40 <UART_Start_Receive_IT+0x4c>
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	225c      	movs	r2, #92	@ 0x5c
 8004d3a:	4946      	ldr	r1, [pc, #280]	@ (8004e54 <UART_Start_Receive_IT+0x160>)
 8004d3c:	5299      	strh	r1, [r3, r2]
 8004d3e:	e01a      	b.n	8004d76 <UART_Start_Receive_IT+0x82>
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	225c      	movs	r2, #92	@ 0x5c
 8004d44:	21ff      	movs	r1, #255	@ 0xff
 8004d46:	5299      	strh	r1, [r3, r2]
 8004d48:	e015      	b.n	8004d76 <UART_Start_Receive_IT+0x82>
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	689b      	ldr	r3, [r3, #8]
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d10d      	bne.n	8004d6e <UART_Start_Receive_IT+0x7a>
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	691b      	ldr	r3, [r3, #16]
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d104      	bne.n	8004d64 <UART_Start_Receive_IT+0x70>
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	225c      	movs	r2, #92	@ 0x5c
 8004d5e:	21ff      	movs	r1, #255	@ 0xff
 8004d60:	5299      	strh	r1, [r3, r2]
 8004d62:	e008      	b.n	8004d76 <UART_Start_Receive_IT+0x82>
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	225c      	movs	r2, #92	@ 0x5c
 8004d68:	217f      	movs	r1, #127	@ 0x7f
 8004d6a:	5299      	strh	r1, [r3, r2]
 8004d6c:	e003      	b.n	8004d76 <UART_Start_Receive_IT+0x82>
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	225c      	movs	r2, #92	@ 0x5c
 8004d72:	2100      	movs	r1, #0
 8004d74:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	2284      	movs	r2, #132	@ 0x84
 8004d7a:	2100      	movs	r1, #0
 8004d7c:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	2280      	movs	r2, #128	@ 0x80
 8004d82:	2122      	movs	r1, #34	@ 0x22
 8004d84:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004d86:	f3ef 8310 	mrs	r3, PRIMASK
 8004d8a:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 8004d8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004d90:	2301      	movs	r3, #1
 8004d92:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d96:	f383 8810 	msr	PRIMASK, r3
}
 8004d9a:	46c0      	nop			@ (mov r8, r8)
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	689a      	ldr	r2, [r3, #8]
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	2101      	movs	r1, #1
 8004da8:	430a      	orrs	r2, r1
 8004daa:	609a      	str	r2, [r3, #8]
 8004dac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004dae:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004db0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004db2:	f383 8810 	msr	PRIMASK, r3
}
 8004db6:	46c0      	nop			@ (mov r8, r8)

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	689a      	ldr	r2, [r3, #8]
 8004dbc:	2380      	movs	r3, #128	@ 0x80
 8004dbe:	015b      	lsls	r3, r3, #5
 8004dc0:	429a      	cmp	r2, r3
 8004dc2:	d107      	bne.n	8004dd4 <UART_Start_Receive_IT+0xe0>
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	691b      	ldr	r3, [r3, #16]
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d103      	bne.n	8004dd4 <UART_Start_Receive_IT+0xe0>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	4a22      	ldr	r2, [pc, #136]	@ (8004e58 <UART_Start_Receive_IT+0x164>)
 8004dd0:	669a      	str	r2, [r3, #104]	@ 0x68
 8004dd2:	e002      	b.n	8004dda <UART_Start_Receive_IT+0xe6>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	4a21      	ldr	r2, [pc, #132]	@ (8004e5c <UART_Start_Receive_IT+0x168>)
 8004dd8:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	691b      	ldr	r3, [r3, #16]
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d019      	beq.n	8004e16 <UART_Start_Receive_IT+0x122>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004de2:	f3ef 8310 	mrs	r3, PRIMASK
 8004de6:	61fb      	str	r3, [r7, #28]
  return(result);
 8004de8:	69fb      	ldr	r3, [r7, #28]
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8004dea:	637b      	str	r3, [r7, #52]	@ 0x34
 8004dec:	2301      	movs	r3, #1
 8004dee:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004df0:	6a3b      	ldr	r3, [r7, #32]
 8004df2:	f383 8810 	msr	PRIMASK, r3
}
 8004df6:	46c0      	nop			@ (mov r8, r8)
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	681a      	ldr	r2, [r3, #0]
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	2190      	movs	r1, #144	@ 0x90
 8004e04:	0049      	lsls	r1, r1, #1
 8004e06:	430a      	orrs	r2, r1
 8004e08:	601a      	str	r2, [r3, #0]
 8004e0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e0c:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e10:	f383 8810 	msr	PRIMASK, r3
}
 8004e14:	e018      	b.n	8004e48 <UART_Start_Receive_IT+0x154>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004e16:	f3ef 8310 	mrs	r3, PRIMASK
 8004e1a:	613b      	str	r3, [r7, #16]
  return(result);
 8004e1c:	693b      	ldr	r3, [r7, #16]
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8004e1e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004e20:	2301      	movs	r3, #1
 8004e22:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e24:	697b      	ldr	r3, [r7, #20]
 8004e26:	f383 8810 	msr	PRIMASK, r3
}
 8004e2a:	46c0      	nop			@ (mov r8, r8)
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	681a      	ldr	r2, [r3, #0]
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	2120      	movs	r1, #32
 8004e38:	430a      	orrs	r2, r1
 8004e3a:	601a      	str	r2, [r3, #0]
 8004e3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e3e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e40:	69bb      	ldr	r3, [r7, #24]
 8004e42:	f383 8810 	msr	PRIMASK, r3
}
 8004e46:	46c0      	nop			@ (mov r8, r8)
  }
  return HAL_OK;
 8004e48:	2300      	movs	r3, #0
}
 8004e4a:	0018      	movs	r0, r3
 8004e4c:	46bd      	mov	sp, r7
 8004e4e:	b010      	add	sp, #64	@ 0x40
 8004e50:	bd80      	pop	{r7, pc}
 8004e52:	46c0      	nop			@ (mov r8, r8)
 8004e54:	000001ff 	.word	0x000001ff
 8004e58:	08005165 	.word	0x08005165
 8004e5c:	08004fad 	.word	0x08004fad

08004e60 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004e60:	b580      	push	{r7, lr}
 8004e62:	b08e      	sub	sp, #56	@ 0x38
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004e68:	f3ef 8310 	mrs	r3, PRIMASK
 8004e6c:	617b      	str	r3, [r7, #20]
  return(result);
 8004e6e:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004e70:	637b      	str	r3, [r7, #52]	@ 0x34
 8004e72:	2301      	movs	r3, #1
 8004e74:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e76:	69bb      	ldr	r3, [r7, #24]
 8004e78:	f383 8810 	msr	PRIMASK, r3
}
 8004e7c:	46c0      	nop			@ (mov r8, r8)
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	681a      	ldr	r2, [r3, #0]
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	4926      	ldr	r1, [pc, #152]	@ (8004f24 <UART_EndRxTransfer+0xc4>)
 8004e8a:	400a      	ands	r2, r1
 8004e8c:	601a      	str	r2, [r3, #0]
 8004e8e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e90:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e92:	69fb      	ldr	r3, [r7, #28]
 8004e94:	f383 8810 	msr	PRIMASK, r3
}
 8004e98:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004e9a:	f3ef 8310 	mrs	r3, PRIMASK
 8004e9e:	623b      	str	r3, [r7, #32]
  return(result);
 8004ea0:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ea2:	633b      	str	r3, [r7, #48]	@ 0x30
 8004ea4:	2301      	movs	r3, #1
 8004ea6:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ea8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004eaa:	f383 8810 	msr	PRIMASK, r3
}
 8004eae:	46c0      	nop			@ (mov r8, r8)
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	689a      	ldr	r2, [r3, #8]
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	2101      	movs	r1, #1
 8004ebc:	438a      	bics	r2, r1
 8004ebe:	609a      	str	r2, [r3, #8]
 8004ec0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ec2:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ec4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ec6:	f383 8810 	msr	PRIMASK, r3
}
 8004eca:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004ed0:	2b01      	cmp	r3, #1
 8004ed2:	d118      	bne.n	8004f06 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004ed4:	f3ef 8310 	mrs	r3, PRIMASK
 8004ed8:	60bb      	str	r3, [r7, #8]
  return(result);
 8004eda:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004edc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004ede:	2301      	movs	r3, #1
 8004ee0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	f383 8810 	msr	PRIMASK, r3
}
 8004ee8:	46c0      	nop			@ (mov r8, r8)
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	681a      	ldr	r2, [r3, #0]
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	2110      	movs	r1, #16
 8004ef6:	438a      	bics	r2, r1
 8004ef8:	601a      	str	r2, [r3, #0]
 8004efa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004efc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004efe:	693b      	ldr	r3, [r7, #16]
 8004f00:	f383 8810 	msr	PRIMASK, r3
}
 8004f04:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	2280      	movs	r2, #128	@ 0x80
 8004f0a:	2120      	movs	r1, #32
 8004f0c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	2200      	movs	r2, #0
 8004f12:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	2200      	movs	r2, #0
 8004f18:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004f1a:	46c0      	nop			@ (mov r8, r8)
 8004f1c:	46bd      	mov	sp, r7
 8004f1e:	b00e      	add	sp, #56	@ 0x38
 8004f20:	bd80      	pop	{r7, pc}
 8004f22:	46c0      	nop			@ (mov r8, r8)
 8004f24:	fffffedf 	.word	0xfffffedf

08004f28 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004f28:	b580      	push	{r7, lr}
 8004f2a:	b084      	sub	sp, #16
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f34:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	225a      	movs	r2, #90	@ 0x5a
 8004f3a:	2100      	movs	r1, #0
 8004f3c:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	2252      	movs	r2, #82	@ 0x52
 8004f42:	2100      	movs	r1, #0
 8004f44:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	0018      	movs	r0, r3
 8004f4a:	f7ff fbb9 	bl	80046c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004f4e:	46c0      	nop			@ (mov r8, r8)
 8004f50:	46bd      	mov	sp, r7
 8004f52:	b004      	add	sp, #16
 8004f54:	bd80      	pop	{r7, pc}

08004f56 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004f56:	b580      	push	{r7, lr}
 8004f58:	b086      	sub	sp, #24
 8004f5a:	af00      	add	r7, sp, #0
 8004f5c:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004f5e:	f3ef 8310 	mrs	r3, PRIMASK
 8004f62:	60bb      	str	r3, [r7, #8]
  return(result);
 8004f64:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004f66:	617b      	str	r3, [r7, #20]
 8004f68:	2301      	movs	r3, #1
 8004f6a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	f383 8810 	msr	PRIMASK, r3
}
 8004f72:	46c0      	nop			@ (mov r8, r8)
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	681a      	ldr	r2, [r3, #0]
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	2140      	movs	r1, #64	@ 0x40
 8004f80:	438a      	bics	r2, r1
 8004f82:	601a      	str	r2, [r3, #0]
 8004f84:	697b      	ldr	r3, [r7, #20]
 8004f86:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f88:	693b      	ldr	r3, [r7, #16]
 8004f8a:	f383 8810 	msr	PRIMASK, r3
}
 8004f8e:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2220      	movs	r2, #32
 8004f94:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	2200      	movs	r2, #0
 8004f9a:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	0018      	movs	r0, r3
 8004fa0:	f7ff fb7e 	bl	80046a0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004fa4:	46c0      	nop			@ (mov r8, r8)
 8004fa6:	46bd      	mov	sp, r7
 8004fa8:	b006      	add	sp, #24
 8004faa:	bd80      	pop	{r7, pc}

08004fac <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004fac:	b580      	push	{r7, lr}
 8004fae:	b094      	sub	sp, #80	@ 0x50
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8004fb4:	204e      	movs	r0, #78	@ 0x4e
 8004fb6:	183b      	adds	r3, r7, r0
 8004fb8:	687a      	ldr	r2, [r7, #4]
 8004fba:	215c      	movs	r1, #92	@ 0x5c
 8004fbc:	5a52      	ldrh	r2, [r2, r1]
 8004fbe:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	2280      	movs	r2, #128	@ 0x80
 8004fc4:	589b      	ldr	r3, [r3, r2]
 8004fc6:	2b22      	cmp	r3, #34	@ 0x22
 8004fc8:	d000      	beq.n	8004fcc <UART_RxISR_8BIT+0x20>
 8004fca:	e0ba      	b.n	8005142 <UART_RxISR_8BIT+0x196>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681a      	ldr	r2, [r3, #0]
 8004fd0:	214c      	movs	r1, #76	@ 0x4c
 8004fd2:	187b      	adds	r3, r7, r1
 8004fd4:	8c92      	ldrh	r2, [r2, #36]	@ 0x24
 8004fd6:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004fd8:	187b      	adds	r3, r7, r1
 8004fda:	881b      	ldrh	r3, [r3, #0]
 8004fdc:	b2da      	uxtb	r2, r3
 8004fde:	183b      	adds	r3, r7, r0
 8004fe0:	881b      	ldrh	r3, [r3, #0]
 8004fe2:	b2d9      	uxtb	r1, r3
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004fe8:	400a      	ands	r2, r1
 8004fea:	b2d2      	uxtb	r2, r2
 8004fec:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ff2:	1c5a      	adds	r2, r3, #1
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	225a      	movs	r2, #90	@ 0x5a
 8004ffc:	5a9b      	ldrh	r3, [r3, r2]
 8004ffe:	b29b      	uxth	r3, r3
 8005000:	3b01      	subs	r3, #1
 8005002:	b299      	uxth	r1, r3
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	225a      	movs	r2, #90	@ 0x5a
 8005008:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	225a      	movs	r2, #90	@ 0x5a
 800500e:	5a9b      	ldrh	r3, [r3, r2]
 8005010:	b29b      	uxth	r3, r3
 8005012:	2b00      	cmp	r3, #0
 8005014:	d000      	beq.n	8005018 <UART_RxISR_8BIT+0x6c>
 8005016:	e09c      	b.n	8005152 <UART_RxISR_8BIT+0x1a6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005018:	f3ef 8310 	mrs	r3, PRIMASK
 800501c:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800501e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005020:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005022:	2301      	movs	r3, #1
 8005024:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005026:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005028:	f383 8810 	msr	PRIMASK, r3
}
 800502c:	46c0      	nop			@ (mov r8, r8)
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	681a      	ldr	r2, [r3, #0]
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	4948      	ldr	r1, [pc, #288]	@ (800515c <UART_RxISR_8BIT+0x1b0>)
 800503a:	400a      	ands	r2, r1
 800503c:	601a      	str	r2, [r3, #0]
 800503e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005040:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005042:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005044:	f383 8810 	msr	PRIMASK, r3
}
 8005048:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800504a:	f3ef 8310 	mrs	r3, PRIMASK
 800504e:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8005050:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005052:	647b      	str	r3, [r7, #68]	@ 0x44
 8005054:	2301      	movs	r3, #1
 8005056:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005058:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800505a:	f383 8810 	msr	PRIMASK, r3
}
 800505e:	46c0      	nop			@ (mov r8, r8)
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	689a      	ldr	r2, [r3, #8]
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	2101      	movs	r1, #1
 800506c:	438a      	bics	r2, r1
 800506e:	609a      	str	r2, [r3, #8]
 8005070:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005072:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005074:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005076:	f383 8810 	msr	PRIMASK, r3
}
 800507a:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2280      	movs	r2, #128	@ 0x80
 8005080:	2120      	movs	r1, #32
 8005082:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	2200      	movs	r2, #0
 8005088:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	2200      	movs	r2, #0
 800508e:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	685a      	ldr	r2, [r3, #4]
 8005096:	2380      	movs	r3, #128	@ 0x80
 8005098:	041b      	lsls	r3, r3, #16
 800509a:	4013      	ands	r3, r2
 800509c:	d018      	beq.n	80050d0 <UART_RxISR_8BIT+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800509e:	f3ef 8310 	mrs	r3, PRIMASK
 80050a2:	61bb      	str	r3, [r7, #24]
  return(result);
 80050a4:	69bb      	ldr	r3, [r7, #24]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80050a6:	643b      	str	r3, [r7, #64]	@ 0x40
 80050a8:	2301      	movs	r3, #1
 80050aa:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80050ac:	69fb      	ldr	r3, [r7, #28]
 80050ae:	f383 8810 	msr	PRIMASK, r3
}
 80050b2:	46c0      	nop			@ (mov r8, r8)
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	681a      	ldr	r2, [r3, #0]
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	4928      	ldr	r1, [pc, #160]	@ (8005160 <UART_RxISR_8BIT+0x1b4>)
 80050c0:	400a      	ands	r2, r1
 80050c2:	601a      	str	r2, [r3, #0]
 80050c4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80050c6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80050c8:	6a3b      	ldr	r3, [r7, #32]
 80050ca:	f383 8810 	msr	PRIMASK, r3
}
 80050ce:	46c0      	nop			@ (mov r8, r8)
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80050d4:	2b01      	cmp	r3, #1
 80050d6:	d12f      	bne.n	8005138 <UART_RxISR_8BIT+0x18c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2200      	movs	r2, #0
 80050dc:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80050de:	f3ef 8310 	mrs	r3, PRIMASK
 80050e2:	60fb      	str	r3, [r7, #12]
  return(result);
 80050e4:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80050e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80050e8:	2301      	movs	r3, #1
 80050ea:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80050ec:	693b      	ldr	r3, [r7, #16]
 80050ee:	f383 8810 	msr	PRIMASK, r3
}
 80050f2:	46c0      	nop			@ (mov r8, r8)
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	681a      	ldr	r2, [r3, #0]
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	2110      	movs	r1, #16
 8005100:	438a      	bics	r2, r1
 8005102:	601a      	str	r2, [r3, #0]
 8005104:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005106:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005108:	697b      	ldr	r3, [r7, #20]
 800510a:	f383 8810 	msr	PRIMASK, r3
}
 800510e:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	69db      	ldr	r3, [r3, #28]
 8005116:	2210      	movs	r2, #16
 8005118:	4013      	ands	r3, r2
 800511a:	2b10      	cmp	r3, #16
 800511c:	d103      	bne.n	8005126 <UART_RxISR_8BIT+0x17a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	2210      	movs	r2, #16
 8005124:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	2258      	movs	r2, #88	@ 0x58
 800512a:	5a9a      	ldrh	r2, [r3, r2]
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	0011      	movs	r1, r2
 8005130:	0018      	movs	r0, r3
 8005132:	f7ff facd 	bl	80046d0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005136:	e00c      	b.n	8005152 <UART_RxISR_8BIT+0x1a6>
        HAL_UART_RxCpltCallback(huart);
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	0018      	movs	r0, r3
 800513c:	f7ff fab8 	bl	80046b0 <HAL_UART_RxCpltCallback>
}
 8005140:	e007      	b.n	8005152 <UART_RxISR_8BIT+0x1a6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	699a      	ldr	r2, [r3, #24]
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	2108      	movs	r1, #8
 800514e:	430a      	orrs	r2, r1
 8005150:	619a      	str	r2, [r3, #24]
}
 8005152:	46c0      	nop			@ (mov r8, r8)
 8005154:	46bd      	mov	sp, r7
 8005156:	b014      	add	sp, #80	@ 0x50
 8005158:	bd80      	pop	{r7, pc}
 800515a:	46c0      	nop			@ (mov r8, r8)
 800515c:	fffffedf 	.word	0xfffffedf
 8005160:	fbffffff 	.word	0xfbffffff

08005164 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005164:	b580      	push	{r7, lr}
 8005166:	b094      	sub	sp, #80	@ 0x50
 8005168:	af00      	add	r7, sp, #0
 800516a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800516c:	204e      	movs	r0, #78	@ 0x4e
 800516e:	183b      	adds	r3, r7, r0
 8005170:	687a      	ldr	r2, [r7, #4]
 8005172:	215c      	movs	r1, #92	@ 0x5c
 8005174:	5a52      	ldrh	r2, [r2, r1]
 8005176:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2280      	movs	r2, #128	@ 0x80
 800517c:	589b      	ldr	r3, [r3, r2]
 800517e:	2b22      	cmp	r3, #34	@ 0x22
 8005180:	d000      	beq.n	8005184 <UART_RxISR_16BIT+0x20>
 8005182:	e0ba      	b.n	80052fa <UART_RxISR_16BIT+0x196>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681a      	ldr	r2, [r3, #0]
 8005188:	214c      	movs	r1, #76	@ 0x4c
 800518a:	187b      	adds	r3, r7, r1
 800518c:	8c92      	ldrh	r2, [r2, #36]	@ 0x24
 800518e:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005194:	64bb      	str	r3, [r7, #72]	@ 0x48
    *tmp = (uint16_t)(uhdata & uhMask);
 8005196:	187b      	adds	r3, r7, r1
 8005198:	183a      	adds	r2, r7, r0
 800519a:	881b      	ldrh	r3, [r3, #0]
 800519c:	8812      	ldrh	r2, [r2, #0]
 800519e:	4013      	ands	r3, r2
 80051a0:	b29a      	uxth	r2, r3
 80051a2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80051a4:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80051aa:	1c9a      	adds	r2, r3, #2
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	225a      	movs	r2, #90	@ 0x5a
 80051b4:	5a9b      	ldrh	r3, [r3, r2]
 80051b6:	b29b      	uxth	r3, r3
 80051b8:	3b01      	subs	r3, #1
 80051ba:	b299      	uxth	r1, r3
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	225a      	movs	r2, #90	@ 0x5a
 80051c0:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	225a      	movs	r2, #90	@ 0x5a
 80051c6:	5a9b      	ldrh	r3, [r3, r2]
 80051c8:	b29b      	uxth	r3, r3
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d000      	beq.n	80051d0 <UART_RxISR_16BIT+0x6c>
 80051ce:	e09c      	b.n	800530a <UART_RxISR_16BIT+0x1a6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80051d0:	f3ef 8310 	mrs	r3, PRIMASK
 80051d4:	623b      	str	r3, [r7, #32]
  return(result);
 80051d6:	6a3b      	ldr	r3, [r7, #32]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80051d8:	647b      	str	r3, [r7, #68]	@ 0x44
 80051da:	2301      	movs	r3, #1
 80051dc:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80051de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051e0:	f383 8810 	msr	PRIMASK, r3
}
 80051e4:	46c0      	nop			@ (mov r8, r8)
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	681a      	ldr	r2, [r3, #0]
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	4948      	ldr	r1, [pc, #288]	@ (8005314 <UART_RxISR_16BIT+0x1b0>)
 80051f2:	400a      	ands	r2, r1
 80051f4:	601a      	str	r2, [r3, #0]
 80051f6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80051f8:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80051fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051fc:	f383 8810 	msr	PRIMASK, r3
}
 8005200:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005202:	f3ef 8310 	mrs	r3, PRIMASK
 8005206:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 8005208:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800520a:	643b      	str	r3, [r7, #64]	@ 0x40
 800520c:	2301      	movs	r3, #1
 800520e:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005210:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005212:	f383 8810 	msr	PRIMASK, r3
}
 8005216:	46c0      	nop			@ (mov r8, r8)
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	689a      	ldr	r2, [r3, #8]
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	2101      	movs	r1, #1
 8005224:	438a      	bics	r2, r1
 8005226:	609a      	str	r2, [r3, #8]
 8005228:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800522a:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800522c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800522e:	f383 8810 	msr	PRIMASK, r3
}
 8005232:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2280      	movs	r2, #128	@ 0x80
 8005238:	2120      	movs	r1, #32
 800523a:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2200      	movs	r2, #0
 8005240:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	2200      	movs	r2, #0
 8005246:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	685a      	ldr	r2, [r3, #4]
 800524e:	2380      	movs	r3, #128	@ 0x80
 8005250:	041b      	lsls	r3, r3, #16
 8005252:	4013      	ands	r3, r2
 8005254:	d018      	beq.n	8005288 <UART_RxISR_16BIT+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005256:	f3ef 8310 	mrs	r3, PRIMASK
 800525a:	617b      	str	r3, [r7, #20]
  return(result);
 800525c:	697b      	ldr	r3, [r7, #20]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800525e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005260:	2301      	movs	r3, #1
 8005262:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005264:	69bb      	ldr	r3, [r7, #24]
 8005266:	f383 8810 	msr	PRIMASK, r3
}
 800526a:	46c0      	nop			@ (mov r8, r8)
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	681a      	ldr	r2, [r3, #0]
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	4928      	ldr	r1, [pc, #160]	@ (8005318 <UART_RxISR_16BIT+0x1b4>)
 8005278:	400a      	ands	r2, r1
 800527a:	601a      	str	r2, [r3, #0]
 800527c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800527e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005280:	69fb      	ldr	r3, [r7, #28]
 8005282:	f383 8810 	msr	PRIMASK, r3
}
 8005286:	46c0      	nop			@ (mov r8, r8)
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800528c:	2b01      	cmp	r3, #1
 800528e:	d12f      	bne.n	80052f0 <UART_RxISR_16BIT+0x18c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	2200      	movs	r2, #0
 8005294:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005296:	f3ef 8310 	mrs	r3, PRIMASK
 800529a:	60bb      	str	r3, [r7, #8]
  return(result);
 800529c:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800529e:	63bb      	str	r3, [r7, #56]	@ 0x38
 80052a0:	2301      	movs	r3, #1
 80052a2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	f383 8810 	msr	PRIMASK, r3
}
 80052aa:	46c0      	nop			@ (mov r8, r8)
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	681a      	ldr	r2, [r3, #0]
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	2110      	movs	r1, #16
 80052b8:	438a      	bics	r2, r1
 80052ba:	601a      	str	r2, [r3, #0]
 80052bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052be:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80052c0:	693b      	ldr	r3, [r7, #16]
 80052c2:	f383 8810 	msr	PRIMASK, r3
}
 80052c6:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	69db      	ldr	r3, [r3, #28]
 80052ce:	2210      	movs	r2, #16
 80052d0:	4013      	ands	r3, r2
 80052d2:	2b10      	cmp	r3, #16
 80052d4:	d103      	bne.n	80052de <UART_RxISR_16BIT+0x17a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	2210      	movs	r2, #16
 80052dc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	2258      	movs	r2, #88	@ 0x58
 80052e2:	5a9a      	ldrh	r2, [r3, r2]
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	0011      	movs	r1, r2
 80052e8:	0018      	movs	r0, r3
 80052ea:	f7ff f9f1 	bl	80046d0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80052ee:	e00c      	b.n	800530a <UART_RxISR_16BIT+0x1a6>
        HAL_UART_RxCpltCallback(huart);
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	0018      	movs	r0, r3
 80052f4:	f7ff f9dc 	bl	80046b0 <HAL_UART_RxCpltCallback>
}
 80052f8:	e007      	b.n	800530a <UART_RxISR_16BIT+0x1a6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	699a      	ldr	r2, [r3, #24]
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	2108      	movs	r1, #8
 8005306:	430a      	orrs	r2, r1
 8005308:	619a      	str	r2, [r3, #24]
}
 800530a:	46c0      	nop			@ (mov r8, r8)
 800530c:	46bd      	mov	sp, r7
 800530e:	b014      	add	sp, #80	@ 0x50
 8005310:	bd80      	pop	{r7, pc}
 8005312:	46c0      	nop			@ (mov r8, r8)
 8005314:	fffffedf 	.word	0xfffffedf
 8005318:	fbffffff 	.word	0xfbffffff

0800531c <HAL_GPIO_EXTI_Callback>:
static void motor_speaker_process(void);
static void motor_turn_process(void);


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800531c:	b580      	push	{r7, lr}
 800531e:	b082      	sub	sp, #8
 8005320:	af00      	add	r7, sp, #0
 8005322:	0002      	movs	r2, r0
 8005324:	1dbb      	adds	r3, r7, #6
 8005326:	801a      	strh	r2, [r3, #0]
	pir_read = HAL_GPIO_ReadPin(DIGITAL_IN1_GPIO_Port, DIGITAL_IN1_Pin);	//0 ise ve gelmişse 1-0 geçmiştir düşen kenar
 8005328:	2390      	movs	r3, #144	@ 0x90
 800532a:	05db      	lsls	r3, r3, #23
 800532c:	2108      	movs	r1, #8
 800532e:	0018      	movs	r0, r3
 8005330:	f7fe f806 	bl	8003340 <HAL_GPIO_ReadPin>
 8005334:	0003      	movs	r3, r0
 8005336:	1e5a      	subs	r2, r3, #1
 8005338:	4193      	sbcs	r3, r2
 800533a:	b2da      	uxtb	r2, r3
 800533c:	4b13      	ldr	r3, [pc, #76]	@ (800538c <HAL_GPIO_EXTI_Callback+0x70>)
 800533e:	701a      	strb	r2, [r3, #0]
																			//1 ise ve gelmişse 0-1 geçmiştir yükselen kenar
	if((GPIO_Pin == DIGITAL_IN1_Pin)&(pir_read == GPIO_PIN_SET))
 8005340:	1dbb      	adds	r3, r7, #6
 8005342:	881b      	ldrh	r3, [r3, #0]
 8005344:	3b08      	subs	r3, #8
 8005346:	425a      	negs	r2, r3
 8005348:	4153      	adcs	r3, r2
 800534a:	b2db      	uxtb	r3, r3
 800534c:	4a0f      	ldr	r2, [pc, #60]	@ (800538c <HAL_GPIO_EXTI_Callback+0x70>)
 800534e:	7812      	ldrb	r2, [r2, #0]
 8005350:	4013      	ands	r3, r2
 8005352:	b2db      	uxtb	r3, r3
 8005354:	2b00      	cmp	r3, #0
 8005356:	d003      	beq.n	8005360 <HAL_GPIO_EXTI_Callback+0x44>
	{
		pir_read = true;
 8005358:	4b0c      	ldr	r3, [pc, #48]	@ (800538c <HAL_GPIO_EXTI_Callback+0x70>)
 800535a:	2201      	movs	r2, #1
 800535c:	701a      	strb	r2, [r3, #0]
	}
	else if((GPIO_Pin == DIGITAL_IN1_Pin)&(pir_read == GPIO_PIN_RESET))
	{
		pir_read = false;
	}
}
 800535e:	e010      	b.n	8005382 <HAL_GPIO_EXTI_Callback+0x66>
	else if((GPIO_Pin == DIGITAL_IN1_Pin)&(pir_read == GPIO_PIN_RESET))
 8005360:	1dbb      	adds	r3, r7, #6
 8005362:	881b      	ldrh	r3, [r3, #0]
 8005364:	3b08      	subs	r3, #8
 8005366:	425a      	negs	r2, r3
 8005368:	4153      	adcs	r3, r2
 800536a:	b2db      	uxtb	r3, r3
 800536c:	0019      	movs	r1, r3
 800536e:	4b07      	ldr	r3, [pc, #28]	@ (800538c <HAL_GPIO_EXTI_Callback+0x70>)
 8005370:	781b      	ldrb	r3, [r3, #0]
 8005372:	2201      	movs	r2, #1
 8005374:	4053      	eors	r3, r2
 8005376:	b2db      	uxtb	r3, r3
 8005378:	400b      	ands	r3, r1
 800537a:	d002      	beq.n	8005382 <HAL_GPIO_EXTI_Callback+0x66>
		pir_read = false;
 800537c:	4b03      	ldr	r3, [pc, #12]	@ (800538c <HAL_GPIO_EXTI_Callback+0x70>)
 800537e:	2200      	movs	r2, #0
 8005380:	701a      	strb	r2, [r3, #0]
}
 8005382:	46c0      	nop			@ (mov r8, r8)
 8005384:	46bd      	mov	sp, r7
 8005386:	b002      	add	sp, #8
 8005388:	bd80      	pop	{r7, pc}
 800538a:	46c0      	nop			@ (mov r8, r8)
 800538c:	200002a2 	.word	0x200002a2

08005390 <motor_motion_init>:

void motor_motion_init(void)
{
 8005390:	b580      	push	{r7, lr}
 8005392:	af00      	add	r7, sp, #0
	rs485_receive_package();
 8005394:	f001 fb44 	bl	8006a20 <rs485_receive_package>

	flash_init(&fobj);	//Bu fonksiyonda flasha yazılan bayrakların değerleri motor objesine atanacak
 8005398:	4b03      	ldr	r3, [pc, #12]	@ (80053a8 <motor_motion_init+0x18>)
 800539a:	0018      	movs	r0, r3
 800539c:	f000 fece 	bl	800613c <flash_init>
}
 80053a0:	46c0      	nop			@ (mov r8, r8)
 80053a2:	46bd      	mov	sp, r7
 80053a4:	bd80      	pop	{r7, pc}
 80053a6:	46c0      	nop			@ (mov r8, r8)
 80053a8:	200004a4 	.word	0x200004a4

080053ac <motor_motion_control>:

/*
 * main app file function
 */
void motor_motion_control(void)
{
 80053ac:	b580      	push	{r7, lr}
 80053ae:	af00      	add	r7, sp, #0
	if(motor.test.test_status == ENABLE) //Sistem testi başladı , ana fonksiyonlar devre dışı
 80053b0:	4b35      	ldr	r3, [pc, #212]	@ (8005488 <motor_motion_control+0xdc>)
 80053b2:	7c1b      	ldrb	r3, [r3, #16]
 80053b4:	2b01      	cmp	r3, #1
 80053b6:	d11d      	bne.n	80053f4 <motor_motion_control+0x48>
	{
		//Sistem testinden önce bütün alt sistemler sıfırlanıyor
		motor_motion_reset();	//Arayüzde start ve stop butonuna tıklandığında sistemin buton renklerinin default durumuna getirilicek
 80053b8:	f000 f870 	bl	800549c <motor_motion_reset>
		if(motor.test.led_test_flag)
 80053bc:	4b32      	ldr	r3, [pc, #200]	@ (8005488 <motor_motion_control+0xdc>)
 80053be:	7b1b      	ldrb	r3, [r3, #12]
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d002      	beq.n	80053ca <motor_motion_control+0x1e>
		{
			system_test_led();
 80053c4:	f000 f89a 	bl	80054fc <system_test_led>
			user_flash_write(&fobj); //motor fonksiyonları harici işlemler burada yapılır

			motor_motion_process();	//Motor harici diğer fonksiyonlar burada yapılır
		}
	}
}
 80053c8:	e05a      	b.n	8005480 <motor_motion_control+0xd4>
		else if(motor.test.buzzer_test_flag)
 80053ca:	4b2f      	ldr	r3, [pc, #188]	@ (8005488 <motor_motion_control+0xdc>)
 80053cc:	7b5b      	ldrb	r3, [r3, #13]
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d002      	beq.n	80053d8 <motor_motion_control+0x2c>
			system_test_buzzer();
 80053d2:	f000 f8fd 	bl	80055d0 <system_test_buzzer>
}
 80053d6:	e053      	b.n	8005480 <motor_motion_control+0xd4>
		else if(motor.test.speaker_test_flag)
 80053d8:	4b2b      	ldr	r3, [pc, #172]	@ (8005488 <motor_motion_control+0xdc>)
 80053da:	7b9b      	ldrb	r3, [r3, #14]
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d002      	beq.n	80053e6 <motor_motion_control+0x3a>
			system_test_speaker();
 80053e0:	f000 f950 	bl	8005684 <system_test_speaker>
}
 80053e4:	e04c      	b.n	8005480 <motor_motion_control+0xd4>
		else if(motor.test.motor_test_flag)
 80053e6:	4b28      	ldr	r3, [pc, #160]	@ (8005488 <motor_motion_control+0xdc>)
 80053e8:	7bdb      	ldrb	r3, [r3, #15]
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d048      	beq.n	8005480 <motor_motion_control+0xd4>
			system_test_motor();
 80053ee:	f000 f9c5 	bl	800577c <system_test_motor>
}
 80053f2:	e045      	b.n	8005480 <motor_motion_control+0xd4>
	else if(motor.test.test_status == DISABLE) //Sistem testi durduysa test yapılmıyorsa ana fonksiyonları çalıştır
 80053f4:	4b24      	ldr	r3, [pc, #144]	@ (8005488 <motor_motion_control+0xdc>)
 80053f6:	7c1b      	ldrb	r3, [r3, #16]
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d141      	bne.n	8005480 <motor_motion_control+0xd4>
		if(motor.motor_flag.auto_mode == ENABLE)
 80053fc:	4b22      	ldr	r3, [pc, #136]	@ (8005488 <motor_motion_control+0xdc>)
 80053fe:	791b      	ldrb	r3, [r3, #4]
 8005400:	2b01      	cmp	r3, #1
 8005402:	d121      	bne.n	8005448 <motor_motion_control+0x9c>
			user_flash_write(&fobj); //motor modunun auto ya güncellenmesi
 8005404:	4b21      	ldr	r3, [pc, #132]	@ (800548c <motor_motion_control+0xe0>)
 8005406:	0018      	movs	r0, r3
 8005408:	f001 f820 	bl	800644c <user_flash_write>
			motor_motion_process();	//hareket algılanana kadar diğer işlemler halledilsin
 800540c:	f000 fad4 	bl	80059b8 <motor_motion_process>
			if(pir_read == true) //Eğer hareket alınırsa motor auto modda stop komutu gelene kadar çalışır
 8005410:	4b1f      	ldr	r3, [pc, #124]	@ (8005490 <motor_motion_control+0xe4>)
 8005412:	781b      	ldrb	r3, [r3, #0]
 8005414:	2b00      	cmp	r3, #0
 8005416:	d033      	beq.n	8005480 <motor_motion_control+0xd4>
				rs485_transmit_package((uint8_t*)"MOTION DETECTED, AUTO MODE STARTING\n",sizeof("MOTION DETECTED, AUTO MODE STARTING\n"));
 8005418:	4b1e      	ldr	r3, [pc, #120]	@ (8005494 <motor_motion_control+0xe8>)
 800541a:	2125      	movs	r1, #37	@ 0x25
 800541c:	0018      	movs	r0, r3
 800541e:	f001 fad9 	bl	80069d4 <rs485_transmit_package>
				while(motor.motor_flag.stop_mode != ENABLE)	///Arayüzden stop komutu gelene kadar çalışır
 8005422:	e008      	b.n	8005436 <motor_motion_control+0x8a>
					motor_turn_process(); //Motor auto modda çalışır iken diğer fonksiyonları bu fonk gerçekleştirir
 8005424:	f000 fad6 	bl	80059d4 <motor_turn_process>
					if(motor.test.test_status == ENABLE)	//Eğer motor auto modda çalışır iken test butonuna basılır ise buradan çıkar testi gerçekleştirir ve tekrar çalışmaya devam eder
 8005428:	4b17      	ldr	r3, [pc, #92]	@ (8005488 <motor_motion_control+0xdc>)
 800542a:	7c1b      	ldrb	r3, [r3, #16]
 800542c:	2b01      	cmp	r3, #1
 800542e:	d102      	bne.n	8005436 <motor_motion_control+0x8a>
						motor_motion_reset();
 8005430:	f000 f834 	bl	800549c <motor_motion_reset>
						break;
 8005434:	e003      	b.n	800543e <motor_motion_control+0x92>
				while(motor.motor_flag.stop_mode != ENABLE)	///Arayüzden stop komutu gelene kadar çalışır
 8005436:	4b14      	ldr	r3, [pc, #80]	@ (8005488 <motor_motion_control+0xdc>)
 8005438:	7a1b      	ldrb	r3, [r3, #8]
 800543a:	2b01      	cmp	r3, #1
 800543c:	d1f2      	bne.n	8005424 <motor_motion_control+0x78>
	    		user_flash_write(&fobj); // motor auto moddan stop moduna güncellenmesi
 800543e:	4b13      	ldr	r3, [pc, #76]	@ (800548c <motor_motion_control+0xe0>)
 8005440:	0018      	movs	r0, r3
 8005442:	f001 f803 	bl	800644c <user_flash_write>
}
 8005446:	e01b      	b.n	8005480 <motor_motion_control+0xd4>
		else if(motor.motor_flag.manuel_mode == ENABLE)
 8005448:	4b0f      	ldr	r3, [pc, #60]	@ (8005488 <motor_motion_control+0xdc>)
 800544a:	795b      	ldrb	r3, [r3, #5]
 800544c:	2b01      	cmp	r3, #1
 800544e:	d111      	bne.n	8005474 <motor_motion_control+0xc8>
			user_flash_write(&fobj); //motor modunun manuele güncellenmesi
 8005450:	4b0e      	ldr	r3, [pc, #56]	@ (800548c <motor_motion_control+0xe0>)
 8005452:	0018      	movs	r0, r3
 8005454:	f000 fffa 	bl	800644c <user_flash_write>
			motor_motion_process();	//hareket algılanana kadar diğer işlemler halledilsin
 8005458:	f000 faae 	bl	80059b8 <motor_motion_process>
			if(pir_read == true) //Eğer hareket alınırsa motor manuel modda 1 kere çalışır sonra tekrar komut bekler
 800545c:	4b0c      	ldr	r3, [pc, #48]	@ (8005490 <motor_motion_control+0xe4>)
 800545e:	781b      	ldrb	r3, [r3, #0]
 8005460:	2b00      	cmp	r3, #0
 8005462:	d00d      	beq.n	8005480 <motor_motion_control+0xd4>
				rs485_transmit_package((uint8_t*)"MOTION DETECTED, MANUEL MODE STARTING\n",sizeof("MOTION DETECTED, MANUEL MODE STARTING\n"));
 8005464:	4b0c      	ldr	r3, [pc, #48]	@ (8005498 <motor_motion_control+0xec>)
 8005466:	2127      	movs	r1, #39	@ 0x27
 8005468:	0018      	movs	r0, r3
 800546a:	f001 fab3 	bl	80069d4 <rs485_transmit_package>
				motor_turn_process();
 800546e:	f000 fab1 	bl	80059d4 <motor_turn_process>
}
 8005472:	e005      	b.n	8005480 <motor_motion_control+0xd4>
			user_flash_write(&fobj); //motor fonksiyonları harici işlemler burada yapılır
 8005474:	4b05      	ldr	r3, [pc, #20]	@ (800548c <motor_motion_control+0xe0>)
 8005476:	0018      	movs	r0, r3
 8005478:	f000 ffe8 	bl	800644c <user_flash_write>
			motor_motion_process();	//Motor harici diğer fonksiyonlar burada yapılır
 800547c:	f000 fa9c 	bl	80059b8 <motor_motion_process>
}
 8005480:	46c0      	nop			@ (mov r8, r8)
 8005482:	46bd      	mov	sp, r7
 8005484:	bd80      	pop	{r7, pc}
 8005486:	46c0      	nop			@ (mov r8, r8)
 8005488:	20000290 	.word	0x20000290
 800548c:	200004a4 	.word	0x200004a4
 8005490:	200002a2 	.word	0x200002a2
 8005494:	0800ba30 	.word	0x0800ba30
 8005498:	0800ba58 	.word	0x0800ba58

0800549c <motor_motion_reset>:

void motor_motion_reset(void)
{
 800549c:	b580      	push	{r7, lr}
 800549e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(DFPLAYER_POWER_EN_GPIO_Port, DFPLAYER_POWER_EN_Pin, 1);
 80054a0:	2380      	movs	r3, #128	@ 0x80
 80054a2:	021b      	lsls	r3, r3, #8
 80054a4:	4814      	ldr	r0, [pc, #80]	@ (80054f8 <motor_motion_reset+0x5c>)
 80054a6:	2201      	movs	r2, #1
 80054a8:	0019      	movs	r1, r3
 80054aa:	f7fd ff66 	bl	800337a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_OUT_1_GPIO_Port, LED_OUT_1_Pin, 1);
 80054ae:	4b12      	ldr	r3, [pc, #72]	@ (80054f8 <motor_motion_reset+0x5c>)
 80054b0:	2201      	movs	r2, #1
 80054b2:	2140      	movs	r1, #64	@ 0x40
 80054b4:	0018      	movs	r0, r3
 80054b6:	f7fd ff60 	bl	800337a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_OUT_2_GPIO_Port, LED_OUT_2_Pin, 1);
 80054ba:	4b0f      	ldr	r3, [pc, #60]	@ (80054f8 <motor_motion_reset+0x5c>)
 80054bc:	2201      	movs	r2, #1
 80054be:	2180      	movs	r1, #128	@ 0x80
 80054c0:	0018      	movs	r0, r3
 80054c2:	f7fd ff5a 	bl	800337a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BUZZER_CTL_GPIO_Port, BUZZER_CTL_Pin, 0);
 80054c6:	2380      	movs	r3, #128	@ 0x80
 80054c8:	01db      	lsls	r3, r3, #7
 80054ca:	480b      	ldr	r0, [pc, #44]	@ (80054f8 <motor_motion_reset+0x5c>)
 80054cc:	2200      	movs	r2, #0
 80054ce:	0019      	movs	r1, r3
 80054d0:	f7fd ff53 	bl	800337a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MOTOR_DRIVE_1_GPIO_Port, MOTOR_DRIVE_1_Pin, 0);
 80054d4:	2380      	movs	r3, #128	@ 0x80
 80054d6:	015b      	lsls	r3, r3, #5
 80054d8:	4807      	ldr	r0, [pc, #28]	@ (80054f8 <motor_motion_reset+0x5c>)
 80054da:	2200      	movs	r2, #0
 80054dc:	0019      	movs	r1, r3
 80054de:	f7fd ff4c 	bl	800337a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MOTOR_DRIVE_2_GPIO_Port, MOTOR_DRIVE_2_Pin, 0);
 80054e2:	2380      	movs	r3, #128	@ 0x80
 80054e4:	019b      	lsls	r3, r3, #6
 80054e6:	4804      	ldr	r0, [pc, #16]	@ (80054f8 <motor_motion_reset+0x5c>)
 80054e8:	2200      	movs	r2, #0
 80054ea:	0019      	movs	r1, r3
 80054ec:	f7fd ff45 	bl	800337a <HAL_GPIO_WritePin>
}
 80054f0:	46c0      	nop			@ (mov r8, r8)
 80054f2:	46bd      	mov	sp, r7
 80054f4:	bd80      	pop	{r7, pc}
 80054f6:	46c0      	nop			@ (mov r8, r8)
 80054f8:	48000400 	.word	0x48000400

080054fc <system_test_led>:

//System test functions
static void system_test_led(void)
{
 80054fc:	b580      	push	{r7, lr}
 80054fe:	b082      	sub	sp, #8
 8005500:	af00      	add	r7, sp, #0
	for(uint8_t i=0;i<10;i++)
 8005502:	1dfb      	adds	r3, r7, #7
 8005504:	2200      	movs	r2, #0
 8005506:	701a      	strb	r2, [r3, #0]
 8005508:	e022      	b.n	8005550 <system_test_led+0x54>
	{
		if(motor.test.test_status == DISABLE)
 800550a:	4b2d      	ldr	r3, [pc, #180]	@ (80055c0 <system_test_led+0xc4>)
 800550c:	7c1b      	ldrb	r3, [r3, #16]
 800550e:	2b00      	cmp	r3, #0
 8005510:	d10c      	bne.n	800552c <system_test_led+0x30>
		{
			HAL_GPIO_WritePin(LED_OUT_1_GPIO_Port, LED_OUT_1_Pin, 1);
 8005512:	4b2c      	ldr	r3, [pc, #176]	@ (80055c4 <system_test_led+0xc8>)
 8005514:	2201      	movs	r2, #1
 8005516:	2140      	movs	r1, #64	@ 0x40
 8005518:	0018      	movs	r0, r3
 800551a:	f7fd ff2e 	bl	800337a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_OUT_2_GPIO_Port, LED_OUT_2_Pin, 1);
 800551e:	4b29      	ldr	r3, [pc, #164]	@ (80055c4 <system_test_led+0xc8>)
 8005520:	2201      	movs	r2, #1
 8005522:	2180      	movs	r1, #128	@ 0x80
 8005524:	0018      	movs	r0, r3
 8005526:	f7fd ff28 	bl	800337a <HAL_GPIO_WritePin>
			break;
 800552a:	e015      	b.n	8005558 <system_test_led+0x5c>
		}
		else
		{
			HAL_GPIO_TogglePin(LED_OUT_1_GPIO_Port, LED_OUT_1_Pin);
 800552c:	4b25      	ldr	r3, [pc, #148]	@ (80055c4 <system_test_led+0xc8>)
 800552e:	2140      	movs	r1, #64	@ 0x40
 8005530:	0018      	movs	r0, r3
 8005532:	f7fd ff3f 	bl	80033b4 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(LED_OUT_2_GPIO_Port, LED_OUT_2_Pin);
 8005536:	4b23      	ldr	r3, [pc, #140]	@ (80055c4 <system_test_led+0xc8>)
 8005538:	2180      	movs	r1, #128	@ 0x80
 800553a:	0018      	movs	r0, r3
 800553c:	f7fd ff3a 	bl	80033b4 <HAL_GPIO_TogglePin>
			HAL_Delay(250);
 8005540:	20fa      	movs	r0, #250	@ 0xfa
 8005542:	f7fd fc0d 	bl	8002d60 <HAL_Delay>
	for(uint8_t i=0;i<10;i++)
 8005546:	1dfb      	adds	r3, r7, #7
 8005548:	781a      	ldrb	r2, [r3, #0]
 800554a:	1dfb      	adds	r3, r7, #7
 800554c:	3201      	adds	r2, #1
 800554e:	701a      	strb	r2, [r3, #0]
 8005550:	1dfb      	adds	r3, r7, #7
 8005552:	781b      	ldrb	r3, [r3, #0]
 8005554:	2b09      	cmp	r3, #9
 8005556:	d9d8      	bls.n	800550a <system_test_led+0xe>
		}
	}

	if(motor.test.test_status == DISABLE)
 8005558:	4b19      	ldr	r3, [pc, #100]	@ (80055c0 <system_test_led+0xc4>)
 800555a:	7c1b      	ldrb	r3, [r3, #16]
 800555c:	2b00      	cmp	r3, #0
 800555e:	d114      	bne.n	800558a <system_test_led+0x8e>
	{
		HAL_GPIO_WritePin(LED_OUT_1_GPIO_Port, LED_OUT_1_Pin, 1);
 8005560:	4b18      	ldr	r3, [pc, #96]	@ (80055c4 <system_test_led+0xc8>)
 8005562:	2201      	movs	r2, #1
 8005564:	2140      	movs	r1, #64	@ 0x40
 8005566:	0018      	movs	r0, r3
 8005568:	f7fd ff07 	bl	800337a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_OUT_2_GPIO_Port, LED_OUT_2_Pin, 1);
 800556c:	4b15      	ldr	r3, [pc, #84]	@ (80055c4 <system_test_led+0xc8>)
 800556e:	2201      	movs	r2, #1
 8005570:	2180      	movs	r1, #128	@ 0x80
 8005572:	0018      	movs	r0, r3
 8005574:	f7fd ff01 	bl	800337a <HAL_GPIO_WritePin>
		motor.test.led_test_flag = DISABLE;
 8005578:	4b11      	ldr	r3, [pc, #68]	@ (80055c0 <system_test_led+0xc4>)
 800557a:	2200      	movs	r2, #0
 800557c:	731a      	strb	r2, [r3, #12]
		rs485_transmit_package((uint8_t*)"LED TEST STOPPED\n",sizeof("LED TEST STOPPED\n"));
 800557e:	4b12      	ldr	r3, [pc, #72]	@ (80055c8 <system_test_led+0xcc>)
 8005580:	2112      	movs	r1, #18
 8005582:	0018      	movs	r0, r3
 8005584:	f001 fa26 	bl	80069d4 <rs485_transmit_package>
		HAL_GPIO_WritePin(LED_OUT_2_GPIO_Port, LED_OUT_2_Pin, 1);
		motor.test.test_status = DISABLE;
		motor.test.led_test_flag = DISABLE;
		rs485_transmit_package((uint8_t*)"LED TEST SUCCESSFUL\n",sizeof("LED TEST SUCCESSFUL\n"));
	}
}
 8005588:	e016      	b.n	80055b8 <system_test_led+0xbc>
		HAL_GPIO_WritePin(LED_OUT_1_GPIO_Port, LED_OUT_1_Pin, 1);
 800558a:	4b0e      	ldr	r3, [pc, #56]	@ (80055c4 <system_test_led+0xc8>)
 800558c:	2201      	movs	r2, #1
 800558e:	2140      	movs	r1, #64	@ 0x40
 8005590:	0018      	movs	r0, r3
 8005592:	f7fd fef2 	bl	800337a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_OUT_2_GPIO_Port, LED_OUT_2_Pin, 1);
 8005596:	4b0b      	ldr	r3, [pc, #44]	@ (80055c4 <system_test_led+0xc8>)
 8005598:	2201      	movs	r2, #1
 800559a:	2180      	movs	r1, #128	@ 0x80
 800559c:	0018      	movs	r0, r3
 800559e:	f7fd feec 	bl	800337a <HAL_GPIO_WritePin>
		motor.test.test_status = DISABLE;
 80055a2:	4b07      	ldr	r3, [pc, #28]	@ (80055c0 <system_test_led+0xc4>)
 80055a4:	2200      	movs	r2, #0
 80055a6:	741a      	strb	r2, [r3, #16]
		motor.test.led_test_flag = DISABLE;
 80055a8:	4b05      	ldr	r3, [pc, #20]	@ (80055c0 <system_test_led+0xc4>)
 80055aa:	2200      	movs	r2, #0
 80055ac:	731a      	strb	r2, [r3, #12]
		rs485_transmit_package((uint8_t*)"LED TEST SUCCESSFUL\n",sizeof("LED TEST SUCCESSFUL\n"));
 80055ae:	4b07      	ldr	r3, [pc, #28]	@ (80055cc <system_test_led+0xd0>)
 80055b0:	2115      	movs	r1, #21
 80055b2:	0018      	movs	r0, r3
 80055b4:	f001 fa0e 	bl	80069d4 <rs485_transmit_package>
}
 80055b8:	46c0      	nop			@ (mov r8, r8)
 80055ba:	46bd      	mov	sp, r7
 80055bc:	b002      	add	sp, #8
 80055be:	bd80      	pop	{r7, pc}
 80055c0:	20000290 	.word	0x20000290
 80055c4:	48000400 	.word	0x48000400
 80055c8:	0800ba80 	.word	0x0800ba80
 80055cc:	0800ba94 	.word	0x0800ba94

080055d0 <system_test_buzzer>:
static void system_test_buzzer(void)
{
 80055d0:	b580      	push	{r7, lr}
 80055d2:	b082      	sub	sp, #8
 80055d4:	af00      	add	r7, sp, #0
	for(uint8_t i=0;i<5;i++)
 80055d6:	1dfb      	adds	r3, r7, #7
 80055d8:	2200      	movs	r2, #0
 80055da:	701a      	strb	r2, [r3, #0]
 80055dc:	e01c      	b.n	8005618 <system_test_buzzer+0x48>
	{
		if(motor.test.test_status == DISABLE)
 80055de:	4b25      	ldr	r3, [pc, #148]	@ (8005674 <system_test_buzzer+0xa4>)
 80055e0:	7c1b      	ldrb	r3, [r3, #16]
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d107      	bne.n	80055f6 <system_test_buzzer+0x26>
		{
			HAL_GPIO_WritePin(BUZZER_CTL_GPIO_Port, BUZZER_CTL_Pin, 0);
 80055e6:	2380      	movs	r3, #128	@ 0x80
 80055e8:	01db      	lsls	r3, r3, #7
 80055ea:	4823      	ldr	r0, [pc, #140]	@ (8005678 <system_test_buzzer+0xa8>)
 80055ec:	2200      	movs	r2, #0
 80055ee:	0019      	movs	r1, r3
 80055f0:	f7fd fec3 	bl	800337a <HAL_GPIO_WritePin>
			break;
 80055f4:	e014      	b.n	8005620 <system_test_buzzer+0x50>
		}
		else
		{
			HAL_GPIO_TogglePin(BUZZER_CTL_GPIO_Port	, BUZZER_CTL_Pin);
 80055f6:	2380      	movs	r3, #128	@ 0x80
 80055f8:	01db      	lsls	r3, r3, #7
 80055fa:	4a1f      	ldr	r2, [pc, #124]	@ (8005678 <system_test_buzzer+0xa8>)
 80055fc:	0019      	movs	r1, r3
 80055fe:	0010      	movs	r0, r2
 8005600:	f7fd fed8 	bl	80033b4 <HAL_GPIO_TogglePin>
			HAL_Delay(300);
 8005604:	2396      	movs	r3, #150	@ 0x96
 8005606:	005b      	lsls	r3, r3, #1
 8005608:	0018      	movs	r0, r3
 800560a:	f7fd fba9 	bl	8002d60 <HAL_Delay>
	for(uint8_t i=0;i<5;i++)
 800560e:	1dfb      	adds	r3, r7, #7
 8005610:	781a      	ldrb	r2, [r3, #0]
 8005612:	1dfb      	adds	r3, r7, #7
 8005614:	3201      	adds	r2, #1
 8005616:	701a      	strb	r2, [r3, #0]
 8005618:	1dfb      	adds	r3, r7, #7
 800561a:	781b      	ldrb	r3, [r3, #0]
 800561c:	2b04      	cmp	r3, #4
 800561e:	d9de      	bls.n	80055de <system_test_buzzer+0xe>
		}
	}

	if(motor.test.test_status == DISABLE)
 8005620:	4b14      	ldr	r3, [pc, #80]	@ (8005674 <system_test_buzzer+0xa4>)
 8005622:	7c1b      	ldrb	r3, [r3, #16]
 8005624:	2b00      	cmp	r3, #0
 8005626:	d10f      	bne.n	8005648 <system_test_buzzer+0x78>
	{
		HAL_GPIO_WritePin(BUZZER_CTL_GPIO_Port, BUZZER_CTL_Pin, 0);
 8005628:	2380      	movs	r3, #128	@ 0x80
 800562a:	01db      	lsls	r3, r3, #7
 800562c:	4812      	ldr	r0, [pc, #72]	@ (8005678 <system_test_buzzer+0xa8>)
 800562e:	2200      	movs	r2, #0
 8005630:	0019      	movs	r1, r3
 8005632:	f7fd fea2 	bl	800337a <HAL_GPIO_WritePin>
		motor.test.buzzer_test_flag = DISABLE;
 8005636:	4b0f      	ldr	r3, [pc, #60]	@ (8005674 <system_test_buzzer+0xa4>)
 8005638:	2200      	movs	r2, #0
 800563a:	735a      	strb	r2, [r3, #13]
		rs485_transmit_package((uint8_t*)"BUZZER TEST STOPPED\n",sizeof("BUZZER TEST STOPPED\n"));
 800563c:	4b0f      	ldr	r3, [pc, #60]	@ (800567c <system_test_buzzer+0xac>)
 800563e:	2115      	movs	r1, #21
 8005640:	0018      	movs	r0, r3
 8005642:	f001 f9c7 	bl	80069d4 <rs485_transmit_package>
		HAL_GPIO_WritePin(BUZZER_CTL_GPIO_Port, BUZZER_CTL_Pin, 0);
		motor.test.test_status = DISABLE;
		motor.test.buzzer_test_flag = DISABLE;
		rs485_transmit_package((uint8_t*)"BUZZER TEST SUCCESSFUL\n",sizeof("BUZZER TEST SUCCESSFUL\n"));
	}
}
 8005646:	e011      	b.n	800566c <system_test_buzzer+0x9c>
		HAL_GPIO_WritePin(BUZZER_CTL_GPIO_Port, BUZZER_CTL_Pin, 0);
 8005648:	2380      	movs	r3, #128	@ 0x80
 800564a:	01db      	lsls	r3, r3, #7
 800564c:	480a      	ldr	r0, [pc, #40]	@ (8005678 <system_test_buzzer+0xa8>)
 800564e:	2200      	movs	r2, #0
 8005650:	0019      	movs	r1, r3
 8005652:	f7fd fe92 	bl	800337a <HAL_GPIO_WritePin>
		motor.test.test_status = DISABLE;
 8005656:	4b07      	ldr	r3, [pc, #28]	@ (8005674 <system_test_buzzer+0xa4>)
 8005658:	2200      	movs	r2, #0
 800565a:	741a      	strb	r2, [r3, #16]
		motor.test.buzzer_test_flag = DISABLE;
 800565c:	4b05      	ldr	r3, [pc, #20]	@ (8005674 <system_test_buzzer+0xa4>)
 800565e:	2200      	movs	r2, #0
 8005660:	735a      	strb	r2, [r3, #13]
		rs485_transmit_package((uint8_t*)"BUZZER TEST SUCCESSFUL\n",sizeof("BUZZER TEST SUCCESSFUL\n"));
 8005662:	4b07      	ldr	r3, [pc, #28]	@ (8005680 <system_test_buzzer+0xb0>)
 8005664:	2118      	movs	r1, #24
 8005666:	0018      	movs	r0, r3
 8005668:	f001 f9b4 	bl	80069d4 <rs485_transmit_package>
}
 800566c:	46c0      	nop			@ (mov r8, r8)
 800566e:	46bd      	mov	sp, r7
 8005670:	b002      	add	sp, #8
 8005672:	bd80      	pop	{r7, pc}
 8005674:	20000290 	.word	0x20000290
 8005678:	48000400 	.word	0x48000400
 800567c:	0800baac 	.word	0x0800baac
 8005680:	0800bac4 	.word	0x0800bac4

08005684 <system_test_speaker>:
static void system_test_speaker(void)
{
 8005684:	b580      	push	{r7, lr}
 8005686:	b082      	sub	sp, #8
 8005688:	af00      	add	r7, sp, #0
    uint32_t start_time = HAL_GetTick();
 800568a:	f7fd fb5f 	bl	8002d4c <HAL_GetTick>
 800568e:	0003      	movs	r3, r0
 8005690:	607b      	str	r3, [r7, #4]
    uint32_t delay = 2000;
 8005692:	23fa      	movs	r3, #250	@ 0xfa
 8005694:	00db      	lsls	r3, r3, #3
 8005696:	603b      	str	r3, [r7, #0]

    HAL_GPIO_WritePin(DFPLAYER_POWER_EN_GPIO_Port, DFPLAYER_POWER_EN_Pin, 1);
 8005698:	2380      	movs	r3, #128	@ 0x80
 800569a:	021b      	lsls	r3, r3, #8
 800569c:	4832      	ldr	r0, [pc, #200]	@ (8005768 <system_test_speaker+0xe4>)
 800569e:	2201      	movs	r2, #1
 80056a0:	0019      	movs	r1, r3
 80056a2:	f7fd fe6a 	bl	800337a <HAL_GPIO_WritePin>

    while((HAL_GetTick() - start_time) < delay)
 80056a6:	e00b      	b.n	80056c0 <system_test_speaker+0x3c>
    {
    	if(motor.test.test_status == DISABLE)
 80056a8:	4b30      	ldr	r3, [pc, #192]	@ (800576c <system_test_speaker+0xe8>)
 80056aa:	7c1b      	ldrb	r3, [r3, #16]
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d107      	bne.n	80056c0 <system_test_speaker+0x3c>
    	{
    		HAL_GPIO_WritePin(DFPLAYER_POWER_EN_GPIO_Port, DFPLAYER_POWER_EN_Pin, 1);
 80056b0:	2380      	movs	r3, #128	@ 0x80
 80056b2:	021b      	lsls	r3, r3, #8
 80056b4:	482c      	ldr	r0, [pc, #176]	@ (8005768 <system_test_speaker+0xe4>)
 80056b6:	2201      	movs	r2, #1
 80056b8:	0019      	movs	r1, r3
 80056ba:	f7fd fe5e 	bl	800337a <HAL_GPIO_WritePin>
    		break;
 80056be:	e007      	b.n	80056d0 <system_test_speaker+0x4c>
    while((HAL_GetTick() - start_time) < delay)
 80056c0:	f7fd fb44 	bl	8002d4c <HAL_GetTick>
 80056c4:	0002      	movs	r2, r0
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	1ad3      	subs	r3, r2, r3
 80056ca:	683a      	ldr	r2, [r7, #0]
 80056cc:	429a      	cmp	r2, r3
 80056ce:	d8eb      	bhi.n	80056a8 <system_test_speaker+0x24>
    	}
    }

    start_time = HAL_GetTick();
 80056d0:	f7fd fb3c 	bl	8002d4c <HAL_GetTick>
 80056d4:	0003      	movs	r3, r0
 80056d6:	607b      	str	r3, [r7, #4]
    delay = 10000;
 80056d8:	4b25      	ldr	r3, [pc, #148]	@ (8005770 <system_test_speaker+0xec>)
 80056da:	603b      	str	r3, [r7, #0]
    HAL_GPIO_WritePin(DFPLAYER_POWER_EN_GPIO_Port, DFPLAYER_POWER_EN_Pin, 0);
 80056dc:	2380      	movs	r3, #128	@ 0x80
 80056de:	021b      	lsls	r3, r3, #8
 80056e0:	4821      	ldr	r0, [pc, #132]	@ (8005768 <system_test_speaker+0xe4>)
 80056e2:	2200      	movs	r2, #0
 80056e4:	0019      	movs	r1, r3
 80056e6:	f7fd fe48 	bl	800337a <HAL_GPIO_WritePin>

    while((HAL_GetTick() - start_time) < delay)
 80056ea:	e00b      	b.n	8005704 <system_test_speaker+0x80>
    {
    	if(motor.test.test_status == DISABLE)
 80056ec:	4b1f      	ldr	r3, [pc, #124]	@ (800576c <system_test_speaker+0xe8>)
 80056ee:	7c1b      	ldrb	r3, [r3, #16]
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d107      	bne.n	8005704 <system_test_speaker+0x80>
    	{
    		HAL_GPIO_WritePin(DFPLAYER_POWER_EN_GPIO_Port, DFPLAYER_POWER_EN_Pin, 1);
 80056f4:	2380      	movs	r3, #128	@ 0x80
 80056f6:	021b      	lsls	r3, r3, #8
 80056f8:	481b      	ldr	r0, [pc, #108]	@ (8005768 <system_test_speaker+0xe4>)
 80056fa:	2201      	movs	r2, #1
 80056fc:	0019      	movs	r1, r3
 80056fe:	f7fd fe3c 	bl	800337a <HAL_GPIO_WritePin>
    		break;
 8005702:	e007      	b.n	8005714 <system_test_speaker+0x90>
    while((HAL_GetTick() - start_time) < delay)
 8005704:	f7fd fb22 	bl	8002d4c <HAL_GetTick>
 8005708:	0002      	movs	r2, r0
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	1ad3      	subs	r3, r2, r3
 800570e:	683a      	ldr	r2, [r7, #0]
 8005710:	429a      	cmp	r2, r3
 8005712:	d8eb      	bhi.n	80056ec <system_test_speaker+0x68>
    	}
    }

	if(motor.test.test_status == DISABLE)
 8005714:	4b15      	ldr	r3, [pc, #84]	@ (800576c <system_test_speaker+0xe8>)
 8005716:	7c1b      	ldrb	r3, [r3, #16]
 8005718:	2b00      	cmp	r3, #0
 800571a:	d10f      	bne.n	800573c <system_test_speaker+0xb8>
	{
		HAL_GPIO_WritePin(BUZZER_CTL_GPIO_Port, BUZZER_CTL_Pin, 0);
 800571c:	2380      	movs	r3, #128	@ 0x80
 800571e:	01db      	lsls	r3, r3, #7
 8005720:	4811      	ldr	r0, [pc, #68]	@ (8005768 <system_test_speaker+0xe4>)
 8005722:	2200      	movs	r2, #0
 8005724:	0019      	movs	r1, r3
 8005726:	f7fd fe28 	bl	800337a <HAL_GPIO_WritePin>
		motor.test.speaker_test_flag = DISABLE;
 800572a:	4b10      	ldr	r3, [pc, #64]	@ (800576c <system_test_speaker+0xe8>)
 800572c:	2200      	movs	r2, #0
 800572e:	739a      	strb	r2, [r3, #14]
		rs485_transmit_package((uint8_t*)"SPEAKER TEST STOPPED\n",sizeof("SPEAKER TEST STOPPED\n"));
 8005730:	4b10      	ldr	r3, [pc, #64]	@ (8005774 <system_test_speaker+0xf0>)
 8005732:	2116      	movs	r1, #22
 8005734:	0018      	movs	r0, r3
 8005736:	f001 f94d 	bl	80069d4 <rs485_transmit_package>
	    HAL_GPIO_WritePin(DFPLAYER_POWER_EN_GPIO_Port, DFPLAYER_POWER_EN_Pin, 1);
		motor.test.test_status = DISABLE;
		motor.test.speaker_test_flag = DISABLE;
		rs485_transmit_package((uint8_t*)"SPEAKER TEST SUCCESSFUL\n",sizeof("SPEAKER TEST SUCCESSFUL\n"));
	}
}
 800573a:	e011      	b.n	8005760 <system_test_speaker+0xdc>
	    HAL_GPIO_WritePin(DFPLAYER_POWER_EN_GPIO_Port, DFPLAYER_POWER_EN_Pin, 1);
 800573c:	2380      	movs	r3, #128	@ 0x80
 800573e:	021b      	lsls	r3, r3, #8
 8005740:	4809      	ldr	r0, [pc, #36]	@ (8005768 <system_test_speaker+0xe4>)
 8005742:	2201      	movs	r2, #1
 8005744:	0019      	movs	r1, r3
 8005746:	f7fd fe18 	bl	800337a <HAL_GPIO_WritePin>
		motor.test.test_status = DISABLE;
 800574a:	4b08      	ldr	r3, [pc, #32]	@ (800576c <system_test_speaker+0xe8>)
 800574c:	2200      	movs	r2, #0
 800574e:	741a      	strb	r2, [r3, #16]
		motor.test.speaker_test_flag = DISABLE;
 8005750:	4b06      	ldr	r3, [pc, #24]	@ (800576c <system_test_speaker+0xe8>)
 8005752:	2200      	movs	r2, #0
 8005754:	739a      	strb	r2, [r3, #14]
		rs485_transmit_package((uint8_t*)"SPEAKER TEST SUCCESSFUL\n",sizeof("SPEAKER TEST SUCCESSFUL\n"));
 8005756:	4b08      	ldr	r3, [pc, #32]	@ (8005778 <system_test_speaker+0xf4>)
 8005758:	2119      	movs	r1, #25
 800575a:	0018      	movs	r0, r3
 800575c:	f001 f93a 	bl	80069d4 <rs485_transmit_package>
}
 8005760:	46c0      	nop			@ (mov r8, r8)
 8005762:	46bd      	mov	sp, r7
 8005764:	b002      	add	sp, #8
 8005766:	bd80      	pop	{r7, pc}
 8005768:	48000400 	.word	0x48000400
 800576c:	20000290 	.word	0x20000290
 8005770:	00002710 	.word	0x00002710
 8005774:	0800badc 	.word	0x0800badc
 8005778:	0800baf4 	.word	0x0800baf4

0800577c <system_test_motor>:
static void system_test_motor(void)
{
 800577c:	b580      	push	{r7, lr}
 800577e:	b082      	sub	sp, #8
 8005780:	af00      	add	r7, sp, #0
    uint32_t start_time = HAL_GetTick();
 8005782:	f7fd fae3 	bl	8002d4c <HAL_GetTick>
 8005786:	0003      	movs	r3, r0
 8005788:	607b      	str	r3, [r7, #4]
    uint32_t delay = 5000;
 800578a:	4b48      	ldr	r3, [pc, #288]	@ (80058ac <system_test_motor+0x130>)
 800578c:	603b      	str	r3, [r7, #0]

	HAL_GPIO_WritePin(MOTOR_DRIVE_2_GPIO_Port, MOTOR_DRIVE_2_Pin, 0);
 800578e:	2380      	movs	r3, #128	@ 0x80
 8005790:	019b      	lsls	r3, r3, #6
 8005792:	4847      	ldr	r0, [pc, #284]	@ (80058b0 <system_test_motor+0x134>)
 8005794:	2200      	movs	r2, #0
 8005796:	0019      	movs	r1, r3
 8005798:	f7fd fdef 	bl	800337a <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800579c:	2001      	movs	r0, #1
 800579e:	f7fd fadf 	bl	8002d60 <HAL_Delay>
	HAL_GPIO_WritePin(MOTOR_DRIVE_1_GPIO_Port, MOTOR_DRIVE_1_Pin, 1);
 80057a2:	2380      	movs	r3, #128	@ 0x80
 80057a4:	015b      	lsls	r3, r3, #5
 80057a6:	4842      	ldr	r0, [pc, #264]	@ (80058b0 <system_test_motor+0x134>)
 80057a8:	2201      	movs	r2, #1
 80057aa:	0019      	movs	r1, r3
 80057ac:	f7fd fde5 	bl	800337a <HAL_GPIO_WritePin>

    while((HAL_GetTick() - start_time) < delay)
 80057b0:	e012      	b.n	80057d8 <system_test_motor+0x5c>
    {
    	if(motor.test.test_status == DISABLE)
 80057b2:	4b40      	ldr	r3, [pc, #256]	@ (80058b4 <system_test_motor+0x138>)
 80057b4:	7c1b      	ldrb	r3, [r3, #16]
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d10e      	bne.n	80057d8 <system_test_motor+0x5c>
    	{
    		HAL_GPIO_WritePin(MOTOR_DRIVE_2_GPIO_Port, MOTOR_DRIVE_2_Pin, 0);
 80057ba:	2380      	movs	r3, #128	@ 0x80
 80057bc:	019b      	lsls	r3, r3, #6
 80057be:	483c      	ldr	r0, [pc, #240]	@ (80058b0 <system_test_motor+0x134>)
 80057c0:	2200      	movs	r2, #0
 80057c2:	0019      	movs	r1, r3
 80057c4:	f7fd fdd9 	bl	800337a <HAL_GPIO_WritePin>
    		HAL_GPIO_WritePin(MOTOR_DRIVE_1_GPIO_Port, MOTOR_DRIVE_1_Pin, 0);
 80057c8:	2380      	movs	r3, #128	@ 0x80
 80057ca:	015b      	lsls	r3, r3, #5
 80057cc:	4838      	ldr	r0, [pc, #224]	@ (80058b0 <system_test_motor+0x134>)
 80057ce:	2200      	movs	r2, #0
 80057d0:	0019      	movs	r1, r3
 80057d2:	f7fd fdd2 	bl	800337a <HAL_GPIO_WritePin>
    		break;
 80057d6:	e007      	b.n	80057e8 <system_test_motor+0x6c>
    while((HAL_GetTick() - start_time) < delay)
 80057d8:	f7fd fab8 	bl	8002d4c <HAL_GetTick>
 80057dc:	0002      	movs	r2, r0
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	1ad3      	subs	r3, r2, r3
 80057e2:	683a      	ldr	r2, [r7, #0]
 80057e4:	429a      	cmp	r2, r3
 80057e6:	d8e4      	bhi.n	80057b2 <system_test_motor+0x36>
    	}
    }

    start_time = HAL_GetTick();
 80057e8:	f7fd fab0 	bl	8002d4c <HAL_GetTick>
 80057ec:	0003      	movs	r3, r0
 80057ee:	607b      	str	r3, [r7, #4]

	HAL_GPIO_WritePin(MOTOR_DRIVE_1_GPIO_Port, MOTOR_DRIVE_1_Pin, 0);
 80057f0:	2380      	movs	r3, #128	@ 0x80
 80057f2:	015b      	lsls	r3, r3, #5
 80057f4:	482e      	ldr	r0, [pc, #184]	@ (80058b0 <system_test_motor+0x134>)
 80057f6:	2200      	movs	r2, #0
 80057f8:	0019      	movs	r1, r3
 80057fa:	f7fd fdbe 	bl	800337a <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80057fe:	2001      	movs	r0, #1
 8005800:	f7fd faae 	bl	8002d60 <HAL_Delay>
	HAL_GPIO_WritePin(MOTOR_DRIVE_2_GPIO_Port, MOTOR_DRIVE_2_Pin, 1);
 8005804:	2380      	movs	r3, #128	@ 0x80
 8005806:	019b      	lsls	r3, r3, #6
 8005808:	4829      	ldr	r0, [pc, #164]	@ (80058b0 <system_test_motor+0x134>)
 800580a:	2201      	movs	r2, #1
 800580c:	0019      	movs	r1, r3
 800580e:	f7fd fdb4 	bl	800337a <HAL_GPIO_WritePin>

    while((HAL_GetTick() - start_time) < delay)
 8005812:	e012      	b.n	800583a <system_test_motor+0xbe>
    {
    	if(motor.test.test_status == DISABLE)
 8005814:	4b27      	ldr	r3, [pc, #156]	@ (80058b4 <system_test_motor+0x138>)
 8005816:	7c1b      	ldrb	r3, [r3, #16]
 8005818:	2b00      	cmp	r3, #0
 800581a:	d10e      	bne.n	800583a <system_test_motor+0xbe>
    	{
    		HAL_GPIO_WritePin(MOTOR_DRIVE_2_GPIO_Port, MOTOR_DRIVE_2_Pin, 0);
 800581c:	2380      	movs	r3, #128	@ 0x80
 800581e:	019b      	lsls	r3, r3, #6
 8005820:	4823      	ldr	r0, [pc, #140]	@ (80058b0 <system_test_motor+0x134>)
 8005822:	2200      	movs	r2, #0
 8005824:	0019      	movs	r1, r3
 8005826:	f7fd fda8 	bl	800337a <HAL_GPIO_WritePin>
    		HAL_GPIO_WritePin(MOTOR_DRIVE_1_GPIO_Port, MOTOR_DRIVE_1_Pin, 0);
 800582a:	2380      	movs	r3, #128	@ 0x80
 800582c:	015b      	lsls	r3, r3, #5
 800582e:	4820      	ldr	r0, [pc, #128]	@ (80058b0 <system_test_motor+0x134>)
 8005830:	2200      	movs	r2, #0
 8005832:	0019      	movs	r1, r3
 8005834:	f7fd fda1 	bl	800337a <HAL_GPIO_WritePin>
    		break;
 8005838:	e007      	b.n	800584a <system_test_motor+0xce>
    while((HAL_GetTick() - start_time) < delay)
 800583a:	f7fd fa87 	bl	8002d4c <HAL_GetTick>
 800583e:	0002      	movs	r2, r0
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	1ad3      	subs	r3, r2, r3
 8005844:	683a      	ldr	r2, [r7, #0]
 8005846:	429a      	cmp	r2, r3
 8005848:	d8e4      	bhi.n	8005814 <system_test_motor+0x98>
    	}
    }

	if(motor.test.test_status == DISABLE)
 800584a:	4b1a      	ldr	r3, [pc, #104]	@ (80058b4 <system_test_motor+0x138>)
 800584c:	7c1b      	ldrb	r3, [r3, #16]
 800584e:	2b00      	cmp	r3, #0
 8005850:	d10f      	bne.n	8005872 <system_test_motor+0xf6>
	{
		HAL_GPIO_WritePin(BUZZER_CTL_GPIO_Port, BUZZER_CTL_Pin, 0);
 8005852:	2380      	movs	r3, #128	@ 0x80
 8005854:	01db      	lsls	r3, r3, #7
 8005856:	4816      	ldr	r0, [pc, #88]	@ (80058b0 <system_test_motor+0x134>)
 8005858:	2200      	movs	r2, #0
 800585a:	0019      	movs	r1, r3
 800585c:	f7fd fd8d 	bl	800337a <HAL_GPIO_WritePin>
		motor.test.motor_test_flag = DISABLE;
 8005860:	4b14      	ldr	r3, [pc, #80]	@ (80058b4 <system_test_motor+0x138>)
 8005862:	2200      	movs	r2, #0
 8005864:	73da      	strb	r2, [r3, #15]
		rs485_transmit_package((uint8_t*)"MOTOR TEST STOPPED\n",sizeof("MOTOR TEST STOPPED\n"));
 8005866:	4b14      	ldr	r3, [pc, #80]	@ (80058b8 <system_test_motor+0x13c>)
 8005868:	2114      	movs	r1, #20
 800586a:	0018      	movs	r0, r3
 800586c:	f001 f8b2 	bl	80069d4 <rs485_transmit_package>
		HAL_GPIO_WritePin(MOTOR_DRIVE_1_GPIO_Port, MOTOR_DRIVE_1_Pin, 0);
		motor.test.test_status = DISABLE;
		motor.test.motor_test_flag = DISABLE;
		rs485_transmit_package((uint8_t*)"MOTOR TEST SUCCESSFUL\n",sizeof("MOTOR TEST SUCCESSFUL\n"));
	}
}
 8005870:	e018      	b.n	80058a4 <system_test_motor+0x128>
		HAL_GPIO_WritePin(MOTOR_DRIVE_2_GPIO_Port, MOTOR_DRIVE_2_Pin, 0);
 8005872:	2380      	movs	r3, #128	@ 0x80
 8005874:	019b      	lsls	r3, r3, #6
 8005876:	480e      	ldr	r0, [pc, #56]	@ (80058b0 <system_test_motor+0x134>)
 8005878:	2200      	movs	r2, #0
 800587a:	0019      	movs	r1, r3
 800587c:	f7fd fd7d 	bl	800337a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MOTOR_DRIVE_1_GPIO_Port, MOTOR_DRIVE_1_Pin, 0);
 8005880:	2380      	movs	r3, #128	@ 0x80
 8005882:	015b      	lsls	r3, r3, #5
 8005884:	480a      	ldr	r0, [pc, #40]	@ (80058b0 <system_test_motor+0x134>)
 8005886:	2200      	movs	r2, #0
 8005888:	0019      	movs	r1, r3
 800588a:	f7fd fd76 	bl	800337a <HAL_GPIO_WritePin>
		motor.test.test_status = DISABLE;
 800588e:	4b09      	ldr	r3, [pc, #36]	@ (80058b4 <system_test_motor+0x138>)
 8005890:	2200      	movs	r2, #0
 8005892:	741a      	strb	r2, [r3, #16]
		motor.test.motor_test_flag = DISABLE;
 8005894:	4b07      	ldr	r3, [pc, #28]	@ (80058b4 <system_test_motor+0x138>)
 8005896:	2200      	movs	r2, #0
 8005898:	73da      	strb	r2, [r3, #15]
		rs485_transmit_package((uint8_t*)"MOTOR TEST SUCCESSFUL\n",sizeof("MOTOR TEST SUCCESSFUL\n"));
 800589a:	4b08      	ldr	r3, [pc, #32]	@ (80058bc <system_test_motor+0x140>)
 800589c:	2117      	movs	r1, #23
 800589e:	0018      	movs	r0, r3
 80058a0:	f001 f898 	bl	80069d4 <rs485_transmit_package>
}
 80058a4:	46c0      	nop			@ (mov r8, r8)
 80058a6:	46bd      	mov	sp, r7
 80058a8:	b002      	add	sp, #8
 80058aa:	bd80      	pop	{r7, pc}
 80058ac:	00001388 	.word	0x00001388
 80058b0:	48000400 	.word	0x48000400
 80058b4:	20000290 	.word	0x20000290
 80058b8:	0800bb10 	.word	0x0800bb10
 80058bc:	0800bb24 	.word	0x0800bb24

080058c0 <motor_led_1_process>:
static void motor_led_1_process(void)
{
 80058c0:	b580      	push	{r7, lr}
 80058c2:	af00      	add	r7, sp, #0
	if(motor.led_1_flag == ENABLE)
 80058c4:	4b0b      	ldr	r3, [pc, #44]	@ (80058f4 <motor_led_1_process+0x34>)
 80058c6:	781b      	ldrb	r3, [r3, #0]
 80058c8:	2b01      	cmp	r3, #1
 80058ca:	d106      	bne.n	80058da <motor_led_1_process+0x1a>
	{
		HAL_GPIO_WritePin(LED_OUT_1_GPIO_Port, LED_OUT_1_Pin, 0);
 80058cc:	4b0a      	ldr	r3, [pc, #40]	@ (80058f8 <motor_led_1_process+0x38>)
 80058ce:	2200      	movs	r2, #0
 80058d0:	2140      	movs	r1, #64	@ 0x40
 80058d2:	0018      	movs	r0, r3
 80058d4:	f7fd fd51 	bl	800337a <HAL_GPIO_WritePin>
	}
	else if(motor.led_1_flag == DISABLE)
	{
		HAL_GPIO_WritePin(LED_OUT_1_GPIO_Port, LED_OUT_1_Pin, 1);
	}
}
 80058d8:	e009      	b.n	80058ee <motor_led_1_process+0x2e>
	else if(motor.led_1_flag == DISABLE)
 80058da:	4b06      	ldr	r3, [pc, #24]	@ (80058f4 <motor_led_1_process+0x34>)
 80058dc:	781b      	ldrb	r3, [r3, #0]
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d105      	bne.n	80058ee <motor_led_1_process+0x2e>
		HAL_GPIO_WritePin(LED_OUT_1_GPIO_Port, LED_OUT_1_Pin, 1);
 80058e2:	4b05      	ldr	r3, [pc, #20]	@ (80058f8 <motor_led_1_process+0x38>)
 80058e4:	2201      	movs	r2, #1
 80058e6:	2140      	movs	r1, #64	@ 0x40
 80058e8:	0018      	movs	r0, r3
 80058ea:	f7fd fd46 	bl	800337a <HAL_GPIO_WritePin>
}
 80058ee:	46c0      	nop			@ (mov r8, r8)
 80058f0:	46bd      	mov	sp, r7
 80058f2:	bd80      	pop	{r7, pc}
 80058f4:	20000290 	.word	0x20000290
 80058f8:	48000400 	.word	0x48000400

080058fc <motor_led_2_process>:
static void motor_led_2_process(void)
{
 80058fc:	b580      	push	{r7, lr}
 80058fe:	af00      	add	r7, sp, #0
	if(motor.led_2_flag == ENABLE)
 8005900:	4b0b      	ldr	r3, [pc, #44]	@ (8005930 <motor_led_2_process+0x34>)
 8005902:	785b      	ldrb	r3, [r3, #1]
 8005904:	2b01      	cmp	r3, #1
 8005906:	d106      	bne.n	8005916 <motor_led_2_process+0x1a>
	{
		HAL_GPIO_WritePin(LED_OUT_2_GPIO_Port, LED_OUT_2_Pin, 0);
 8005908:	4b0a      	ldr	r3, [pc, #40]	@ (8005934 <motor_led_2_process+0x38>)
 800590a:	2200      	movs	r2, #0
 800590c:	2180      	movs	r1, #128	@ 0x80
 800590e:	0018      	movs	r0, r3
 8005910:	f7fd fd33 	bl	800337a <HAL_GPIO_WritePin>
	}
	else if(motor.led_2_flag == DISABLE)
	{
		HAL_GPIO_WritePin(LED_OUT_2_GPIO_Port, LED_OUT_2_Pin, 1);
	}
}
 8005914:	e009      	b.n	800592a <motor_led_2_process+0x2e>
	else if(motor.led_2_flag == DISABLE)
 8005916:	4b06      	ldr	r3, [pc, #24]	@ (8005930 <motor_led_2_process+0x34>)
 8005918:	785b      	ldrb	r3, [r3, #1]
 800591a:	2b00      	cmp	r3, #0
 800591c:	d105      	bne.n	800592a <motor_led_2_process+0x2e>
		HAL_GPIO_WritePin(LED_OUT_2_GPIO_Port, LED_OUT_2_Pin, 1);
 800591e:	4b05      	ldr	r3, [pc, #20]	@ (8005934 <motor_led_2_process+0x38>)
 8005920:	2201      	movs	r2, #1
 8005922:	2180      	movs	r1, #128	@ 0x80
 8005924:	0018      	movs	r0, r3
 8005926:	f7fd fd28 	bl	800337a <HAL_GPIO_WritePin>
}
 800592a:	46c0      	nop			@ (mov r8, r8)
 800592c:	46bd      	mov	sp, r7
 800592e:	bd80      	pop	{r7, pc}
 8005930:	20000290 	.word	0x20000290
 8005934:	48000400 	.word	0x48000400

08005938 <motor_buzzer_process>:
static void motor_buzzer_process(void)
{
 8005938:	b580      	push	{r7, lr}
 800593a:	af00      	add	r7, sp, #0
	if(motor.buzzer_flag == ENABLE)
 800593c:	4b0c      	ldr	r3, [pc, #48]	@ (8005970 <motor_buzzer_process+0x38>)
 800593e:	789b      	ldrb	r3, [r3, #2]
 8005940:	2b01      	cmp	r3, #1
 8005942:	d107      	bne.n	8005954 <motor_buzzer_process+0x1c>
	{
		HAL_GPIO_WritePin(BUZZER_CTL_GPIO_Port, BUZZER_CTL_Pin, 1);
 8005944:	2380      	movs	r3, #128	@ 0x80
 8005946:	01db      	lsls	r3, r3, #7
 8005948:	480a      	ldr	r0, [pc, #40]	@ (8005974 <motor_buzzer_process+0x3c>)
 800594a:	2201      	movs	r2, #1
 800594c:	0019      	movs	r1, r3
 800594e:	f7fd fd14 	bl	800337a <HAL_GPIO_WritePin>
	}
	else if(motor.buzzer_flag == DISABLE)
	{
		HAL_GPIO_WritePin(BUZZER_CTL_GPIO_Port, BUZZER_CTL_Pin, 0);
	}
}
 8005952:	e00a      	b.n	800596a <motor_buzzer_process+0x32>
	else if(motor.buzzer_flag == DISABLE)
 8005954:	4b06      	ldr	r3, [pc, #24]	@ (8005970 <motor_buzzer_process+0x38>)
 8005956:	789b      	ldrb	r3, [r3, #2]
 8005958:	2b00      	cmp	r3, #0
 800595a:	d106      	bne.n	800596a <motor_buzzer_process+0x32>
		HAL_GPIO_WritePin(BUZZER_CTL_GPIO_Port, BUZZER_CTL_Pin, 0);
 800595c:	2380      	movs	r3, #128	@ 0x80
 800595e:	01db      	lsls	r3, r3, #7
 8005960:	4804      	ldr	r0, [pc, #16]	@ (8005974 <motor_buzzer_process+0x3c>)
 8005962:	2200      	movs	r2, #0
 8005964:	0019      	movs	r1, r3
 8005966:	f7fd fd08 	bl	800337a <HAL_GPIO_WritePin>
}
 800596a:	46c0      	nop			@ (mov r8, r8)
 800596c:	46bd      	mov	sp, r7
 800596e:	bd80      	pop	{r7, pc}
 8005970:	20000290 	.word	0x20000290
 8005974:	48000400 	.word	0x48000400

08005978 <motor_speaker_process>:
static void motor_speaker_process(void)
{
 8005978:	b580      	push	{r7, lr}
 800597a:	af00      	add	r7, sp, #0
	if(motor.speaker_flag == ENABLE)
 800597c:	4b0c      	ldr	r3, [pc, #48]	@ (80059b0 <motor_speaker_process+0x38>)
 800597e:	78db      	ldrb	r3, [r3, #3]
 8005980:	2b01      	cmp	r3, #1
 8005982:	d107      	bne.n	8005994 <motor_speaker_process+0x1c>
	{
		HAL_GPIO_WritePin(DFPLAYER_POWER_EN_GPIO_Port, DFPLAYER_POWER_EN_Pin, 0);
 8005984:	2380      	movs	r3, #128	@ 0x80
 8005986:	021b      	lsls	r3, r3, #8
 8005988:	480a      	ldr	r0, [pc, #40]	@ (80059b4 <motor_speaker_process+0x3c>)
 800598a:	2200      	movs	r2, #0
 800598c:	0019      	movs	r1, r3
 800598e:	f7fd fcf4 	bl	800337a <HAL_GPIO_WritePin>
	}
	else if(motor.speaker_flag == DISABLE)
	{
		HAL_GPIO_WritePin(DFPLAYER_POWER_EN_GPIO_Port, DFPLAYER_POWER_EN_Pin, 1);
	}
}
 8005992:	e00a      	b.n	80059aa <motor_speaker_process+0x32>
	else if(motor.speaker_flag == DISABLE)
 8005994:	4b06      	ldr	r3, [pc, #24]	@ (80059b0 <motor_speaker_process+0x38>)
 8005996:	78db      	ldrb	r3, [r3, #3]
 8005998:	2b00      	cmp	r3, #0
 800599a:	d106      	bne.n	80059aa <motor_speaker_process+0x32>
		HAL_GPIO_WritePin(DFPLAYER_POWER_EN_GPIO_Port, DFPLAYER_POWER_EN_Pin, 1);
 800599c:	2380      	movs	r3, #128	@ 0x80
 800599e:	021b      	lsls	r3, r3, #8
 80059a0:	4804      	ldr	r0, [pc, #16]	@ (80059b4 <motor_speaker_process+0x3c>)
 80059a2:	2201      	movs	r2, #1
 80059a4:	0019      	movs	r1, r3
 80059a6:	f7fd fce8 	bl	800337a <HAL_GPIO_WritePin>
}
 80059aa:	46c0      	nop			@ (mov r8, r8)
 80059ac:	46bd      	mov	sp, r7
 80059ae:	bd80      	pop	{r7, pc}
 80059b0:	20000290 	.word	0x20000290
 80059b4:	48000400 	.word	0x48000400

080059b8 <motor_motion_process>:

void motor_motion_process(void)
{
 80059b8:	b580      	push	{r7, lr}
 80059ba:	af00      	add	r7, sp, #0
	motor_led_1_process();
 80059bc:	f7ff ff80 	bl	80058c0 <motor_led_1_process>
	motor_led_2_process();
 80059c0:	f7ff ff9c 	bl	80058fc <motor_led_2_process>
	motor_buzzer_process();
 80059c4:	f7ff ffb8 	bl	8005938 <motor_buzzer_process>
	motor_speaker_process();
 80059c8:	f7ff ffd6 	bl	8005978 <motor_speaker_process>
}
 80059cc:	46c0      	nop			@ (mov r8, r8)
 80059ce:	46bd      	mov	sp, r7
 80059d0:	bd80      	pop	{r7, pc}
	...

080059d4 <motor_turn_process>:

static void motor_turn_process(void)
{
 80059d4:	b580      	push	{r7, lr}
 80059d6:	b086      	sub	sp, #24
 80059d8:	af00      	add	r7, sp, #0
	if(motor.motor_flag.auto_mode == ENABLE)
 80059da:	4bdf      	ldr	r3, [pc, #892]	@ (8005d58 <motor_turn_process+0x384>)
 80059dc:	791b      	ldrb	r3, [r3, #4]
 80059de:	2b01      	cmp	r3, #1
 80059e0:	d000      	beq.n	80059e4 <motor_turn_process+0x10>
 80059e2:	e13b      	b.n	8005c5c <motor_turn_process+0x288>
	{
		//H köprüsü resetleniyor
		HAL_GPIO_WritePin(MOTOR_DRIVE_1_GPIO_Port, MOTOR_DRIVE_1_Pin, 0);
 80059e4:	2380      	movs	r3, #128	@ 0x80
 80059e6:	015b      	lsls	r3, r3, #5
 80059e8:	48dc      	ldr	r0, [pc, #880]	@ (8005d5c <motor_turn_process+0x388>)
 80059ea:	2200      	movs	r2, #0
 80059ec:	0019      	movs	r1, r3
 80059ee:	f7fd fcc4 	bl	800337a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MOTOR_DRIVE_2_GPIO_Port, MOTOR_DRIVE_2_Pin, 0);
 80059f2:	2380      	movs	r3, #128	@ 0x80
 80059f4:	019b      	lsls	r3, r3, #6
 80059f6:	48d9      	ldr	r0, [pc, #868]	@ (8005d5c <motor_turn_process+0x388>)
 80059f8:	2200      	movs	r2, #0
 80059fa:	0019      	movs	r1, r3
 80059fc:	f7fd fcbd 	bl	800337a <HAL_GPIO_WritePin>

		//Delay ayarları için değişken tanımlandı
	    uint32_t start_time;
	    float delay = (float)(MOTOR_SPEED_MAX_DELAY - (39.2156 * motor.motor_flag.speed)); //Bu değer min 0 max 255 olabilir
 8005a00:	4bd5      	ldr	r3, [pc, #852]	@ (8005d58 <motor_turn_process+0x384>)
 8005a02:	7a5b      	ldrb	r3, [r3, #9]
 8005a04:	0018      	movs	r0, r3
 8005a06:	f7fc fd69 	bl	80024dc <__aeabi_i2d>
 8005a0a:	4ad5      	ldr	r2, [pc, #852]	@ (8005d60 <motor_turn_process+0x38c>)
 8005a0c:	4bd5      	ldr	r3, [pc, #852]	@ (8005d64 <motor_turn_process+0x390>)
 8005a0e:	f7fb fea3 	bl	8001758 <__aeabi_dmul>
 8005a12:	0002      	movs	r2, r0
 8005a14:	000b      	movs	r3, r1
 8005a16:	2000      	movs	r0, #0
 8005a18:	49d3      	ldr	r1, [pc, #844]	@ (8005d68 <motor_turn_process+0x394>)
 8005a1a:	f7fc f965 	bl	8001ce8 <__aeabi_dsub>
 8005a1e:	0002      	movs	r2, r0
 8005a20:	000b      	movs	r3, r1
 8005a22:	0010      	movs	r0, r2
 8005a24:	0019      	movs	r1, r3
 8005a26:	f7fc fdab 	bl	8002580 <__aeabi_d2f>
 8005a2a:	1c03      	adds	r3, r0, #0
 8005a2c:	60bb      	str	r3, [r7, #8]

	    //ileri yönde dönüş
		for(uint8_t turn=0;turn<motor.motor_flag.forward;turn++)
 8005a2e:	2317      	movs	r3, #23
 8005a30:	18fb      	adds	r3, r7, r3
 8005a32:	2200      	movs	r2, #0
 8005a34:	701a      	strb	r2, [r3, #0]
 8005a36:	e070      	b.n	8005b1a <motor_turn_process+0x146>
		{
			if(motor.test.test_status == ENABLE)
 8005a38:	4bc7      	ldr	r3, [pc, #796]	@ (8005d58 <motor_turn_process+0x384>)
 8005a3a:	7c1b      	ldrb	r3, [r3, #16]
 8005a3c:	2b01      	cmp	r3, #1
 8005a3e:	d102      	bne.n	8005a46 <motor_turn_process+0x72>
			{
				motor_motion_reset();
 8005a40:	f7ff fd2c 	bl	800549c <motor_motion_reset>
				break;
 8005a44:	e070      	b.n	8005b28 <motor_turn_process+0x154>
			}

			if(motor.motor_flag.stop_mode == ENABLE)
 8005a46:	4bc4      	ldr	r3, [pc, #784]	@ (8005d58 <motor_turn_process+0x384>)
 8005a48:	7a1b      	ldrb	r3, [r3, #8]
 8005a4a:	2b01      	cmp	r3, #1
 8005a4c:	d112      	bne.n	8005a74 <motor_turn_process+0xa0>
			{
	    		HAL_GPIO_WritePin(MOTOR_DRIVE_2_GPIO_Port, MOTOR_DRIVE_2_Pin, 0);
 8005a4e:	2380      	movs	r3, #128	@ 0x80
 8005a50:	019b      	lsls	r3, r3, #6
 8005a52:	48c2      	ldr	r0, [pc, #776]	@ (8005d5c <motor_turn_process+0x388>)
 8005a54:	2200      	movs	r2, #0
 8005a56:	0019      	movs	r1, r3
 8005a58:	f7fd fc8f 	bl	800337a <HAL_GPIO_WritePin>
	    		HAL_GPIO_WritePin(MOTOR_DRIVE_1_GPIO_Port, MOTOR_DRIVE_1_Pin, 0);
 8005a5c:	2380      	movs	r3, #128	@ 0x80
 8005a5e:	015b      	lsls	r3, r3, #5
 8005a60:	48be      	ldr	r0, [pc, #760]	@ (8005d5c <motor_turn_process+0x388>)
 8005a62:	2200      	movs	r2, #0
 8005a64:	0019      	movs	r1, r3
 8005a66:	f7fd fc88 	bl	800337a <HAL_GPIO_WritePin>
				user_flash_write(&fobj); //motorun auto moddan stop moduna güncellenmesi
 8005a6a:	4bc0      	ldr	r3, [pc, #768]	@ (8005d6c <motor_turn_process+0x398>)
 8005a6c:	0018      	movs	r0, r3
 8005a6e:	f000 fced 	bl	800644c <user_flash_write>
	    		break;
 8005a72:	e059      	b.n	8005b28 <motor_turn_process+0x154>
			}
			else if(motor.motor_flag.stop_mode == DISABLE)
 8005a74:	4bb8      	ldr	r3, [pc, #736]	@ (8005d58 <motor_turn_process+0x384>)
 8005a76:	7a1b      	ldrb	r3, [r3, #8]
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d148      	bne.n	8005b0e <motor_turn_process+0x13a>
			{
	    		HAL_GPIO_WritePin(MOTOR_DRIVE_2_GPIO_Port, MOTOR_DRIVE_2_Pin, 0);
 8005a7c:	2380      	movs	r3, #128	@ 0x80
 8005a7e:	019b      	lsls	r3, r3, #6
 8005a80:	48b6      	ldr	r0, [pc, #728]	@ (8005d5c <motor_turn_process+0x388>)
 8005a82:	2200      	movs	r2, #0
 8005a84:	0019      	movs	r1, r3
 8005a86:	f7fd fc78 	bl	800337a <HAL_GPIO_WritePin>
	    		HAL_Delay(1);
 8005a8a:	2001      	movs	r0, #1
 8005a8c:	f7fd f968 	bl	8002d60 <HAL_Delay>
	    		HAL_GPIO_WritePin(MOTOR_DRIVE_1_GPIO_Port, MOTOR_DRIVE_1_Pin, 1);
 8005a90:	2380      	movs	r3, #128	@ 0x80
 8005a92:	015b      	lsls	r3, r3, #5
 8005a94:	48b1      	ldr	r0, [pc, #708]	@ (8005d5c <motor_turn_process+0x388>)
 8005a96:	2201      	movs	r2, #1
 8005a98:	0019      	movs	r1, r3
 8005a9a:	f7fd fc6e 	bl	800337a <HAL_GPIO_WritePin>

				start_time = HAL_GetTick();
 8005a9e:	f7fd f955 	bl	8002d4c <HAL_GetTick>
 8005aa2:	0003      	movs	r3, r0
 8005aa4:	607b      	str	r3, [r7, #4]

			    while((HAL_GetTick() - start_time) < delay)
 8005aa6:	e023      	b.n	8005af0 <motor_turn_process+0x11c>
			    {
			    	if(motor.motor_flag.stop_mode == ENABLE)
 8005aa8:	4bab      	ldr	r3, [pc, #684]	@ (8005d58 <motor_turn_process+0x384>)
 8005aaa:	7a1b      	ldrb	r3, [r3, #8]
 8005aac:	2b01      	cmp	r3, #1
 8005aae:	d112      	bne.n	8005ad6 <motor_turn_process+0x102>
			    	{
			    		HAL_GPIO_WritePin(MOTOR_DRIVE_2_GPIO_Port, MOTOR_DRIVE_2_Pin, 0);
 8005ab0:	2380      	movs	r3, #128	@ 0x80
 8005ab2:	019b      	lsls	r3, r3, #6
 8005ab4:	48a9      	ldr	r0, [pc, #676]	@ (8005d5c <motor_turn_process+0x388>)
 8005ab6:	2200      	movs	r2, #0
 8005ab8:	0019      	movs	r1, r3
 8005aba:	f7fd fc5e 	bl	800337a <HAL_GPIO_WritePin>
			    		HAL_GPIO_WritePin(MOTOR_DRIVE_1_GPIO_Port, MOTOR_DRIVE_1_Pin, 0);
 8005abe:	2380      	movs	r3, #128	@ 0x80
 8005ac0:	015b      	lsls	r3, r3, #5
 8005ac2:	48a6      	ldr	r0, [pc, #664]	@ (8005d5c <motor_turn_process+0x388>)
 8005ac4:	2200      	movs	r2, #0
 8005ac6:	0019      	movs	r1, r3
 8005ac8:	f7fd fc57 	bl	800337a <HAL_GPIO_WritePin>
						user_flash_write(&fobj); //motorun auto moddan stop moduna güncellenmesi
 8005acc:	4ba7      	ldr	r3, [pc, #668]	@ (8005d6c <motor_turn_process+0x398>)
 8005ace:	0018      	movs	r0, r3
 8005ad0:	f000 fcbc 	bl	800644c <user_flash_write>
			    		break;
 8005ad4:	e01b      	b.n	8005b0e <motor_turn_process+0x13a>
			    	}
			    	else if(motor.test.test_status == ENABLE)
 8005ad6:	4ba0      	ldr	r3, [pc, #640]	@ (8005d58 <motor_turn_process+0x384>)
 8005ad8:	7c1b      	ldrb	r3, [r3, #16]
 8005ada:	2b01      	cmp	r3, #1
 8005adc:	d102      	bne.n	8005ae4 <motor_turn_process+0x110>
			    	{
			    		motor_motion_reset();
 8005ade:	f7ff fcdd 	bl	800549c <motor_motion_reset>
			    		break;
 8005ae2:	e014      	b.n	8005b0e <motor_turn_process+0x13a>
			    	}
			    	else
			    	{
			    		motor_motion_process();
 8005ae4:	f7ff ff68 	bl	80059b8 <motor_motion_process>
			    		user_flash_write(&fobj); // motor auto modda iken herhangi bir komut gelirse güncellemek için
 8005ae8:	4ba0      	ldr	r3, [pc, #640]	@ (8005d6c <motor_turn_process+0x398>)
 8005aea:	0018      	movs	r0, r3
 8005aec:	f000 fcae 	bl	800644c <user_flash_write>
			    while((HAL_GetTick() - start_time) < delay)
 8005af0:	f7fd f92c 	bl	8002d4c <HAL_GetTick>
 8005af4:	0002      	movs	r2, r0
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	1ad3      	subs	r3, r2, r3
 8005afa:	0018      	movs	r0, r3
 8005afc:	f7fa fe42 	bl	8000784 <__aeabi_ui2f>
 8005b00:	1c03      	adds	r3, r0, #0
 8005b02:	1c19      	adds	r1, r3, #0
 8005b04:	68b8      	ldr	r0, [r7, #8]
 8005b06:	f7fa fcf5 	bl	80004f4 <__aeabi_fcmpgt>
 8005b0a:	1e03      	subs	r3, r0, #0
 8005b0c:	d1cc      	bne.n	8005aa8 <motor_turn_process+0xd4>
		for(uint8_t turn=0;turn<motor.motor_flag.forward;turn++)
 8005b0e:	2117      	movs	r1, #23
 8005b10:	187b      	adds	r3, r7, r1
 8005b12:	781a      	ldrb	r2, [r3, #0]
 8005b14:	187b      	adds	r3, r7, r1
 8005b16:	3201      	adds	r2, #1
 8005b18:	701a      	strb	r2, [r3, #0]
 8005b1a:	4b8f      	ldr	r3, [pc, #572]	@ (8005d58 <motor_turn_process+0x384>)
 8005b1c:	799b      	ldrb	r3, [r3, #6]
 8005b1e:	2217      	movs	r2, #23
 8005b20:	18ba      	adds	r2, r7, r2
 8005b22:	7812      	ldrb	r2, [r2, #0]
 8005b24:	429a      	cmp	r2, r3
 8005b26:	d387      	bcc.n	8005a38 <motor_turn_process+0x64>
			    	}
			    }
			 }
		}

		HAL_GPIO_WritePin(MOTOR_DRIVE_2_GPIO_Port, MOTOR_DRIVE_2_Pin, 0);
 8005b28:	2380      	movs	r3, #128	@ 0x80
 8005b2a:	019b      	lsls	r3, r3, #6
 8005b2c:	488b      	ldr	r0, [pc, #556]	@ (8005d5c <motor_turn_process+0x388>)
 8005b2e:	2200      	movs	r2, #0
 8005b30:	0019      	movs	r1, r3
 8005b32:	f7fd fc22 	bl	800337a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MOTOR_DRIVE_1_GPIO_Port, MOTOR_DRIVE_1_Pin, 0);
 8005b36:	2380      	movs	r3, #128	@ 0x80
 8005b38:	015b      	lsls	r3, r3, #5
 8005b3a:	4888      	ldr	r0, [pc, #544]	@ (8005d5c <motor_turn_process+0x388>)
 8005b3c:	2200      	movs	r2, #0
 8005b3e:	0019      	movs	r1, r3
 8005b40:	f7fd fc1b 	bl	800337a <HAL_GPIO_WritePin>

		//geri yönde dönüş
		for(uint8_t turn=0;turn<motor.motor_flag.backward;turn++)
 8005b44:	2316      	movs	r3, #22
 8005b46:	18fb      	adds	r3, r7, r3
 8005b48:	2200      	movs	r2, #0
 8005b4a:	701a      	strb	r2, [r3, #0]
 8005b4c:	e070      	b.n	8005c30 <motor_turn_process+0x25c>
		{
			if(motor.test.test_status == ENABLE)
 8005b4e:	4b82      	ldr	r3, [pc, #520]	@ (8005d58 <motor_turn_process+0x384>)
 8005b50:	7c1b      	ldrb	r3, [r3, #16]
 8005b52:	2b01      	cmp	r3, #1
 8005b54:	d102      	bne.n	8005b5c <motor_turn_process+0x188>
			{
				motor_motion_reset();
 8005b56:	f7ff fca1 	bl	800549c <motor_motion_reset>
				break;
 8005b5a:	e070      	b.n	8005c3e <motor_turn_process+0x26a>
			}

			if(motor.motor_flag.stop_mode == ENABLE)
 8005b5c:	4b7e      	ldr	r3, [pc, #504]	@ (8005d58 <motor_turn_process+0x384>)
 8005b5e:	7a1b      	ldrb	r3, [r3, #8]
 8005b60:	2b01      	cmp	r3, #1
 8005b62:	d112      	bne.n	8005b8a <motor_turn_process+0x1b6>
			{
	    		HAL_GPIO_WritePin(MOTOR_DRIVE_2_GPIO_Port, MOTOR_DRIVE_2_Pin, 0);
 8005b64:	2380      	movs	r3, #128	@ 0x80
 8005b66:	019b      	lsls	r3, r3, #6
 8005b68:	487c      	ldr	r0, [pc, #496]	@ (8005d5c <motor_turn_process+0x388>)
 8005b6a:	2200      	movs	r2, #0
 8005b6c:	0019      	movs	r1, r3
 8005b6e:	f7fd fc04 	bl	800337a <HAL_GPIO_WritePin>
	    		HAL_GPIO_WritePin(MOTOR_DRIVE_1_GPIO_Port, MOTOR_DRIVE_1_Pin, 0);
 8005b72:	2380      	movs	r3, #128	@ 0x80
 8005b74:	015b      	lsls	r3, r3, #5
 8005b76:	4879      	ldr	r0, [pc, #484]	@ (8005d5c <motor_turn_process+0x388>)
 8005b78:	2200      	movs	r2, #0
 8005b7a:	0019      	movs	r1, r3
 8005b7c:	f7fd fbfd 	bl	800337a <HAL_GPIO_WritePin>
				user_flash_write(&fobj); //motorun auto moddan stop moduna güncellenmesi
 8005b80:	4b7a      	ldr	r3, [pc, #488]	@ (8005d6c <motor_turn_process+0x398>)
 8005b82:	0018      	movs	r0, r3
 8005b84:	f000 fc62 	bl	800644c <user_flash_write>
	    		break;
 8005b88:	e059      	b.n	8005c3e <motor_turn_process+0x26a>
			}
			else if(motor.motor_flag.stop_mode == DISABLE)
 8005b8a:	4b73      	ldr	r3, [pc, #460]	@ (8005d58 <motor_turn_process+0x384>)
 8005b8c:	7a1b      	ldrb	r3, [r3, #8]
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d148      	bne.n	8005c24 <motor_turn_process+0x250>
			{
				start_time = HAL_GetTick();
 8005b92:	f7fd f8db 	bl	8002d4c <HAL_GetTick>
 8005b96:	0003      	movs	r3, r0
 8005b98:	607b      	str	r3, [r7, #4]
	    		HAL_GPIO_WritePin(MOTOR_DRIVE_1_GPIO_Port, MOTOR_DRIVE_1_Pin, 0);
 8005b9a:	2380      	movs	r3, #128	@ 0x80
 8005b9c:	015b      	lsls	r3, r3, #5
 8005b9e:	486f      	ldr	r0, [pc, #444]	@ (8005d5c <motor_turn_process+0x388>)
 8005ba0:	2200      	movs	r2, #0
 8005ba2:	0019      	movs	r1, r3
 8005ba4:	f7fd fbe9 	bl	800337a <HAL_GPIO_WritePin>
	    		HAL_Delay(1);
 8005ba8:	2001      	movs	r0, #1
 8005baa:	f7fd f8d9 	bl	8002d60 <HAL_Delay>
	    		HAL_GPIO_WritePin(MOTOR_DRIVE_2_GPIO_Port, MOTOR_DRIVE_2_Pin, 1);
 8005bae:	2380      	movs	r3, #128	@ 0x80
 8005bb0:	019b      	lsls	r3, r3, #6
 8005bb2:	486a      	ldr	r0, [pc, #424]	@ (8005d5c <motor_turn_process+0x388>)
 8005bb4:	2201      	movs	r2, #1
 8005bb6:	0019      	movs	r1, r3
 8005bb8:	f7fd fbdf 	bl	800337a <HAL_GPIO_WritePin>

			    while((HAL_GetTick() - start_time) < delay)
 8005bbc:	e023      	b.n	8005c06 <motor_turn_process+0x232>
			    {
			    	if(motor.motor_flag.stop_mode == ENABLE)
 8005bbe:	4b66      	ldr	r3, [pc, #408]	@ (8005d58 <motor_turn_process+0x384>)
 8005bc0:	7a1b      	ldrb	r3, [r3, #8]
 8005bc2:	2b01      	cmp	r3, #1
 8005bc4:	d112      	bne.n	8005bec <motor_turn_process+0x218>
			    	{
			    		HAL_GPIO_WritePin(MOTOR_DRIVE_2_GPIO_Port, MOTOR_DRIVE_2_Pin, 0);
 8005bc6:	2380      	movs	r3, #128	@ 0x80
 8005bc8:	019b      	lsls	r3, r3, #6
 8005bca:	4864      	ldr	r0, [pc, #400]	@ (8005d5c <motor_turn_process+0x388>)
 8005bcc:	2200      	movs	r2, #0
 8005bce:	0019      	movs	r1, r3
 8005bd0:	f7fd fbd3 	bl	800337a <HAL_GPIO_WritePin>
			    		HAL_GPIO_WritePin(MOTOR_DRIVE_1_GPIO_Port, MOTOR_DRIVE_1_Pin, 0);
 8005bd4:	2380      	movs	r3, #128	@ 0x80
 8005bd6:	015b      	lsls	r3, r3, #5
 8005bd8:	4860      	ldr	r0, [pc, #384]	@ (8005d5c <motor_turn_process+0x388>)
 8005bda:	2200      	movs	r2, #0
 8005bdc:	0019      	movs	r1, r3
 8005bde:	f7fd fbcc 	bl	800337a <HAL_GPIO_WritePin>
						user_flash_write(&fobj); //motorun auto moddan stop moduna güncellenmesi
 8005be2:	4b62      	ldr	r3, [pc, #392]	@ (8005d6c <motor_turn_process+0x398>)
 8005be4:	0018      	movs	r0, r3
 8005be6:	f000 fc31 	bl	800644c <user_flash_write>
			    		break;
 8005bea:	e01b      	b.n	8005c24 <motor_turn_process+0x250>
			    	}
			    	else if(motor.test.test_status == ENABLE)
 8005bec:	4b5a      	ldr	r3, [pc, #360]	@ (8005d58 <motor_turn_process+0x384>)
 8005bee:	7c1b      	ldrb	r3, [r3, #16]
 8005bf0:	2b01      	cmp	r3, #1
 8005bf2:	d102      	bne.n	8005bfa <motor_turn_process+0x226>
			    	{
			    		motor_motion_reset();
 8005bf4:	f7ff fc52 	bl	800549c <motor_motion_reset>
			    		break;
 8005bf8:	e014      	b.n	8005c24 <motor_turn_process+0x250>
			    	}
			    	else
			    	{
			    		motor_motion_process(); //motor otomatik moddayken de eğer başka bir kullanıcı komutu gelirse onu çalıştırır
 8005bfa:	f7ff fedd 	bl	80059b8 <motor_motion_process>
			    		user_flash_write(&fobj); // motor auto modda iken herhangi bir komut gelirse güncellemek için
 8005bfe:	4b5b      	ldr	r3, [pc, #364]	@ (8005d6c <motor_turn_process+0x398>)
 8005c00:	0018      	movs	r0, r3
 8005c02:	f000 fc23 	bl	800644c <user_flash_write>
			    while((HAL_GetTick() - start_time) < delay)
 8005c06:	f7fd f8a1 	bl	8002d4c <HAL_GetTick>
 8005c0a:	0002      	movs	r2, r0
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	1ad3      	subs	r3, r2, r3
 8005c10:	0018      	movs	r0, r3
 8005c12:	f7fa fdb7 	bl	8000784 <__aeabi_ui2f>
 8005c16:	1c03      	adds	r3, r0, #0
 8005c18:	1c19      	adds	r1, r3, #0
 8005c1a:	68b8      	ldr	r0, [r7, #8]
 8005c1c:	f7fa fc6a 	bl	80004f4 <__aeabi_fcmpgt>
 8005c20:	1e03      	subs	r3, r0, #0
 8005c22:	d1cc      	bne.n	8005bbe <motor_turn_process+0x1ea>
		for(uint8_t turn=0;turn<motor.motor_flag.backward;turn++)
 8005c24:	2116      	movs	r1, #22
 8005c26:	187b      	adds	r3, r7, r1
 8005c28:	781a      	ldrb	r2, [r3, #0]
 8005c2a:	187b      	adds	r3, r7, r1
 8005c2c:	3201      	adds	r2, #1
 8005c2e:	701a      	strb	r2, [r3, #0]
 8005c30:	4b49      	ldr	r3, [pc, #292]	@ (8005d58 <motor_turn_process+0x384>)
 8005c32:	79db      	ldrb	r3, [r3, #7]
 8005c34:	2216      	movs	r2, #22
 8005c36:	18ba      	adds	r2, r7, r2
 8005c38:	7812      	ldrb	r2, [r2, #0]
 8005c3a:	429a      	cmp	r2, r3
 8005c3c:	d387      	bcc.n	8005b4e <motor_turn_process+0x17a>
			    	}
			    }
			}
		}

		HAL_GPIO_WritePin(MOTOR_DRIVE_2_GPIO_Port, MOTOR_DRIVE_2_Pin, 0);
 8005c3e:	2380      	movs	r3, #128	@ 0x80
 8005c40:	019b      	lsls	r3, r3, #6
 8005c42:	4846      	ldr	r0, [pc, #280]	@ (8005d5c <motor_turn_process+0x388>)
 8005c44:	2200      	movs	r2, #0
 8005c46:	0019      	movs	r1, r3
 8005c48:	f7fd fb97 	bl	800337a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MOTOR_DRIVE_1_GPIO_Port, MOTOR_DRIVE_1_Pin, 0);
 8005c4c:	2380      	movs	r3, #128	@ 0x80
 8005c4e:	015b      	lsls	r3, r3, #5
 8005c50:	4842      	ldr	r0, [pc, #264]	@ (8005d5c <motor_turn_process+0x388>)
 8005c52:	2200      	movs	r2, #0
 8005c54:	0019      	movs	r1, r3
 8005c56:	f7fd fb90 	bl	800337a <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(MOTOR_DRIVE_2_GPIO_Port, MOTOR_DRIVE_2_Pin, 0);		//Manuel mod bitince motor sıfırlanmalıdır
	HAL_GPIO_WritePin(MOTOR_DRIVE_1_GPIO_Port, MOTOR_DRIVE_1_Pin, 0);
	//motor.motor_flag.manuel_mode = DISABLE;	//Kullanıcı motoru manuel modda çalıştırmak için 1 kere daha komut göndermelidir
  }
}
 8005c5a:	e14c      	b.n	8005ef6 <motor_turn_process+0x522>
	else if(motor.motor_flag.manuel_mode == ENABLE)
 8005c5c:	4b3e      	ldr	r3, [pc, #248]	@ (8005d58 <motor_turn_process+0x384>)
 8005c5e:	795b      	ldrb	r3, [r3, #5]
 8005c60:	2b01      	cmp	r3, #1
 8005c62:	d000      	beq.n	8005c66 <motor_turn_process+0x292>
 8005c64:	e147      	b.n	8005ef6 <motor_turn_process+0x522>
		HAL_GPIO_WritePin(MOTOR_DRIVE_1_GPIO_Port, MOTOR_DRIVE_1_Pin, 0);
 8005c66:	2380      	movs	r3, #128	@ 0x80
 8005c68:	015b      	lsls	r3, r3, #5
 8005c6a:	483c      	ldr	r0, [pc, #240]	@ (8005d5c <motor_turn_process+0x388>)
 8005c6c:	2200      	movs	r2, #0
 8005c6e:	0019      	movs	r1, r3
 8005c70:	f7fd fb83 	bl	800337a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MOTOR_DRIVE_2_GPIO_Port, MOTOR_DRIVE_2_Pin, 0);
 8005c74:	2380      	movs	r3, #128	@ 0x80
 8005c76:	019b      	lsls	r3, r3, #6
 8005c78:	4838      	ldr	r0, [pc, #224]	@ (8005d5c <motor_turn_process+0x388>)
 8005c7a:	2200      	movs	r2, #0
 8005c7c:	0019      	movs	r1, r3
 8005c7e:	f7fd fb7c 	bl	800337a <HAL_GPIO_WritePin>
	    float delay = (float)(MOTOR_SPEED_MAX_DELAY - (39.2156 * motor.motor_flag.speed)); //Bu değer min 0 max 255 olabilir
 8005c82:	4b35      	ldr	r3, [pc, #212]	@ (8005d58 <motor_turn_process+0x384>)
 8005c84:	7a5b      	ldrb	r3, [r3, #9]
 8005c86:	0018      	movs	r0, r3
 8005c88:	f7fc fc28 	bl	80024dc <__aeabi_i2d>
 8005c8c:	4a34      	ldr	r2, [pc, #208]	@ (8005d60 <motor_turn_process+0x38c>)
 8005c8e:	4b35      	ldr	r3, [pc, #212]	@ (8005d64 <motor_turn_process+0x390>)
 8005c90:	f7fb fd62 	bl	8001758 <__aeabi_dmul>
 8005c94:	0002      	movs	r2, r0
 8005c96:	000b      	movs	r3, r1
 8005c98:	2000      	movs	r0, #0
 8005c9a:	4933      	ldr	r1, [pc, #204]	@ (8005d68 <motor_turn_process+0x394>)
 8005c9c:	f7fc f824 	bl	8001ce8 <__aeabi_dsub>
 8005ca0:	0002      	movs	r2, r0
 8005ca2:	000b      	movs	r3, r1
 8005ca4:	0010      	movs	r0, r2
 8005ca6:	0019      	movs	r1, r3
 8005ca8:	f7fc fc6a 	bl	8002580 <__aeabi_d2f>
 8005cac:	1c03      	adds	r3, r0, #0
 8005cae:	613b      	str	r3, [r7, #16]
		for(uint8_t turn=0;turn<motor.motor_flag.forward;turn++)
 8005cb0:	2315      	movs	r3, #21
 8005cb2:	18fb      	adds	r3, r7, r3
 8005cb4:	2200      	movs	r2, #0
 8005cb6:	701a      	strb	r2, [r3, #0]
 8005cb8:	e07c      	b.n	8005db4 <motor_turn_process+0x3e0>
			if(motor.test.test_status == ENABLE)
 8005cba:	4b27      	ldr	r3, [pc, #156]	@ (8005d58 <motor_turn_process+0x384>)
 8005cbc:	7c1b      	ldrb	r3, [r3, #16]
 8005cbe:	2b01      	cmp	r3, #1
 8005cc0:	d102      	bne.n	8005cc8 <motor_turn_process+0x2f4>
				motor_motion_reset();
 8005cc2:	f7ff fbeb 	bl	800549c <motor_motion_reset>
				break;
 8005cc6:	e07d      	b.n	8005dc4 <motor_turn_process+0x3f0>
			if(motor.motor_flag.stop_mode == ENABLE)
 8005cc8:	4b23      	ldr	r3, [pc, #140]	@ (8005d58 <motor_turn_process+0x384>)
 8005cca:	7a1b      	ldrb	r3, [r3, #8]
 8005ccc:	2b01      	cmp	r3, #1
 8005cce:	d112      	bne.n	8005cf6 <motor_turn_process+0x322>
	    		HAL_GPIO_WritePin(MOTOR_DRIVE_2_GPIO_Port, MOTOR_DRIVE_2_Pin, 0);
 8005cd0:	2380      	movs	r3, #128	@ 0x80
 8005cd2:	019b      	lsls	r3, r3, #6
 8005cd4:	4821      	ldr	r0, [pc, #132]	@ (8005d5c <motor_turn_process+0x388>)
 8005cd6:	2200      	movs	r2, #0
 8005cd8:	0019      	movs	r1, r3
 8005cda:	f7fd fb4e 	bl	800337a <HAL_GPIO_WritePin>
	    		HAL_GPIO_WritePin(MOTOR_DRIVE_1_GPIO_Port, MOTOR_DRIVE_1_Pin, 0);
 8005cde:	2380      	movs	r3, #128	@ 0x80
 8005ce0:	015b      	lsls	r3, r3, #5
 8005ce2:	481e      	ldr	r0, [pc, #120]	@ (8005d5c <motor_turn_process+0x388>)
 8005ce4:	2200      	movs	r2, #0
 8005ce6:	0019      	movs	r1, r3
 8005ce8:	f7fd fb47 	bl	800337a <HAL_GPIO_WritePin>
				user_flash_write(&fobj); //motorun manuel moddan stop moduna güncellenmesi
 8005cec:	4b1f      	ldr	r3, [pc, #124]	@ (8005d6c <motor_turn_process+0x398>)
 8005cee:	0018      	movs	r0, r3
 8005cf0:	f000 fbac 	bl	800644c <user_flash_write>
	    		break;
 8005cf4:	e066      	b.n	8005dc4 <motor_turn_process+0x3f0>
			else if(motor.motor_flag.stop_mode == DISABLE)
 8005cf6:	4b18      	ldr	r3, [pc, #96]	@ (8005d58 <motor_turn_process+0x384>)
 8005cf8:	7a1b      	ldrb	r3, [r3, #8]
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d154      	bne.n	8005da8 <motor_turn_process+0x3d4>
				start_time = HAL_GetTick();
 8005cfe:	f7fd f825 	bl	8002d4c <HAL_GetTick>
 8005d02:	0003      	movs	r3, r0
 8005d04:	60fb      	str	r3, [r7, #12]
	    		HAL_GPIO_WritePin(MOTOR_DRIVE_2_GPIO_Port, MOTOR_DRIVE_2_Pin, 0);
 8005d06:	2380      	movs	r3, #128	@ 0x80
 8005d08:	019b      	lsls	r3, r3, #6
 8005d0a:	4814      	ldr	r0, [pc, #80]	@ (8005d5c <motor_turn_process+0x388>)
 8005d0c:	2200      	movs	r2, #0
 8005d0e:	0019      	movs	r1, r3
 8005d10:	f7fd fb33 	bl	800337a <HAL_GPIO_WritePin>
	    		HAL_Delay(1);
 8005d14:	2001      	movs	r0, #1
 8005d16:	f7fd f823 	bl	8002d60 <HAL_Delay>
	    		HAL_GPIO_WritePin(MOTOR_DRIVE_1_GPIO_Port, MOTOR_DRIVE_1_Pin, 1);
 8005d1a:	2380      	movs	r3, #128	@ 0x80
 8005d1c:	015b      	lsls	r3, r3, #5
 8005d1e:	480f      	ldr	r0, [pc, #60]	@ (8005d5c <motor_turn_process+0x388>)
 8005d20:	2201      	movs	r2, #1
 8005d22:	0019      	movs	r1, r3
 8005d24:	f7fd fb29 	bl	800337a <HAL_GPIO_WritePin>
			    while((HAL_GetTick() - start_time) < delay)
 8005d28:	e02f      	b.n	8005d8a <motor_turn_process+0x3b6>
			    	if(motor.motor_flag.stop_mode == ENABLE)
 8005d2a:	4b0b      	ldr	r3, [pc, #44]	@ (8005d58 <motor_turn_process+0x384>)
 8005d2c:	7a1b      	ldrb	r3, [r3, #8]
 8005d2e:	2b01      	cmp	r3, #1
 8005d30:	d11e      	bne.n	8005d70 <motor_turn_process+0x39c>
			    		HAL_GPIO_WritePin(MOTOR_DRIVE_2_GPIO_Port, MOTOR_DRIVE_2_Pin, 0);
 8005d32:	2380      	movs	r3, #128	@ 0x80
 8005d34:	019b      	lsls	r3, r3, #6
 8005d36:	4809      	ldr	r0, [pc, #36]	@ (8005d5c <motor_turn_process+0x388>)
 8005d38:	2200      	movs	r2, #0
 8005d3a:	0019      	movs	r1, r3
 8005d3c:	f7fd fb1d 	bl	800337a <HAL_GPIO_WritePin>
			    		HAL_GPIO_WritePin(MOTOR_DRIVE_1_GPIO_Port, MOTOR_DRIVE_1_Pin, 0);
 8005d40:	2380      	movs	r3, #128	@ 0x80
 8005d42:	015b      	lsls	r3, r3, #5
 8005d44:	4805      	ldr	r0, [pc, #20]	@ (8005d5c <motor_turn_process+0x388>)
 8005d46:	2200      	movs	r2, #0
 8005d48:	0019      	movs	r1, r3
 8005d4a:	f7fd fb16 	bl	800337a <HAL_GPIO_WritePin>
						user_flash_write(&fobj); //motorun manuel moddan stop moduna güncellenmesi
 8005d4e:	4b07      	ldr	r3, [pc, #28]	@ (8005d6c <motor_turn_process+0x398>)
 8005d50:	0018      	movs	r0, r3
 8005d52:	f000 fb7b 	bl	800644c <user_flash_write>
			    		break;
 8005d56:	e027      	b.n	8005da8 <motor_turn_process+0x3d4>
 8005d58:	20000290 	.word	0x20000290
 8005d5c:	48000400 	.word	0x48000400
 8005d60:	c7e28241 	.word	0xc7e28241
 8005d64:	40439b98 	.word	0x40439b98
 8005d68:	40c38800 	.word	0x40c38800
 8005d6c:	200004a4 	.word	0x200004a4
			    	else if(motor.test.test_status == ENABLE)
 8005d70:	4b63      	ldr	r3, [pc, #396]	@ (8005f00 <motor_turn_process+0x52c>)
 8005d72:	7c1b      	ldrb	r3, [r3, #16]
 8005d74:	2b01      	cmp	r3, #1
 8005d76:	d102      	bne.n	8005d7e <motor_turn_process+0x3aa>
			    		motor_motion_reset();
 8005d78:	f7ff fb90 	bl	800549c <motor_motion_reset>
			    		break;
 8005d7c:	e014      	b.n	8005da8 <motor_turn_process+0x3d4>
			    		motor_motion_process();
 8005d7e:	f7ff fe1b 	bl	80059b8 <motor_motion_process>
			    		user_flash_write(&fobj); // motor auto modda iken herhangi bir komut gelirse güncellemek için
 8005d82:	4b60      	ldr	r3, [pc, #384]	@ (8005f04 <motor_turn_process+0x530>)
 8005d84:	0018      	movs	r0, r3
 8005d86:	f000 fb61 	bl	800644c <user_flash_write>
			    while((HAL_GetTick() - start_time) < delay)
 8005d8a:	f7fc ffdf 	bl	8002d4c <HAL_GetTick>
 8005d8e:	0002      	movs	r2, r0
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	1ad3      	subs	r3, r2, r3
 8005d94:	0018      	movs	r0, r3
 8005d96:	f7fa fcf5 	bl	8000784 <__aeabi_ui2f>
 8005d9a:	1c03      	adds	r3, r0, #0
 8005d9c:	1c19      	adds	r1, r3, #0
 8005d9e:	6938      	ldr	r0, [r7, #16]
 8005da0:	f7fa fba8 	bl	80004f4 <__aeabi_fcmpgt>
 8005da4:	1e03      	subs	r3, r0, #0
 8005da6:	d1c0      	bne.n	8005d2a <motor_turn_process+0x356>
		for(uint8_t turn=0;turn<motor.motor_flag.forward;turn++)
 8005da8:	2115      	movs	r1, #21
 8005daa:	187b      	adds	r3, r7, r1
 8005dac:	781a      	ldrb	r2, [r3, #0]
 8005dae:	187b      	adds	r3, r7, r1
 8005db0:	3201      	adds	r2, #1
 8005db2:	701a      	strb	r2, [r3, #0]
 8005db4:	4b52      	ldr	r3, [pc, #328]	@ (8005f00 <motor_turn_process+0x52c>)
 8005db6:	799b      	ldrb	r3, [r3, #6]
 8005db8:	2215      	movs	r2, #21
 8005dba:	18ba      	adds	r2, r7, r2
 8005dbc:	7812      	ldrb	r2, [r2, #0]
 8005dbe:	429a      	cmp	r2, r3
 8005dc0:	d200      	bcs.n	8005dc4 <motor_turn_process+0x3f0>
 8005dc2:	e77a      	b.n	8005cba <motor_turn_process+0x2e6>
		HAL_GPIO_WritePin(MOTOR_DRIVE_2_GPIO_Port, MOTOR_DRIVE_2_Pin, 0);
 8005dc4:	2380      	movs	r3, #128	@ 0x80
 8005dc6:	019b      	lsls	r3, r3, #6
 8005dc8:	484f      	ldr	r0, [pc, #316]	@ (8005f08 <motor_turn_process+0x534>)
 8005dca:	2200      	movs	r2, #0
 8005dcc:	0019      	movs	r1, r3
 8005dce:	f7fd fad4 	bl	800337a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MOTOR_DRIVE_1_GPIO_Port, MOTOR_DRIVE_1_Pin, 0);
 8005dd2:	2380      	movs	r3, #128	@ 0x80
 8005dd4:	015b      	lsls	r3, r3, #5
 8005dd6:	484c      	ldr	r0, [pc, #304]	@ (8005f08 <motor_turn_process+0x534>)
 8005dd8:	2200      	movs	r2, #0
 8005dda:	0019      	movs	r1, r3
 8005ddc:	f7fd facd 	bl	800337a <HAL_GPIO_WritePin>
		for(uint8_t turn=0;turn<motor.motor_flag.backward;turn++)
 8005de0:	2314      	movs	r3, #20
 8005de2:	18fb      	adds	r3, r7, r3
 8005de4:	2200      	movs	r2, #0
 8005de6:	701a      	strb	r2, [r3, #0]
 8005de8:	e070      	b.n	8005ecc <motor_turn_process+0x4f8>
			if(motor.test.test_status == ENABLE)
 8005dea:	4b45      	ldr	r3, [pc, #276]	@ (8005f00 <motor_turn_process+0x52c>)
 8005dec:	7c1b      	ldrb	r3, [r3, #16]
 8005dee:	2b01      	cmp	r3, #1
 8005df0:	d102      	bne.n	8005df8 <motor_turn_process+0x424>
				motor_motion_reset();
 8005df2:	f7ff fb53 	bl	800549c <motor_motion_reset>
				break;
 8005df6:	e070      	b.n	8005eda <motor_turn_process+0x506>
			if(motor.motor_flag.stop_mode == ENABLE)
 8005df8:	4b41      	ldr	r3, [pc, #260]	@ (8005f00 <motor_turn_process+0x52c>)
 8005dfa:	7a1b      	ldrb	r3, [r3, #8]
 8005dfc:	2b01      	cmp	r3, #1
 8005dfe:	d112      	bne.n	8005e26 <motor_turn_process+0x452>
	    		HAL_GPIO_WritePin(MOTOR_DRIVE_2_GPIO_Port, MOTOR_DRIVE_2_Pin, 0);
 8005e00:	2380      	movs	r3, #128	@ 0x80
 8005e02:	019b      	lsls	r3, r3, #6
 8005e04:	4840      	ldr	r0, [pc, #256]	@ (8005f08 <motor_turn_process+0x534>)
 8005e06:	2200      	movs	r2, #0
 8005e08:	0019      	movs	r1, r3
 8005e0a:	f7fd fab6 	bl	800337a <HAL_GPIO_WritePin>
	    		HAL_GPIO_WritePin(MOTOR_DRIVE_1_GPIO_Port, MOTOR_DRIVE_1_Pin, 0);
 8005e0e:	2380      	movs	r3, #128	@ 0x80
 8005e10:	015b      	lsls	r3, r3, #5
 8005e12:	483d      	ldr	r0, [pc, #244]	@ (8005f08 <motor_turn_process+0x534>)
 8005e14:	2200      	movs	r2, #0
 8005e16:	0019      	movs	r1, r3
 8005e18:	f7fd faaf 	bl	800337a <HAL_GPIO_WritePin>
				user_flash_write(&fobj); //motorun manuel moddan stop moduna güncellenmesi
 8005e1c:	4b39      	ldr	r3, [pc, #228]	@ (8005f04 <motor_turn_process+0x530>)
 8005e1e:	0018      	movs	r0, r3
 8005e20:	f000 fb14 	bl	800644c <user_flash_write>
	    		break;
 8005e24:	e059      	b.n	8005eda <motor_turn_process+0x506>
			else if(motor.motor_flag.stop_mode == DISABLE)
 8005e26:	4b36      	ldr	r3, [pc, #216]	@ (8005f00 <motor_turn_process+0x52c>)
 8005e28:	7a1b      	ldrb	r3, [r3, #8]
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d148      	bne.n	8005ec0 <motor_turn_process+0x4ec>
				start_time = HAL_GetTick();
 8005e2e:	f7fc ff8d 	bl	8002d4c <HAL_GetTick>
 8005e32:	0003      	movs	r3, r0
 8005e34:	60fb      	str	r3, [r7, #12]
	    		HAL_GPIO_WritePin(MOTOR_DRIVE_1_GPIO_Port, MOTOR_DRIVE_1_Pin, 0);
 8005e36:	2380      	movs	r3, #128	@ 0x80
 8005e38:	015b      	lsls	r3, r3, #5
 8005e3a:	4833      	ldr	r0, [pc, #204]	@ (8005f08 <motor_turn_process+0x534>)
 8005e3c:	2200      	movs	r2, #0
 8005e3e:	0019      	movs	r1, r3
 8005e40:	f7fd fa9b 	bl	800337a <HAL_GPIO_WritePin>
	    		HAL_Delay(1);
 8005e44:	2001      	movs	r0, #1
 8005e46:	f7fc ff8b 	bl	8002d60 <HAL_Delay>
	    		HAL_GPIO_WritePin(MOTOR_DRIVE_2_GPIO_Port, MOTOR_DRIVE_2_Pin, 1);
 8005e4a:	2380      	movs	r3, #128	@ 0x80
 8005e4c:	019b      	lsls	r3, r3, #6
 8005e4e:	482e      	ldr	r0, [pc, #184]	@ (8005f08 <motor_turn_process+0x534>)
 8005e50:	2201      	movs	r2, #1
 8005e52:	0019      	movs	r1, r3
 8005e54:	f7fd fa91 	bl	800337a <HAL_GPIO_WritePin>
			    while((HAL_GetTick() - start_time) < delay)
 8005e58:	e023      	b.n	8005ea2 <motor_turn_process+0x4ce>
			    	if(motor.motor_flag.stop_mode == ENABLE)
 8005e5a:	4b29      	ldr	r3, [pc, #164]	@ (8005f00 <motor_turn_process+0x52c>)
 8005e5c:	7a1b      	ldrb	r3, [r3, #8]
 8005e5e:	2b01      	cmp	r3, #1
 8005e60:	d112      	bne.n	8005e88 <motor_turn_process+0x4b4>
			    		HAL_GPIO_WritePin(MOTOR_DRIVE_2_GPIO_Port, MOTOR_DRIVE_2_Pin, 0);
 8005e62:	2380      	movs	r3, #128	@ 0x80
 8005e64:	019b      	lsls	r3, r3, #6
 8005e66:	4828      	ldr	r0, [pc, #160]	@ (8005f08 <motor_turn_process+0x534>)
 8005e68:	2200      	movs	r2, #0
 8005e6a:	0019      	movs	r1, r3
 8005e6c:	f7fd fa85 	bl	800337a <HAL_GPIO_WritePin>
			    		HAL_GPIO_WritePin(MOTOR_DRIVE_1_GPIO_Port, MOTOR_DRIVE_1_Pin, 0);
 8005e70:	2380      	movs	r3, #128	@ 0x80
 8005e72:	015b      	lsls	r3, r3, #5
 8005e74:	4824      	ldr	r0, [pc, #144]	@ (8005f08 <motor_turn_process+0x534>)
 8005e76:	2200      	movs	r2, #0
 8005e78:	0019      	movs	r1, r3
 8005e7a:	f7fd fa7e 	bl	800337a <HAL_GPIO_WritePin>
						user_flash_write(&fobj); //motorun manuel moddan stop moduna güncellenmesi
 8005e7e:	4b21      	ldr	r3, [pc, #132]	@ (8005f04 <motor_turn_process+0x530>)
 8005e80:	0018      	movs	r0, r3
 8005e82:	f000 fae3 	bl	800644c <user_flash_write>
			    		break;
 8005e86:	e01b      	b.n	8005ec0 <motor_turn_process+0x4ec>
			    	else if(motor.test.test_status == ENABLE)
 8005e88:	4b1d      	ldr	r3, [pc, #116]	@ (8005f00 <motor_turn_process+0x52c>)
 8005e8a:	7c1b      	ldrb	r3, [r3, #16]
 8005e8c:	2b01      	cmp	r3, #1
 8005e8e:	d102      	bne.n	8005e96 <motor_turn_process+0x4c2>
			    		motor_motion_reset();
 8005e90:	f7ff fb04 	bl	800549c <motor_motion_reset>
			    		break;
 8005e94:	e014      	b.n	8005ec0 <motor_turn_process+0x4ec>
			    		motor_motion_process(); //motor manuel moddayken de eğer başka bir kullanıcı komutu gelirse onu çalıştırır
 8005e96:	f7ff fd8f 	bl	80059b8 <motor_motion_process>
			    		user_flash_write(&fobj); // motor manuel modda iken herhangi bir komut gelirse güncellemek için
 8005e9a:	4b1a      	ldr	r3, [pc, #104]	@ (8005f04 <motor_turn_process+0x530>)
 8005e9c:	0018      	movs	r0, r3
 8005e9e:	f000 fad5 	bl	800644c <user_flash_write>
			    while((HAL_GetTick() - start_time) < delay)
 8005ea2:	f7fc ff53 	bl	8002d4c <HAL_GetTick>
 8005ea6:	0002      	movs	r2, r0
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	1ad3      	subs	r3, r2, r3
 8005eac:	0018      	movs	r0, r3
 8005eae:	f7fa fc69 	bl	8000784 <__aeabi_ui2f>
 8005eb2:	1c03      	adds	r3, r0, #0
 8005eb4:	1c19      	adds	r1, r3, #0
 8005eb6:	6938      	ldr	r0, [r7, #16]
 8005eb8:	f7fa fb1c 	bl	80004f4 <__aeabi_fcmpgt>
 8005ebc:	1e03      	subs	r3, r0, #0
 8005ebe:	d1cc      	bne.n	8005e5a <motor_turn_process+0x486>
		for(uint8_t turn=0;turn<motor.motor_flag.backward;turn++)
 8005ec0:	2114      	movs	r1, #20
 8005ec2:	187b      	adds	r3, r7, r1
 8005ec4:	781a      	ldrb	r2, [r3, #0]
 8005ec6:	187b      	adds	r3, r7, r1
 8005ec8:	3201      	adds	r2, #1
 8005eca:	701a      	strb	r2, [r3, #0]
 8005ecc:	4b0c      	ldr	r3, [pc, #48]	@ (8005f00 <motor_turn_process+0x52c>)
 8005ece:	79db      	ldrb	r3, [r3, #7]
 8005ed0:	2214      	movs	r2, #20
 8005ed2:	18ba      	adds	r2, r7, r2
 8005ed4:	7812      	ldrb	r2, [r2, #0]
 8005ed6:	429a      	cmp	r2, r3
 8005ed8:	d387      	bcc.n	8005dea <motor_turn_process+0x416>
	HAL_GPIO_WritePin(MOTOR_DRIVE_2_GPIO_Port, MOTOR_DRIVE_2_Pin, 0);		//Manuel mod bitince motor sıfırlanmalıdır
 8005eda:	2380      	movs	r3, #128	@ 0x80
 8005edc:	019b      	lsls	r3, r3, #6
 8005ede:	480a      	ldr	r0, [pc, #40]	@ (8005f08 <motor_turn_process+0x534>)
 8005ee0:	2200      	movs	r2, #0
 8005ee2:	0019      	movs	r1, r3
 8005ee4:	f7fd fa49 	bl	800337a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MOTOR_DRIVE_1_GPIO_Port, MOTOR_DRIVE_1_Pin, 0);
 8005ee8:	2380      	movs	r3, #128	@ 0x80
 8005eea:	015b      	lsls	r3, r3, #5
 8005eec:	4806      	ldr	r0, [pc, #24]	@ (8005f08 <motor_turn_process+0x534>)
 8005eee:	2200      	movs	r2, #0
 8005ef0:	0019      	movs	r1, r3
 8005ef2:	f7fd fa42 	bl	800337a <HAL_GPIO_WritePin>
}
 8005ef6:	46c0      	nop			@ (mov r8, r8)
 8005ef8:	46bd      	mov	sp, r7
 8005efa:	b006      	add	sp, #24
 8005efc:	bd80      	pop	{r7, pc}
 8005efe:	46c0      	nop			@ (mov r8, r8)
 8005f00:	20000290 	.word	0x20000290
 8005f04:	200004a4 	.word	0x200004a4
 8005f08:	48000400 	.word	0x48000400

08005f0c <crc_16>:
 * string of which the beginning has been passed to the function. The number of
 * bytes to check is also a parameter. The number of the bytes in the string is
 * limited by the constant SIZE_MAX.
 *///CRC-16/ARC

uint16_t crc_16( const unsigned char *input_str, size_t num_bytes ) {
 8005f0c:	b590      	push	{r4, r7, lr}
 8005f0e:	b087      	sub	sp, #28
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	6078      	str	r0, [r7, #4]
 8005f14:	6039      	str	r1, [r7, #0]

	uint16_t crc;
	const unsigned char *ptr;
	size_t a;

	if ( ! crc_tab16_init ) init_crc16_tab();
 8005f16:	4b1b      	ldr	r3, [pc, #108]	@ (8005f84 <crc_16+0x78>)
 8005f18:	781b      	ldrb	r3, [r3, #0]
 8005f1a:	2201      	movs	r2, #1
 8005f1c:	4053      	eors	r3, r2
 8005f1e:	b2db      	uxtb	r3, r3
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d001      	beq.n	8005f28 <crc_16+0x1c>
 8005f24:	f000 f832 	bl	8005f8c <init_crc16_tab>

	crc = CRC_START_16;
 8005f28:	2316      	movs	r3, #22
 8005f2a:	18fb      	adds	r3, r7, r3
 8005f2c:	2200      	movs	r2, #0
 8005f2e:	801a      	strh	r2, [r3, #0]
	ptr = input_str;
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	613b      	str	r3, [r7, #16]

	if ( ptr != NULL ) for (a=0; a<num_bytes; a++) {
 8005f34:	693b      	ldr	r3, [r7, #16]
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d01d      	beq.n	8005f76 <crc_16+0x6a>
 8005f3a:	2300      	movs	r3, #0
 8005f3c:	60fb      	str	r3, [r7, #12]
 8005f3e:	e016      	b.n	8005f6e <crc_16+0x62>

		crc = (crc >> 8) ^ crc_tab16[ (crc ^ (uint16_t) *ptr++) & 0x00FF ];
 8005f40:	2416      	movs	r4, #22
 8005f42:	193b      	adds	r3, r7, r4
 8005f44:	881b      	ldrh	r3, [r3, #0]
 8005f46:	0a1b      	lsrs	r3, r3, #8
 8005f48:	b299      	uxth	r1, r3
 8005f4a:	193b      	adds	r3, r7, r4
 8005f4c:	881a      	ldrh	r2, [r3, #0]
 8005f4e:	693b      	ldr	r3, [r7, #16]
 8005f50:	1c58      	adds	r0, r3, #1
 8005f52:	6138      	str	r0, [r7, #16]
 8005f54:	781b      	ldrb	r3, [r3, #0]
 8005f56:	4053      	eors	r3, r2
 8005f58:	22ff      	movs	r2, #255	@ 0xff
 8005f5a:	401a      	ands	r2, r3
 8005f5c:	4b0a      	ldr	r3, [pc, #40]	@ (8005f88 <crc_16+0x7c>)
 8005f5e:	0052      	lsls	r2, r2, #1
 8005f60:	5ad2      	ldrh	r2, [r2, r3]
 8005f62:	193b      	adds	r3, r7, r4
 8005f64:	404a      	eors	r2, r1
 8005f66:	801a      	strh	r2, [r3, #0]
	if ( ptr != NULL ) for (a=0; a<num_bytes; a++) {
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	3301      	adds	r3, #1
 8005f6c:	60fb      	str	r3, [r7, #12]
 8005f6e:	68fa      	ldr	r2, [r7, #12]
 8005f70:	683b      	ldr	r3, [r7, #0]
 8005f72:	429a      	cmp	r2, r3
 8005f74:	d3e4      	bcc.n	8005f40 <crc_16+0x34>
	}

	return crc;
 8005f76:	2316      	movs	r3, #22
 8005f78:	18fb      	adds	r3, r7, r3
 8005f7a:	881b      	ldrh	r3, [r3, #0]

}  /* crc_16 */
 8005f7c:	0018      	movs	r0, r3
 8005f7e:	46bd      	mov	sp, r7
 8005f80:	b007      	add	sp, #28
 8005f82:	bd90      	pop	{r4, r7, pc}
 8005f84:	200002a3 	.word	0x200002a3
 8005f88:	200002a4 	.word	0x200002a4

08005f8c <init_crc16_tab>:
 * that can be used directly in the XOR arithmetic in the algorithm. This
 * lookup table is calculated by the init_crc16_tab() routine, the first time
 * the CRC function is called.
 */

static void init_crc16_tab( void ) {
 8005f8c:	b580      	push	{r7, lr}
 8005f8e:	b082      	sub	sp, #8
 8005f90:	af00      	add	r7, sp, #0
	uint16_t i;
	uint16_t j;
	uint16_t crc;
	uint16_t c;

	for (i=0; i<256; i++) {
 8005f92:	1dbb      	adds	r3, r7, #6
 8005f94:	2200      	movs	r2, #0
 8005f96:	801a      	strh	r2, [r3, #0]
 8005f98:	e03c      	b.n	8006014 <init_crc16_tab+0x88>

		crc = 0;
 8005f9a:	1cbb      	adds	r3, r7, #2
 8005f9c:	2200      	movs	r2, #0
 8005f9e:	801a      	strh	r2, [r3, #0]
		c   = i;
 8005fa0:	003b      	movs	r3, r7
 8005fa2:	1dba      	adds	r2, r7, #6
 8005fa4:	8812      	ldrh	r2, [r2, #0]
 8005fa6:	801a      	strh	r2, [r3, #0]

		for (j=0; j<8; j++) {
 8005fa8:	1d3b      	adds	r3, r7, #4
 8005faa:	2200      	movs	r2, #0
 8005fac:	801a      	strh	r2, [r3, #0]
 8005fae:	e021      	b.n	8005ff4 <init_crc16_tab+0x68>

			if ( (crc ^ c) & 0x0001 ) crc = ( crc >> 1 ) ^ CRC_POLY_16;
 8005fb0:	1cba      	adds	r2, r7, #2
 8005fb2:	003b      	movs	r3, r7
 8005fb4:	8812      	ldrh	r2, [r2, #0]
 8005fb6:	881b      	ldrh	r3, [r3, #0]
 8005fb8:	4053      	eors	r3, r2
 8005fba:	b29b      	uxth	r3, r3
 8005fbc:	001a      	movs	r2, r3
 8005fbe:	2301      	movs	r3, #1
 8005fc0:	4013      	ands	r3, r2
 8005fc2:	d008      	beq.n	8005fd6 <init_crc16_tab+0x4a>
 8005fc4:	1cbb      	adds	r3, r7, #2
 8005fc6:	881b      	ldrh	r3, [r3, #0]
 8005fc8:	085b      	lsrs	r3, r3, #1
 8005fca:	b29a      	uxth	r2, r3
 8005fcc:	1cbb      	adds	r3, r7, #2
 8005fce:	4917      	ldr	r1, [pc, #92]	@ (800602c <init_crc16_tab+0xa0>)
 8005fd0:	404a      	eors	r2, r1
 8005fd2:	801a      	strh	r2, [r3, #0]
 8005fd4:	e004      	b.n	8005fe0 <init_crc16_tab+0x54>
			else                      crc =   crc >> 1;
 8005fd6:	1cbb      	adds	r3, r7, #2
 8005fd8:	1cba      	adds	r2, r7, #2
 8005fda:	8812      	ldrh	r2, [r2, #0]
 8005fdc:	0852      	lsrs	r2, r2, #1
 8005fde:	801a      	strh	r2, [r3, #0]

			c = c >> 1;
 8005fe0:	003b      	movs	r3, r7
 8005fe2:	003a      	movs	r2, r7
 8005fe4:	8812      	ldrh	r2, [r2, #0]
 8005fe6:	0852      	lsrs	r2, r2, #1
 8005fe8:	801a      	strh	r2, [r3, #0]
		for (j=0; j<8; j++) {
 8005fea:	1d3b      	adds	r3, r7, #4
 8005fec:	881a      	ldrh	r2, [r3, #0]
 8005fee:	1d3b      	adds	r3, r7, #4
 8005ff0:	3201      	adds	r2, #1
 8005ff2:	801a      	strh	r2, [r3, #0]
 8005ff4:	1d3b      	adds	r3, r7, #4
 8005ff6:	881b      	ldrh	r3, [r3, #0]
 8005ff8:	2b07      	cmp	r3, #7
 8005ffa:	d9d9      	bls.n	8005fb0 <init_crc16_tab+0x24>
		}

		crc_tab16[i] = crc;
 8005ffc:	1dbb      	adds	r3, r7, #6
 8005ffe:	881a      	ldrh	r2, [r3, #0]
 8006000:	4b0b      	ldr	r3, [pc, #44]	@ (8006030 <init_crc16_tab+0xa4>)
 8006002:	0052      	lsls	r2, r2, #1
 8006004:	1cb9      	adds	r1, r7, #2
 8006006:	8809      	ldrh	r1, [r1, #0]
 8006008:	52d1      	strh	r1, [r2, r3]
	for (i=0; i<256; i++) {
 800600a:	1dbb      	adds	r3, r7, #6
 800600c:	881a      	ldrh	r2, [r3, #0]
 800600e:	1dbb      	adds	r3, r7, #6
 8006010:	3201      	adds	r2, #1
 8006012:	801a      	strh	r2, [r3, #0]
 8006014:	1dbb      	adds	r3, r7, #6
 8006016:	881b      	ldrh	r3, [r3, #0]
 8006018:	2bff      	cmp	r3, #255	@ 0xff
 800601a:	d9be      	bls.n	8005f9a <init_crc16_tab+0xe>
	}

	crc_tab16_init = true;
 800601c:	4b05      	ldr	r3, [pc, #20]	@ (8006034 <init_crc16_tab+0xa8>)
 800601e:	2201      	movs	r2, #1
 8006020:	701a      	strb	r2, [r3, #0]

}  /* init_crc16_tab */
 8006022:	46c0      	nop			@ (mov r8, r8)
 8006024:	46bd      	mov	sp, r7
 8006026:	b002      	add	sp, #8
 8006028:	bd80      	pop	{r7, pc}
 800602a:	46c0      	nop			@ (mov r8, r8)
 800602c:	ffffa001 	.word	0xffffa001
 8006030:	200002a4 	.word	0x200002a4
 8006034:	200002a3 	.word	0x200002a3

08006038 <write_page>:
static void write_operations(flash_control_t *);
static _Bool two_struct_compare(void);
static void copy_struct(void);

void write_page(uint32_t addr,uint16_t data)
{
 8006038:	b580      	push	{r7, lr}
 800603a:	b082      	sub	sp, #8
 800603c:	af00      	add	r7, sp, #0
 800603e:	6078      	str	r0, [r7, #4]
 8006040:	000a      	movs	r2, r1
 8006042:	1cbb      	adds	r3, r7, #2
 8006044:	801a      	strh	r2, [r3, #0]

	while ((FLASH->SR & FLASH_SR_BSY) != 0) /* (1) */
 8006046:	46c0      	nop			@ (mov r8, r8)
 8006048:	4b18      	ldr	r3, [pc, #96]	@ (80060ac <write_page+0x74>)
 800604a:	68db      	ldr	r3, [r3, #12]
 800604c:	2201      	movs	r2, #1
 800604e:	4013      	ands	r3, r2
 8006050:	d1fa      	bne.n	8006048 <write_page+0x10>
	{
	 /* For robust implementation, add here time-out management */
	}

	if ((FLASH->CR & FLASH_CR_LOCK) != 0) /* (2) */
 8006052:	4b16      	ldr	r3, [pc, #88]	@ (80060ac <write_page+0x74>)
 8006054:	691b      	ldr	r3, [r3, #16]
 8006056:	2280      	movs	r2, #128	@ 0x80
 8006058:	4013      	ands	r3, r2
 800605a:	d005      	beq.n	8006068 <write_page+0x30>
	{
		FLASH->KEYR = 0x45670123; /* (3) */
 800605c:	4b13      	ldr	r3, [pc, #76]	@ (80060ac <write_page+0x74>)
 800605e:	4a14      	ldr	r2, [pc, #80]	@ (80060b0 <write_page+0x78>)
 8006060:	605a      	str	r2, [r3, #4]
		FLASH->KEYR = 0xCDEF89AB;
 8006062:	4b12      	ldr	r3, [pc, #72]	@ (80060ac <write_page+0x74>)
 8006064:	4a13      	ldr	r2, [pc, #76]	@ (80060b4 <write_page+0x7c>)
 8006066:	605a      	str	r2, [r3, #4]
	}

	FLASH->CR |= FLASH_CR_PG; /* (1) */
 8006068:	4b10      	ldr	r3, [pc, #64]	@ (80060ac <write_page+0x74>)
 800606a:	691a      	ldr	r2, [r3, #16]
 800606c:	4b0f      	ldr	r3, [pc, #60]	@ (80060ac <write_page+0x74>)
 800606e:	2101      	movs	r1, #1
 8006070:	430a      	orrs	r2, r1
 8006072:	611a      	str	r2, [r3, #16]

	*(__IO uint16_t*)(addr) = data; /* (2) */
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	1cba      	adds	r2, r7, #2
 8006078:	8812      	ldrh	r2, [r2, #0]
 800607a:	801a      	strh	r2, [r3, #0]

	while ((FLASH->SR & FLASH_SR_BSY) != 0) /* (3) */
 800607c:	46c0      	nop			@ (mov r8, r8)
 800607e:	4b0b      	ldr	r3, [pc, #44]	@ (80060ac <write_page+0x74>)
 8006080:	68db      	ldr	r3, [r3, #12]
 8006082:	2201      	movs	r2, #1
 8006084:	4013      	ands	r3, r2
 8006086:	d1fa      	bne.n	800607e <write_page+0x46>
	{
	/* For robust implementation, add here time-out management */
	}

	if ((FLASH->SR & FLASH_SR_EOP) != 0) /* (4) */
 8006088:	4b08      	ldr	r3, [pc, #32]	@ (80060ac <write_page+0x74>)
 800608a:	68db      	ldr	r3, [r3, #12]
 800608c:	2220      	movs	r2, #32
 800608e:	4013      	ands	r3, r2
 8006090:	d002      	beq.n	8006098 <write_page+0x60>
	{
		FLASH->SR = FLASH_SR_EOP; /* (5) */
 8006092:	4b06      	ldr	r3, [pc, #24]	@ (80060ac <write_page+0x74>)
 8006094:	2220      	movs	r2, #32
 8006096:	60da      	str	r2, [r3, #12]
	else
	{
	 /* Manage the error cases */
	}

	FLASH->CR &= ~FLASH_CR_PG; /* (6) */
 8006098:	4b04      	ldr	r3, [pc, #16]	@ (80060ac <write_page+0x74>)
 800609a:	691a      	ldr	r2, [r3, #16]
 800609c:	4b03      	ldr	r3, [pc, #12]	@ (80060ac <write_page+0x74>)
 800609e:	2101      	movs	r1, #1
 80060a0:	438a      	bics	r2, r1
 80060a2:	611a      	str	r2, [r3, #16]

}
 80060a4:	46c0      	nop			@ (mov r8, r8)
 80060a6:	46bd      	mov	sp, r7
 80060a8:	b002      	add	sp, #8
 80060aa:	bd80      	pop	{r7, pc}
 80060ac:	40022000 	.word	0x40022000
 80060b0:	45670123 	.word	0x45670123
 80060b4:	cdef89ab 	.word	0xcdef89ab

080060b8 <erase_page>:

void erase_page(uint32_t page_addr)
{
 80060b8:	b580      	push	{r7, lr}
 80060ba:	b082      	sub	sp, #8
 80060bc:	af00      	add	r7, sp, #0
 80060be:	6078      	str	r0, [r7, #4]

	while ((FLASH->SR & FLASH_SR_BSY) != 0) /* (1) */
 80060c0:	46c0      	nop			@ (mov r8, r8)
 80060c2:	4b1b      	ldr	r3, [pc, #108]	@ (8006130 <erase_page+0x78>)
 80060c4:	68db      	ldr	r3, [r3, #12]
 80060c6:	2201      	movs	r2, #1
 80060c8:	4013      	ands	r3, r2
 80060ca:	d1fa      	bne.n	80060c2 <erase_page+0xa>
	{
	 /* For robust implementation, add here time-out management */
	}

	if ((FLASH->CR & FLASH_CR_LOCK) != 0) /* (2) */
 80060cc:	4b18      	ldr	r3, [pc, #96]	@ (8006130 <erase_page+0x78>)
 80060ce:	691b      	ldr	r3, [r3, #16]
 80060d0:	2280      	movs	r2, #128	@ 0x80
 80060d2:	4013      	ands	r3, r2
 80060d4:	d005      	beq.n	80060e2 <erase_page+0x2a>
	{
		FLASH->KEYR = 0x45670123; /* (3) */
 80060d6:	4b16      	ldr	r3, [pc, #88]	@ (8006130 <erase_page+0x78>)
 80060d8:	4a16      	ldr	r2, [pc, #88]	@ (8006134 <erase_page+0x7c>)
 80060da:	605a      	str	r2, [r3, #4]
		FLASH->KEYR = 0xCDEF89AB;
 80060dc:	4b14      	ldr	r3, [pc, #80]	@ (8006130 <erase_page+0x78>)
 80060de:	4a16      	ldr	r2, [pc, #88]	@ (8006138 <erase_page+0x80>)
 80060e0:	605a      	str	r2, [r3, #4]
	}

	FLASH->CR |= FLASH_CR_PER; /* (1) */
 80060e2:	4b13      	ldr	r3, [pc, #76]	@ (8006130 <erase_page+0x78>)
 80060e4:	691a      	ldr	r2, [r3, #16]
 80060e6:	4b12      	ldr	r3, [pc, #72]	@ (8006130 <erase_page+0x78>)
 80060e8:	2102      	movs	r1, #2
 80060ea:	430a      	orrs	r2, r1
 80060ec:	611a      	str	r2, [r3, #16]

	FLASH->AR = page_addr; /* (2) */
 80060ee:	4b10      	ldr	r3, [pc, #64]	@ (8006130 <erase_page+0x78>)
 80060f0:	687a      	ldr	r2, [r7, #4]
 80060f2:	615a      	str	r2, [r3, #20]

	FLASH->CR |= FLASH_CR_STRT; /* (3) */
 80060f4:	4b0e      	ldr	r3, [pc, #56]	@ (8006130 <erase_page+0x78>)
 80060f6:	691a      	ldr	r2, [r3, #16]
 80060f8:	4b0d      	ldr	r3, [pc, #52]	@ (8006130 <erase_page+0x78>)
 80060fa:	2140      	movs	r1, #64	@ 0x40
 80060fc:	430a      	orrs	r2, r1
 80060fe:	611a      	str	r2, [r3, #16]

	while ((FLASH->SR & FLASH_SR_BSY) != 0) /* (4) */
 8006100:	46c0      	nop			@ (mov r8, r8)
 8006102:	4b0b      	ldr	r3, [pc, #44]	@ (8006130 <erase_page+0x78>)
 8006104:	68db      	ldr	r3, [r3, #12]
 8006106:	2201      	movs	r2, #1
 8006108:	4013      	ands	r3, r2
 800610a:	d1fa      	bne.n	8006102 <erase_page+0x4a>
	{
	/* For robust implementation, add here time-out management */
	}

	if ((FLASH->SR & FLASH_SR_EOP) != 0) /* (5) */
 800610c:	4b08      	ldr	r3, [pc, #32]	@ (8006130 <erase_page+0x78>)
 800610e:	68db      	ldr	r3, [r3, #12]
 8006110:	2220      	movs	r2, #32
 8006112:	4013      	ands	r3, r2
 8006114:	d002      	beq.n	800611c <erase_page+0x64>
	{
		FLASH->SR = FLASH_SR_EOP; /* (6)*/
 8006116:	4b06      	ldr	r3, [pc, #24]	@ (8006130 <erase_page+0x78>)
 8006118:	2220      	movs	r2, #32
 800611a:	60da      	str	r2, [r3, #12]
	else
	{
		/* Manage the error cases */
	}

	FLASH->CR &= ~FLASH_CR_PER; /* (7) */
 800611c:	4b04      	ldr	r3, [pc, #16]	@ (8006130 <erase_page+0x78>)
 800611e:	691a      	ldr	r2, [r3, #16]
 8006120:	4b03      	ldr	r3, [pc, #12]	@ (8006130 <erase_page+0x78>)
 8006122:	2102      	movs	r1, #2
 8006124:	438a      	bics	r2, r1
 8006126:	611a      	str	r2, [r3, #16]

}
 8006128:	46c0      	nop			@ (mov r8, r8)
 800612a:	46bd      	mov	sp, r7
 800612c:	b002      	add	sp, #8
 800612e:	bd80      	pop	{r7, pc}
 8006130:	40022000 	.word	0x40022000
 8006134:	45670123 	.word	0x45670123
 8006138:	cdef89ab 	.word	0xcdef89ab

0800613c <flash_init>:

	FLASH->CR &= ~FLASH_CR_MER; /* (6) */
}

void flash_init(flash_control_t* fobj)
{
 800613c:	b5b0      	push	{r4, r5, r7, lr}
 800613e:	b086      	sub	sp, #24
 8006140:	af00      	add	r7, sp, #0
 8006142:	6078      	str	r0, [r7, #4]

	uint16_t buff[5]={0};
 8006144:	230c      	movs	r3, #12
 8006146:	18fb      	adds	r3, r7, r3
 8006148:	0018      	movs	r0, r3
 800614a:	230a      	movs	r3, #10
 800614c:	001a      	movs	r2, r3
 800614e:	2100      	movs	r1, #0
 8006150:	f001 ffb4 	bl	80080bc <memset>

	fobj->addr_index=0;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	2200      	movs	r2, #0
 8006158:	701a      	strb	r2, [r3, #0]
	fobj->write_addr=(uint32_t)Flash_address;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	4aab      	ldr	r2, [pc, #684]	@ (800640c <flash_init+0x2d0>)
 800615e:	60da      	str	r2, [r3, #12]

	for(uint8_t indx=0;indx < 5;indx++)
 8006160:	2317      	movs	r3, #23
 8006162:	18fb      	adds	r3, r7, r3
 8006164:	2200      	movs	r2, #0
 8006166:	701a      	strb	r2, [r3, #0]
 8006168:	e016      	b.n	8006198 <flash_init+0x5c>
	{
		buff[indx] = read_flash(fobj->write_addr + indx*2);
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	68db      	ldr	r3, [r3, #12]
 800616e:	2517      	movs	r5, #23
 8006170:	197a      	adds	r2, r7, r5
 8006172:	7812      	ldrb	r2, [r2, #0]
 8006174:	0052      	lsls	r2, r2, #1
 8006176:	189a      	adds	r2, r3, r2
 8006178:	197b      	adds	r3, r7, r5
 800617a:	781c      	ldrb	r4, [r3, #0]
 800617c:	0010      	movs	r0, r2
 800617e:	f000 f9a9 	bl	80064d4 <read_flash>
 8006182:	0003      	movs	r3, r0
 8006184:	0019      	movs	r1, r3
 8006186:	230c      	movs	r3, #12
 8006188:	18fb      	adds	r3, r7, r3
 800618a:	0062      	lsls	r2, r4, #1
 800618c:	52d1      	strh	r1, [r2, r3]
	for(uint8_t indx=0;indx < 5;indx++)
 800618e:	197b      	adds	r3, r7, r5
 8006190:	781a      	ldrb	r2, [r3, #0]
 8006192:	197b      	adds	r3, r7, r5
 8006194:	3201      	adds	r2, #1
 8006196:	701a      	strb	r2, [r3, #0]
 8006198:	2317      	movs	r3, #23
 800619a:	18fb      	adds	r3, r7, r3
 800619c:	781b      	ldrb	r3, [r3, #0]
 800619e:	2b04      	cmp	r3, #4
 80061a0:	d9e3      	bls.n	800616a <flash_init+0x2e>
	}

	fobj->crc_val = crc_16((const unsigned char*)buff,3);
 80061a2:	240c      	movs	r4, #12
 80061a4:	193b      	adds	r3, r7, r4
 80061a6:	2103      	movs	r1, #3
 80061a8:	0018      	movs	r0, r3
 80061aa:	f7ff feaf 	bl	8005f0c <crc_16>
 80061ae:	0003      	movs	r3, r0
 80061b0:	001a      	movs	r2, r3
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	821a      	strh	r2, [r3, #16]

	rs485_transmit_package((uint8_t*)"reading the values on the flash memory please wait 2 second ...\n",sizeof("reading the values on the flash memory please wait 2 second ...\n"));
 80061b6:	4b96      	ldr	r3, [pc, #600]	@ (8006410 <flash_init+0x2d4>)
 80061b8:	2141      	movs	r1, #65	@ 0x41
 80061ba:	0018      	movs	r0, r3
 80061bc:	f000 fc0a 	bl	80069d4 <rs485_transmit_package>
	HAL_Delay(2000);
 80061c0:	23fa      	movs	r3, #250	@ 0xfa
 80061c2:	00db      	lsls	r3, r3, #3
 80061c4:	0018      	movs	r0, r3
 80061c6:	f7fc fdcb 	bl	8002d60 <HAL_Delay>

	if(fobj->crc_val == buff[4])
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	8a1a      	ldrh	r2, [r3, #16]
 80061ce:	193b      	adds	r3, r7, r4
 80061d0:	891b      	ldrh	r3, [r3, #8]
 80061d2:	429a      	cmp	r2, r3
 80061d4:	d000      	beq.n	80061d8 <flash_init+0x9c>
 80061d6:	e10d      	b.n	80063f4 <flash_init+0x2b8>
	{
		fobj->crc_val = 0;
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	2200      	movs	r2, #0
 80061dc:	821a      	strh	r2, [r3, #16]

		rs485_transmit_package((uint8_t*)"CRC VALUE CORRECT\n",sizeof("CRC VALUE CORRECT\n"));
 80061de:	4b8d      	ldr	r3, [pc, #564]	@ (8006414 <flash_init+0x2d8>)
 80061e0:	2113      	movs	r1, #19
 80061e2:	0018      	movs	r0, r3
 80061e4:	f000 fbf6 	bl	80069d4 <rs485_transmit_package>

		motor.led_1_flag   = (((buff[0]) & (0xFF00)) >> 8U);
 80061e8:	0021      	movs	r1, r4
 80061ea:	193b      	adds	r3, r7, r4
 80061ec:	881b      	ldrh	r3, [r3, #0]
 80061ee:	0a1b      	lsrs	r3, r3, #8
 80061f0:	b29b      	uxth	r3, r3
 80061f2:	b2da      	uxtb	r2, r3
 80061f4:	4b88      	ldr	r3, [pc, #544]	@ (8006418 <flash_init+0x2dc>)
 80061f6:	701a      	strb	r2, [r3, #0]
		motor.led_2_flag   = ((buff[0]) & (0x00FF));
 80061f8:	187b      	adds	r3, r7, r1
 80061fa:	881b      	ldrh	r3, [r3, #0]
 80061fc:	b2da      	uxtb	r2, r3
 80061fe:	4b86      	ldr	r3, [pc, #536]	@ (8006418 <flash_init+0x2dc>)
 8006200:	705a      	strb	r2, [r3, #1]
		motor.buzzer_flag  = (((buff[1]) & (0xFF00)) >> 8U);
 8006202:	187b      	adds	r3, r7, r1
 8006204:	885b      	ldrh	r3, [r3, #2]
 8006206:	0a1b      	lsrs	r3, r3, #8
 8006208:	b29b      	uxth	r3, r3
 800620a:	b2da      	uxtb	r2, r3
 800620c:	4b82      	ldr	r3, [pc, #520]	@ (8006418 <flash_init+0x2dc>)
 800620e:	709a      	strb	r2, [r3, #2]
		motor.speaker_flag = ((buff[1]) & (0x00FF));
 8006210:	187b      	adds	r3, r7, r1
 8006212:	885b      	ldrh	r3, [r3, #2]
 8006214:	b2da      	uxtb	r2, r3
 8006216:	4b80      	ldr	r3, [pc, #512]	@ (8006418 <flash_init+0x2dc>)
 8006218:	70da      	strb	r2, [r3, #3]

		if(motor.led_1_flag == ENABLE)
 800621a:	4b7f      	ldr	r3, [pc, #508]	@ (8006418 <flash_init+0x2dc>)
 800621c:	781b      	ldrb	r3, [r3, #0]
 800621e:	2b01      	cmp	r3, #1
 8006220:	d108      	bne.n	8006234 <flash_init+0xf8>
		{
		  rs485_transmit_package((uint8_t*)"LED-1 STARTING\n",sizeof("LED-1 STARTING\n"));
 8006222:	4b7e      	ldr	r3, [pc, #504]	@ (800641c <flash_init+0x2e0>)
 8006224:	2110      	movs	r1, #16
 8006226:	0018      	movs	r0, r3
 8006228:	f000 fbd4 	bl	80069d4 <rs485_transmit_package>
		  HAL_Delay(200);
 800622c:	20c8      	movs	r0, #200	@ 0xc8
 800622e:	f7fc fd97 	bl	8002d60 <HAL_Delay>
 8006232:	e007      	b.n	8006244 <flash_init+0x108>
		}
		else
		{
		  rs485_transmit_package((uint8_t*)"LED-1 NOT STARTING\n",sizeof("LED-1 NOT STARTING\n"));
 8006234:	4b7a      	ldr	r3, [pc, #488]	@ (8006420 <flash_init+0x2e4>)
 8006236:	2114      	movs	r1, #20
 8006238:	0018      	movs	r0, r3
 800623a:	f000 fbcb 	bl	80069d4 <rs485_transmit_package>
		  HAL_Delay(200);
 800623e:	20c8      	movs	r0, #200	@ 0xc8
 8006240:	f7fc fd8e 	bl	8002d60 <HAL_Delay>
		}

		if(motor.led_2_flag == ENABLE)
 8006244:	4b74      	ldr	r3, [pc, #464]	@ (8006418 <flash_init+0x2dc>)
 8006246:	785b      	ldrb	r3, [r3, #1]
 8006248:	2b01      	cmp	r3, #1
 800624a:	d108      	bne.n	800625e <flash_init+0x122>
		{
		  rs485_transmit_package((uint8_t*)"LED-2 STARTING\n",sizeof("LED-2 STARTING\n"));
 800624c:	4b75      	ldr	r3, [pc, #468]	@ (8006424 <flash_init+0x2e8>)
 800624e:	2110      	movs	r1, #16
 8006250:	0018      	movs	r0, r3
 8006252:	f000 fbbf 	bl	80069d4 <rs485_transmit_package>
		  HAL_Delay(200);
 8006256:	20c8      	movs	r0, #200	@ 0xc8
 8006258:	f7fc fd82 	bl	8002d60 <HAL_Delay>
 800625c:	e007      	b.n	800626e <flash_init+0x132>
		}
		else
		{
		  rs485_transmit_package((uint8_t*)"LED-2 NOT STARTING\n",sizeof("LED-2 NOT STARTING\n"));
 800625e:	4b72      	ldr	r3, [pc, #456]	@ (8006428 <flash_init+0x2ec>)
 8006260:	2114      	movs	r1, #20
 8006262:	0018      	movs	r0, r3
 8006264:	f000 fbb6 	bl	80069d4 <rs485_transmit_package>
		  HAL_Delay(200);
 8006268:	20c8      	movs	r0, #200	@ 0xc8
 800626a:	f7fc fd79 	bl	8002d60 <HAL_Delay>
		}


		if(motor.buzzer_flag == ENABLE)
 800626e:	4b6a      	ldr	r3, [pc, #424]	@ (8006418 <flash_init+0x2dc>)
 8006270:	789b      	ldrb	r3, [r3, #2]
 8006272:	2b01      	cmp	r3, #1
 8006274:	d108      	bne.n	8006288 <flash_init+0x14c>
		{
		  rs485_transmit_package((uint8_t*)"BUZZER STARTING\n",sizeof("BUZZER STARTING\n"));
 8006276:	4b6d      	ldr	r3, [pc, #436]	@ (800642c <flash_init+0x2f0>)
 8006278:	2111      	movs	r1, #17
 800627a:	0018      	movs	r0, r3
 800627c:	f000 fbaa 	bl	80069d4 <rs485_transmit_package>
		  HAL_Delay(200);
 8006280:	20c8      	movs	r0, #200	@ 0xc8
 8006282:	f7fc fd6d 	bl	8002d60 <HAL_Delay>
 8006286:	e007      	b.n	8006298 <flash_init+0x15c>
		}
		else
		{
		  rs485_transmit_package((uint8_t*)"BUZZER NOT STARTING\n",sizeof("BUZZER NOT STARTING\n"));
 8006288:	4b69      	ldr	r3, [pc, #420]	@ (8006430 <flash_init+0x2f4>)
 800628a:	2115      	movs	r1, #21
 800628c:	0018      	movs	r0, r3
 800628e:	f000 fba1 	bl	80069d4 <rs485_transmit_package>
		  HAL_Delay(200);
 8006292:	20c8      	movs	r0, #200	@ 0xc8
 8006294:	f7fc fd64 	bl	8002d60 <HAL_Delay>
		}

		if(motor.speaker_flag == ENABLE)
 8006298:	4b5f      	ldr	r3, [pc, #380]	@ (8006418 <flash_init+0x2dc>)
 800629a:	78db      	ldrb	r3, [r3, #3]
 800629c:	2b01      	cmp	r3, #1
 800629e:	d108      	bne.n	80062b2 <flash_init+0x176>
		{
		  rs485_transmit_package((uint8_t*)"SPEAKER STARTING\n",sizeof("SPEAKER STARTING\n"));
 80062a0:	4b64      	ldr	r3, [pc, #400]	@ (8006434 <flash_init+0x2f8>)
 80062a2:	2112      	movs	r1, #18
 80062a4:	0018      	movs	r0, r3
 80062a6:	f000 fb95 	bl	80069d4 <rs485_transmit_package>
		  HAL_Delay(200);
 80062aa:	20c8      	movs	r0, #200	@ 0xc8
 80062ac:	f7fc fd58 	bl	8002d60 <HAL_Delay>
 80062b0:	e007      	b.n	80062c2 <flash_init+0x186>
		}
		else
		{
		  rs485_transmit_package((uint8_t*)"SPEAKER NOT STARTING\n",sizeof("SPEAKER NOT STARTING\n"));
 80062b2:	4b61      	ldr	r3, [pc, #388]	@ (8006438 <flash_init+0x2fc>)
 80062b4:	2116      	movs	r1, #22
 80062b6:	0018      	movs	r0, r3
 80062b8:	f000 fb8c 	bl	80069d4 <rs485_transmit_package>
		  HAL_Delay(200);
 80062bc:	20c8      	movs	r0, #200	@ 0xc8
 80062be:	f7fc fd4f 	bl	8002d60 <HAL_Delay>
		}

		if(((buff[3]) & (0x00FF)) == MOTOR_AUTO_ID)
 80062c2:	210c      	movs	r1, #12
 80062c4:	187b      	adds	r3, r7, r1
 80062c6:	88db      	ldrh	r3, [r3, #6]
 80062c8:	001a      	movs	r2, r3
 80062ca:	23ff      	movs	r3, #255	@ 0xff
 80062cc:	4013      	ands	r3, r2
 80062ce:	2b4f      	cmp	r3, #79	@ 0x4f
 80062d0:	d12a      	bne.n	8006328 <flash_init+0x1ec>
		{
		  motor.motor_flag.stop_mode = DISABLE;
 80062d2:	4b51      	ldr	r3, [pc, #324]	@ (8006418 <flash_init+0x2dc>)
 80062d4:	2200      	movs	r2, #0
 80062d6:	721a      	strb	r2, [r3, #8]
		  motor.motor_flag.manuel_mode = DISABLE;
 80062d8:	4b4f      	ldr	r3, [pc, #316]	@ (8006418 <flash_init+0x2dc>)
 80062da:	2200      	movs	r2, #0
 80062dc:	715a      	strb	r2, [r3, #5]
		  motor.motor_flag.auto_mode = (((buff[2]) & (0xFF00)) >> 8U);
 80062de:	187b      	adds	r3, r7, r1
 80062e0:	889b      	ldrh	r3, [r3, #4]
 80062e2:	0a1b      	lsrs	r3, r3, #8
 80062e4:	b29b      	uxth	r3, r3
 80062e6:	b2da      	uxtb	r2, r3
 80062e8:	4b4b      	ldr	r3, [pc, #300]	@ (8006418 <flash_init+0x2dc>)
 80062ea:	711a      	strb	r2, [r3, #4]
		  motor.motor_flag.forward = (((buff[2]) & (0x00F0)) >> 4U);
 80062ec:	187b      	adds	r3, r7, r1
 80062ee:	889b      	ldrh	r3, [r3, #4]
 80062f0:	111b      	asrs	r3, r3, #4
 80062f2:	b2db      	uxtb	r3, r3
 80062f4:	220f      	movs	r2, #15
 80062f6:	4013      	ands	r3, r2
 80062f8:	b2da      	uxtb	r2, r3
 80062fa:	4b47      	ldr	r3, [pc, #284]	@ (8006418 <flash_init+0x2dc>)
 80062fc:	719a      	strb	r2, [r3, #6]
		  motor.motor_flag.backward = ((buff[2]) & (0x000F));
 80062fe:	187b      	adds	r3, r7, r1
 8006300:	889b      	ldrh	r3, [r3, #4]
 8006302:	b2db      	uxtb	r3, r3
 8006304:	220f      	movs	r2, #15
 8006306:	4013      	ands	r3, r2
 8006308:	b2da      	uxtb	r2, r3
 800630a:	4b43      	ldr	r3, [pc, #268]	@ (8006418 <flash_init+0x2dc>)
 800630c:	71da      	strb	r2, [r3, #7]
		  motor.motor_flag.speed = ((((buff[3]) & (0xFF00))) >> 8U);
 800630e:	187b      	adds	r3, r7, r1
 8006310:	88db      	ldrh	r3, [r3, #6]
 8006312:	0a1b      	lsrs	r3, r3, #8
 8006314:	b29b      	uxth	r3, r3
 8006316:	b2da      	uxtb	r2, r3
 8006318:	4b3f      	ldr	r3, [pc, #252]	@ (8006418 <flash_init+0x2dc>)
 800631a:	725a      	strb	r2, [r3, #9]
		  rs485_transmit_package((uint8_t*)"AUTO MODE STARTING\n",sizeof("AUTO MODE STARTING\n"));
 800631c:	4b47      	ldr	r3, [pc, #284]	@ (800643c <flash_init+0x300>)
 800631e:	2114      	movs	r1, #20
 8006320:	0018      	movs	r0, r3
 8006322:	f000 fb57 	bl	80069d4 <rs485_transmit_package>
		fobj->crc_val = 0;

		rs485_transmit_package((uint8_t*)"CRC VALUE INCORRECT\n",sizeof("CRC VALUE INCORRECT\n"));
	}

}
 8006326:	e06d      	b.n	8006404 <flash_init+0x2c8>
		else if(((buff[3]) & (0x00FF)) == MOTOR_MANUEL_ID)
 8006328:	210c      	movs	r1, #12
 800632a:	187b      	adds	r3, r7, r1
 800632c:	88db      	ldrh	r3, [r3, #6]
 800632e:	001a      	movs	r2, r3
 8006330:	23ff      	movs	r3, #255	@ 0xff
 8006332:	4013      	ands	r3, r2
 8006334:	2b3d      	cmp	r3, #61	@ 0x3d
 8006336:	d12a      	bne.n	800638e <flash_init+0x252>
		  motor.motor_flag.stop_mode = DISABLE;
 8006338:	4b37      	ldr	r3, [pc, #220]	@ (8006418 <flash_init+0x2dc>)
 800633a:	2200      	movs	r2, #0
 800633c:	721a      	strb	r2, [r3, #8]
		  motor.motor_flag.manuel_mode = (((buff[2]) & (0xFF00)) >> 8U);
 800633e:	187b      	adds	r3, r7, r1
 8006340:	889b      	ldrh	r3, [r3, #4]
 8006342:	0a1b      	lsrs	r3, r3, #8
 8006344:	b29b      	uxth	r3, r3
 8006346:	b2da      	uxtb	r2, r3
 8006348:	4b33      	ldr	r3, [pc, #204]	@ (8006418 <flash_init+0x2dc>)
 800634a:	715a      	strb	r2, [r3, #5]
		  motor.motor_flag.auto_mode = DISABLE;
 800634c:	4b32      	ldr	r3, [pc, #200]	@ (8006418 <flash_init+0x2dc>)
 800634e:	2200      	movs	r2, #0
 8006350:	711a      	strb	r2, [r3, #4]
		  motor.motor_flag.forward = (((buff[2]) & (0x00F0)) >> 4U);
 8006352:	187b      	adds	r3, r7, r1
 8006354:	889b      	ldrh	r3, [r3, #4]
 8006356:	111b      	asrs	r3, r3, #4
 8006358:	b2db      	uxtb	r3, r3
 800635a:	220f      	movs	r2, #15
 800635c:	4013      	ands	r3, r2
 800635e:	b2da      	uxtb	r2, r3
 8006360:	4b2d      	ldr	r3, [pc, #180]	@ (8006418 <flash_init+0x2dc>)
 8006362:	719a      	strb	r2, [r3, #6]
		  motor.motor_flag.backward = ((buff[2]) & (0x000F));
 8006364:	187b      	adds	r3, r7, r1
 8006366:	889b      	ldrh	r3, [r3, #4]
 8006368:	b2db      	uxtb	r3, r3
 800636a:	220f      	movs	r2, #15
 800636c:	4013      	ands	r3, r2
 800636e:	b2da      	uxtb	r2, r3
 8006370:	4b29      	ldr	r3, [pc, #164]	@ (8006418 <flash_init+0x2dc>)
 8006372:	71da      	strb	r2, [r3, #7]
		  motor.motor_flag.speed = (((buff[3]) & (0xFF00)) >> 8U);
 8006374:	187b      	adds	r3, r7, r1
 8006376:	88db      	ldrh	r3, [r3, #6]
 8006378:	0a1b      	lsrs	r3, r3, #8
 800637a:	b29b      	uxth	r3, r3
 800637c:	b2da      	uxtb	r2, r3
 800637e:	4b26      	ldr	r3, [pc, #152]	@ (8006418 <flash_init+0x2dc>)
 8006380:	725a      	strb	r2, [r3, #9]
		  rs485_transmit_package((uint8_t*)"MANUEL MODE STARTING\n",sizeof("MANUEL MODE STARTING\n"));
 8006382:	4b2f      	ldr	r3, [pc, #188]	@ (8006440 <flash_init+0x304>)
 8006384:	2116      	movs	r1, #22
 8006386:	0018      	movs	r0, r3
 8006388:	f000 fb24 	bl	80069d4 <rs485_transmit_package>
}
 800638c:	e03a      	b.n	8006404 <flash_init+0x2c8>
		else if(((buff[3]) & (0x00FF)) == MOTOR_STOP_ID)
 800638e:	210c      	movs	r1, #12
 8006390:	187b      	adds	r3, r7, r1
 8006392:	88db      	ldrh	r3, [r3, #6]
 8006394:	001a      	movs	r2, r3
 8006396:	23ff      	movs	r3, #255	@ 0xff
 8006398:	4013      	ands	r3, r2
 800639a:	2b07      	cmp	r3, #7
 800639c:	d132      	bne.n	8006404 <flash_init+0x2c8>
		  motor.motor_flag.stop_mode = (((buff[2]) & (0xFF00)) >> 8U);
 800639e:	187b      	adds	r3, r7, r1
 80063a0:	889b      	ldrh	r3, [r3, #4]
 80063a2:	0a1b      	lsrs	r3, r3, #8
 80063a4:	b29b      	uxth	r3, r3
 80063a6:	b2da      	uxtb	r2, r3
 80063a8:	4b1b      	ldr	r3, [pc, #108]	@ (8006418 <flash_init+0x2dc>)
 80063aa:	721a      	strb	r2, [r3, #8]
		  motor.motor_flag.manuel_mode = DISABLE;
 80063ac:	4b1a      	ldr	r3, [pc, #104]	@ (8006418 <flash_init+0x2dc>)
 80063ae:	2200      	movs	r2, #0
 80063b0:	715a      	strb	r2, [r3, #5]
		  motor.motor_flag.auto_mode = DISABLE;
 80063b2:	4b19      	ldr	r3, [pc, #100]	@ (8006418 <flash_init+0x2dc>)
 80063b4:	2200      	movs	r2, #0
 80063b6:	711a      	strb	r2, [r3, #4]
		  motor.motor_flag.forward = (((buff[2]) & (0x00F0)) >> 4U);
 80063b8:	187b      	adds	r3, r7, r1
 80063ba:	889b      	ldrh	r3, [r3, #4]
 80063bc:	111b      	asrs	r3, r3, #4
 80063be:	b2db      	uxtb	r3, r3
 80063c0:	220f      	movs	r2, #15
 80063c2:	4013      	ands	r3, r2
 80063c4:	b2da      	uxtb	r2, r3
 80063c6:	4b14      	ldr	r3, [pc, #80]	@ (8006418 <flash_init+0x2dc>)
 80063c8:	719a      	strb	r2, [r3, #6]
		  motor.motor_flag.backward = ((buff[2]) & (0x000F));
 80063ca:	187b      	adds	r3, r7, r1
 80063cc:	889b      	ldrh	r3, [r3, #4]
 80063ce:	b2db      	uxtb	r3, r3
 80063d0:	220f      	movs	r2, #15
 80063d2:	4013      	ands	r3, r2
 80063d4:	b2da      	uxtb	r2, r3
 80063d6:	4b10      	ldr	r3, [pc, #64]	@ (8006418 <flash_init+0x2dc>)
 80063d8:	71da      	strb	r2, [r3, #7]
		  motor.motor_flag.speed = (((buff[3]) & (0xFF00)) >> 8U);
 80063da:	187b      	adds	r3, r7, r1
 80063dc:	88db      	ldrh	r3, [r3, #6]
 80063de:	0a1b      	lsrs	r3, r3, #8
 80063e0:	b29b      	uxth	r3, r3
 80063e2:	b2da      	uxtb	r2, r3
 80063e4:	4b0c      	ldr	r3, [pc, #48]	@ (8006418 <flash_init+0x2dc>)
 80063e6:	725a      	strb	r2, [r3, #9]
		  rs485_transmit_package((uint8_t*)"STOP MODE STARTING\n",sizeof("STOP MODE STARTING\n"));
 80063e8:	4b16      	ldr	r3, [pc, #88]	@ (8006444 <flash_init+0x308>)
 80063ea:	2114      	movs	r1, #20
 80063ec:	0018      	movs	r0, r3
 80063ee:	f000 faf1 	bl	80069d4 <rs485_transmit_package>
}
 80063f2:	e007      	b.n	8006404 <flash_init+0x2c8>
		fobj->crc_val = 0;
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	2200      	movs	r2, #0
 80063f8:	821a      	strh	r2, [r3, #16]
		rs485_transmit_package((uint8_t*)"CRC VALUE INCORRECT\n",sizeof("CRC VALUE INCORRECT\n"));
 80063fa:	4b13      	ldr	r3, [pc, #76]	@ (8006448 <flash_init+0x30c>)
 80063fc:	2115      	movs	r1, #21
 80063fe:	0018      	movs	r0, r3
 8006400:	f000 fae8 	bl	80069d4 <rs485_transmit_package>
}
 8006404:	46c0      	nop			@ (mov r8, r8)
 8006406:	46bd      	mov	sp, r7
 8006408:	b006      	add	sp, #24
 800640a:	bdb0      	pop	{r4, r5, r7, pc}
 800640c:	0800fc00 	.word	0x0800fc00
 8006410:	0800bb3c 	.word	0x0800bb3c
 8006414:	0800bb80 	.word	0x0800bb80
 8006418:	20000290 	.word	0x20000290
 800641c:	0800bb94 	.word	0x0800bb94
 8006420:	0800bba4 	.word	0x0800bba4
 8006424:	0800bbb8 	.word	0x0800bbb8
 8006428:	0800bbc8 	.word	0x0800bbc8
 800642c:	0800bbdc 	.word	0x0800bbdc
 8006430:	0800bbf0 	.word	0x0800bbf0
 8006434:	0800bc08 	.word	0x0800bc08
 8006438:	0800bc1c 	.word	0x0800bc1c
 800643c:	0800bc34 	.word	0x0800bc34
 8006440:	0800bc48 	.word	0x0800bc48
 8006444:	0800bc60 	.word	0x0800bc60
 8006448:	0800bc74 	.word	0x0800bc74

0800644c <user_flash_write>:
 * 	-max program boyutu
 * 	-flash birimine ait hata bayraklarının anlamları
 */

void user_flash_write(flash_control_t*  fobj)
{
 800644c:	b580      	push	{r7, lr}
 800644e:	b082      	sub	sp, #8
 8006450:	af00      	add	r7, sp, #0
 8006452:	6078      	str	r0, [r7, #4]
	  if(flash_guard)
 8006454:	4b1d      	ldr	r3, [pc, #116]	@ (80064cc <user_flash_write+0x80>)
 8006456:	781b      	ldrb	r3, [r3, #0]
 8006458:	2b00      	cmp	r3, #0
 800645a:	d011      	beq.n	8006480 <user_flash_write+0x34>
	  {
		  //Komut geldiğinde yazılmadan önce flash adresi siliniyor
		  erase_page(fobj->write_addr);
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	68db      	ldr	r3, [r3, #12]
 8006460:	0018      	movs	r0, r3
 8006462:	f7ff fe29 	bl	80060b8 <erase_page>
		  HAL_Delay(1);
 8006466:	2001      	movs	r0, #1
 8006468:	f7fc fc7a 	bl	8002d60 <HAL_Delay>
		  write_operations((flash_control_t*)fobj);
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	0018      	movs	r0, r3
 8006470:	f000 f87e 	bl	8006570 <write_operations>
		  copy_struct();
 8006474:	f000 fa7c 	bl	8006970 <copy_struct>
		  flash_guard = false;
 8006478:	4b14      	ldr	r3, [pc, #80]	@ (80064cc <user_flash_write+0x80>)
 800647a:	2200      	movs	r2, #0
 800647c:	701a      	strb	r2, [r3, #0]
			  erase_page(fobj->write_addr);
			  HAL_Delay(1);
			  write_operations((flash_control_t*)fobj);
		  }
	  }
}
 800647e:	e021      	b.n	80064c4 <user_flash_write+0x78>
	  else if(!flash_guard)
 8006480:	4b12      	ldr	r3, [pc, #72]	@ (80064cc <user_flash_write+0x80>)
 8006482:	781b      	ldrb	r3, [r3, #0]
 8006484:	2201      	movs	r2, #1
 8006486:	4053      	eors	r3, r2
 8006488:	b2db      	uxtb	r3, r3
 800648a:	2b00      	cmp	r3, #0
 800648c:	d01a      	beq.n	80064c4 <user_flash_write+0x78>
		  result = two_struct_compare();
 800648e:	f000 f82d 	bl	80064ec <two_struct_compare>
 8006492:	0003      	movs	r3, r0
 8006494:	001a      	movs	r2, r3
 8006496:	4b0e      	ldr	r3, [pc, #56]	@ (80064d0 <user_flash_write+0x84>)
 8006498:	701a      	strb	r2, [r3, #0]
		  copy_struct();
 800649a:	f000 fa69 	bl	8006970 <copy_struct>
		  if(!result) //Komut değişikliği olduysa flasha yazar
 800649e:	4b0c      	ldr	r3, [pc, #48]	@ (80064d0 <user_flash_write+0x84>)
 80064a0:	781b      	ldrb	r3, [r3, #0]
 80064a2:	2201      	movs	r2, #1
 80064a4:	4053      	eors	r3, r2
 80064a6:	b2db      	uxtb	r3, r3
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d00b      	beq.n	80064c4 <user_flash_write+0x78>
			  erase_page(fobj->write_addr);
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	68db      	ldr	r3, [r3, #12]
 80064b0:	0018      	movs	r0, r3
 80064b2:	f7ff fe01 	bl	80060b8 <erase_page>
			  HAL_Delay(1);
 80064b6:	2001      	movs	r0, #1
 80064b8:	f7fc fc52 	bl	8002d60 <HAL_Delay>
			  write_operations((flash_control_t*)fobj);
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	0018      	movs	r0, r3
 80064c0:	f000 f856 	bl	8006570 <write_operations>
}
 80064c4:	46c0      	nop			@ (mov r8, r8)
 80064c6:	46bd      	mov	sp, r7
 80064c8:	b002      	add	sp, #8
 80064ca:	bd80      	pop	{r7, pc}
 80064cc:	20000009 	.word	0x20000009
 80064d0:	200004ca 	.word	0x200004ca

080064d4 <read_flash>:

uint16_t read_flash(uint32_t  adr)
{
 80064d4:	b580      	push	{r7, lr}
 80064d6:	b084      	sub	sp, #16
 80064d8:	af00      	add	r7, sp, #0
 80064da:	6078      	str	r0, [r7, #4]
  uint16_t * Pntr = (uint16_t *)adr;
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	60fb      	str	r3, [r7, #12]
  return(*Pntr);
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	881b      	ldrh	r3, [r3, #0]
}
 80064e4:	0018      	movs	r0, r3
 80064e6:	46bd      	mov	sp, r7
 80064e8:	b004      	add	sp, #16
 80064ea:	bd80      	pop	{r7, pc}

080064ec <two_struct_compare>:

static _Bool two_struct_compare(void)
{
 80064ec:	b580      	push	{r7, lr}
 80064ee:	af00      	add	r7, sp, #0
	if(motor.led_1_flag != motor_cpy.led_1_flag)
 80064f0:	4b1d      	ldr	r3, [pc, #116]	@ (8006568 <two_struct_compare+0x7c>)
 80064f2:	781a      	ldrb	r2, [r3, #0]
 80064f4:	4b1d      	ldr	r3, [pc, #116]	@ (800656c <two_struct_compare+0x80>)
 80064f6:	781b      	ldrb	r3, [r3, #0]
 80064f8:	429a      	cmp	r2, r3
 80064fa:	d001      	beq.n	8006500 <two_struct_compare+0x14>
	{
		return false; //iki struct değerleri farklı
 80064fc:	2300      	movs	r3, #0
 80064fe:	e030      	b.n	8006562 <two_struct_compare+0x76>
	}
	else if(motor.led_2_flag != motor_cpy.led_2_flag)
 8006500:	4b19      	ldr	r3, [pc, #100]	@ (8006568 <two_struct_compare+0x7c>)
 8006502:	785a      	ldrb	r2, [r3, #1]
 8006504:	4b19      	ldr	r3, [pc, #100]	@ (800656c <two_struct_compare+0x80>)
 8006506:	785b      	ldrb	r3, [r3, #1]
 8006508:	429a      	cmp	r2, r3
 800650a:	d001      	beq.n	8006510 <two_struct_compare+0x24>
	{
		return false; //iki struct değerleri farklı
 800650c:	2300      	movs	r3, #0
 800650e:	e028      	b.n	8006562 <two_struct_compare+0x76>
	}
	else if(motor.buzzer_flag != motor_cpy.buzzer_flag)
 8006510:	4b15      	ldr	r3, [pc, #84]	@ (8006568 <two_struct_compare+0x7c>)
 8006512:	789a      	ldrb	r2, [r3, #2]
 8006514:	4b15      	ldr	r3, [pc, #84]	@ (800656c <two_struct_compare+0x80>)
 8006516:	789b      	ldrb	r3, [r3, #2]
 8006518:	429a      	cmp	r2, r3
 800651a:	d001      	beq.n	8006520 <two_struct_compare+0x34>
	{
		return false; //iki struct değerleri farklı
 800651c:	2300      	movs	r3, #0
 800651e:	e020      	b.n	8006562 <two_struct_compare+0x76>
	}
	else if(motor.speaker_flag != motor_cpy.speaker_flag)
 8006520:	4b11      	ldr	r3, [pc, #68]	@ (8006568 <two_struct_compare+0x7c>)
 8006522:	78da      	ldrb	r2, [r3, #3]
 8006524:	4b11      	ldr	r3, [pc, #68]	@ (800656c <two_struct_compare+0x80>)
 8006526:	78db      	ldrb	r3, [r3, #3]
 8006528:	429a      	cmp	r2, r3
 800652a:	d001      	beq.n	8006530 <two_struct_compare+0x44>
	{
		return false; //iki struct değerleri farklı
 800652c:	2300      	movs	r3, #0
 800652e:	e018      	b.n	8006562 <two_struct_compare+0x76>
	}
	else if(motor.motor_flag.manuel_mode != motor_cpy.motor_flag.manuel_mode)
 8006530:	4b0d      	ldr	r3, [pc, #52]	@ (8006568 <two_struct_compare+0x7c>)
 8006532:	795a      	ldrb	r2, [r3, #5]
 8006534:	4b0d      	ldr	r3, [pc, #52]	@ (800656c <two_struct_compare+0x80>)
 8006536:	795b      	ldrb	r3, [r3, #5]
 8006538:	429a      	cmp	r2, r3
 800653a:	d001      	beq.n	8006540 <two_struct_compare+0x54>
	{
		return false; //iki struct değerleri farklı
 800653c:	2300      	movs	r3, #0
 800653e:	e010      	b.n	8006562 <two_struct_compare+0x76>
	}
	else if(motor.motor_flag.auto_mode != motor_cpy.motor_flag.auto_mode)
 8006540:	4b09      	ldr	r3, [pc, #36]	@ (8006568 <two_struct_compare+0x7c>)
 8006542:	791a      	ldrb	r2, [r3, #4]
 8006544:	4b09      	ldr	r3, [pc, #36]	@ (800656c <two_struct_compare+0x80>)
 8006546:	791b      	ldrb	r3, [r3, #4]
 8006548:	429a      	cmp	r2, r3
 800654a:	d001      	beq.n	8006550 <two_struct_compare+0x64>
	{
		return false; //iki struct değerleri farklı
 800654c:	2300      	movs	r3, #0
 800654e:	e008      	b.n	8006562 <two_struct_compare+0x76>
	}
	else if(motor.motor_flag.stop_mode != motor_cpy.motor_flag.stop_mode)
 8006550:	4b05      	ldr	r3, [pc, #20]	@ (8006568 <two_struct_compare+0x7c>)
 8006552:	7a1a      	ldrb	r2, [r3, #8]
 8006554:	4b05      	ldr	r3, [pc, #20]	@ (800656c <two_struct_compare+0x80>)
 8006556:	7a1b      	ldrb	r3, [r3, #8]
 8006558:	429a      	cmp	r2, r3
 800655a:	d001      	beq.n	8006560 <two_struct_compare+0x74>
	{
		return false; //iki struct değerleri farklı
 800655c:	2300      	movs	r3, #0
 800655e:	e000      	b.n	8006562 <two_struct_compare+0x76>
	}
	else
	{
		return true; //iki struct değerleri aynı
 8006560:	2301      	movs	r3, #1
	}
}
 8006562:	0018      	movs	r0, r3
 8006564:	46bd      	mov	sp, r7
 8006566:	bd80      	pop	{r7, pc}
 8006568:	20000290 	.word	0x20000290
 800656c:	200004b8 	.word	0x200004b8

08006570 <write_operations>:

static void write_operations(flash_control_t *fobj)
{
 8006570:	b580      	push	{r7, lr}
 8006572:	b082      	sub	sp, #8
 8006574:	af00      	add	r7, sp, #0
 8006576:	6078      	str	r0, [r7, #4]
	  //Her komut geldiğinde güncellenen değerler flasha burada yazılıyor
	  while(fobj->addr_index < 9)
 8006578:	e1ed      	b.n	8006956 <write_operations+0x3e6>
	  {
		  switch(fobj->addr_index)
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	781b      	ldrb	r3, [r3, #0]
 800657e:	2b08      	cmp	r3, #8
 8006580:	d100      	bne.n	8006584 <write_operations+0x14>
 8006582:	e1c1      	b.n	8006908 <write_operations+0x398>
 8006584:	dd00      	ble.n	8006588 <write_operations+0x18>
 8006586:	e1df      	b.n	8006948 <write_operations+0x3d8>
 8006588:	2b04      	cmp	r3, #4
 800658a:	d05d      	beq.n	8006648 <write_operations+0xd8>
 800658c:	dd00      	ble.n	8006590 <write_operations+0x20>
 800658e:	e1db      	b.n	8006948 <write_operations+0x3d8>
 8006590:	2b00      	cmp	r3, #0
 8006592:	d002      	beq.n	800659a <write_operations+0x2a>
 8006594:	2b02      	cmp	r3, #2
 8006596:	d02b      	beq.n	80065f0 <write_operations+0x80>
		  case(8):
					  fobj->crc_val = crc_16((const unsigned char*)fobj->ui16_buffer,3);
					  fobj->ui16_buffer[fobj->addr_index-4] = fobj->crc_val;
					  write_page(fobj->write_addr + fobj->addr_index , fobj->crc_val);
		  default:
			  break;
 8006598:	e1d6      	b.n	8006948 <write_operations+0x3d8>
				  fobj->ui16_buffer[fobj->addr_index] = (motor.led_1_flag << 8U) | (motor.led_2_flag);
 800659a:	4bda      	ldr	r3, [pc, #872]	@ (8006904 <write_operations+0x394>)
 800659c:	781b      	ldrb	r3, [r3, #0]
 800659e:	021b      	lsls	r3, r3, #8
 80065a0:	b21a      	sxth	r2, r3
 80065a2:	4bd8      	ldr	r3, [pc, #864]	@ (8006904 <write_operations+0x394>)
 80065a4:	785b      	ldrb	r3, [r3, #1]
 80065a6:	b21b      	sxth	r3, r3
 80065a8:	4313      	orrs	r3, r2
 80065aa:	b21a      	sxth	r2, r3
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	781b      	ldrb	r3, [r3, #0]
 80065b0:	b291      	uxth	r1, r2
 80065b2:	687a      	ldr	r2, [r7, #4]
 80065b4:	005b      	lsls	r3, r3, #1
 80065b6:	18d3      	adds	r3, r2, r3
 80065b8:	3302      	adds	r3, #2
 80065ba:	1c0a      	adds	r2, r1, #0
 80065bc:	801a      	strh	r2, [r3, #0]
				  write_page(fobj->write_addr + fobj->addr_index , (motor.led_1_flag << 8U) | (motor.led_2_flag));
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	68db      	ldr	r3, [r3, #12]
 80065c2:	687a      	ldr	r2, [r7, #4]
 80065c4:	7812      	ldrb	r2, [r2, #0]
 80065c6:	1898      	adds	r0, r3, r2
 80065c8:	4bce      	ldr	r3, [pc, #824]	@ (8006904 <write_operations+0x394>)
 80065ca:	781b      	ldrb	r3, [r3, #0]
 80065cc:	021b      	lsls	r3, r3, #8
 80065ce:	b21a      	sxth	r2, r3
 80065d0:	4bcc      	ldr	r3, [pc, #816]	@ (8006904 <write_operations+0x394>)
 80065d2:	785b      	ldrb	r3, [r3, #1]
 80065d4:	b21b      	sxth	r3, r3
 80065d6:	4313      	orrs	r3, r2
 80065d8:	b21b      	sxth	r3, r3
 80065da:	b29b      	uxth	r3, r3
 80065dc:	0019      	movs	r1, r3
 80065de:	f7ff fd2b 	bl	8006038 <write_page>
				  ++fobj->addr_index;
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	781b      	ldrb	r3, [r3, #0]
 80065e6:	3301      	adds	r3, #1
 80065e8:	b2da      	uxtb	r2, r3
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	701a      	strb	r2, [r3, #0]
				  break;
 80065ee:	e1ac      	b.n	800694a <write_operations+0x3da>
				  fobj->ui16_buffer[fobj->addr_index-1] = (motor.buzzer_flag << 8U) | (motor.speaker_flag);
 80065f0:	4bc4      	ldr	r3, [pc, #784]	@ (8006904 <write_operations+0x394>)
 80065f2:	789b      	ldrb	r3, [r3, #2]
 80065f4:	021b      	lsls	r3, r3, #8
 80065f6:	b21a      	sxth	r2, r3
 80065f8:	4bc2      	ldr	r3, [pc, #776]	@ (8006904 <write_operations+0x394>)
 80065fa:	78db      	ldrb	r3, [r3, #3]
 80065fc:	b21b      	sxth	r3, r3
 80065fe:	4313      	orrs	r3, r2
 8006600:	b21a      	sxth	r2, r3
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	781b      	ldrb	r3, [r3, #0]
 8006606:	3b01      	subs	r3, #1
 8006608:	b291      	uxth	r1, r2
 800660a:	687a      	ldr	r2, [r7, #4]
 800660c:	005b      	lsls	r3, r3, #1
 800660e:	18d3      	adds	r3, r2, r3
 8006610:	3302      	adds	r3, #2
 8006612:	1c0a      	adds	r2, r1, #0
 8006614:	801a      	strh	r2, [r3, #0]
				  write_page(fobj->write_addr + fobj->addr_index , (motor.buzzer_flag << 8U) | (motor.speaker_flag));
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	68db      	ldr	r3, [r3, #12]
 800661a:	687a      	ldr	r2, [r7, #4]
 800661c:	7812      	ldrb	r2, [r2, #0]
 800661e:	1898      	adds	r0, r3, r2
 8006620:	4bb8      	ldr	r3, [pc, #736]	@ (8006904 <write_operations+0x394>)
 8006622:	789b      	ldrb	r3, [r3, #2]
 8006624:	021b      	lsls	r3, r3, #8
 8006626:	b21a      	sxth	r2, r3
 8006628:	4bb6      	ldr	r3, [pc, #728]	@ (8006904 <write_operations+0x394>)
 800662a:	78db      	ldrb	r3, [r3, #3]
 800662c:	b21b      	sxth	r3, r3
 800662e:	4313      	orrs	r3, r2
 8006630:	b21b      	sxth	r3, r3
 8006632:	b29b      	uxth	r3, r3
 8006634:	0019      	movs	r1, r3
 8006636:	f7ff fcff 	bl	8006038 <write_page>
				  ++fobj->addr_index;
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	781b      	ldrb	r3, [r3, #0]
 800663e:	3301      	adds	r3, #1
 8006640:	b2da      	uxtb	r2, r3
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	701a      	strb	r2, [r3, #0]
				  break;
 8006646:	e180      	b.n	800694a <write_operations+0x3da>
				  if(motor.motor_flag.auto_mode == ENABLE)
 8006648:	4bae      	ldr	r3, [pc, #696]	@ (8006904 <write_operations+0x394>)
 800664a:	791b      	ldrb	r3, [r3, #4]
 800664c:	2b01      	cmp	r3, #1
 800664e:	d163      	bne.n	8006718 <write_operations+0x1a8>
					  write_page(fobj->write_addr + fobj->addr_index , (motor.motor_flag.auto_mode << 8U) | ((motor.motor_flag.forward << 4U) | motor.motor_flag.backward));
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	68db      	ldr	r3, [r3, #12]
 8006654:	687a      	ldr	r2, [r7, #4]
 8006656:	7812      	ldrb	r2, [r2, #0]
 8006658:	1898      	adds	r0, r3, r2
 800665a:	4baa      	ldr	r3, [pc, #680]	@ (8006904 <write_operations+0x394>)
 800665c:	791b      	ldrb	r3, [r3, #4]
 800665e:	021b      	lsls	r3, r3, #8
 8006660:	b21a      	sxth	r2, r3
 8006662:	4ba8      	ldr	r3, [pc, #672]	@ (8006904 <write_operations+0x394>)
 8006664:	799b      	ldrb	r3, [r3, #6]
 8006666:	011b      	lsls	r3, r3, #4
 8006668:	b219      	sxth	r1, r3
 800666a:	4ba6      	ldr	r3, [pc, #664]	@ (8006904 <write_operations+0x394>)
 800666c:	79db      	ldrb	r3, [r3, #7]
 800666e:	b21b      	sxth	r3, r3
 8006670:	430b      	orrs	r3, r1
 8006672:	b21b      	sxth	r3, r3
 8006674:	4313      	orrs	r3, r2
 8006676:	b21b      	sxth	r3, r3
 8006678:	b29b      	uxth	r3, r3
 800667a:	0019      	movs	r1, r3
 800667c:	f7ff fcdc 	bl	8006038 <write_page>
					  ++fobj->addr_index;
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	781b      	ldrb	r3, [r3, #0]
 8006684:	3301      	adds	r3, #1
 8006686:	b2da      	uxtb	r2, r3
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	701a      	strb	r2, [r3, #0]
					  ++fobj->addr_index;
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	781b      	ldrb	r3, [r3, #0]
 8006690:	3301      	adds	r3, #1
 8006692:	b2da      	uxtb	r2, r3
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	701a      	strb	r2, [r3, #0]
					  write_page(fobj->write_addr + fobj->addr_index ,((motor.motor_flag.speed << 8U) | MOTOR_AUTO_ID)); //auto mode olduğunu anlamak için MOTOR_AUTO_ID orladık
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	68db      	ldr	r3, [r3, #12]
 800669c:	687a      	ldr	r2, [r7, #4]
 800669e:	7812      	ldrb	r2, [r2, #0]
 80066a0:	189a      	adds	r2, r3, r2
 80066a2:	4b98      	ldr	r3, [pc, #608]	@ (8006904 <write_operations+0x394>)
 80066a4:	7a5b      	ldrb	r3, [r3, #9]
 80066a6:	021b      	lsls	r3, r3, #8
 80066a8:	b29b      	uxth	r3, r3
 80066aa:	214f      	movs	r1, #79	@ 0x4f
 80066ac:	430b      	orrs	r3, r1
 80066ae:	b29b      	uxth	r3, r3
 80066b0:	0019      	movs	r1, r3
 80066b2:	0010      	movs	r0, r2
 80066b4:	f7ff fcc0 	bl	8006038 <write_page>
					  ++fobj->addr_index;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	781b      	ldrb	r3, [r3, #0]
 80066bc:	3301      	adds	r3, #1
 80066be:	b2da      	uxtb	r2, r3
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	701a      	strb	r2, [r3, #0]
					  fobj->ui16_buffer[fobj->addr_index-5] = (motor.motor_flag.auto_mode << 8U) | ((motor.motor_flag.forward << 4U) | motor.motor_flag.backward);
 80066c4:	4b8f      	ldr	r3, [pc, #572]	@ (8006904 <write_operations+0x394>)
 80066c6:	791b      	ldrb	r3, [r3, #4]
 80066c8:	021b      	lsls	r3, r3, #8
 80066ca:	b21a      	sxth	r2, r3
 80066cc:	4b8d      	ldr	r3, [pc, #564]	@ (8006904 <write_operations+0x394>)
 80066ce:	799b      	ldrb	r3, [r3, #6]
 80066d0:	011b      	lsls	r3, r3, #4
 80066d2:	b219      	sxth	r1, r3
 80066d4:	4b8b      	ldr	r3, [pc, #556]	@ (8006904 <write_operations+0x394>)
 80066d6:	79db      	ldrb	r3, [r3, #7]
 80066d8:	b21b      	sxth	r3, r3
 80066da:	430b      	orrs	r3, r1
 80066dc:	b21b      	sxth	r3, r3
 80066de:	4313      	orrs	r3, r2
 80066e0:	b21a      	sxth	r2, r3
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	781b      	ldrb	r3, [r3, #0]
 80066e6:	3b05      	subs	r3, #5
 80066e8:	b291      	uxth	r1, r2
 80066ea:	687a      	ldr	r2, [r7, #4]
 80066ec:	005b      	lsls	r3, r3, #1
 80066ee:	18d3      	adds	r3, r2, r3
 80066f0:	3302      	adds	r3, #2
 80066f2:	1c0a      	adds	r2, r1, #0
 80066f4:	801a      	strh	r2, [r3, #0]
					  fobj->ui16_buffer[fobj->addr_index-4] = ((motor.motor_flag.speed << 8U) | MOTOR_AUTO_ID);
 80066f6:	4b83      	ldr	r3, [pc, #524]	@ (8006904 <write_operations+0x394>)
 80066f8:	7a5b      	ldrb	r3, [r3, #9]
 80066fa:	021b      	lsls	r3, r3, #8
 80066fc:	b29a      	uxth	r2, r3
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	781b      	ldrb	r3, [r3, #0]
 8006702:	3b04      	subs	r3, #4
 8006704:	214f      	movs	r1, #79	@ 0x4f
 8006706:	430a      	orrs	r2, r1
 8006708:	b291      	uxth	r1, r2
 800670a:	687a      	ldr	r2, [r7, #4]
 800670c:	005b      	lsls	r3, r3, #1
 800670e:	18d3      	adds	r3, r2, r3
 8006710:	3302      	adds	r3, #2
 8006712:	1c0a      	adds	r2, r1, #0
 8006714:	801a      	strh	r2, [r3, #0]
				 break;
 8006716:	e118      	b.n	800694a <write_operations+0x3da>
				  else if(motor.motor_flag.manuel_mode == ENABLE)
 8006718:	4b7a      	ldr	r3, [pc, #488]	@ (8006904 <write_operations+0x394>)
 800671a:	795b      	ldrb	r3, [r3, #5]
 800671c:	2b01      	cmp	r3, #1
 800671e:	d163      	bne.n	80067e8 <write_operations+0x278>
					  write_page(fobj->write_addr + fobj->addr_index , (motor.motor_flag.manuel_mode << 8U) | ((motor.motor_flag.forward << 4U) | motor.motor_flag.backward));
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	68db      	ldr	r3, [r3, #12]
 8006724:	687a      	ldr	r2, [r7, #4]
 8006726:	7812      	ldrb	r2, [r2, #0]
 8006728:	1898      	adds	r0, r3, r2
 800672a:	4b76      	ldr	r3, [pc, #472]	@ (8006904 <write_operations+0x394>)
 800672c:	795b      	ldrb	r3, [r3, #5]
 800672e:	021b      	lsls	r3, r3, #8
 8006730:	b21a      	sxth	r2, r3
 8006732:	4b74      	ldr	r3, [pc, #464]	@ (8006904 <write_operations+0x394>)
 8006734:	799b      	ldrb	r3, [r3, #6]
 8006736:	011b      	lsls	r3, r3, #4
 8006738:	b219      	sxth	r1, r3
 800673a:	4b72      	ldr	r3, [pc, #456]	@ (8006904 <write_operations+0x394>)
 800673c:	79db      	ldrb	r3, [r3, #7]
 800673e:	b21b      	sxth	r3, r3
 8006740:	430b      	orrs	r3, r1
 8006742:	b21b      	sxth	r3, r3
 8006744:	4313      	orrs	r3, r2
 8006746:	b21b      	sxth	r3, r3
 8006748:	b29b      	uxth	r3, r3
 800674a:	0019      	movs	r1, r3
 800674c:	f7ff fc74 	bl	8006038 <write_page>
					  ++fobj->addr_index;
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	781b      	ldrb	r3, [r3, #0]
 8006754:	3301      	adds	r3, #1
 8006756:	b2da      	uxtb	r2, r3
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	701a      	strb	r2, [r3, #0]
					  ++fobj->addr_index;
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	781b      	ldrb	r3, [r3, #0]
 8006760:	3301      	adds	r3, #1
 8006762:	b2da      	uxtb	r2, r3
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	701a      	strb	r2, [r3, #0]
					  write_page(fobj->write_addr + fobj->addr_index , ((motor.motor_flag.speed << 8U) | MOTOR_MANUEL_ID)); //manuel mode olduğunu anlamak için MOTOR_MANUEL_ID orladık
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	68db      	ldr	r3, [r3, #12]
 800676c:	687a      	ldr	r2, [r7, #4]
 800676e:	7812      	ldrb	r2, [r2, #0]
 8006770:	189a      	adds	r2, r3, r2
 8006772:	4b64      	ldr	r3, [pc, #400]	@ (8006904 <write_operations+0x394>)
 8006774:	7a5b      	ldrb	r3, [r3, #9]
 8006776:	021b      	lsls	r3, r3, #8
 8006778:	b29b      	uxth	r3, r3
 800677a:	213d      	movs	r1, #61	@ 0x3d
 800677c:	430b      	orrs	r3, r1
 800677e:	b29b      	uxth	r3, r3
 8006780:	0019      	movs	r1, r3
 8006782:	0010      	movs	r0, r2
 8006784:	f7ff fc58 	bl	8006038 <write_page>
					  ++fobj->addr_index;
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	781b      	ldrb	r3, [r3, #0]
 800678c:	3301      	adds	r3, #1
 800678e:	b2da      	uxtb	r2, r3
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	701a      	strb	r2, [r3, #0]
					  fobj->ui16_buffer[fobj->addr_index-5] = (motor.motor_flag.manuel_mode << 8U) | ((motor.motor_flag.forward << 4U) | motor.motor_flag.backward);
 8006794:	4b5b      	ldr	r3, [pc, #364]	@ (8006904 <write_operations+0x394>)
 8006796:	795b      	ldrb	r3, [r3, #5]
 8006798:	021b      	lsls	r3, r3, #8
 800679a:	b21a      	sxth	r2, r3
 800679c:	4b59      	ldr	r3, [pc, #356]	@ (8006904 <write_operations+0x394>)
 800679e:	799b      	ldrb	r3, [r3, #6]
 80067a0:	011b      	lsls	r3, r3, #4
 80067a2:	b219      	sxth	r1, r3
 80067a4:	4b57      	ldr	r3, [pc, #348]	@ (8006904 <write_operations+0x394>)
 80067a6:	79db      	ldrb	r3, [r3, #7]
 80067a8:	b21b      	sxth	r3, r3
 80067aa:	430b      	orrs	r3, r1
 80067ac:	b21b      	sxth	r3, r3
 80067ae:	4313      	orrs	r3, r2
 80067b0:	b21a      	sxth	r2, r3
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	781b      	ldrb	r3, [r3, #0]
 80067b6:	3b05      	subs	r3, #5
 80067b8:	b291      	uxth	r1, r2
 80067ba:	687a      	ldr	r2, [r7, #4]
 80067bc:	005b      	lsls	r3, r3, #1
 80067be:	18d3      	adds	r3, r2, r3
 80067c0:	3302      	adds	r3, #2
 80067c2:	1c0a      	adds	r2, r1, #0
 80067c4:	801a      	strh	r2, [r3, #0]
					  fobj->ui16_buffer[fobj->addr_index-4] = ((motor.motor_flag.speed << 8U) | MOTOR_MANUEL_ID);
 80067c6:	4b4f      	ldr	r3, [pc, #316]	@ (8006904 <write_operations+0x394>)
 80067c8:	7a5b      	ldrb	r3, [r3, #9]
 80067ca:	021b      	lsls	r3, r3, #8
 80067cc:	b29a      	uxth	r2, r3
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	781b      	ldrb	r3, [r3, #0]
 80067d2:	3b04      	subs	r3, #4
 80067d4:	213d      	movs	r1, #61	@ 0x3d
 80067d6:	430a      	orrs	r2, r1
 80067d8:	b291      	uxth	r1, r2
 80067da:	687a      	ldr	r2, [r7, #4]
 80067dc:	005b      	lsls	r3, r3, #1
 80067de:	18d3      	adds	r3, r2, r3
 80067e0:	3302      	adds	r3, #2
 80067e2:	1c0a      	adds	r2, r1, #0
 80067e4:	801a      	strh	r2, [r3, #0]
				 break;
 80067e6:	e0b0      	b.n	800694a <write_operations+0x3da>
				  else if(motor.motor_flag.stop_mode == ENABLE)
 80067e8:	4b46      	ldr	r3, [pc, #280]	@ (8006904 <write_operations+0x394>)
 80067ea:	7a1b      	ldrb	r3, [r3, #8]
 80067ec:	2b01      	cmp	r3, #1
 80067ee:	d163      	bne.n	80068b8 <write_operations+0x348>
					  write_page(fobj->write_addr + fobj->addr_index , (motor.motor_flag.stop_mode << 8U) | ((motor.motor_flag.forward << 4U) | motor.motor_flag.backward));
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	68db      	ldr	r3, [r3, #12]
 80067f4:	687a      	ldr	r2, [r7, #4]
 80067f6:	7812      	ldrb	r2, [r2, #0]
 80067f8:	1898      	adds	r0, r3, r2
 80067fa:	4b42      	ldr	r3, [pc, #264]	@ (8006904 <write_operations+0x394>)
 80067fc:	7a1b      	ldrb	r3, [r3, #8]
 80067fe:	021b      	lsls	r3, r3, #8
 8006800:	b21a      	sxth	r2, r3
 8006802:	4b40      	ldr	r3, [pc, #256]	@ (8006904 <write_operations+0x394>)
 8006804:	799b      	ldrb	r3, [r3, #6]
 8006806:	011b      	lsls	r3, r3, #4
 8006808:	b219      	sxth	r1, r3
 800680a:	4b3e      	ldr	r3, [pc, #248]	@ (8006904 <write_operations+0x394>)
 800680c:	79db      	ldrb	r3, [r3, #7]
 800680e:	b21b      	sxth	r3, r3
 8006810:	430b      	orrs	r3, r1
 8006812:	b21b      	sxth	r3, r3
 8006814:	4313      	orrs	r3, r2
 8006816:	b21b      	sxth	r3, r3
 8006818:	b29b      	uxth	r3, r3
 800681a:	0019      	movs	r1, r3
 800681c:	f7ff fc0c 	bl	8006038 <write_page>
					  ++fobj->addr_index;
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	781b      	ldrb	r3, [r3, #0]
 8006824:	3301      	adds	r3, #1
 8006826:	b2da      	uxtb	r2, r3
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	701a      	strb	r2, [r3, #0]
					  ++fobj->addr_index;
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	781b      	ldrb	r3, [r3, #0]
 8006830:	3301      	adds	r3, #1
 8006832:	b2da      	uxtb	r2, r3
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	701a      	strb	r2, [r3, #0]
					  write_page(fobj->write_addr + fobj->addr_index , ((motor.motor_flag.speed << 8U) | MOTOR_STOP_ID)); //stop mode olduğunu anlamak için MOTOR_STOP_ID orladık
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	68db      	ldr	r3, [r3, #12]
 800683c:	687a      	ldr	r2, [r7, #4]
 800683e:	7812      	ldrb	r2, [r2, #0]
 8006840:	189a      	adds	r2, r3, r2
 8006842:	4b30      	ldr	r3, [pc, #192]	@ (8006904 <write_operations+0x394>)
 8006844:	7a5b      	ldrb	r3, [r3, #9]
 8006846:	021b      	lsls	r3, r3, #8
 8006848:	b29b      	uxth	r3, r3
 800684a:	2107      	movs	r1, #7
 800684c:	430b      	orrs	r3, r1
 800684e:	b29b      	uxth	r3, r3
 8006850:	0019      	movs	r1, r3
 8006852:	0010      	movs	r0, r2
 8006854:	f7ff fbf0 	bl	8006038 <write_page>
					  ++fobj->addr_index;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	781b      	ldrb	r3, [r3, #0]
 800685c:	3301      	adds	r3, #1
 800685e:	b2da      	uxtb	r2, r3
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	701a      	strb	r2, [r3, #0]
					  fobj->ui16_buffer[fobj->addr_index-5] = (motor.motor_flag.stop_mode << 8U) | ((motor.motor_flag.forward << 4U) | motor.motor_flag.backward);
 8006864:	4b27      	ldr	r3, [pc, #156]	@ (8006904 <write_operations+0x394>)
 8006866:	7a1b      	ldrb	r3, [r3, #8]
 8006868:	021b      	lsls	r3, r3, #8
 800686a:	b21a      	sxth	r2, r3
 800686c:	4b25      	ldr	r3, [pc, #148]	@ (8006904 <write_operations+0x394>)
 800686e:	799b      	ldrb	r3, [r3, #6]
 8006870:	011b      	lsls	r3, r3, #4
 8006872:	b219      	sxth	r1, r3
 8006874:	4b23      	ldr	r3, [pc, #140]	@ (8006904 <write_operations+0x394>)
 8006876:	79db      	ldrb	r3, [r3, #7]
 8006878:	b21b      	sxth	r3, r3
 800687a:	430b      	orrs	r3, r1
 800687c:	b21b      	sxth	r3, r3
 800687e:	4313      	orrs	r3, r2
 8006880:	b21a      	sxth	r2, r3
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	781b      	ldrb	r3, [r3, #0]
 8006886:	3b05      	subs	r3, #5
 8006888:	b291      	uxth	r1, r2
 800688a:	687a      	ldr	r2, [r7, #4]
 800688c:	005b      	lsls	r3, r3, #1
 800688e:	18d3      	adds	r3, r2, r3
 8006890:	3302      	adds	r3, #2
 8006892:	1c0a      	adds	r2, r1, #0
 8006894:	801a      	strh	r2, [r3, #0]
					  fobj->ui16_buffer[fobj->addr_index-4] = ((motor.motor_flag.speed << 8U) | MOTOR_STOP_ID);
 8006896:	4b1b      	ldr	r3, [pc, #108]	@ (8006904 <write_operations+0x394>)
 8006898:	7a5b      	ldrb	r3, [r3, #9]
 800689a:	021b      	lsls	r3, r3, #8
 800689c:	b29a      	uxth	r2, r3
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	781b      	ldrb	r3, [r3, #0]
 80068a2:	3b04      	subs	r3, #4
 80068a4:	2107      	movs	r1, #7
 80068a6:	430a      	orrs	r2, r1
 80068a8:	b291      	uxth	r1, r2
 80068aa:	687a      	ldr	r2, [r7, #4]
 80068ac:	005b      	lsls	r3, r3, #1
 80068ae:	18d3      	adds	r3, r2, r3
 80068b0:	3302      	adds	r3, #2
 80068b2:	1c0a      	adds	r2, r1, #0
 80068b4:	801a      	strh	r2, [r3, #0]
				 break;
 80068b6:	e048      	b.n	800694a <write_operations+0x3da>
					  write_page(fobj->write_addr + fobj->addr_index , 0x0000);
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	68db      	ldr	r3, [r3, #12]
 80068bc:	687a      	ldr	r2, [r7, #4]
 80068be:	7812      	ldrb	r2, [r2, #0]
 80068c0:	189b      	adds	r3, r3, r2
 80068c2:	2100      	movs	r1, #0
 80068c4:	0018      	movs	r0, r3
 80068c6:	f7ff fbb7 	bl	8006038 <write_page>
					  ++fobj->addr_index;
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	781b      	ldrb	r3, [r3, #0]
 80068ce:	3301      	adds	r3, #1
 80068d0:	b2da      	uxtb	r2, r3
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	701a      	strb	r2, [r3, #0]
					  ++fobj->addr_index;
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	781b      	ldrb	r3, [r3, #0]
 80068da:	3301      	adds	r3, #1
 80068dc:	b2da      	uxtb	r2, r3
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	701a      	strb	r2, [r3, #0]
					  write_page(fobj->write_addr + fobj->addr_index , 0x0000); //herhangi bir motor komutu gelmedi
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	68db      	ldr	r3, [r3, #12]
 80068e6:	687a      	ldr	r2, [r7, #4]
 80068e8:	7812      	ldrb	r2, [r2, #0]
 80068ea:	189b      	adds	r3, r3, r2
 80068ec:	2100      	movs	r1, #0
 80068ee:	0018      	movs	r0, r3
 80068f0:	f7ff fba2 	bl	8006038 <write_page>
					  ++fobj->addr_index;
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	781b      	ldrb	r3, [r3, #0]
 80068f8:	3301      	adds	r3, #1
 80068fa:	b2da      	uxtb	r2, r3
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	701a      	strb	r2, [r3, #0]
				 break;
 8006900:	e023      	b.n	800694a <write_operations+0x3da>
 8006902:	46c0      	nop			@ (mov r8, r8)
 8006904:	20000290 	.word	0x20000290
					  fobj->crc_val = crc_16((const unsigned char*)fobj->ui16_buffer,3);
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	3302      	adds	r3, #2
 800690c:	2103      	movs	r1, #3
 800690e:	0018      	movs	r0, r3
 8006910:	f7ff fafc 	bl	8005f0c <crc_16>
 8006914:	0003      	movs	r3, r0
 8006916:	001a      	movs	r2, r3
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	821a      	strh	r2, [r3, #16]
					  fobj->ui16_buffer[fobj->addr_index-4] = fobj->crc_val;
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	781b      	ldrb	r3, [r3, #0]
 8006920:	3b04      	subs	r3, #4
 8006922:	687a      	ldr	r2, [r7, #4]
 8006924:	8a11      	ldrh	r1, [r2, #16]
 8006926:	687a      	ldr	r2, [r7, #4]
 8006928:	005b      	lsls	r3, r3, #1
 800692a:	18d3      	adds	r3, r2, r3
 800692c:	3302      	adds	r3, #2
 800692e:	1c0a      	adds	r2, r1, #0
 8006930:	801a      	strh	r2, [r3, #0]
					  write_page(fobj->write_addr + fobj->addr_index , fobj->crc_val);
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	68db      	ldr	r3, [r3, #12]
 8006936:	687a      	ldr	r2, [r7, #4]
 8006938:	7812      	ldrb	r2, [r2, #0]
 800693a:	189a      	adds	r2, r3, r2
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	8a1b      	ldrh	r3, [r3, #16]
 8006940:	0019      	movs	r1, r3
 8006942:	0010      	movs	r0, r2
 8006944:	f7ff fb78 	bl	8006038 <write_page>
			  break;
 8006948:	46c0      	nop			@ (mov r8, r8)
		  }
		  ++fobj->addr_index;
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	781b      	ldrb	r3, [r3, #0]
 800694e:	3301      	adds	r3, #1
 8006950:	b2da      	uxtb	r2, r3
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	701a      	strb	r2, [r3, #0]
	  while(fobj->addr_index < 9)
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	781b      	ldrb	r3, [r3, #0]
 800695a:	2b08      	cmp	r3, #8
 800695c:	d800      	bhi.n	8006960 <write_operations+0x3f0>
 800695e:	e60c      	b.n	800657a <write_operations+0xa>
	  }
	  fobj->addr_index=0;
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	2200      	movs	r2, #0
 8006964:	701a      	strb	r2, [r3, #0]
}
 8006966:	46c0      	nop			@ (mov r8, r8)
 8006968:	46bd      	mov	sp, r7
 800696a:	b002      	add	sp, #8
 800696c:	bd80      	pop	{r7, pc}
 800696e:	46c0      	nop			@ (mov r8, r8)

08006970 <copy_struct>:

static void copy_struct(void)
{
 8006970:	b580      	push	{r7, lr}
 8006972:	af00      	add	r7, sp, #0
	  motor_cpy.led_1_flag = motor.led_1_flag;
 8006974:	4b15      	ldr	r3, [pc, #84]	@ (80069cc <copy_struct+0x5c>)
 8006976:	781a      	ldrb	r2, [r3, #0]
 8006978:	4b15      	ldr	r3, [pc, #84]	@ (80069d0 <copy_struct+0x60>)
 800697a:	701a      	strb	r2, [r3, #0]
	  motor_cpy.led_2_flag = motor.led_2_flag;
 800697c:	4b13      	ldr	r3, [pc, #76]	@ (80069cc <copy_struct+0x5c>)
 800697e:	785a      	ldrb	r2, [r3, #1]
 8006980:	4b13      	ldr	r3, [pc, #76]	@ (80069d0 <copy_struct+0x60>)
 8006982:	705a      	strb	r2, [r3, #1]
	  motor_cpy.buzzer_flag = motor.buzzer_flag;
 8006984:	4b11      	ldr	r3, [pc, #68]	@ (80069cc <copy_struct+0x5c>)
 8006986:	789a      	ldrb	r2, [r3, #2]
 8006988:	4b11      	ldr	r3, [pc, #68]	@ (80069d0 <copy_struct+0x60>)
 800698a:	709a      	strb	r2, [r3, #2]
	  motor_cpy.speaker_flag = motor.speaker_flag;
 800698c:	4b0f      	ldr	r3, [pc, #60]	@ (80069cc <copy_struct+0x5c>)
 800698e:	78da      	ldrb	r2, [r3, #3]
 8006990:	4b0f      	ldr	r3, [pc, #60]	@ (80069d0 <copy_struct+0x60>)
 8006992:	70da      	strb	r2, [r3, #3]
	  motor_cpy.motor_flag.manuel_mode = motor.motor_flag.manuel_mode;
 8006994:	4b0d      	ldr	r3, [pc, #52]	@ (80069cc <copy_struct+0x5c>)
 8006996:	795a      	ldrb	r2, [r3, #5]
 8006998:	4b0d      	ldr	r3, [pc, #52]	@ (80069d0 <copy_struct+0x60>)
 800699a:	715a      	strb	r2, [r3, #5]
	  motor_cpy.motor_flag.auto_mode = motor.motor_flag.auto_mode;
 800699c:	4b0b      	ldr	r3, [pc, #44]	@ (80069cc <copy_struct+0x5c>)
 800699e:	791a      	ldrb	r2, [r3, #4]
 80069a0:	4b0b      	ldr	r3, [pc, #44]	@ (80069d0 <copy_struct+0x60>)
 80069a2:	711a      	strb	r2, [r3, #4]
	  motor_cpy.motor_flag.stop_mode = motor.motor_flag.stop_mode;
 80069a4:	4b09      	ldr	r3, [pc, #36]	@ (80069cc <copy_struct+0x5c>)
 80069a6:	7a1a      	ldrb	r2, [r3, #8]
 80069a8:	4b09      	ldr	r3, [pc, #36]	@ (80069d0 <copy_struct+0x60>)
 80069aa:	721a      	strb	r2, [r3, #8]
	  motor_cpy.motor_flag.forward = motor.motor_flag.forward;
 80069ac:	4b07      	ldr	r3, [pc, #28]	@ (80069cc <copy_struct+0x5c>)
 80069ae:	799a      	ldrb	r2, [r3, #6]
 80069b0:	4b07      	ldr	r3, [pc, #28]	@ (80069d0 <copy_struct+0x60>)
 80069b2:	719a      	strb	r2, [r3, #6]
	  motor_cpy.motor_flag.backward = motor.motor_flag.backward;
 80069b4:	4b05      	ldr	r3, [pc, #20]	@ (80069cc <copy_struct+0x5c>)
 80069b6:	79da      	ldrb	r2, [r3, #7]
 80069b8:	4b05      	ldr	r3, [pc, #20]	@ (80069d0 <copy_struct+0x60>)
 80069ba:	71da      	strb	r2, [r3, #7]
	  motor_cpy.motor_flag.speed = motor.motor_flag.speed;
 80069bc:	4b03      	ldr	r3, [pc, #12]	@ (80069cc <copy_struct+0x5c>)
 80069be:	7a5a      	ldrb	r2, [r3, #9]
 80069c0:	4b03      	ldr	r3, [pc, #12]	@ (80069d0 <copy_struct+0x60>)
 80069c2:	725a      	strb	r2, [r3, #9]
}
 80069c4:	46c0      	nop			@ (mov r8, r8)
 80069c6:	46bd      	mov	sp, r7
 80069c8:	bd80      	pop	{r7, pc}
 80069ca:	46c0      	nop			@ (mov r8, r8)
 80069cc:	20000290 	.word	0x20000290
 80069d0:	200004b8 	.word	0x200004b8

080069d4 <rs485_transmit_package>:
static void rs485_crc_control(rs485_parser_t*);
static void mobj_erase(rs485_parser_t*);
static void mobj_flag_reset(rs485_parser_t*);

void rs485_transmit_package(uint8_t *ptr,uint16_t size)
{
 80069d4:	b590      	push	{r4, r7, lr}
 80069d6:	b083      	sub	sp, #12
 80069d8:	af00      	add	r7, sp, #0
 80069da:	6078      	str	r0, [r7, #4]
 80069dc:	000a      	movs	r2, r1
 80069de:	1cbb      	adds	r3, r7, #2
 80069e0:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin(RS485_DIR_GPIO_Port, RS485_DIR_Pin, GPIO_PIN_SET);
 80069e2:	2380      	movs	r3, #128	@ 0x80
 80069e4:	0119      	lsls	r1, r3, #4
 80069e6:	2390      	movs	r3, #144	@ 0x90
 80069e8:	05db      	lsls	r3, r3, #23
 80069ea:	2201      	movs	r2, #1
 80069ec:	0018      	movs	r0, r3
 80069ee:	f7fc fcc4 	bl	800337a <HAL_GPIO_WritePin>
	HAL_UART_Transmit(&huart1,(uint8_t*)ptr,size,2000);
 80069f2:	23fa      	movs	r3, #250	@ 0xfa
 80069f4:	00dc      	lsls	r4, r3, #3
 80069f6:	1cbb      	adds	r3, r7, #2
 80069f8:	881a      	ldrh	r2, [r3, #0]
 80069fa:	6879      	ldr	r1, [r7, #4]
 80069fc:	4807      	ldr	r0, [pc, #28]	@ (8006a1c <rs485_transmit_package+0x48>)
 80069fe:	0023      	movs	r3, r4
 8006a00:	f7fd fa90 	bl	8003f24 <HAL_UART_Transmit>
	HAL_GPIO_WritePin(RS485_DIR_GPIO_Port, RS485_DIR_Pin, GPIO_PIN_RESET);
 8006a04:	2380      	movs	r3, #128	@ 0x80
 8006a06:	0119      	lsls	r1, r3, #4
 8006a08:	2390      	movs	r3, #144	@ 0x90
 8006a0a:	05db      	lsls	r3, r3, #23
 8006a0c:	2200      	movs	r2, #0
 8006a0e:	0018      	movs	r0, r3
 8006a10:	f7fc fcb3 	bl	800337a <HAL_GPIO_WritePin>
}
 8006a14:	46c0      	nop			@ (mov r8, r8)
 8006a16:	46bd      	mov	sp, r7
 8006a18:	b003      	add	sp, #12
 8006a1a:	bd90      	pop	{r4, r7, pc}
 8006a1c:	20000200 	.word	0x20000200

08006a20 <rs485_receive_package>:
void rs485_receive_package(void)
{
 8006a20:	b580      	push	{r7, lr}
 8006a22:	af00      	add	r7, sp, #0
	/*
	 *  Serial Arayüzden 1 byte geldiğinde UART_IRQHANDLERdan dönen 1 byte veriyi al
	 */
	HAL_UART_Receive_IT(&huart1,&mobj.receive_data, 1);
 8006a24:	4908      	ldr	r1, [pc, #32]	@ (8006a48 <rs485_receive_package+0x28>)
 8006a26:	4b09      	ldr	r3, [pc, #36]	@ (8006a4c <rs485_receive_package+0x2c>)
 8006a28:	2201      	movs	r2, #1
 8006a2a:	0018      	movs	r0, r3
 8006a2c:	f7fd fb19 	bl	8004062 <HAL_UART_Receive_IT>

	/*
	 *  State machine ile parser kodunu uygula
	 */
	rs485_format_control(&mobj);
 8006a30:	4b07      	ldr	r3, [pc, #28]	@ (8006a50 <rs485_receive_package+0x30>)
 8006a32:	0018      	movs	r0, r3
 8006a34:	f000 f80e 	bl	8006a54 <rs485_format_control>

	/*
	 *  State machine uygulama bayrak kontrolü
	 */
	rs485_crc_control(&mobj);
 8006a38:	4b05      	ldr	r3, [pc, #20]	@ (8006a50 <rs485_receive_package+0x30>)
 8006a3a:	0018      	movs	r0, r3
 8006a3c:	f000 f972 	bl	8006d24 <rs485_crc_control>
}
 8006a40:	46c0      	nop			@ (mov r8, r8)
 8006a42:	46bd      	mov	sp, r7
 8006a44:	bd80      	pop	{r7, pc}
 8006a46:	46c0      	nop			@ (mov r8, r8)
 8006a48:	200004da 	.word	0x200004da
 8006a4c:	20000200 	.word	0x20000200
 8006a50:	200004cc 	.word	0x200004cc

08006a54 <rs485_format_control>:
void rs485_format_control(rs485_parser_t* mobj)
{
 8006a54:	b580      	push	{r7, lr}
 8006a56:	b082      	sub	sp, #8
 8006a58:	af00      	add	r7, sp, #0
 8006a5a:	6078      	str	r0, [r7, #4]
	switch(mobj->receive_data)
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	7b9b      	ldrb	r3, [r3, #14]
 8006a60:	2b2c      	cmp	r3, #44	@ 0x2c
 8006a62:	d009      	beq.n	8006a78 <rs485_format_control+0x24>
 8006a64:	dc12      	bgt.n	8006a8c <rs485_format_control+0x38>
 8006a66:	2b21      	cmp	r3, #33	@ 0x21
 8006a68:	d00b      	beq.n	8006a82 <rs485_format_control+0x2e>
 8006a6a:	2b24      	cmp	r3, #36	@ 0x24
 8006a6c:	d10e      	bne.n	8006a8c <rs485_format_control+0x38>
	{
	case '$':
		rs485_state_handler_HEADER(mobj);
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	0018      	movs	r0, r3
 8006a72:	f000 f814 	bl	8006a9e <rs485_state_handler_HEADER>
		break;
 8006a76:	e00e      	b.n	8006a96 <rs485_format_control+0x42>
	case ',':
		rs485_state_handler_COMMA(mobj);
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	0018      	movs	r0, r3
 8006a7c:	f000 f832 	bl	8006ae4 <rs485_state_handler_COMMA>
		break;
 8006a80:	e009      	b.n	8006a96 <rs485_format_control+0x42>
	case '!':
		rs485_state_handler_TRAILER(mobj);
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	0018      	movs	r0, r3
 8006a86:	f000 f92d 	bl	8006ce4 <rs485_state_handler_TRAILER>
		break;
 8006a8a:	e004      	b.n	8006a96 <rs485_format_control+0x42>
	default:
		rs485_state_handler_PACKET_CHECK(mobj);
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	0018      	movs	r0, r3
 8006a90:	f000 f8a9 	bl	8006be6 <rs485_state_handler_PACKET_CHECK>
		break;
 8006a94:	46c0      	nop			@ (mov r8, r8)
	}
}
 8006a96:	46c0      	nop			@ (mov r8, r8)
 8006a98:	46bd      	mov	sp, r7
 8006a9a:	b002      	add	sp, #8
 8006a9c:	bd80      	pop	{r7, pc}

08006a9e <rs485_state_handler_HEADER>:
static void rs485_state_handler_HEADER(rs485_parser_t* mobj)
{
 8006a9e:	b580      	push	{r7, lr}
 8006aa0:	b082      	sub	sp, #8
 8006aa2:	af00      	add	r7, sp, #0
 8006aa4:	6078      	str	r0, [r7, #4]
	if(mobj->ui8index >= 2)
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	781b      	ldrb	r3, [r3, #0]
 8006aaa:	2b01      	cmp	r3, #1
 8006aac:	d907      	bls.n	8006abe <rs485_state_handler_HEADER+0x20>
	{
		mobj->active_state = DATA_CHECHKED;
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	2202      	movs	r2, #2
 8006ab2:	73da      	strb	r2, [r3, #15]
		rs485_state_handler_PACKET_CHECK(mobj);
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	0018      	movs	r0, r3
 8006ab8:	f000 f895 	bl	8006be6 <rs485_state_handler_PACKET_CHECK>
	else
	{
		mobj->flag = FORMAT_BUSY;
		mobj->ui8buffer[mobj->ui8index++] = mobj->receive_data;
	}
}
 8006abc:	e00e      	b.n	8006adc <rs485_state_handler_HEADER+0x3e>
		mobj->flag = FORMAT_BUSY;
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	2202      	movs	r2, #2
 8006ac2:	741a      	strb	r2, [r3, #16]
		mobj->ui8buffer[mobj->ui8index++] = mobj->receive_data;
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	781b      	ldrb	r3, [r3, #0]
 8006ac8:	1c5a      	adds	r2, r3, #1
 8006aca:	b2d1      	uxtb	r1, r2
 8006acc:	687a      	ldr	r2, [r7, #4]
 8006ace:	7011      	strb	r1, [r2, #0]
 8006ad0:	0019      	movs	r1, r3
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	7b9a      	ldrb	r2, [r3, #14]
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	185b      	adds	r3, r3, r1
 8006ada:	705a      	strb	r2, [r3, #1]
}
 8006adc:	46c0      	nop			@ (mov r8, r8)
 8006ade:	46bd      	mov	sp, r7
 8006ae0:	b002      	add	sp, #8
 8006ae2:	bd80      	pop	{r7, pc}

08006ae4 <rs485_state_handler_COMMA>:
static void rs485_state_handler_COMMA(rs485_parser_t* mobj)
{
 8006ae4:	b580      	push	{r7, lr}
 8006ae6:	b082      	sub	sp, #8
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	6078      	str	r0, [r7, #4]
	mobj->flag = FORMAT_BUSY;
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	2202      	movs	r2, #2
 8006af0:	741a      	strb	r2, [r3, #16]

	if(mobj->ui8buffer[mobj->ui8index-1] == '$')
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	781b      	ldrb	r3, [r3, #0]
 8006af6:	3b01      	subs	r3, #1
 8006af8:	687a      	ldr	r2, [r7, #4]
 8006afa:	18d3      	adds	r3, r2, r3
 8006afc:	785b      	ldrb	r3, [r3, #1]
 8006afe:	2b24      	cmp	r3, #36	@ 0x24
 8006b00:	d10f      	bne.n	8006b22 <rs485_state_handler_COMMA+0x3e>
	{//uart paket formatındaki 1.virgül
		mobj->ui8buffer[mobj->ui8index++] = mobj->receive_data;
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	781b      	ldrb	r3, [r3, #0]
 8006b06:	1c5a      	adds	r2, r3, #1
 8006b08:	b2d1      	uxtb	r1, r2
 8006b0a:	687a      	ldr	r2, [r7, #4]
 8006b0c:	7011      	strb	r1, [r2, #0]
 8006b0e:	0019      	movs	r1, r3
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	7b9a      	ldrb	r2, [r3, #14]
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	185b      	adds	r3, r3, r1
 8006b18:	705a      	strb	r2, [r3, #1]

		mobj->active_state = COMMAND_CHECHKED;
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	2201      	movs	r2, #1
 8006b1e:	73da      	strb	r2, [r3, #15]
	}
	else
	{
		mobj->flag = FORMAT_ERROR;
	}
}
 8006b20:	e05d      	b.n	8006bde <rs485_state_handler_COMMA+0xfa>
	else if((mobj->ui8buffer[mobj->ui8index-3] == '$') & (mobj->ui8buffer[mobj->ui8index-2] == ','))
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	781b      	ldrb	r3, [r3, #0]
 8006b26:	3b03      	subs	r3, #3
 8006b28:	687a      	ldr	r2, [r7, #4]
 8006b2a:	18d3      	adds	r3, r2, r3
 8006b2c:	785b      	ldrb	r3, [r3, #1]
 8006b2e:	3b24      	subs	r3, #36	@ 0x24
 8006b30:	425a      	negs	r2, r3
 8006b32:	4153      	adcs	r3, r2
 8006b34:	b2db      	uxtb	r3, r3
 8006b36:	687a      	ldr	r2, [r7, #4]
 8006b38:	7812      	ldrb	r2, [r2, #0]
 8006b3a:	3a02      	subs	r2, #2
 8006b3c:	6879      	ldr	r1, [r7, #4]
 8006b3e:	188a      	adds	r2, r1, r2
 8006b40:	7852      	ldrb	r2, [r2, #1]
 8006b42:	3a2c      	subs	r2, #44	@ 0x2c
 8006b44:	4251      	negs	r1, r2
 8006b46:	414a      	adcs	r2, r1
 8006b48:	b2d2      	uxtb	r2, r2
 8006b4a:	4013      	ands	r3, r2
 8006b4c:	b2db      	uxtb	r3, r3
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d00f      	beq.n	8006b72 <rs485_state_handler_COMMA+0x8e>
		mobj->ui8buffer[mobj->ui8index++] = mobj->receive_data;
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	781b      	ldrb	r3, [r3, #0]
 8006b56:	1c5a      	adds	r2, r3, #1
 8006b58:	b2d1      	uxtb	r1, r2
 8006b5a:	687a      	ldr	r2, [r7, #4]
 8006b5c:	7011      	strb	r1, [r2, #0]
 8006b5e:	0019      	movs	r1, r3
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	7b9a      	ldrb	r2, [r3, #14]
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	185b      	adds	r3, r3, r1
 8006b68:	705a      	strb	r2, [r3, #1]
		mobj->active_state = DATA_CHECHKED;
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	2202      	movs	r2, #2
 8006b6e:	73da      	strb	r2, [r3, #15]
}
 8006b70:	e035      	b.n	8006bde <rs485_state_handler_COMMA+0xfa>
	else if((mobj->ui8buffer[mobj->ui8index-6] == '$') & (mobj->ui8buffer[mobj->ui8index-5] == ',') & \
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	781b      	ldrb	r3, [r3, #0]
 8006b76:	3b06      	subs	r3, #6
 8006b78:	687a      	ldr	r2, [r7, #4]
 8006b7a:	18d3      	adds	r3, r2, r3
 8006b7c:	785b      	ldrb	r3, [r3, #1]
 8006b7e:	3b24      	subs	r3, #36	@ 0x24
 8006b80:	425a      	negs	r2, r3
 8006b82:	4153      	adcs	r3, r2
 8006b84:	b2db      	uxtb	r3, r3
 8006b86:	687a      	ldr	r2, [r7, #4]
 8006b88:	7812      	ldrb	r2, [r2, #0]
 8006b8a:	3a05      	subs	r2, #5
 8006b8c:	6879      	ldr	r1, [r7, #4]
 8006b8e:	188a      	adds	r2, r1, r2
 8006b90:	7852      	ldrb	r2, [r2, #1]
 8006b92:	3a2c      	subs	r2, #44	@ 0x2c
 8006b94:	4251      	negs	r1, r2
 8006b96:	414a      	adcs	r2, r1
 8006b98:	b2d2      	uxtb	r2, r2
 8006b9a:	4013      	ands	r3, r2
 8006b9c:	b2db      	uxtb	r3, r3
 8006b9e:	0019      	movs	r1, r3
			(mobj->ui8buffer[mobj->ui8index-3] == ','))
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	781b      	ldrb	r3, [r3, #0]
 8006ba4:	3b03      	subs	r3, #3
 8006ba6:	687a      	ldr	r2, [r7, #4]
 8006ba8:	18d3      	adds	r3, r2, r3
 8006baa:	785b      	ldrb	r3, [r3, #1]
 8006bac:	3b2c      	subs	r3, #44	@ 0x2c
 8006bae:	425a      	negs	r2, r3
 8006bb0:	4153      	adcs	r3, r2
 8006bb2:	b2db      	uxtb	r3, r3
	else if((mobj->ui8buffer[mobj->ui8index-6] == '$') & (mobj->ui8buffer[mobj->ui8index-5] == ',') & \
 8006bb4:	400b      	ands	r3, r1
 8006bb6:	d00f      	beq.n	8006bd8 <rs485_state_handler_COMMA+0xf4>
		mobj->ui8buffer[mobj->ui8index++] = mobj->receive_data;
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	781b      	ldrb	r3, [r3, #0]
 8006bbc:	1c5a      	adds	r2, r3, #1
 8006bbe:	b2d1      	uxtb	r1, r2
 8006bc0:	687a      	ldr	r2, [r7, #4]
 8006bc2:	7011      	strb	r1, [r2, #0]
 8006bc4:	0019      	movs	r1, r3
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	7b9a      	ldrb	r2, [r3, #14]
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	185b      	adds	r3, r3, r1
 8006bce:	705a      	strb	r2, [r3, #1]
		mobj->active_state = TRAILER_CHECHKED;
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	2203      	movs	r2, #3
 8006bd4:	73da      	strb	r2, [r3, #15]
}
 8006bd6:	e002      	b.n	8006bde <rs485_state_handler_COMMA+0xfa>
		mobj->flag = FORMAT_ERROR;
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	2200      	movs	r2, #0
 8006bdc:	741a      	strb	r2, [r3, #16]
}
 8006bde:	46c0      	nop			@ (mov r8, r8)
 8006be0:	46bd      	mov	sp, r7
 8006be2:	b002      	add	sp, #8
 8006be4:	bd80      	pop	{r7, pc}

08006be6 <rs485_state_handler_PACKET_CHECK>:
static void rs485_state_handler_PACKET_CHECK(rs485_parser_t* mobj)
{
 8006be6:	b580      	push	{r7, lr}
 8006be8:	b082      	sub	sp, #8
 8006bea:	af00      	add	r7, sp, #0
 8006bec:	6078      	str	r0, [r7, #4]
	if(mobj->active_state == COMMAND_CHECHKED)
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	7bdb      	ldrb	r3, [r3, #15]
 8006bf2:	2b01      	cmp	r3, #1
 8006bf4:	d112      	bne.n	8006c1c <rs485_state_handler_PACKET_CHECK+0x36>
	{
		mobj->flag = FORMAT_BUSY;
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	2202      	movs	r2, #2
 8006bfa:	741a      	strb	r2, [r3, #16]

		mobj->ui8buffer[mobj->ui8index++] = mobj->receive_data;
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	781b      	ldrb	r3, [r3, #0]
 8006c00:	1c5a      	adds	r2, r3, #1
 8006c02:	b2d1      	uxtb	r1, r2
 8006c04:	687a      	ldr	r2, [r7, #4]
 8006c06:	7011      	strb	r1, [r2, #0]
 8006c08:	0019      	movs	r1, r3
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	7b9a      	ldrb	r2, [r3, #14]
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	185b      	adds	r3, r3, r1
 8006c12:	705a      	strb	r2, [r3, #1]

		mobj->active_state = NOT_CHECHKED;
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	2200      	movs	r2, #0
 8006c18:	73da      	strb	r2, [r3, #15]
	}
	else if(mobj->active_state == NOT_CHECHKED) //Bu ifade hem ilk başta gelen sıfır için ana nesneyi sıfırlar
	{											//hem de ilk değer sayı olarak gelirse buraya girer
		mobj->flag = FORMAT_ERROR;
	}
}
 8006c1a:	e05f      	b.n	8006cdc <rs485_state_handler_PACKET_CHECK+0xf6>
	else if(mobj->active_state == DATA_CHECHKED)
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	7bdb      	ldrb	r3, [r3, #15]
 8006c20:	2b02      	cmp	r3, #2
 8006c22:	d122      	bne.n	8006c6a <rs485_state_handler_PACKET_CHECK+0x84>
		mobj->flag = FORMAT_BUSY;
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	2202      	movs	r2, #2
 8006c28:	741a      	strb	r2, [r3, #16]
		mobj->ui8buffer[mobj->ui8index++] = mobj->receive_data;
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	781b      	ldrb	r3, [r3, #0]
 8006c2e:	1c5a      	adds	r2, r3, #1
 8006c30:	b2d1      	uxtb	r1, r2
 8006c32:	687a      	ldr	r2, [r7, #4]
 8006c34:	7011      	strb	r1, [r2, #0]
 8006c36:	0019      	movs	r1, r3
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	7b9a      	ldrb	r2, [r3, #14]
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	185b      	adds	r3, r3, r1
 8006c40:	705a      	strb	r2, [r3, #1]
		if(mobj->ui8index == 5)	//birden fazla $ işareti gelmesine karşı önlem (sorun = örneğin 6.elemanda $ olabilir)
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	781b      	ldrb	r3, [r3, #0]
 8006c46:	2b05      	cmp	r3, #5
 8006c48:	d103      	bne.n	8006c52 <rs485_state_handler_PACKET_CHECK+0x6c>
			mobj->active_state = DATA_CHECHKED;
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	2202      	movs	r2, #2
 8006c4e:	73da      	strb	r2, [r3, #15]
}
 8006c50:	e044      	b.n	8006cdc <rs485_state_handler_PACKET_CHECK+0xf6>
		else if(mobj->ui8index == 6)
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	781b      	ldrb	r3, [r3, #0]
 8006c56:	2b06      	cmp	r3, #6
 8006c58:	d103      	bne.n	8006c62 <rs485_state_handler_PACKET_CHECK+0x7c>
			mobj->active_state = NOT_CHECHKED;
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	2200      	movs	r2, #0
 8006c5e:	73da      	strb	r2, [r3, #15]
}
 8006c60:	e03c      	b.n	8006cdc <rs485_state_handler_PACKET_CHECK+0xf6>
			mobj->flag = FORMAT_ERROR;
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	2200      	movs	r2, #0
 8006c66:	741a      	strb	r2, [r3, #16]
}
 8006c68:	e038      	b.n	8006cdc <rs485_state_handler_PACKET_CHECK+0xf6>
	else if(mobj->active_state == TRAILER_CHECHKED)
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	7bdb      	ldrb	r3, [r3, #15]
 8006c6e:	2b03      	cmp	r3, #3
 8006c70:	d112      	bne.n	8006c98 <rs485_state_handler_PACKET_CHECK+0xb2>
		mobj->flag = FORMAT_BUSY;
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	2202      	movs	r2, #2
 8006c76:	741a      	strb	r2, [r3, #16]
		mobj->ui8buffer[mobj->ui8index++] = mobj->receive_data;
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	781b      	ldrb	r3, [r3, #0]
 8006c7c:	1c5a      	adds	r2, r3, #1
 8006c7e:	b2d1      	uxtb	r1, r2
 8006c80:	687a      	ldr	r2, [r7, #4]
 8006c82:	7011      	strb	r1, [r2, #0]
 8006c84:	0019      	movs	r1, r3
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	7b9a      	ldrb	r2, [r3, #14]
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	185b      	adds	r3, r3, r1
 8006c8e:	705a      	strb	r2, [r3, #1]
		mobj->active_state = NOT_CHECHKED;
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	2200      	movs	r2, #0
 8006c94:	73da      	strb	r2, [r3, #15]
}
 8006c96:	e021      	b.n	8006cdc <rs485_state_handler_PACKET_CHECK+0xf6>
	else if(mobj->active_state == CRC_CHECHKED)
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	7bdb      	ldrb	r3, [r3, #15]
 8006c9c:	2b04      	cmp	r3, #4
 8006c9e:	d116      	bne.n	8006cce <rs485_state_handler_PACKET_CHECK+0xe8>
		mobj->flag = FORMAT_BUSY;
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	2202      	movs	r2, #2
 8006ca4:	741a      	strb	r2, [r3, #16]
		mobj->ui8buffer[mobj->ui8index++] = mobj->receive_data;
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	781b      	ldrb	r3, [r3, #0]
 8006caa:	1c5a      	adds	r2, r3, #1
 8006cac:	b2d1      	uxtb	r1, r2
 8006cae:	687a      	ldr	r2, [r7, #4]
 8006cb0:	7011      	strb	r1, [r2, #0]
 8006cb2:	0019      	movs	r1, r3
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	7b9a      	ldrb	r2, [r3, #14]
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	185b      	adds	r3, r3, r1
 8006cbc:	705a      	strb	r2, [r3, #1]
		if(mobj->ui8index == CRC_Pos_2 + 1)
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	781b      	ldrb	r3, [r3, #0]
 8006cc2:	2b0a      	cmp	r3, #10
 8006cc4:	d10a      	bne.n	8006cdc <rs485_state_handler_PACKET_CHECK+0xf6>
			mobj->flag = FORMAT_OK; //2 byte crc alımı tamamlandı paket formatı alımı bitti
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	2201      	movs	r2, #1
 8006cca:	741a      	strb	r2, [r3, #16]
}
 8006ccc:	e006      	b.n	8006cdc <rs485_state_handler_PACKET_CHECK+0xf6>
	else if(mobj->active_state == NOT_CHECHKED) //Bu ifade hem ilk başta gelen sıfır için ana nesneyi sıfırlar
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	7bdb      	ldrb	r3, [r3, #15]
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d102      	bne.n	8006cdc <rs485_state_handler_PACKET_CHECK+0xf6>
		mobj->flag = FORMAT_ERROR;
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	2200      	movs	r2, #0
 8006cda:	741a      	strb	r2, [r3, #16]
}
 8006cdc:	46c0      	nop			@ (mov r8, r8)
 8006cde:	46bd      	mov	sp, r7
 8006ce0:	b002      	add	sp, #8
 8006ce2:	bd80      	pop	{r7, pc}

08006ce4 <rs485_state_handler_TRAILER>:
static void rs485_state_handler_TRAILER(rs485_parser_t* mobj)
{
 8006ce4:	b580      	push	{r7, lr}
 8006ce6:	b082      	sub	sp, #8
 8006ce8:	af00      	add	r7, sp, #0
 8006cea:	6078      	str	r0, [r7, #4]
	if(mobj->active_state == TRAILER_CHECHKED)
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	7bdb      	ldrb	r3, [r3, #15]
 8006cf0:	2b03      	cmp	r3, #3
 8006cf2:	d10f      	bne.n	8006d14 <rs485_state_handler_TRAILER+0x30>
	{
		mobj->ui8buffer[mobj->ui8index++] = mobj->receive_data;
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	781b      	ldrb	r3, [r3, #0]
 8006cf8:	1c5a      	adds	r2, r3, #1
 8006cfa:	b2d1      	uxtb	r1, r2
 8006cfc:	687a      	ldr	r2, [r7, #4]
 8006cfe:	7011      	strb	r1, [r2, #0]
 8006d00:	0019      	movs	r1, r3
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	7b9a      	ldrb	r2, [r3, #14]
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	185b      	adds	r3, r3, r1
 8006d0a:	705a      	strb	r2, [r3, #1]
		mobj->active_state = CRC_CHECHKED;
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	2204      	movs	r2, #4
 8006d10:	73da      	strb	r2, [r3, #15]
	}
	else
	{
		mobj->flag = FORMAT_ERROR;
	}
}
 8006d12:	e002      	b.n	8006d1a <rs485_state_handler_TRAILER+0x36>
		mobj->flag = FORMAT_ERROR;
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	2200      	movs	r2, #0
 8006d18:	741a      	strb	r2, [r3, #16]
}
 8006d1a:	46c0      	nop			@ (mov r8, r8)
 8006d1c:	46bd      	mov	sp, r7
 8006d1e:	b002      	add	sp, #8
 8006d20:	bd80      	pop	{r7, pc}
	...

08006d24 <rs485_crc_control>:
static void rs485_crc_control(rs485_parser_t* mobj)
{
 8006d24:	b580      	push	{r7, lr}
 8006d26:	b084      	sub	sp, #16
 8006d28:	af00      	add	r7, sp, #0
 8006d2a:	6078      	str	r0, [r7, #4]
	if(mobj->flag == FORMAT_OK)
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	7c1b      	ldrb	r3, [r3, #16]
 8006d30:	2b01      	cmp	r3, #1
 8006d32:	d12e      	bne.n	8006d92 <rs485_crc_control+0x6e>
	{
		mobj->ui16crc = crc_16((const unsigned char*)mobj->ui8buffer,BUFFER_SIZE-2);
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	3301      	adds	r3, #1
 8006d38:	2108      	movs	r1, #8
 8006d3a:	0018      	movs	r0, r3
 8006d3c:	f7ff f8e6 	bl	8005f0c <crc_16>
 8006d40:	0003      	movs	r3, r0
 8006d42:	001a      	movs	r2, r3
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	819a      	strh	r2, [r3, #12]

		uint16_t crc_check = ((mobj->ui8buffer[8] << 8U) | mobj->ui8buffer[9]);
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	7a5b      	ldrb	r3, [r3, #9]
 8006d4c:	021b      	lsls	r3, r3, #8
 8006d4e:	b21a      	sxth	r2, r3
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	7a9b      	ldrb	r3, [r3, #10]
 8006d54:	b21b      	sxth	r3, r3
 8006d56:	4313      	orrs	r3, r2
 8006d58:	b21a      	sxth	r2, r3
 8006d5a:	210e      	movs	r1, #14
 8006d5c:	187b      	adds	r3, r7, r1
 8006d5e:	801a      	strh	r2, [r3, #0]

		if(crc_check == mobj->ui16crc)
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	899b      	ldrh	r3, [r3, #12]
 8006d64:	187a      	adds	r2, r7, r1
 8006d66:	8812      	ldrh	r2, [r2, #0]
 8006d68:	429a      	cmp	r2, r3
 8006d6a:	d108      	bne.n	8006d7e <rs485_crc_control+0x5a>
		{
			mobj_flag_reset(mobj);
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	0018      	movs	r0, r3
 8006d70:	f000 f850 	bl	8006e14 <mobj_flag_reset>
			rs485_find_user_command(mobj);
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	0018      	movs	r0, r3
 8006d78:	f000 f864 	bl	8006e44 <rs485_find_user_command>
	else if(mobj->flag == FORMAT_ERROR)
	{
		mobj_erase(mobj);
		rs485_transmit_package((uint8_t*)"FORMAT HATALI CRC HATALI TEKRAR KOMUT GONDERIN !!!\n",sizeof("FORMAT HATALI CRC HATALI TEKRAR KOMUT GONDERIN !!!\n"));
	}
}
 8006d7c:	e016      	b.n	8006dac <rs485_crc_control+0x88>
			mobj_erase(mobj);
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	0018      	movs	r0, r3
 8006d82:	f000 f81b 	bl	8006dbc <mobj_erase>
			rs485_transmit_package((uint8_t*)"CRC HATALI , BIT BOZULMASI VAR ORTAMDA GURULTU OLABILIR!!!\n",sizeof("CRC HATALI , BIT BOZULMASI VAR ORTAMDA GURULTU OLABILIR!!!\n"));
 8006d86:	4b0b      	ldr	r3, [pc, #44]	@ (8006db4 <rs485_crc_control+0x90>)
 8006d88:	213c      	movs	r1, #60	@ 0x3c
 8006d8a:	0018      	movs	r0, r3
 8006d8c:	f7ff fe22 	bl	80069d4 <rs485_transmit_package>
}
 8006d90:	e00c      	b.n	8006dac <rs485_crc_control+0x88>
	else if(mobj->flag == FORMAT_ERROR)
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	7c1b      	ldrb	r3, [r3, #16]
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d108      	bne.n	8006dac <rs485_crc_control+0x88>
		mobj_erase(mobj);
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	0018      	movs	r0, r3
 8006d9e:	f000 f80d 	bl	8006dbc <mobj_erase>
		rs485_transmit_package((uint8_t*)"FORMAT HATALI CRC HATALI TEKRAR KOMUT GONDERIN !!!\n",sizeof("FORMAT HATALI CRC HATALI TEKRAR KOMUT GONDERIN !!!\n"));
 8006da2:	4b05      	ldr	r3, [pc, #20]	@ (8006db8 <rs485_crc_control+0x94>)
 8006da4:	2134      	movs	r1, #52	@ 0x34
 8006da6:	0018      	movs	r0, r3
 8006da8:	f7ff fe14 	bl	80069d4 <rs485_transmit_package>
}
 8006dac:	46c0      	nop			@ (mov r8, r8)
 8006dae:	46bd      	mov	sp, r7
 8006db0:	b004      	add	sp, #16
 8006db2:	bd80      	pop	{r7, pc}
 8006db4:	0800bc8c 	.word	0x0800bc8c
 8006db8:	0800bcc8 	.word	0x0800bcc8

08006dbc <mobj_erase>:
static void mobj_erase(rs485_parser_t* mobj)
{
 8006dbc:	b580      	push	{r7, lr}
 8006dbe:	b082      	sub	sp, #8
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	6078      	str	r0, [r7, #4]
	for(mobj->ui8index=0;mobj->ui8index<BUFFER_SIZE;mobj->ui8index++)
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	2200      	movs	r2, #0
 8006dc8:	701a      	strb	r2, [r3, #0]
 8006dca:	e00c      	b.n	8006de6 <mobj_erase+0x2a>
	{
		mobj->ui8buffer[mobj->ui8index]=0;
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	781b      	ldrb	r3, [r3, #0]
 8006dd0:	001a      	movs	r2, r3
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	189b      	adds	r3, r3, r2
 8006dd6:	2200      	movs	r2, #0
 8006dd8:	705a      	strb	r2, [r3, #1]
	for(mobj->ui8index=0;mobj->ui8index<BUFFER_SIZE;mobj->ui8index++)
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	781b      	ldrb	r3, [r3, #0]
 8006dde:	3301      	adds	r3, #1
 8006de0:	b2da      	uxtb	r2, r3
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	701a      	strb	r2, [r3, #0]
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	781b      	ldrb	r3, [r3, #0]
 8006dea:	2b09      	cmp	r3, #9
 8006dec:	d9ee      	bls.n	8006dcc <mobj_erase+0x10>
	}
	mobj->active_state=NOT_CHECHKED;
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	2200      	movs	r2, #0
 8006df2:	73da      	strb	r2, [r3, #15]
	mobj->receive_data=0;
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	2200      	movs	r2, #0
 8006df8:	739a      	strb	r2, [r3, #14]
	mobj->ui16crc=0;
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	2200      	movs	r2, #0
 8006dfe:	819a      	strh	r2, [r3, #12]
	mobj->ui8index=0;
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	2200      	movs	r2, #0
 8006e04:	701a      	strb	r2, [r3, #0]
	mobj->crc = CRC_ERROR;
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	2200      	movs	r2, #0
 8006e0a:	745a      	strb	r2, [r3, #17]
}
 8006e0c:	46c0      	nop			@ (mov r8, r8)
 8006e0e:	46bd      	mov	sp, r7
 8006e10:	b002      	add	sp, #8
 8006e12:	bd80      	pop	{r7, pc}

08006e14 <mobj_flag_reset>:
static void mobj_flag_reset(rs485_parser_t* mobj)
{
 8006e14:	b580      	push	{r7, lr}
 8006e16:	b082      	sub	sp, #8
 8006e18:	af00      	add	r7, sp, #0
 8006e1a:	6078      	str	r0, [r7, #4]
	mobj->active_state=NOT_CHECHKED;
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	2200      	movs	r2, #0
 8006e20:	73da      	strb	r2, [r3, #15]
	mobj->receive_data=0;
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	2200      	movs	r2, #0
 8006e26:	739a      	strb	r2, [r3, #14]
	mobj->ui16crc=0;
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	2200      	movs	r2, #0
 8006e2c:	819a      	strh	r2, [r3, #12]
	mobj->ui8index=0;
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	2200      	movs	r2, #0
 8006e32:	701a      	strb	r2, [r3, #0]
	mobj->crc = CRC_OK;
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	2201      	movs	r2, #1
 8006e38:	745a      	strb	r2, [r3, #17]
}
 8006e3a:	46c0      	nop			@ (mov r8, r8)
 8006e3c:	46bd      	mov	sp, r7
 8006e3e:	b002      	add	sp, #8
 8006e40:	bd80      	pop	{r7, pc}
	...

08006e44 <rs485_find_user_command>:
void rs485_find_user_command(rs485_parser_t* mobj)
{
 8006e44:	b580      	push	{r7, lr}
 8006e46:	b082      	sub	sp, #8
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	6078      	str	r0, [r7, #4]
	//Id and data(1-2) find
	for(;mobj->ui8index<_arraylength(id_list);mobj->ui8index++)
 8006e4c:	e16e      	b.n	800712c <rs485_find_user_command+0x2e8>
	{
		if(id_list[mobj->ui8index] == mobj->ui8buffer[COMMAND_Pos])	//Find id
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	781b      	ldrb	r3, [r3, #0]
 8006e52:	001a      	movs	r2, r3
 8006e54:	4bbb      	ldr	r3, [pc, #748]	@ (8007144 <rs485_find_user_command+0x300>)
 8006e56:	5c9a      	ldrb	r2, [r3, r2]
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	78db      	ldrb	r3, [r3, #3]
 8006e5c:	429a      	cmp	r2, r3
 8006e5e:	d000      	beq.n	8006e62 <rs485_find_user_command+0x1e>
 8006e60:	e15e      	b.n	8007120 <rs485_find_user_command+0x2dc>
		{
			switch(id_list[mobj->ui8index])	//id bulundu
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	781b      	ldrb	r3, [r3, #0]
 8006e66:	001a      	movs	r2, r3
 8006e68:	4bb6      	ldr	r3, [pc, #728]	@ (8007144 <rs485_find_user_command+0x300>)
 8006e6a:	5c9b      	ldrb	r3, [r3, r2]
 8006e6c:	2b4f      	cmp	r3, #79	@ 0x4f
 8006e6e:	d900      	bls.n	8006e72 <rs485_find_user_command+0x2e>
 8006e70:	e13e      	b.n	80070f0 <rs485_find_user_command+0x2ac>
 8006e72:	009a      	lsls	r2, r3, #2
 8006e74:	4bb4      	ldr	r3, [pc, #720]	@ (8007148 <rs485_find_user_command+0x304>)
 8006e76:	18d3      	adds	r3, r2, r3
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	469f      	mov	pc, r3
			{
			case(LED_1_ID):
				if((mobj->ui8buffer[DATA1_Pos] == LED_1_DATA_CHECK) && (mobj->ui8buffer[DATA2_Pos] == LED_1_ENABLE))
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	795b      	ldrb	r3, [r3, #5]
 8006e80:	2b0b      	cmp	r3, #11
 8006e82:	d10c      	bne.n	8006e9e <rs485_find_user_command+0x5a>
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	799b      	ldrb	r3, [r3, #6]
 8006e88:	2b01      	cmp	r3, #1
 8006e8a:	d108      	bne.n	8006e9e <rs485_find_user_command+0x5a>
				{
					//Led1 Enable Status
					motor.led_1_flag = ENABLE;
 8006e8c:	4baf      	ldr	r3, [pc, #700]	@ (800714c <rs485_find_user_command+0x308>)
 8006e8e:	2201      	movs	r2, #1
 8006e90:	701a      	strb	r2, [r3, #0]
					rs485_transmit_package((uint8_t*)"LED-1 ENABLE\n",sizeof("LED-1 ENABLE\n"));
 8006e92:	4baf      	ldr	r3, [pc, #700]	@ (8007150 <rs485_find_user_command+0x30c>)
 8006e94:	210e      	movs	r1, #14
 8006e96:	0018      	movs	r0, r3
 8006e98:	f7ff fd9c 	bl	80069d4 <rs485_transmit_package>
				{
					//Led1 Disable Status
					motor.led_1_flag = DISABLE;
					rs485_transmit_package((uint8_t*)"LED-1 DISABLE\n",sizeof("LED-1 DISABLE\n"));
				}
				break;
 8006e9c:	e12a      	b.n	80070f4 <rs485_find_user_command+0x2b0>
				else if((mobj->ui8buffer[DATA1_Pos] == LED_1_DATA_CHECK) && (mobj->ui8buffer[DATA2_Pos] == LED_1_DISABLE))
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	795b      	ldrb	r3, [r3, #5]
 8006ea2:	2b0b      	cmp	r3, #11
 8006ea4:	d000      	beq.n	8006ea8 <rs485_find_user_command+0x64>
 8006ea6:	e125      	b.n	80070f4 <rs485_find_user_command+0x2b0>
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	799b      	ldrb	r3, [r3, #6]
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d000      	beq.n	8006eb2 <rs485_find_user_command+0x6e>
 8006eb0:	e120      	b.n	80070f4 <rs485_find_user_command+0x2b0>
					motor.led_1_flag = DISABLE;
 8006eb2:	4ba6      	ldr	r3, [pc, #664]	@ (800714c <rs485_find_user_command+0x308>)
 8006eb4:	2200      	movs	r2, #0
 8006eb6:	701a      	strb	r2, [r3, #0]
					rs485_transmit_package((uint8_t*)"LED-1 DISABLE\n",sizeof("LED-1 DISABLE\n"));
 8006eb8:	4ba6      	ldr	r3, [pc, #664]	@ (8007154 <rs485_find_user_command+0x310>)
 8006eba:	210f      	movs	r1, #15
 8006ebc:	0018      	movs	r0, r3
 8006ebe:	f7ff fd89 	bl	80069d4 <rs485_transmit_package>
				break;
 8006ec2:	e117      	b.n	80070f4 <rs485_find_user_command+0x2b0>
			case(LED_2_ID):
				if((mobj->ui8buffer[DATA1_Pos] == LED_2_DATA_CHECK) && (mobj->ui8buffer[DATA2_Pos] == LED_2_ENABLE))
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	795b      	ldrb	r3, [r3, #5]
 8006ec8:	2b0c      	cmp	r3, #12
 8006eca:	d10c      	bne.n	8006ee6 <rs485_find_user_command+0xa2>
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	799b      	ldrb	r3, [r3, #6]
 8006ed0:	2b01      	cmp	r3, #1
 8006ed2:	d108      	bne.n	8006ee6 <rs485_find_user_command+0xa2>
				{
					//Led2 Enable Status
					motor.led_2_flag = ENABLE;
 8006ed4:	4b9d      	ldr	r3, [pc, #628]	@ (800714c <rs485_find_user_command+0x308>)
 8006ed6:	2201      	movs	r2, #1
 8006ed8:	705a      	strb	r2, [r3, #1]
					rs485_transmit_package((uint8_t*)"LED-2 ENABLE\n",sizeof("LED-2 ENABLE\n"));
 8006eda:	4b9f      	ldr	r3, [pc, #636]	@ (8007158 <rs485_find_user_command+0x314>)
 8006edc:	210e      	movs	r1, #14
 8006ede:	0018      	movs	r0, r3
 8006ee0:	f7ff fd78 	bl	80069d4 <rs485_transmit_package>
				{
					//Led2 Disable Status
					motor.led_2_flag = DISABLE;
					rs485_transmit_package((uint8_t*)"LED-2 DISABLE\n",sizeof("LED-2 DISABLE\n"));
				}
				break;
 8006ee4:	e108      	b.n	80070f8 <rs485_find_user_command+0x2b4>
				else if((mobj->ui8buffer[DATA1_Pos] == LED_2_DATA_CHECK) && (mobj->ui8buffer[DATA2_Pos] == LED_2_DISABLE))
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	795b      	ldrb	r3, [r3, #5]
 8006eea:	2b0c      	cmp	r3, #12
 8006eec:	d000      	beq.n	8006ef0 <rs485_find_user_command+0xac>
 8006eee:	e103      	b.n	80070f8 <rs485_find_user_command+0x2b4>
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	799b      	ldrb	r3, [r3, #6]
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d000      	beq.n	8006efa <rs485_find_user_command+0xb6>
 8006ef8:	e0fe      	b.n	80070f8 <rs485_find_user_command+0x2b4>
					motor.led_2_flag = DISABLE;
 8006efa:	4b94      	ldr	r3, [pc, #592]	@ (800714c <rs485_find_user_command+0x308>)
 8006efc:	2200      	movs	r2, #0
 8006efe:	705a      	strb	r2, [r3, #1]
					rs485_transmit_package((uint8_t*)"LED-2 DISABLE\n",sizeof("LED-2 DISABLE\n"));
 8006f00:	4b96      	ldr	r3, [pc, #600]	@ (800715c <rs485_find_user_command+0x318>)
 8006f02:	210f      	movs	r1, #15
 8006f04:	0018      	movs	r0, r3
 8006f06:	f7ff fd65 	bl	80069d4 <rs485_transmit_package>
				break;
 8006f0a:	e0f5      	b.n	80070f8 <rs485_find_user_command+0x2b4>
			case(BUZZER_ID):
				if((mobj->ui8buffer[DATA1_Pos] == BUZZER_DATA_CHECK) && (mobj->ui8buffer[DATA2_Pos] == BUZZER_ENABLE))
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	795b      	ldrb	r3, [r3, #5]
 8006f10:	2b0d      	cmp	r3, #13
 8006f12:	d10c      	bne.n	8006f2e <rs485_find_user_command+0xea>
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	799b      	ldrb	r3, [r3, #6]
 8006f18:	2b01      	cmp	r3, #1
 8006f1a:	d108      	bne.n	8006f2e <rs485_find_user_command+0xea>
				{
					//Buzzer Enable Status
					motor.buzzer_flag = ENABLE;
 8006f1c:	4b8b      	ldr	r3, [pc, #556]	@ (800714c <rs485_find_user_command+0x308>)
 8006f1e:	2201      	movs	r2, #1
 8006f20:	709a      	strb	r2, [r3, #2]
					rs485_transmit_package((uint8_t*)"BUZZER ENABLE\n",sizeof("BUZZER ENABLE\n"));
 8006f22:	4b8f      	ldr	r3, [pc, #572]	@ (8007160 <rs485_find_user_command+0x31c>)
 8006f24:	210f      	movs	r1, #15
 8006f26:	0018      	movs	r0, r3
 8006f28:	f7ff fd54 	bl	80069d4 <rs485_transmit_package>
				{
					//Buzzer Disable Status
					motor.buzzer_flag = DISABLE;
					rs485_transmit_package((uint8_t*)"BUZZER DISABLE\n",sizeof("BUZZER DISABLE\n"));
				}
				break;
 8006f2c:	e0e6      	b.n	80070fc <rs485_find_user_command+0x2b8>
				else if((mobj->ui8buffer[DATA1_Pos] == BUZZER_DATA_CHECK) && (mobj->ui8buffer[DATA2_Pos] == BUZZER_DISABLE))
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	795b      	ldrb	r3, [r3, #5]
 8006f32:	2b0d      	cmp	r3, #13
 8006f34:	d000      	beq.n	8006f38 <rs485_find_user_command+0xf4>
 8006f36:	e0e1      	b.n	80070fc <rs485_find_user_command+0x2b8>
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	799b      	ldrb	r3, [r3, #6]
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d000      	beq.n	8006f42 <rs485_find_user_command+0xfe>
 8006f40:	e0dc      	b.n	80070fc <rs485_find_user_command+0x2b8>
					motor.buzzer_flag = DISABLE;
 8006f42:	4b82      	ldr	r3, [pc, #520]	@ (800714c <rs485_find_user_command+0x308>)
 8006f44:	2200      	movs	r2, #0
 8006f46:	709a      	strb	r2, [r3, #2]
					rs485_transmit_package((uint8_t*)"BUZZER DISABLE\n",sizeof("BUZZER DISABLE\n"));
 8006f48:	4b86      	ldr	r3, [pc, #536]	@ (8007164 <rs485_find_user_command+0x320>)
 8006f4a:	2110      	movs	r1, #16
 8006f4c:	0018      	movs	r0, r3
 8006f4e:	f7ff fd41 	bl	80069d4 <rs485_transmit_package>
				break;
 8006f52:	e0d3      	b.n	80070fc <rs485_find_user_command+0x2b8>
			case(SPEAKER_ID):
				if((mobj->ui8buffer[DATA1_Pos] == SPEAKER_DATA_CHECK) && (mobj->ui8buffer[DATA2_Pos] == SPEAKER_ENABLE))
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	795b      	ldrb	r3, [r3, #5]
 8006f58:	2b0a      	cmp	r3, #10
 8006f5a:	d10c      	bne.n	8006f76 <rs485_find_user_command+0x132>
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	799b      	ldrb	r3, [r3, #6]
 8006f60:	2b01      	cmp	r3, #1
 8006f62:	d108      	bne.n	8006f76 <rs485_find_user_command+0x132>
				{
					//Speaker Enable Status
					motor.speaker_flag = ENABLE;
 8006f64:	4b79      	ldr	r3, [pc, #484]	@ (800714c <rs485_find_user_command+0x308>)
 8006f66:	2201      	movs	r2, #1
 8006f68:	70da      	strb	r2, [r3, #3]
					rs485_transmit_package((uint8_t*)"SPEAKER ENABLE\n",sizeof("SPEAKER ENABLE\n"));
 8006f6a:	4b7f      	ldr	r3, [pc, #508]	@ (8007168 <rs485_find_user_command+0x324>)
 8006f6c:	2110      	movs	r1, #16
 8006f6e:	0018      	movs	r0, r3
 8006f70:	f7ff fd30 	bl	80069d4 <rs485_transmit_package>
				{
					//Speaker Disable Status
					motor.speaker_flag = DISABLE;
					rs485_transmit_package((uint8_t*)"SPEAKER DISABLE\n",sizeof("SPEAKER DISABLE\n"));
				}
				break;
 8006f74:	e0c4      	b.n	8007100 <rs485_find_user_command+0x2bc>
				else if((mobj->ui8buffer[DATA1_Pos] == SPEAKER_DATA_CHECK) && (mobj->ui8buffer[DATA2_Pos] == SPEAKER_DISABLE))
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	795b      	ldrb	r3, [r3, #5]
 8006f7a:	2b0a      	cmp	r3, #10
 8006f7c:	d000      	beq.n	8006f80 <rs485_find_user_command+0x13c>
 8006f7e:	e0bf      	b.n	8007100 <rs485_find_user_command+0x2bc>
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	799b      	ldrb	r3, [r3, #6]
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d000      	beq.n	8006f8a <rs485_find_user_command+0x146>
 8006f88:	e0ba      	b.n	8007100 <rs485_find_user_command+0x2bc>
					motor.speaker_flag = DISABLE;
 8006f8a:	4b70      	ldr	r3, [pc, #448]	@ (800714c <rs485_find_user_command+0x308>)
 8006f8c:	2200      	movs	r2, #0
 8006f8e:	70da      	strb	r2, [r3, #3]
					rs485_transmit_package((uint8_t*)"SPEAKER DISABLE\n",sizeof("SPEAKER DISABLE\n"));
 8006f90:	4b76      	ldr	r3, [pc, #472]	@ (800716c <rs485_find_user_command+0x328>)
 8006f92:	2111      	movs	r1, #17
 8006f94:	0018      	movs	r0, r3
 8006f96:	f7ff fd1d 	bl	80069d4 <rs485_transmit_package>
				break;
 8006f9a:	e0b1      	b.n	8007100 <rs485_find_user_command+0x2bc>
			case(MOTOR_STOP_ID):
				if((mobj->ui8buffer[DATA1_Pos] == MOTOR_STOP_DATA_CHECK) && (mobj->ui8buffer[DATA2_Pos] == MOTOR_STOP_ENABLE))
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	795b      	ldrb	r3, [r3, #5]
 8006fa0:	2b0d      	cmp	r3, #13
 8006fa2:	d000      	beq.n	8006fa6 <rs485_find_user_command+0x162>
 8006fa4:	e0ae      	b.n	8007104 <rs485_find_user_command+0x2c0>
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	799b      	ldrb	r3, [r3, #6]
 8006faa:	2b01      	cmp	r3, #1
 8006fac:	d000      	beq.n	8006fb0 <rs485_find_user_command+0x16c>
 8006fae:	e0a9      	b.n	8007104 <rs485_find_user_command+0x2c0>
				{
					//Motor Stop Enable Status
					motor.motor_flag.manuel_mode= DISABLE;
 8006fb0:	4b66      	ldr	r3, [pc, #408]	@ (800714c <rs485_find_user_command+0x308>)
 8006fb2:	2200      	movs	r2, #0
 8006fb4:	715a      	strb	r2, [r3, #5]
					motor.motor_flag.stop_mode = ENABLE;
 8006fb6:	4b65      	ldr	r3, [pc, #404]	@ (800714c <rs485_find_user_command+0x308>)
 8006fb8:	2201      	movs	r2, #1
 8006fba:	721a      	strb	r2, [r3, #8]
					motor.motor_flag.auto_mode = DISABLE;
 8006fbc:	4b63      	ldr	r3, [pc, #396]	@ (800714c <rs485_find_user_command+0x308>)
 8006fbe:	2200      	movs	r2, #0
 8006fc0:	711a      	strb	r2, [r3, #4]
					motor.motor_flag.backward = DISABLE;
 8006fc2:	4b62      	ldr	r3, [pc, #392]	@ (800714c <rs485_find_user_command+0x308>)
 8006fc4:	2200      	movs	r2, #0
 8006fc6:	71da      	strb	r2, [r3, #7]
					motor.motor_flag.forward = DISABLE;
 8006fc8:	4b60      	ldr	r3, [pc, #384]	@ (800714c <rs485_find_user_command+0x308>)
 8006fca:	2200      	movs	r2, #0
 8006fcc:	719a      	strb	r2, [r3, #6]
					motor.motor_flag.speed = DISABLE;
 8006fce:	4b5f      	ldr	r3, [pc, #380]	@ (800714c <rs485_find_user_command+0x308>)
 8006fd0:	2200      	movs	r2, #0
 8006fd2:	725a      	strb	r2, [r3, #9]
					rs485_transmit_package((uint8_t*)"MOTOR STOP\n",sizeof("MOTOR STOP\n"));
 8006fd4:	4b66      	ldr	r3, [pc, #408]	@ (8007170 <rs485_find_user_command+0x32c>)
 8006fd6:	210c      	movs	r1, #12
 8006fd8:	0018      	movs	r0, r3
 8006fda:	f7ff fcfb 	bl	80069d4 <rs485_transmit_package>
				}
				break;
 8006fde:	e091      	b.n	8007104 <rs485_find_user_command+0x2c0>
			case (MOTOR_MANUEL_ID):
					//Motor Manuel Mod Enable Status
					motor.motor_flag.manuel_mode= ENABLE;
 8006fe0:	4b5a      	ldr	r3, [pc, #360]	@ (800714c <rs485_find_user_command+0x308>)
 8006fe2:	2201      	movs	r2, #1
 8006fe4:	715a      	strb	r2, [r3, #5]
					motor.motor_flag.stop_mode = DISABLE;
 8006fe6:	4b59      	ldr	r3, [pc, #356]	@ (800714c <rs485_find_user_command+0x308>)
 8006fe8:	2200      	movs	r2, #0
 8006fea:	721a      	strb	r2, [r3, #8]
					motor.motor_flag.auto_mode = DISABLE;
 8006fec:	4b57      	ldr	r3, [pc, #348]	@ (800714c <rs485_find_user_command+0x308>)
 8006fee:	2200      	movs	r2, #0
 8006ff0:	711a      	strb	r2, [r3, #4]
					motor.motor_flag.backward = MOTOR_BACKWARD_POS(mobj->ui8buffer[DATA2_Pos]);
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	799b      	ldrb	r3, [r3, #6]
 8006ff6:	220f      	movs	r2, #15
 8006ff8:	4013      	ands	r3, r2
 8006ffa:	b2da      	uxtb	r2, r3
 8006ffc:	4b53      	ldr	r3, [pc, #332]	@ (800714c <rs485_find_user_command+0x308>)
 8006ffe:	71da      	strb	r2, [r3, #7]
					motor.motor_flag.forward = MOTOR_FORWARD_POS(mobj->ui8buffer[DATA2_Pos]);
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	799b      	ldrb	r3, [r3, #6]
 8007004:	091b      	lsrs	r3, r3, #4
 8007006:	b2da      	uxtb	r2, r3
 8007008:	4b50      	ldr	r3, [pc, #320]	@ (800714c <rs485_find_user_command+0x308>)
 800700a:	719a      	strb	r2, [r3, #6]
					motor.motor_flag.speed = mobj->ui8buffer[DATA1_Pos];
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	795a      	ldrb	r2, [r3, #5]
 8007010:	4b4e      	ldr	r3, [pc, #312]	@ (800714c <rs485_find_user_command+0x308>)
 8007012:	725a      	strb	r2, [r3, #9]
					rs485_transmit_package((uint8_t*)"MOTOR MANUEL\n",sizeof("MOTOR MANUEL\n"));
 8007014:	4b57      	ldr	r3, [pc, #348]	@ (8007174 <rs485_find_user_command+0x330>)
 8007016:	210e      	movs	r1, #14
 8007018:	0018      	movs	r0, r3
 800701a:	f7ff fcdb 	bl	80069d4 <rs485_transmit_package>
					break;
 800701e:	e07e      	b.n	800711e <rs485_find_user_command+0x2da>
			case (MOTOR_AUTO_ID):
					//Motor Auto Mod Enable Status
					motor.motor_flag.manuel_mode= DISABLE;
 8007020:	4b4a      	ldr	r3, [pc, #296]	@ (800714c <rs485_find_user_command+0x308>)
 8007022:	2200      	movs	r2, #0
 8007024:	715a      	strb	r2, [r3, #5]
					motor.motor_flag.stop_mode = DISABLE;
 8007026:	4b49      	ldr	r3, [pc, #292]	@ (800714c <rs485_find_user_command+0x308>)
 8007028:	2200      	movs	r2, #0
 800702a:	721a      	strb	r2, [r3, #8]
					motor.motor_flag.auto_mode = ENABLE;
 800702c:	4b47      	ldr	r3, [pc, #284]	@ (800714c <rs485_find_user_command+0x308>)
 800702e:	2201      	movs	r2, #1
 8007030:	711a      	strb	r2, [r3, #4]
					motor.motor_flag.backward = MOTOR_BACKWARD_POS(mobj->ui8buffer[DATA2_Pos]);
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	799b      	ldrb	r3, [r3, #6]
 8007036:	220f      	movs	r2, #15
 8007038:	4013      	ands	r3, r2
 800703a:	b2da      	uxtb	r2, r3
 800703c:	4b43      	ldr	r3, [pc, #268]	@ (800714c <rs485_find_user_command+0x308>)
 800703e:	71da      	strb	r2, [r3, #7]
					motor.motor_flag.forward = MOTOR_FORWARD_POS(mobj->ui8buffer[DATA2_Pos]);
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	799b      	ldrb	r3, [r3, #6]
 8007044:	091b      	lsrs	r3, r3, #4
 8007046:	b2da      	uxtb	r2, r3
 8007048:	4b40      	ldr	r3, [pc, #256]	@ (800714c <rs485_find_user_command+0x308>)
 800704a:	719a      	strb	r2, [r3, #6]
					motor.motor_flag.speed = mobj->ui8buffer[DATA1_Pos];
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	795a      	ldrb	r2, [r3, #5]
 8007050:	4b3e      	ldr	r3, [pc, #248]	@ (800714c <rs485_find_user_command+0x308>)
 8007052:	725a      	strb	r2, [r3, #9]
					rs485_transmit_package((uint8_t*)"MOTOR AUTO\n",sizeof("MOTOR AUTO\n"));
 8007054:	4b48      	ldr	r3, [pc, #288]	@ (8007178 <rs485_find_user_command+0x334>)
 8007056:	210c      	movs	r1, #12
 8007058:	0018      	movs	r0, r3
 800705a:	f7ff fcbb 	bl	80069d4 <rs485_transmit_package>
					break;
 800705e:	e05e      	b.n	800711e <rs485_find_user_command+0x2da>
			case (SYSTEM_LED_TEST_ID):
					if((mobj->ui8buffer[DATA1_Pos] == SYSTEM_LED_TEST_DATA_1) && (mobj->ui8buffer[DATA2_Pos] == SYSTEM_LED_TEST_DATA_2))
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	795b      	ldrb	r3, [r3, #5]
 8007064:	2b10      	cmp	r3, #16
 8007066:	d14f      	bne.n	8007108 <rs485_find_user_command+0x2c4>
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	799b      	ldrb	r3, [r3, #6]
 800706c:	2b01      	cmp	r3, #1
 800706e:	d14b      	bne.n	8007108 <rs485_find_user_command+0x2c4>
					{
						motor.test.led_test_flag = ENABLE;
 8007070:	4b36      	ldr	r3, [pc, #216]	@ (800714c <rs485_find_user_command+0x308>)
 8007072:	2201      	movs	r2, #1
 8007074:	731a      	strb	r2, [r3, #12]
					}
					break;
 8007076:	e047      	b.n	8007108 <rs485_find_user_command+0x2c4>
			case (SYSTEM_BUZZER_TEST_ID):
					if((mobj->ui8buffer[DATA1_Pos] == SYSTEM_BUZZER_TEST_DATA_1) && (mobj->ui8buffer[DATA2_Pos] == SYSTEM_BUZZER_TEST_DATA_2))
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	795b      	ldrb	r3, [r3, #5]
 800707c:	2b11      	cmp	r3, #17
 800707e:	d145      	bne.n	800710c <rs485_find_user_command+0x2c8>
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	799b      	ldrb	r3, [r3, #6]
 8007084:	2b02      	cmp	r3, #2
 8007086:	d141      	bne.n	800710c <rs485_find_user_command+0x2c8>
					{
						motor.test.buzzer_test_flag = ENABLE;
 8007088:	4b30      	ldr	r3, [pc, #192]	@ (800714c <rs485_find_user_command+0x308>)
 800708a:	2201      	movs	r2, #1
 800708c:	735a      	strb	r2, [r3, #13]
					}
					break;
 800708e:	e03d      	b.n	800710c <rs485_find_user_command+0x2c8>
			case (SYSTEM_SPEAKER_TEST_ID):
					if((mobj->ui8buffer[DATA1_Pos] == SYSTEM_SPEAKER_TEST_DATA_1) && (mobj->ui8buffer[DATA2_Pos] == SYSTEM_SPEAKER_TEST_DATA_2))
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	795b      	ldrb	r3, [r3, #5]
 8007094:	2b12      	cmp	r3, #18
 8007096:	d13b      	bne.n	8007110 <rs485_find_user_command+0x2cc>
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	799b      	ldrb	r3, [r3, #6]
 800709c:	2b03      	cmp	r3, #3
 800709e:	d137      	bne.n	8007110 <rs485_find_user_command+0x2cc>
					{
						motor.test.speaker_test_flag = ENABLE;
 80070a0:	4b2a      	ldr	r3, [pc, #168]	@ (800714c <rs485_find_user_command+0x308>)
 80070a2:	2201      	movs	r2, #1
 80070a4:	739a      	strb	r2, [r3, #14]
					}
					break;
 80070a6:	e033      	b.n	8007110 <rs485_find_user_command+0x2cc>
			case (SYSTEM_MOTOR_TEST_ID):
					if((mobj->ui8buffer[DATA1_Pos] == SYSTEM_MOTOR_TEST_DATA_1) && (mobj->ui8buffer[DATA2_Pos] == SYSTEM_MOTOR_TEST_DATA_2))
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	795b      	ldrb	r3, [r3, #5]
 80070ac:	2b13      	cmp	r3, #19
 80070ae:	d131      	bne.n	8007114 <rs485_find_user_command+0x2d0>
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	799b      	ldrb	r3, [r3, #6]
 80070b4:	2b04      	cmp	r3, #4
 80070b6:	d12d      	bne.n	8007114 <rs485_find_user_command+0x2d0>
					{
						motor.test.motor_test_flag = ENABLE;
 80070b8:	4b24      	ldr	r3, [pc, #144]	@ (800714c <rs485_find_user_command+0x308>)
 80070ba:	2201      	movs	r2, #1
 80070bc:	73da      	strb	r2, [r3, #15]
					}
					break;
 80070be:	e029      	b.n	8007114 <rs485_find_user_command+0x2d0>
			case (SYSTEM_START_TEST_ID):
					if((mobj->ui8buffer[DATA1_Pos] == SYSTEM_START_TEST_DATA_1) && (mobj->ui8buffer[DATA2_Pos] == SYSTEM_START_TEST_DATA_2))
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	795b      	ldrb	r3, [r3, #5]
 80070c4:	2b2e      	cmp	r3, #46	@ 0x2e
 80070c6:	d127      	bne.n	8007118 <rs485_find_user_command+0x2d4>
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	799b      	ldrb	r3, [r3, #6]
 80070cc:	2b25      	cmp	r3, #37	@ 0x25
 80070ce:	d123      	bne.n	8007118 <rs485_find_user_command+0x2d4>
					{
						motor.test.test_status = ENABLE;
 80070d0:	4b1e      	ldr	r3, [pc, #120]	@ (800714c <rs485_find_user_command+0x308>)
 80070d2:	2201      	movs	r2, #1
 80070d4:	741a      	strb	r2, [r3, #16]
					}
					break;
 80070d6:	e01f      	b.n	8007118 <rs485_find_user_command+0x2d4>
			case (SYSTEM_STOP_TEST_ID):
					if((mobj->ui8buffer[DATA1_Pos] == SYSTEM_STOP_TEST_DATA_1) && (mobj->ui8buffer[DATA2_Pos] == SYSTEM_STOP_TEST_DATA_2))
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	795b      	ldrb	r3, [r3, #5]
 80070dc:	2b2f      	cmp	r3, #47	@ 0x2f
 80070de:	d11d      	bne.n	800711c <rs485_find_user_command+0x2d8>
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	799b      	ldrb	r3, [r3, #6]
 80070e4:	2b26      	cmp	r3, #38	@ 0x26
 80070e6:	d119      	bne.n	800711c <rs485_find_user_command+0x2d8>
					{
						motor.test.test_status = DISABLE;
 80070e8:	4b18      	ldr	r3, [pc, #96]	@ (800714c <rs485_find_user_command+0x308>)
 80070ea:	2200      	movs	r2, #0
 80070ec:	741a      	strb	r2, [r3, #16]
					}
					break;
 80070ee:	e015      	b.n	800711c <rs485_find_user_command+0x2d8>
			default:
				break;
 80070f0:	46c0      	nop			@ (mov r8, r8)
 80070f2:	e020      	b.n	8007136 <rs485_find_user_command+0x2f2>
				break;
 80070f4:	46c0      	nop			@ (mov r8, r8)
 80070f6:	e01e      	b.n	8007136 <rs485_find_user_command+0x2f2>
				break;
 80070f8:	46c0      	nop			@ (mov r8, r8)
 80070fa:	e01c      	b.n	8007136 <rs485_find_user_command+0x2f2>
				break;
 80070fc:	46c0      	nop			@ (mov r8, r8)
 80070fe:	e01a      	b.n	8007136 <rs485_find_user_command+0x2f2>
				break;
 8007100:	46c0      	nop			@ (mov r8, r8)
 8007102:	e018      	b.n	8007136 <rs485_find_user_command+0x2f2>
				break;
 8007104:	46c0      	nop			@ (mov r8, r8)
 8007106:	e016      	b.n	8007136 <rs485_find_user_command+0x2f2>
					break;
 8007108:	46c0      	nop			@ (mov r8, r8)
 800710a:	e014      	b.n	8007136 <rs485_find_user_command+0x2f2>
					break;
 800710c:	46c0      	nop			@ (mov r8, r8)
 800710e:	e012      	b.n	8007136 <rs485_find_user_command+0x2f2>
					break;
 8007110:	46c0      	nop			@ (mov r8, r8)
 8007112:	e010      	b.n	8007136 <rs485_find_user_command+0x2f2>
					break;
 8007114:	46c0      	nop			@ (mov r8, r8)
 8007116:	e00e      	b.n	8007136 <rs485_find_user_command+0x2f2>
					break;
 8007118:	46c0      	nop			@ (mov r8, r8)
 800711a:	e00c      	b.n	8007136 <rs485_find_user_command+0x2f2>
					break;
 800711c:	46c0      	nop			@ (mov r8, r8)
			}
			break;
 800711e:	e00a      	b.n	8007136 <rs485_find_user_command+0x2f2>
	for(;mobj->ui8index<_arraylength(id_list);mobj->ui8index++)
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	781b      	ldrb	r3, [r3, #0]
 8007124:	3301      	adds	r3, #1
 8007126:	b2da      	uxtb	r2, r3
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	701a      	strb	r2, [r3, #0]
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	781b      	ldrb	r3, [r3, #0]
 8007130:	2b0c      	cmp	r3, #12
 8007132:	d800      	bhi.n	8007136 <rs485_find_user_command+0x2f2>
 8007134:	e68b      	b.n	8006e4e <rs485_find_user_command+0xa>
		}
	}
	mobj->ui8index=0;
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	2200      	movs	r2, #0
 800713a:	701a      	strb	r2, [r3, #0]
}
 800713c:	46c0      	nop			@ (mov r8, r8)
 800713e:	46bd      	mov	sp, r7
 8007140:	b002      	add	sp, #8
 8007142:	bd80      	pop	{r7, pc}
 8007144:	2000000c 	.word	0x2000000c
 8007148:	0800be20 	.word	0x0800be20
 800714c:	20000290 	.word	0x20000290
 8007150:	0800bcfc 	.word	0x0800bcfc
 8007154:	0800bd0c 	.word	0x0800bd0c
 8007158:	0800bd1c 	.word	0x0800bd1c
 800715c:	0800bd2c 	.word	0x0800bd2c
 8007160:	0800bd3c 	.word	0x0800bd3c
 8007164:	0800bd4c 	.word	0x0800bd4c
 8007168:	0800bd5c 	.word	0x0800bd5c
 800716c:	0800bd6c 	.word	0x0800bd6c
 8007170:	0800bd80 	.word	0x0800bd80
 8007174:	0800bd8c 	.word	0x0800bd8c
 8007178:	0800bd9c 	.word	0x0800bd9c

0800717c <__cvt>:
 800717c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800717e:	001f      	movs	r7, r3
 8007180:	2300      	movs	r3, #0
 8007182:	0016      	movs	r6, r2
 8007184:	b08b      	sub	sp, #44	@ 0x2c
 8007186:	429f      	cmp	r7, r3
 8007188:	da04      	bge.n	8007194 <__cvt+0x18>
 800718a:	2180      	movs	r1, #128	@ 0x80
 800718c:	0609      	lsls	r1, r1, #24
 800718e:	187b      	adds	r3, r7, r1
 8007190:	001f      	movs	r7, r3
 8007192:	232d      	movs	r3, #45	@ 0x2d
 8007194:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8007196:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 8007198:	7013      	strb	r3, [r2, #0]
 800719a:	2320      	movs	r3, #32
 800719c:	2203      	movs	r2, #3
 800719e:	439d      	bics	r5, r3
 80071a0:	2d46      	cmp	r5, #70	@ 0x46
 80071a2:	d007      	beq.n	80071b4 <__cvt+0x38>
 80071a4:	002b      	movs	r3, r5
 80071a6:	3b45      	subs	r3, #69	@ 0x45
 80071a8:	4259      	negs	r1, r3
 80071aa:	414b      	adcs	r3, r1
 80071ac:	9910      	ldr	r1, [sp, #64]	@ 0x40
 80071ae:	3a01      	subs	r2, #1
 80071b0:	18cb      	adds	r3, r1, r3
 80071b2:	9310      	str	r3, [sp, #64]	@ 0x40
 80071b4:	ab09      	add	r3, sp, #36	@ 0x24
 80071b6:	9304      	str	r3, [sp, #16]
 80071b8:	ab08      	add	r3, sp, #32
 80071ba:	9303      	str	r3, [sp, #12]
 80071bc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80071be:	9200      	str	r2, [sp, #0]
 80071c0:	9302      	str	r3, [sp, #8]
 80071c2:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80071c4:	0032      	movs	r2, r6
 80071c6:	9301      	str	r3, [sp, #4]
 80071c8:	003b      	movs	r3, r7
 80071ca:	f001 f89b 	bl	8008304 <_dtoa_r>
 80071ce:	0004      	movs	r4, r0
 80071d0:	2d47      	cmp	r5, #71	@ 0x47
 80071d2:	d11b      	bne.n	800720c <__cvt+0x90>
 80071d4:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80071d6:	07db      	lsls	r3, r3, #31
 80071d8:	d511      	bpl.n	80071fe <__cvt+0x82>
 80071da:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80071dc:	18c3      	adds	r3, r0, r3
 80071de:	9307      	str	r3, [sp, #28]
 80071e0:	2200      	movs	r2, #0
 80071e2:	2300      	movs	r3, #0
 80071e4:	0030      	movs	r0, r6
 80071e6:	0039      	movs	r1, r7
 80071e8:	f7f9 f930 	bl	800044c <__aeabi_dcmpeq>
 80071ec:	2800      	cmp	r0, #0
 80071ee:	d001      	beq.n	80071f4 <__cvt+0x78>
 80071f0:	9b07      	ldr	r3, [sp, #28]
 80071f2:	9309      	str	r3, [sp, #36]	@ 0x24
 80071f4:	2230      	movs	r2, #48	@ 0x30
 80071f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80071f8:	9907      	ldr	r1, [sp, #28]
 80071fa:	428b      	cmp	r3, r1
 80071fc:	d320      	bcc.n	8007240 <__cvt+0xc4>
 80071fe:	0020      	movs	r0, r4
 8007200:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007202:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8007204:	1b1b      	subs	r3, r3, r4
 8007206:	6013      	str	r3, [r2, #0]
 8007208:	b00b      	add	sp, #44	@ 0x2c
 800720a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800720c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800720e:	18c3      	adds	r3, r0, r3
 8007210:	9307      	str	r3, [sp, #28]
 8007212:	2d46      	cmp	r5, #70	@ 0x46
 8007214:	d1e4      	bne.n	80071e0 <__cvt+0x64>
 8007216:	7803      	ldrb	r3, [r0, #0]
 8007218:	2b30      	cmp	r3, #48	@ 0x30
 800721a:	d10c      	bne.n	8007236 <__cvt+0xba>
 800721c:	2200      	movs	r2, #0
 800721e:	2300      	movs	r3, #0
 8007220:	0030      	movs	r0, r6
 8007222:	0039      	movs	r1, r7
 8007224:	f7f9 f912 	bl	800044c <__aeabi_dcmpeq>
 8007228:	2800      	cmp	r0, #0
 800722a:	d104      	bne.n	8007236 <__cvt+0xba>
 800722c:	2301      	movs	r3, #1
 800722e:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8007230:	1a9b      	subs	r3, r3, r2
 8007232:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8007234:	6013      	str	r3, [r2, #0]
 8007236:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8007238:	9a07      	ldr	r2, [sp, #28]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	18d3      	adds	r3, r2, r3
 800723e:	e7ce      	b.n	80071de <__cvt+0x62>
 8007240:	1c59      	adds	r1, r3, #1
 8007242:	9109      	str	r1, [sp, #36]	@ 0x24
 8007244:	701a      	strb	r2, [r3, #0]
 8007246:	e7d6      	b.n	80071f6 <__cvt+0x7a>

08007248 <__exponent>:
 8007248:	b5f0      	push	{r4, r5, r6, r7, lr}
 800724a:	232b      	movs	r3, #43	@ 0x2b
 800724c:	0005      	movs	r5, r0
 800724e:	000c      	movs	r4, r1
 8007250:	b085      	sub	sp, #20
 8007252:	7002      	strb	r2, [r0, #0]
 8007254:	2900      	cmp	r1, #0
 8007256:	da01      	bge.n	800725c <__exponent+0x14>
 8007258:	424c      	negs	r4, r1
 800725a:	3302      	adds	r3, #2
 800725c:	706b      	strb	r3, [r5, #1]
 800725e:	2c09      	cmp	r4, #9
 8007260:	dd2c      	ble.n	80072bc <__exponent+0x74>
 8007262:	ab02      	add	r3, sp, #8
 8007264:	1dde      	adds	r6, r3, #7
 8007266:	0020      	movs	r0, r4
 8007268:	210a      	movs	r1, #10
 800726a:	f7f9 f8d9 	bl	8000420 <__aeabi_idivmod>
 800726e:	0037      	movs	r7, r6
 8007270:	3130      	adds	r1, #48	@ 0x30
 8007272:	3e01      	subs	r6, #1
 8007274:	0020      	movs	r0, r4
 8007276:	7031      	strb	r1, [r6, #0]
 8007278:	210a      	movs	r1, #10
 800727a:	9401      	str	r4, [sp, #4]
 800727c:	f7f8 ffea 	bl	8000254 <__divsi3>
 8007280:	9b01      	ldr	r3, [sp, #4]
 8007282:	0004      	movs	r4, r0
 8007284:	2b63      	cmp	r3, #99	@ 0x63
 8007286:	dcee      	bgt.n	8007266 <__exponent+0x1e>
 8007288:	1eba      	subs	r2, r7, #2
 800728a:	1ca8      	adds	r0, r5, #2
 800728c:	0001      	movs	r1, r0
 800728e:	0013      	movs	r3, r2
 8007290:	3430      	adds	r4, #48	@ 0x30
 8007292:	7014      	strb	r4, [r2, #0]
 8007294:	ac02      	add	r4, sp, #8
 8007296:	3407      	adds	r4, #7
 8007298:	429c      	cmp	r4, r3
 800729a:	d80a      	bhi.n	80072b2 <__exponent+0x6a>
 800729c:	2300      	movs	r3, #0
 800729e:	42a2      	cmp	r2, r4
 80072a0:	d803      	bhi.n	80072aa <__exponent+0x62>
 80072a2:	3309      	adds	r3, #9
 80072a4:	aa02      	add	r2, sp, #8
 80072a6:	189b      	adds	r3, r3, r2
 80072a8:	1bdb      	subs	r3, r3, r7
 80072aa:	18c0      	adds	r0, r0, r3
 80072ac:	1b40      	subs	r0, r0, r5
 80072ae:	b005      	add	sp, #20
 80072b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80072b2:	781c      	ldrb	r4, [r3, #0]
 80072b4:	3301      	adds	r3, #1
 80072b6:	700c      	strb	r4, [r1, #0]
 80072b8:	3101      	adds	r1, #1
 80072ba:	e7eb      	b.n	8007294 <__exponent+0x4c>
 80072bc:	2330      	movs	r3, #48	@ 0x30
 80072be:	18e4      	adds	r4, r4, r3
 80072c0:	70ab      	strb	r3, [r5, #2]
 80072c2:	1d28      	adds	r0, r5, #4
 80072c4:	70ec      	strb	r4, [r5, #3]
 80072c6:	e7f1      	b.n	80072ac <__exponent+0x64>

080072c8 <_printf_float>:
 80072c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80072ca:	b097      	sub	sp, #92	@ 0x5c
 80072cc:	000d      	movs	r5, r1
 80072ce:	920a      	str	r2, [sp, #40]	@ 0x28
 80072d0:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 80072d2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80072d4:	9009      	str	r0, [sp, #36]	@ 0x24
 80072d6:	f000 fef9 	bl	80080cc <_localeconv_r>
 80072da:	6803      	ldr	r3, [r0, #0]
 80072dc:	0018      	movs	r0, r3
 80072de:	930d      	str	r3, [sp, #52]	@ 0x34
 80072e0:	f7f8 ff12 	bl	8000108 <strlen>
 80072e4:	2300      	movs	r3, #0
 80072e6:	900f      	str	r0, [sp, #60]	@ 0x3c
 80072e8:	9314      	str	r3, [sp, #80]	@ 0x50
 80072ea:	7e2b      	ldrb	r3, [r5, #24]
 80072ec:	2207      	movs	r2, #7
 80072ee:	930c      	str	r3, [sp, #48]	@ 0x30
 80072f0:	682b      	ldr	r3, [r5, #0]
 80072f2:	930e      	str	r3, [sp, #56]	@ 0x38
 80072f4:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80072f6:	6823      	ldr	r3, [r4, #0]
 80072f8:	05c9      	lsls	r1, r1, #23
 80072fa:	d545      	bpl.n	8007388 <_printf_float+0xc0>
 80072fc:	189b      	adds	r3, r3, r2
 80072fe:	4393      	bics	r3, r2
 8007300:	001a      	movs	r2, r3
 8007302:	3208      	adds	r2, #8
 8007304:	6022      	str	r2, [r4, #0]
 8007306:	2201      	movs	r2, #1
 8007308:	681e      	ldr	r6, [r3, #0]
 800730a:	685f      	ldr	r7, [r3, #4]
 800730c:	007b      	lsls	r3, r7, #1
 800730e:	085b      	lsrs	r3, r3, #1
 8007310:	9311      	str	r3, [sp, #68]	@ 0x44
 8007312:	9610      	str	r6, [sp, #64]	@ 0x40
 8007314:	64ae      	str	r6, [r5, #72]	@ 0x48
 8007316:	64ef      	str	r7, [r5, #76]	@ 0x4c
 8007318:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800731a:	9911      	ldr	r1, [sp, #68]	@ 0x44
 800731c:	4ba7      	ldr	r3, [pc, #668]	@ (80075bc <_printf_float+0x2f4>)
 800731e:	4252      	negs	r2, r2
 8007320:	f7fb f87e 	bl	8002420 <__aeabi_dcmpun>
 8007324:	2800      	cmp	r0, #0
 8007326:	d131      	bne.n	800738c <_printf_float+0xc4>
 8007328:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800732a:	9911      	ldr	r1, [sp, #68]	@ 0x44
 800732c:	2201      	movs	r2, #1
 800732e:	4ba3      	ldr	r3, [pc, #652]	@ (80075bc <_printf_float+0x2f4>)
 8007330:	4252      	negs	r2, r2
 8007332:	f7f9 f89b 	bl	800046c <__aeabi_dcmple>
 8007336:	2800      	cmp	r0, #0
 8007338:	d128      	bne.n	800738c <_printf_float+0xc4>
 800733a:	2200      	movs	r2, #0
 800733c:	2300      	movs	r3, #0
 800733e:	0030      	movs	r0, r6
 8007340:	0039      	movs	r1, r7
 8007342:	f7f9 f889 	bl	8000458 <__aeabi_dcmplt>
 8007346:	2800      	cmp	r0, #0
 8007348:	d003      	beq.n	8007352 <_printf_float+0x8a>
 800734a:	002b      	movs	r3, r5
 800734c:	222d      	movs	r2, #45	@ 0x2d
 800734e:	3343      	adds	r3, #67	@ 0x43
 8007350:	701a      	strb	r2, [r3, #0]
 8007352:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007354:	4f9a      	ldr	r7, [pc, #616]	@ (80075c0 <_printf_float+0x2f8>)
 8007356:	2b47      	cmp	r3, #71	@ 0x47
 8007358:	d900      	bls.n	800735c <_printf_float+0x94>
 800735a:	4f9a      	ldr	r7, [pc, #616]	@ (80075c4 <_printf_float+0x2fc>)
 800735c:	2303      	movs	r3, #3
 800735e:	2400      	movs	r4, #0
 8007360:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007362:	612b      	str	r3, [r5, #16]
 8007364:	3301      	adds	r3, #1
 8007366:	439a      	bics	r2, r3
 8007368:	602a      	str	r2, [r5, #0]
 800736a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800736c:	0029      	movs	r1, r5
 800736e:	9300      	str	r3, [sp, #0]
 8007370:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007372:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007374:	aa15      	add	r2, sp, #84	@ 0x54
 8007376:	f000 f9e5 	bl	8007744 <_printf_common>
 800737a:	3001      	adds	r0, #1
 800737c:	d000      	beq.n	8007380 <_printf_float+0xb8>
 800737e:	e09f      	b.n	80074c0 <_printf_float+0x1f8>
 8007380:	2001      	movs	r0, #1
 8007382:	4240      	negs	r0, r0
 8007384:	b017      	add	sp, #92	@ 0x5c
 8007386:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007388:	3307      	adds	r3, #7
 800738a:	e7b8      	b.n	80072fe <_printf_float+0x36>
 800738c:	0032      	movs	r2, r6
 800738e:	003b      	movs	r3, r7
 8007390:	0030      	movs	r0, r6
 8007392:	0039      	movs	r1, r7
 8007394:	f7fb f844 	bl	8002420 <__aeabi_dcmpun>
 8007398:	2800      	cmp	r0, #0
 800739a:	d00b      	beq.n	80073b4 <_printf_float+0xec>
 800739c:	2f00      	cmp	r7, #0
 800739e:	da03      	bge.n	80073a8 <_printf_float+0xe0>
 80073a0:	002b      	movs	r3, r5
 80073a2:	222d      	movs	r2, #45	@ 0x2d
 80073a4:	3343      	adds	r3, #67	@ 0x43
 80073a6:	701a      	strb	r2, [r3, #0]
 80073a8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80073aa:	4f87      	ldr	r7, [pc, #540]	@ (80075c8 <_printf_float+0x300>)
 80073ac:	2b47      	cmp	r3, #71	@ 0x47
 80073ae:	d9d5      	bls.n	800735c <_printf_float+0x94>
 80073b0:	4f86      	ldr	r7, [pc, #536]	@ (80075cc <_printf_float+0x304>)
 80073b2:	e7d3      	b.n	800735c <_printf_float+0x94>
 80073b4:	2220      	movs	r2, #32
 80073b6:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 80073b8:	686b      	ldr	r3, [r5, #4]
 80073ba:	4394      	bics	r4, r2
 80073bc:	1c5a      	adds	r2, r3, #1
 80073be:	d146      	bne.n	800744e <_printf_float+0x186>
 80073c0:	3307      	adds	r3, #7
 80073c2:	606b      	str	r3, [r5, #4]
 80073c4:	2380      	movs	r3, #128	@ 0x80
 80073c6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80073c8:	00db      	lsls	r3, r3, #3
 80073ca:	4313      	orrs	r3, r2
 80073cc:	2200      	movs	r2, #0
 80073ce:	602b      	str	r3, [r5, #0]
 80073d0:	9206      	str	r2, [sp, #24]
 80073d2:	aa14      	add	r2, sp, #80	@ 0x50
 80073d4:	9205      	str	r2, [sp, #20]
 80073d6:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80073d8:	a90a      	add	r1, sp, #40	@ 0x28
 80073da:	9204      	str	r2, [sp, #16]
 80073dc:	aa13      	add	r2, sp, #76	@ 0x4c
 80073de:	9203      	str	r2, [sp, #12]
 80073e0:	2223      	movs	r2, #35	@ 0x23
 80073e2:	1852      	adds	r2, r2, r1
 80073e4:	9202      	str	r2, [sp, #8]
 80073e6:	9301      	str	r3, [sp, #4]
 80073e8:	686b      	ldr	r3, [r5, #4]
 80073ea:	0032      	movs	r2, r6
 80073ec:	9300      	str	r3, [sp, #0]
 80073ee:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80073f0:	003b      	movs	r3, r7
 80073f2:	f7ff fec3 	bl	800717c <__cvt>
 80073f6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80073f8:	0007      	movs	r7, r0
 80073fa:	2c47      	cmp	r4, #71	@ 0x47
 80073fc:	d12d      	bne.n	800745a <_printf_float+0x192>
 80073fe:	1cd3      	adds	r3, r2, #3
 8007400:	db02      	blt.n	8007408 <_printf_float+0x140>
 8007402:	686b      	ldr	r3, [r5, #4]
 8007404:	429a      	cmp	r2, r3
 8007406:	dd48      	ble.n	800749a <_printf_float+0x1d2>
 8007408:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800740a:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800740c:	3b02      	subs	r3, #2
 800740e:	b2db      	uxtb	r3, r3
 8007410:	930c      	str	r3, [sp, #48]	@ 0x30
 8007412:	0028      	movs	r0, r5
 8007414:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8007416:	3901      	subs	r1, #1
 8007418:	3050      	adds	r0, #80	@ 0x50
 800741a:	9113      	str	r1, [sp, #76]	@ 0x4c
 800741c:	f7ff ff14 	bl	8007248 <__exponent>
 8007420:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8007422:	0004      	movs	r4, r0
 8007424:	1813      	adds	r3, r2, r0
 8007426:	612b      	str	r3, [r5, #16]
 8007428:	2a01      	cmp	r2, #1
 800742a:	dc02      	bgt.n	8007432 <_printf_float+0x16a>
 800742c:	682a      	ldr	r2, [r5, #0]
 800742e:	07d2      	lsls	r2, r2, #31
 8007430:	d501      	bpl.n	8007436 <_printf_float+0x16e>
 8007432:	3301      	adds	r3, #1
 8007434:	612b      	str	r3, [r5, #16]
 8007436:	2323      	movs	r3, #35	@ 0x23
 8007438:	aa0a      	add	r2, sp, #40	@ 0x28
 800743a:	189b      	adds	r3, r3, r2
 800743c:	781b      	ldrb	r3, [r3, #0]
 800743e:	2b00      	cmp	r3, #0
 8007440:	d100      	bne.n	8007444 <_printf_float+0x17c>
 8007442:	e792      	b.n	800736a <_printf_float+0xa2>
 8007444:	002b      	movs	r3, r5
 8007446:	222d      	movs	r2, #45	@ 0x2d
 8007448:	3343      	adds	r3, #67	@ 0x43
 800744a:	701a      	strb	r2, [r3, #0]
 800744c:	e78d      	b.n	800736a <_printf_float+0xa2>
 800744e:	2c47      	cmp	r4, #71	@ 0x47
 8007450:	d1b8      	bne.n	80073c4 <_printf_float+0xfc>
 8007452:	2b00      	cmp	r3, #0
 8007454:	d1b6      	bne.n	80073c4 <_printf_float+0xfc>
 8007456:	3301      	adds	r3, #1
 8007458:	e7b3      	b.n	80073c2 <_printf_float+0xfa>
 800745a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800745c:	0011      	movs	r1, r2
 800745e:	2b65      	cmp	r3, #101	@ 0x65
 8007460:	d9d7      	bls.n	8007412 <_printf_float+0x14a>
 8007462:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007464:	2b66      	cmp	r3, #102	@ 0x66
 8007466:	d11a      	bne.n	800749e <_printf_float+0x1d6>
 8007468:	686b      	ldr	r3, [r5, #4]
 800746a:	2a00      	cmp	r2, #0
 800746c:	dd09      	ble.n	8007482 <_printf_float+0x1ba>
 800746e:	612a      	str	r2, [r5, #16]
 8007470:	2b00      	cmp	r3, #0
 8007472:	d102      	bne.n	800747a <_printf_float+0x1b2>
 8007474:	6829      	ldr	r1, [r5, #0]
 8007476:	07c9      	lsls	r1, r1, #31
 8007478:	d50b      	bpl.n	8007492 <_printf_float+0x1ca>
 800747a:	3301      	adds	r3, #1
 800747c:	189b      	adds	r3, r3, r2
 800747e:	612b      	str	r3, [r5, #16]
 8007480:	e007      	b.n	8007492 <_printf_float+0x1ca>
 8007482:	2b00      	cmp	r3, #0
 8007484:	d103      	bne.n	800748e <_printf_float+0x1c6>
 8007486:	2201      	movs	r2, #1
 8007488:	6829      	ldr	r1, [r5, #0]
 800748a:	4211      	tst	r1, r2
 800748c:	d000      	beq.n	8007490 <_printf_float+0x1c8>
 800748e:	1c9a      	adds	r2, r3, #2
 8007490:	612a      	str	r2, [r5, #16]
 8007492:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8007494:	2400      	movs	r4, #0
 8007496:	65ab      	str	r3, [r5, #88]	@ 0x58
 8007498:	e7cd      	b.n	8007436 <_printf_float+0x16e>
 800749a:	2367      	movs	r3, #103	@ 0x67
 800749c:	930c      	str	r3, [sp, #48]	@ 0x30
 800749e:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 80074a0:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80074a2:	4299      	cmp	r1, r3
 80074a4:	db06      	blt.n	80074b4 <_printf_float+0x1ec>
 80074a6:	682b      	ldr	r3, [r5, #0]
 80074a8:	6129      	str	r1, [r5, #16]
 80074aa:	07db      	lsls	r3, r3, #31
 80074ac:	d5f1      	bpl.n	8007492 <_printf_float+0x1ca>
 80074ae:	3101      	adds	r1, #1
 80074b0:	6129      	str	r1, [r5, #16]
 80074b2:	e7ee      	b.n	8007492 <_printf_float+0x1ca>
 80074b4:	2201      	movs	r2, #1
 80074b6:	2900      	cmp	r1, #0
 80074b8:	dce0      	bgt.n	800747c <_printf_float+0x1b4>
 80074ba:	1892      	adds	r2, r2, r2
 80074bc:	1a52      	subs	r2, r2, r1
 80074be:	e7dd      	b.n	800747c <_printf_float+0x1b4>
 80074c0:	682a      	ldr	r2, [r5, #0]
 80074c2:	0553      	lsls	r3, r2, #21
 80074c4:	d408      	bmi.n	80074d8 <_printf_float+0x210>
 80074c6:	692b      	ldr	r3, [r5, #16]
 80074c8:	003a      	movs	r2, r7
 80074ca:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80074cc:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80074ce:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80074d0:	47a0      	blx	r4
 80074d2:	3001      	adds	r0, #1
 80074d4:	d129      	bne.n	800752a <_printf_float+0x262>
 80074d6:	e753      	b.n	8007380 <_printf_float+0xb8>
 80074d8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80074da:	2b65      	cmp	r3, #101	@ 0x65
 80074dc:	d800      	bhi.n	80074e0 <_printf_float+0x218>
 80074de:	e0da      	b.n	8007696 <_printf_float+0x3ce>
 80074e0:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 80074e2:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 80074e4:	2200      	movs	r2, #0
 80074e6:	2300      	movs	r3, #0
 80074e8:	f7f8 ffb0 	bl	800044c <__aeabi_dcmpeq>
 80074ec:	2800      	cmp	r0, #0
 80074ee:	d033      	beq.n	8007558 <_printf_float+0x290>
 80074f0:	2301      	movs	r3, #1
 80074f2:	4a37      	ldr	r2, [pc, #220]	@ (80075d0 <_printf_float+0x308>)
 80074f4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80074f6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80074f8:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80074fa:	47a0      	blx	r4
 80074fc:	3001      	adds	r0, #1
 80074fe:	d100      	bne.n	8007502 <_printf_float+0x23a>
 8007500:	e73e      	b.n	8007380 <_printf_float+0xb8>
 8007502:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 8007504:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8007506:	42b3      	cmp	r3, r6
 8007508:	db02      	blt.n	8007510 <_printf_float+0x248>
 800750a:	682b      	ldr	r3, [r5, #0]
 800750c:	07db      	lsls	r3, r3, #31
 800750e:	d50c      	bpl.n	800752a <_printf_float+0x262>
 8007510:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8007512:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007514:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8007516:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007518:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800751a:	47a0      	blx	r4
 800751c:	2400      	movs	r4, #0
 800751e:	3001      	adds	r0, #1
 8007520:	d100      	bne.n	8007524 <_printf_float+0x25c>
 8007522:	e72d      	b.n	8007380 <_printf_float+0xb8>
 8007524:	1e73      	subs	r3, r6, #1
 8007526:	42a3      	cmp	r3, r4
 8007528:	dc0a      	bgt.n	8007540 <_printf_float+0x278>
 800752a:	682b      	ldr	r3, [r5, #0]
 800752c:	079b      	lsls	r3, r3, #30
 800752e:	d500      	bpl.n	8007532 <_printf_float+0x26a>
 8007530:	e105      	b.n	800773e <_printf_float+0x476>
 8007532:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8007534:	68e8      	ldr	r0, [r5, #12]
 8007536:	4298      	cmp	r0, r3
 8007538:	db00      	blt.n	800753c <_printf_float+0x274>
 800753a:	e723      	b.n	8007384 <_printf_float+0xbc>
 800753c:	0018      	movs	r0, r3
 800753e:	e721      	b.n	8007384 <_printf_float+0xbc>
 8007540:	002a      	movs	r2, r5
 8007542:	2301      	movs	r3, #1
 8007544:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007546:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007548:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800754a:	321a      	adds	r2, #26
 800754c:	47b8      	blx	r7
 800754e:	3001      	adds	r0, #1
 8007550:	d100      	bne.n	8007554 <_printf_float+0x28c>
 8007552:	e715      	b.n	8007380 <_printf_float+0xb8>
 8007554:	3401      	adds	r4, #1
 8007556:	e7e5      	b.n	8007524 <_printf_float+0x25c>
 8007558:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800755a:	2b00      	cmp	r3, #0
 800755c:	dc3a      	bgt.n	80075d4 <_printf_float+0x30c>
 800755e:	2301      	movs	r3, #1
 8007560:	4a1b      	ldr	r2, [pc, #108]	@ (80075d0 <_printf_float+0x308>)
 8007562:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007564:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007566:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8007568:	47a0      	blx	r4
 800756a:	3001      	adds	r0, #1
 800756c:	d100      	bne.n	8007570 <_printf_float+0x2a8>
 800756e:	e707      	b.n	8007380 <_printf_float+0xb8>
 8007570:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 8007572:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8007574:	4333      	orrs	r3, r6
 8007576:	d102      	bne.n	800757e <_printf_float+0x2b6>
 8007578:	682b      	ldr	r3, [r5, #0]
 800757a:	07db      	lsls	r3, r3, #31
 800757c:	d5d5      	bpl.n	800752a <_printf_float+0x262>
 800757e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007580:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8007582:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007584:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007586:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8007588:	47a0      	blx	r4
 800758a:	2300      	movs	r3, #0
 800758c:	3001      	adds	r0, #1
 800758e:	d100      	bne.n	8007592 <_printf_float+0x2ca>
 8007590:	e6f6      	b.n	8007380 <_printf_float+0xb8>
 8007592:	930c      	str	r3, [sp, #48]	@ 0x30
 8007594:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8007596:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8007598:	425b      	negs	r3, r3
 800759a:	4293      	cmp	r3, r2
 800759c:	dc01      	bgt.n	80075a2 <_printf_float+0x2da>
 800759e:	0033      	movs	r3, r6
 80075a0:	e792      	b.n	80074c8 <_printf_float+0x200>
 80075a2:	002a      	movs	r2, r5
 80075a4:	2301      	movs	r3, #1
 80075a6:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80075a8:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80075aa:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80075ac:	321a      	adds	r2, #26
 80075ae:	47a0      	blx	r4
 80075b0:	3001      	adds	r0, #1
 80075b2:	d100      	bne.n	80075b6 <_printf_float+0x2ee>
 80075b4:	e6e4      	b.n	8007380 <_printf_float+0xb8>
 80075b6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80075b8:	3301      	adds	r3, #1
 80075ba:	e7ea      	b.n	8007592 <_printf_float+0x2ca>
 80075bc:	7fefffff 	.word	0x7fefffff
 80075c0:	0800bf60 	.word	0x0800bf60
 80075c4:	0800bf64 	.word	0x0800bf64
 80075c8:	0800bf68 	.word	0x0800bf68
 80075cc:	0800bf6c 	.word	0x0800bf6c
 80075d0:	0800bf70 	.word	0x0800bf70
 80075d4:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80075d6:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 80075d8:	930c      	str	r3, [sp, #48]	@ 0x30
 80075da:	429e      	cmp	r6, r3
 80075dc:	dd00      	ble.n	80075e0 <_printf_float+0x318>
 80075de:	001e      	movs	r6, r3
 80075e0:	2e00      	cmp	r6, #0
 80075e2:	dc31      	bgt.n	8007648 <_printf_float+0x380>
 80075e4:	43f3      	mvns	r3, r6
 80075e6:	2400      	movs	r4, #0
 80075e8:	17db      	asrs	r3, r3, #31
 80075ea:	4033      	ands	r3, r6
 80075ec:	930e      	str	r3, [sp, #56]	@ 0x38
 80075ee:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 80075f0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80075f2:	1af3      	subs	r3, r6, r3
 80075f4:	42a3      	cmp	r3, r4
 80075f6:	dc30      	bgt.n	800765a <_printf_float+0x392>
 80075f8:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80075fa:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80075fc:	429a      	cmp	r2, r3
 80075fe:	dc38      	bgt.n	8007672 <_printf_float+0x3aa>
 8007600:	682b      	ldr	r3, [r5, #0]
 8007602:	07db      	lsls	r3, r3, #31
 8007604:	d435      	bmi.n	8007672 <_printf_float+0x3aa>
 8007606:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8007608:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800760a:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800760c:	1b9b      	subs	r3, r3, r6
 800760e:	1b14      	subs	r4, r2, r4
 8007610:	429c      	cmp	r4, r3
 8007612:	dd00      	ble.n	8007616 <_printf_float+0x34e>
 8007614:	001c      	movs	r4, r3
 8007616:	2c00      	cmp	r4, #0
 8007618:	dc34      	bgt.n	8007684 <_printf_float+0x3bc>
 800761a:	43e3      	mvns	r3, r4
 800761c:	2600      	movs	r6, #0
 800761e:	17db      	asrs	r3, r3, #31
 8007620:	401c      	ands	r4, r3
 8007622:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8007624:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8007626:	1ad3      	subs	r3, r2, r3
 8007628:	1b1b      	subs	r3, r3, r4
 800762a:	42b3      	cmp	r3, r6
 800762c:	dc00      	bgt.n	8007630 <_printf_float+0x368>
 800762e:	e77c      	b.n	800752a <_printf_float+0x262>
 8007630:	002a      	movs	r2, r5
 8007632:	2301      	movs	r3, #1
 8007634:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007636:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007638:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800763a:	321a      	adds	r2, #26
 800763c:	47b8      	blx	r7
 800763e:	3001      	adds	r0, #1
 8007640:	d100      	bne.n	8007644 <_printf_float+0x37c>
 8007642:	e69d      	b.n	8007380 <_printf_float+0xb8>
 8007644:	3601      	adds	r6, #1
 8007646:	e7ec      	b.n	8007622 <_printf_float+0x35a>
 8007648:	0033      	movs	r3, r6
 800764a:	003a      	movs	r2, r7
 800764c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800764e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007650:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8007652:	47a0      	blx	r4
 8007654:	3001      	adds	r0, #1
 8007656:	d1c5      	bne.n	80075e4 <_printf_float+0x31c>
 8007658:	e692      	b.n	8007380 <_printf_float+0xb8>
 800765a:	002a      	movs	r2, r5
 800765c:	2301      	movs	r3, #1
 800765e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007660:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007662:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8007664:	321a      	adds	r2, #26
 8007666:	47b0      	blx	r6
 8007668:	3001      	adds	r0, #1
 800766a:	d100      	bne.n	800766e <_printf_float+0x3a6>
 800766c:	e688      	b.n	8007380 <_printf_float+0xb8>
 800766e:	3401      	adds	r4, #1
 8007670:	e7bd      	b.n	80075ee <_printf_float+0x326>
 8007672:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007674:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8007676:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007678:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800767a:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800767c:	47a0      	blx	r4
 800767e:	3001      	adds	r0, #1
 8007680:	d1c1      	bne.n	8007606 <_printf_float+0x33e>
 8007682:	e67d      	b.n	8007380 <_printf_float+0xb8>
 8007684:	19ba      	adds	r2, r7, r6
 8007686:	0023      	movs	r3, r4
 8007688:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800768a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800768c:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800768e:	47b0      	blx	r6
 8007690:	3001      	adds	r0, #1
 8007692:	d1c2      	bne.n	800761a <_printf_float+0x352>
 8007694:	e674      	b.n	8007380 <_printf_float+0xb8>
 8007696:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8007698:	930c      	str	r3, [sp, #48]	@ 0x30
 800769a:	2b01      	cmp	r3, #1
 800769c:	dc02      	bgt.n	80076a4 <_printf_float+0x3dc>
 800769e:	2301      	movs	r3, #1
 80076a0:	421a      	tst	r2, r3
 80076a2:	d039      	beq.n	8007718 <_printf_float+0x450>
 80076a4:	2301      	movs	r3, #1
 80076a6:	003a      	movs	r2, r7
 80076a8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80076aa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80076ac:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 80076ae:	47b0      	blx	r6
 80076b0:	3001      	adds	r0, #1
 80076b2:	d100      	bne.n	80076b6 <_printf_float+0x3ee>
 80076b4:	e664      	b.n	8007380 <_printf_float+0xb8>
 80076b6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80076b8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80076ba:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80076bc:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80076be:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 80076c0:	47b0      	blx	r6
 80076c2:	3001      	adds	r0, #1
 80076c4:	d100      	bne.n	80076c8 <_printf_float+0x400>
 80076c6:	e65b      	b.n	8007380 <_printf_float+0xb8>
 80076c8:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 80076ca:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 80076cc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80076ce:	2200      	movs	r2, #0
 80076d0:	3b01      	subs	r3, #1
 80076d2:	930c      	str	r3, [sp, #48]	@ 0x30
 80076d4:	2300      	movs	r3, #0
 80076d6:	f7f8 feb9 	bl	800044c <__aeabi_dcmpeq>
 80076da:	2800      	cmp	r0, #0
 80076dc:	d11a      	bne.n	8007714 <_printf_float+0x44c>
 80076de:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80076e0:	1c7a      	adds	r2, r7, #1
 80076e2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80076e4:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80076e6:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 80076e8:	47b0      	blx	r6
 80076ea:	3001      	adds	r0, #1
 80076ec:	d10e      	bne.n	800770c <_printf_float+0x444>
 80076ee:	e647      	b.n	8007380 <_printf_float+0xb8>
 80076f0:	002a      	movs	r2, r5
 80076f2:	2301      	movs	r3, #1
 80076f4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80076f6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80076f8:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 80076fa:	321a      	adds	r2, #26
 80076fc:	47b8      	blx	r7
 80076fe:	3001      	adds	r0, #1
 8007700:	d100      	bne.n	8007704 <_printf_float+0x43c>
 8007702:	e63d      	b.n	8007380 <_printf_float+0xb8>
 8007704:	3601      	adds	r6, #1
 8007706:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007708:	429e      	cmp	r6, r3
 800770a:	dbf1      	blt.n	80076f0 <_printf_float+0x428>
 800770c:	002a      	movs	r2, r5
 800770e:	0023      	movs	r3, r4
 8007710:	3250      	adds	r2, #80	@ 0x50
 8007712:	e6da      	b.n	80074ca <_printf_float+0x202>
 8007714:	2600      	movs	r6, #0
 8007716:	e7f6      	b.n	8007706 <_printf_float+0x43e>
 8007718:	003a      	movs	r2, r7
 800771a:	e7e2      	b.n	80076e2 <_printf_float+0x41a>
 800771c:	002a      	movs	r2, r5
 800771e:	2301      	movs	r3, #1
 8007720:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007722:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007724:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8007726:	3219      	adds	r2, #25
 8007728:	47b0      	blx	r6
 800772a:	3001      	adds	r0, #1
 800772c:	d100      	bne.n	8007730 <_printf_float+0x468>
 800772e:	e627      	b.n	8007380 <_printf_float+0xb8>
 8007730:	3401      	adds	r4, #1
 8007732:	68eb      	ldr	r3, [r5, #12]
 8007734:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8007736:	1a9b      	subs	r3, r3, r2
 8007738:	42a3      	cmp	r3, r4
 800773a:	dcef      	bgt.n	800771c <_printf_float+0x454>
 800773c:	e6f9      	b.n	8007532 <_printf_float+0x26a>
 800773e:	2400      	movs	r4, #0
 8007740:	e7f7      	b.n	8007732 <_printf_float+0x46a>
 8007742:	46c0      	nop			@ (mov r8, r8)

08007744 <_printf_common>:
 8007744:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007746:	0016      	movs	r6, r2
 8007748:	9301      	str	r3, [sp, #4]
 800774a:	688a      	ldr	r2, [r1, #8]
 800774c:	690b      	ldr	r3, [r1, #16]
 800774e:	000c      	movs	r4, r1
 8007750:	9000      	str	r0, [sp, #0]
 8007752:	4293      	cmp	r3, r2
 8007754:	da00      	bge.n	8007758 <_printf_common+0x14>
 8007756:	0013      	movs	r3, r2
 8007758:	0022      	movs	r2, r4
 800775a:	6033      	str	r3, [r6, #0]
 800775c:	3243      	adds	r2, #67	@ 0x43
 800775e:	7812      	ldrb	r2, [r2, #0]
 8007760:	2a00      	cmp	r2, #0
 8007762:	d001      	beq.n	8007768 <_printf_common+0x24>
 8007764:	3301      	adds	r3, #1
 8007766:	6033      	str	r3, [r6, #0]
 8007768:	6823      	ldr	r3, [r4, #0]
 800776a:	069b      	lsls	r3, r3, #26
 800776c:	d502      	bpl.n	8007774 <_printf_common+0x30>
 800776e:	6833      	ldr	r3, [r6, #0]
 8007770:	3302      	adds	r3, #2
 8007772:	6033      	str	r3, [r6, #0]
 8007774:	6822      	ldr	r2, [r4, #0]
 8007776:	2306      	movs	r3, #6
 8007778:	0015      	movs	r5, r2
 800777a:	401d      	ands	r5, r3
 800777c:	421a      	tst	r2, r3
 800777e:	d027      	beq.n	80077d0 <_printf_common+0x8c>
 8007780:	0023      	movs	r3, r4
 8007782:	3343      	adds	r3, #67	@ 0x43
 8007784:	781b      	ldrb	r3, [r3, #0]
 8007786:	1e5a      	subs	r2, r3, #1
 8007788:	4193      	sbcs	r3, r2
 800778a:	6822      	ldr	r2, [r4, #0]
 800778c:	0692      	lsls	r2, r2, #26
 800778e:	d430      	bmi.n	80077f2 <_printf_common+0xae>
 8007790:	0022      	movs	r2, r4
 8007792:	9901      	ldr	r1, [sp, #4]
 8007794:	9800      	ldr	r0, [sp, #0]
 8007796:	9d08      	ldr	r5, [sp, #32]
 8007798:	3243      	adds	r2, #67	@ 0x43
 800779a:	47a8      	blx	r5
 800779c:	3001      	adds	r0, #1
 800779e:	d025      	beq.n	80077ec <_printf_common+0xa8>
 80077a0:	2206      	movs	r2, #6
 80077a2:	6823      	ldr	r3, [r4, #0]
 80077a4:	2500      	movs	r5, #0
 80077a6:	4013      	ands	r3, r2
 80077a8:	2b04      	cmp	r3, #4
 80077aa:	d105      	bne.n	80077b8 <_printf_common+0x74>
 80077ac:	6833      	ldr	r3, [r6, #0]
 80077ae:	68e5      	ldr	r5, [r4, #12]
 80077b0:	1aed      	subs	r5, r5, r3
 80077b2:	43eb      	mvns	r3, r5
 80077b4:	17db      	asrs	r3, r3, #31
 80077b6:	401d      	ands	r5, r3
 80077b8:	68a3      	ldr	r3, [r4, #8]
 80077ba:	6922      	ldr	r2, [r4, #16]
 80077bc:	4293      	cmp	r3, r2
 80077be:	dd01      	ble.n	80077c4 <_printf_common+0x80>
 80077c0:	1a9b      	subs	r3, r3, r2
 80077c2:	18ed      	adds	r5, r5, r3
 80077c4:	2600      	movs	r6, #0
 80077c6:	42b5      	cmp	r5, r6
 80077c8:	d120      	bne.n	800780c <_printf_common+0xc8>
 80077ca:	2000      	movs	r0, #0
 80077cc:	e010      	b.n	80077f0 <_printf_common+0xac>
 80077ce:	3501      	adds	r5, #1
 80077d0:	68e3      	ldr	r3, [r4, #12]
 80077d2:	6832      	ldr	r2, [r6, #0]
 80077d4:	1a9b      	subs	r3, r3, r2
 80077d6:	42ab      	cmp	r3, r5
 80077d8:	ddd2      	ble.n	8007780 <_printf_common+0x3c>
 80077da:	0022      	movs	r2, r4
 80077dc:	2301      	movs	r3, #1
 80077de:	9901      	ldr	r1, [sp, #4]
 80077e0:	9800      	ldr	r0, [sp, #0]
 80077e2:	9f08      	ldr	r7, [sp, #32]
 80077e4:	3219      	adds	r2, #25
 80077e6:	47b8      	blx	r7
 80077e8:	3001      	adds	r0, #1
 80077ea:	d1f0      	bne.n	80077ce <_printf_common+0x8a>
 80077ec:	2001      	movs	r0, #1
 80077ee:	4240      	negs	r0, r0
 80077f0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80077f2:	2030      	movs	r0, #48	@ 0x30
 80077f4:	18e1      	adds	r1, r4, r3
 80077f6:	3143      	adds	r1, #67	@ 0x43
 80077f8:	7008      	strb	r0, [r1, #0]
 80077fa:	0021      	movs	r1, r4
 80077fc:	1c5a      	adds	r2, r3, #1
 80077fe:	3145      	adds	r1, #69	@ 0x45
 8007800:	7809      	ldrb	r1, [r1, #0]
 8007802:	18a2      	adds	r2, r4, r2
 8007804:	3243      	adds	r2, #67	@ 0x43
 8007806:	3302      	adds	r3, #2
 8007808:	7011      	strb	r1, [r2, #0]
 800780a:	e7c1      	b.n	8007790 <_printf_common+0x4c>
 800780c:	0022      	movs	r2, r4
 800780e:	2301      	movs	r3, #1
 8007810:	9901      	ldr	r1, [sp, #4]
 8007812:	9800      	ldr	r0, [sp, #0]
 8007814:	9f08      	ldr	r7, [sp, #32]
 8007816:	321a      	adds	r2, #26
 8007818:	47b8      	blx	r7
 800781a:	3001      	adds	r0, #1
 800781c:	d0e6      	beq.n	80077ec <_printf_common+0xa8>
 800781e:	3601      	adds	r6, #1
 8007820:	e7d1      	b.n	80077c6 <_printf_common+0x82>
	...

08007824 <_printf_i>:
 8007824:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007826:	b08b      	sub	sp, #44	@ 0x2c
 8007828:	9206      	str	r2, [sp, #24]
 800782a:	000a      	movs	r2, r1
 800782c:	3243      	adds	r2, #67	@ 0x43
 800782e:	9307      	str	r3, [sp, #28]
 8007830:	9005      	str	r0, [sp, #20]
 8007832:	9203      	str	r2, [sp, #12]
 8007834:	7e0a      	ldrb	r2, [r1, #24]
 8007836:	000c      	movs	r4, r1
 8007838:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800783a:	2a78      	cmp	r2, #120	@ 0x78
 800783c:	d809      	bhi.n	8007852 <_printf_i+0x2e>
 800783e:	2a62      	cmp	r2, #98	@ 0x62
 8007840:	d80b      	bhi.n	800785a <_printf_i+0x36>
 8007842:	2a00      	cmp	r2, #0
 8007844:	d100      	bne.n	8007848 <_printf_i+0x24>
 8007846:	e0bc      	b.n	80079c2 <_printf_i+0x19e>
 8007848:	497b      	ldr	r1, [pc, #492]	@ (8007a38 <_printf_i+0x214>)
 800784a:	9104      	str	r1, [sp, #16]
 800784c:	2a58      	cmp	r2, #88	@ 0x58
 800784e:	d100      	bne.n	8007852 <_printf_i+0x2e>
 8007850:	e090      	b.n	8007974 <_printf_i+0x150>
 8007852:	0025      	movs	r5, r4
 8007854:	3542      	adds	r5, #66	@ 0x42
 8007856:	702a      	strb	r2, [r5, #0]
 8007858:	e022      	b.n	80078a0 <_printf_i+0x7c>
 800785a:	0010      	movs	r0, r2
 800785c:	3863      	subs	r0, #99	@ 0x63
 800785e:	2815      	cmp	r0, #21
 8007860:	d8f7      	bhi.n	8007852 <_printf_i+0x2e>
 8007862:	f7f8 fc63 	bl	800012c <__gnu_thumb1_case_shi>
 8007866:	0016      	.short	0x0016
 8007868:	fff6001f 	.word	0xfff6001f
 800786c:	fff6fff6 	.word	0xfff6fff6
 8007870:	001ffff6 	.word	0x001ffff6
 8007874:	fff6fff6 	.word	0xfff6fff6
 8007878:	fff6fff6 	.word	0xfff6fff6
 800787c:	003600a1 	.word	0x003600a1
 8007880:	fff60080 	.word	0xfff60080
 8007884:	00b2fff6 	.word	0x00b2fff6
 8007888:	0036fff6 	.word	0x0036fff6
 800788c:	fff6fff6 	.word	0xfff6fff6
 8007890:	0084      	.short	0x0084
 8007892:	0025      	movs	r5, r4
 8007894:	681a      	ldr	r2, [r3, #0]
 8007896:	3542      	adds	r5, #66	@ 0x42
 8007898:	1d11      	adds	r1, r2, #4
 800789a:	6019      	str	r1, [r3, #0]
 800789c:	6813      	ldr	r3, [r2, #0]
 800789e:	702b      	strb	r3, [r5, #0]
 80078a0:	2301      	movs	r3, #1
 80078a2:	e0a0      	b.n	80079e6 <_printf_i+0x1c2>
 80078a4:	6818      	ldr	r0, [r3, #0]
 80078a6:	6809      	ldr	r1, [r1, #0]
 80078a8:	1d02      	adds	r2, r0, #4
 80078aa:	060d      	lsls	r5, r1, #24
 80078ac:	d50b      	bpl.n	80078c6 <_printf_i+0xa2>
 80078ae:	6806      	ldr	r6, [r0, #0]
 80078b0:	601a      	str	r2, [r3, #0]
 80078b2:	2e00      	cmp	r6, #0
 80078b4:	da03      	bge.n	80078be <_printf_i+0x9a>
 80078b6:	232d      	movs	r3, #45	@ 0x2d
 80078b8:	9a03      	ldr	r2, [sp, #12]
 80078ba:	4276      	negs	r6, r6
 80078bc:	7013      	strb	r3, [r2, #0]
 80078be:	4b5e      	ldr	r3, [pc, #376]	@ (8007a38 <_printf_i+0x214>)
 80078c0:	270a      	movs	r7, #10
 80078c2:	9304      	str	r3, [sp, #16]
 80078c4:	e018      	b.n	80078f8 <_printf_i+0xd4>
 80078c6:	6806      	ldr	r6, [r0, #0]
 80078c8:	601a      	str	r2, [r3, #0]
 80078ca:	0649      	lsls	r1, r1, #25
 80078cc:	d5f1      	bpl.n	80078b2 <_printf_i+0x8e>
 80078ce:	b236      	sxth	r6, r6
 80078d0:	e7ef      	b.n	80078b2 <_printf_i+0x8e>
 80078d2:	6808      	ldr	r0, [r1, #0]
 80078d4:	6819      	ldr	r1, [r3, #0]
 80078d6:	c940      	ldmia	r1!, {r6}
 80078d8:	0605      	lsls	r5, r0, #24
 80078da:	d402      	bmi.n	80078e2 <_printf_i+0xbe>
 80078dc:	0640      	lsls	r0, r0, #25
 80078de:	d500      	bpl.n	80078e2 <_printf_i+0xbe>
 80078e0:	b2b6      	uxth	r6, r6
 80078e2:	6019      	str	r1, [r3, #0]
 80078e4:	4b54      	ldr	r3, [pc, #336]	@ (8007a38 <_printf_i+0x214>)
 80078e6:	270a      	movs	r7, #10
 80078e8:	9304      	str	r3, [sp, #16]
 80078ea:	2a6f      	cmp	r2, #111	@ 0x6f
 80078ec:	d100      	bne.n	80078f0 <_printf_i+0xcc>
 80078ee:	3f02      	subs	r7, #2
 80078f0:	0023      	movs	r3, r4
 80078f2:	2200      	movs	r2, #0
 80078f4:	3343      	adds	r3, #67	@ 0x43
 80078f6:	701a      	strb	r2, [r3, #0]
 80078f8:	6863      	ldr	r3, [r4, #4]
 80078fa:	60a3      	str	r3, [r4, #8]
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	db03      	blt.n	8007908 <_printf_i+0xe4>
 8007900:	2104      	movs	r1, #4
 8007902:	6822      	ldr	r2, [r4, #0]
 8007904:	438a      	bics	r2, r1
 8007906:	6022      	str	r2, [r4, #0]
 8007908:	2e00      	cmp	r6, #0
 800790a:	d102      	bne.n	8007912 <_printf_i+0xee>
 800790c:	9d03      	ldr	r5, [sp, #12]
 800790e:	2b00      	cmp	r3, #0
 8007910:	d00c      	beq.n	800792c <_printf_i+0x108>
 8007912:	9d03      	ldr	r5, [sp, #12]
 8007914:	0030      	movs	r0, r6
 8007916:	0039      	movs	r1, r7
 8007918:	f7f8 fc98 	bl	800024c <__aeabi_uidivmod>
 800791c:	9b04      	ldr	r3, [sp, #16]
 800791e:	3d01      	subs	r5, #1
 8007920:	5c5b      	ldrb	r3, [r3, r1]
 8007922:	702b      	strb	r3, [r5, #0]
 8007924:	0033      	movs	r3, r6
 8007926:	0006      	movs	r6, r0
 8007928:	429f      	cmp	r7, r3
 800792a:	d9f3      	bls.n	8007914 <_printf_i+0xf0>
 800792c:	2f08      	cmp	r7, #8
 800792e:	d109      	bne.n	8007944 <_printf_i+0x120>
 8007930:	6823      	ldr	r3, [r4, #0]
 8007932:	07db      	lsls	r3, r3, #31
 8007934:	d506      	bpl.n	8007944 <_printf_i+0x120>
 8007936:	6862      	ldr	r2, [r4, #4]
 8007938:	6923      	ldr	r3, [r4, #16]
 800793a:	429a      	cmp	r2, r3
 800793c:	dc02      	bgt.n	8007944 <_printf_i+0x120>
 800793e:	2330      	movs	r3, #48	@ 0x30
 8007940:	3d01      	subs	r5, #1
 8007942:	702b      	strb	r3, [r5, #0]
 8007944:	9b03      	ldr	r3, [sp, #12]
 8007946:	1b5b      	subs	r3, r3, r5
 8007948:	6123      	str	r3, [r4, #16]
 800794a:	9b07      	ldr	r3, [sp, #28]
 800794c:	0021      	movs	r1, r4
 800794e:	9300      	str	r3, [sp, #0]
 8007950:	9805      	ldr	r0, [sp, #20]
 8007952:	9b06      	ldr	r3, [sp, #24]
 8007954:	aa09      	add	r2, sp, #36	@ 0x24
 8007956:	f7ff fef5 	bl	8007744 <_printf_common>
 800795a:	3001      	adds	r0, #1
 800795c:	d148      	bne.n	80079f0 <_printf_i+0x1cc>
 800795e:	2001      	movs	r0, #1
 8007960:	4240      	negs	r0, r0
 8007962:	b00b      	add	sp, #44	@ 0x2c
 8007964:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007966:	2220      	movs	r2, #32
 8007968:	6809      	ldr	r1, [r1, #0]
 800796a:	430a      	orrs	r2, r1
 800796c:	6022      	str	r2, [r4, #0]
 800796e:	2278      	movs	r2, #120	@ 0x78
 8007970:	4932      	ldr	r1, [pc, #200]	@ (8007a3c <_printf_i+0x218>)
 8007972:	9104      	str	r1, [sp, #16]
 8007974:	0021      	movs	r1, r4
 8007976:	3145      	adds	r1, #69	@ 0x45
 8007978:	700a      	strb	r2, [r1, #0]
 800797a:	6819      	ldr	r1, [r3, #0]
 800797c:	6822      	ldr	r2, [r4, #0]
 800797e:	c940      	ldmia	r1!, {r6}
 8007980:	0610      	lsls	r0, r2, #24
 8007982:	d402      	bmi.n	800798a <_printf_i+0x166>
 8007984:	0650      	lsls	r0, r2, #25
 8007986:	d500      	bpl.n	800798a <_printf_i+0x166>
 8007988:	b2b6      	uxth	r6, r6
 800798a:	6019      	str	r1, [r3, #0]
 800798c:	07d3      	lsls	r3, r2, #31
 800798e:	d502      	bpl.n	8007996 <_printf_i+0x172>
 8007990:	2320      	movs	r3, #32
 8007992:	4313      	orrs	r3, r2
 8007994:	6023      	str	r3, [r4, #0]
 8007996:	2e00      	cmp	r6, #0
 8007998:	d001      	beq.n	800799e <_printf_i+0x17a>
 800799a:	2710      	movs	r7, #16
 800799c:	e7a8      	b.n	80078f0 <_printf_i+0xcc>
 800799e:	2220      	movs	r2, #32
 80079a0:	6823      	ldr	r3, [r4, #0]
 80079a2:	4393      	bics	r3, r2
 80079a4:	6023      	str	r3, [r4, #0]
 80079a6:	e7f8      	b.n	800799a <_printf_i+0x176>
 80079a8:	681a      	ldr	r2, [r3, #0]
 80079aa:	680d      	ldr	r5, [r1, #0]
 80079ac:	1d10      	adds	r0, r2, #4
 80079ae:	6949      	ldr	r1, [r1, #20]
 80079b0:	6018      	str	r0, [r3, #0]
 80079b2:	6813      	ldr	r3, [r2, #0]
 80079b4:	062e      	lsls	r6, r5, #24
 80079b6:	d501      	bpl.n	80079bc <_printf_i+0x198>
 80079b8:	6019      	str	r1, [r3, #0]
 80079ba:	e002      	b.n	80079c2 <_printf_i+0x19e>
 80079bc:	066d      	lsls	r5, r5, #25
 80079be:	d5fb      	bpl.n	80079b8 <_printf_i+0x194>
 80079c0:	8019      	strh	r1, [r3, #0]
 80079c2:	2300      	movs	r3, #0
 80079c4:	9d03      	ldr	r5, [sp, #12]
 80079c6:	6123      	str	r3, [r4, #16]
 80079c8:	e7bf      	b.n	800794a <_printf_i+0x126>
 80079ca:	681a      	ldr	r2, [r3, #0]
 80079cc:	1d11      	adds	r1, r2, #4
 80079ce:	6019      	str	r1, [r3, #0]
 80079d0:	6815      	ldr	r5, [r2, #0]
 80079d2:	2100      	movs	r1, #0
 80079d4:	0028      	movs	r0, r5
 80079d6:	6862      	ldr	r2, [r4, #4]
 80079d8:	f000 fbf7 	bl	80081ca <memchr>
 80079dc:	2800      	cmp	r0, #0
 80079de:	d001      	beq.n	80079e4 <_printf_i+0x1c0>
 80079e0:	1b40      	subs	r0, r0, r5
 80079e2:	6060      	str	r0, [r4, #4]
 80079e4:	6863      	ldr	r3, [r4, #4]
 80079e6:	6123      	str	r3, [r4, #16]
 80079e8:	2300      	movs	r3, #0
 80079ea:	9a03      	ldr	r2, [sp, #12]
 80079ec:	7013      	strb	r3, [r2, #0]
 80079ee:	e7ac      	b.n	800794a <_printf_i+0x126>
 80079f0:	002a      	movs	r2, r5
 80079f2:	6923      	ldr	r3, [r4, #16]
 80079f4:	9906      	ldr	r1, [sp, #24]
 80079f6:	9805      	ldr	r0, [sp, #20]
 80079f8:	9d07      	ldr	r5, [sp, #28]
 80079fa:	47a8      	blx	r5
 80079fc:	3001      	adds	r0, #1
 80079fe:	d0ae      	beq.n	800795e <_printf_i+0x13a>
 8007a00:	6823      	ldr	r3, [r4, #0]
 8007a02:	079b      	lsls	r3, r3, #30
 8007a04:	d415      	bmi.n	8007a32 <_printf_i+0x20e>
 8007a06:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007a08:	68e0      	ldr	r0, [r4, #12]
 8007a0a:	4298      	cmp	r0, r3
 8007a0c:	daa9      	bge.n	8007962 <_printf_i+0x13e>
 8007a0e:	0018      	movs	r0, r3
 8007a10:	e7a7      	b.n	8007962 <_printf_i+0x13e>
 8007a12:	0022      	movs	r2, r4
 8007a14:	2301      	movs	r3, #1
 8007a16:	9906      	ldr	r1, [sp, #24]
 8007a18:	9805      	ldr	r0, [sp, #20]
 8007a1a:	9e07      	ldr	r6, [sp, #28]
 8007a1c:	3219      	adds	r2, #25
 8007a1e:	47b0      	blx	r6
 8007a20:	3001      	adds	r0, #1
 8007a22:	d09c      	beq.n	800795e <_printf_i+0x13a>
 8007a24:	3501      	adds	r5, #1
 8007a26:	68e3      	ldr	r3, [r4, #12]
 8007a28:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007a2a:	1a9b      	subs	r3, r3, r2
 8007a2c:	42ab      	cmp	r3, r5
 8007a2e:	dcf0      	bgt.n	8007a12 <_printf_i+0x1ee>
 8007a30:	e7e9      	b.n	8007a06 <_printf_i+0x1e2>
 8007a32:	2500      	movs	r5, #0
 8007a34:	e7f7      	b.n	8007a26 <_printf_i+0x202>
 8007a36:	46c0      	nop			@ (mov r8, r8)
 8007a38:	0800bf72 	.word	0x0800bf72
 8007a3c:	0800bf83 	.word	0x0800bf83

08007a40 <_scanf_float>:
 8007a40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007a42:	b08b      	sub	sp, #44	@ 0x2c
 8007a44:	0016      	movs	r6, r2
 8007a46:	9003      	str	r0, [sp, #12]
 8007a48:	22ae      	movs	r2, #174	@ 0xae
 8007a4a:	2000      	movs	r0, #0
 8007a4c:	9307      	str	r3, [sp, #28]
 8007a4e:	688b      	ldr	r3, [r1, #8]
 8007a50:	000c      	movs	r4, r1
 8007a52:	1e59      	subs	r1, r3, #1
 8007a54:	0052      	lsls	r2, r2, #1
 8007a56:	9006      	str	r0, [sp, #24]
 8007a58:	4291      	cmp	r1, r2
 8007a5a:	d905      	bls.n	8007a68 <_scanf_float+0x28>
 8007a5c:	3b5e      	subs	r3, #94	@ 0x5e
 8007a5e:	3bff      	subs	r3, #255	@ 0xff
 8007a60:	9306      	str	r3, [sp, #24]
 8007a62:	235e      	movs	r3, #94	@ 0x5e
 8007a64:	33ff      	adds	r3, #255	@ 0xff
 8007a66:	60a3      	str	r3, [r4, #8]
 8007a68:	23f0      	movs	r3, #240	@ 0xf0
 8007a6a:	6822      	ldr	r2, [r4, #0]
 8007a6c:	00db      	lsls	r3, r3, #3
 8007a6e:	4313      	orrs	r3, r2
 8007a70:	6023      	str	r3, [r4, #0]
 8007a72:	0023      	movs	r3, r4
 8007a74:	2500      	movs	r5, #0
 8007a76:	331c      	adds	r3, #28
 8007a78:	001f      	movs	r7, r3
 8007a7a:	9304      	str	r3, [sp, #16]
 8007a7c:	9502      	str	r5, [sp, #8]
 8007a7e:	9509      	str	r5, [sp, #36]	@ 0x24
 8007a80:	9508      	str	r5, [sp, #32]
 8007a82:	9501      	str	r5, [sp, #4]
 8007a84:	9505      	str	r5, [sp, #20]
 8007a86:	68a2      	ldr	r2, [r4, #8]
 8007a88:	2a00      	cmp	r2, #0
 8007a8a:	d00a      	beq.n	8007aa2 <_scanf_float+0x62>
 8007a8c:	6833      	ldr	r3, [r6, #0]
 8007a8e:	781b      	ldrb	r3, [r3, #0]
 8007a90:	2b4e      	cmp	r3, #78	@ 0x4e
 8007a92:	d844      	bhi.n	8007b1e <_scanf_float+0xde>
 8007a94:	0018      	movs	r0, r3
 8007a96:	2b40      	cmp	r3, #64	@ 0x40
 8007a98:	d82c      	bhi.n	8007af4 <_scanf_float+0xb4>
 8007a9a:	382b      	subs	r0, #43	@ 0x2b
 8007a9c:	b2c1      	uxtb	r1, r0
 8007a9e:	290e      	cmp	r1, #14
 8007aa0:	d92a      	bls.n	8007af8 <_scanf_float+0xb8>
 8007aa2:	9b01      	ldr	r3, [sp, #4]
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d003      	beq.n	8007ab0 <_scanf_float+0x70>
 8007aa8:	6823      	ldr	r3, [r4, #0]
 8007aaa:	4aa6      	ldr	r2, [pc, #664]	@ (8007d44 <_scanf_float+0x304>)
 8007aac:	4013      	ands	r3, r2
 8007aae:	6023      	str	r3, [r4, #0]
 8007ab0:	9b02      	ldr	r3, [sp, #8]
 8007ab2:	3b01      	subs	r3, #1
 8007ab4:	2b01      	cmp	r3, #1
 8007ab6:	d900      	bls.n	8007aba <_scanf_float+0x7a>
 8007ab8:	e0fe      	b.n	8007cb8 <_scanf_float+0x278>
 8007aba:	25be      	movs	r5, #190	@ 0xbe
 8007abc:	006d      	lsls	r5, r5, #1
 8007abe:	9b04      	ldr	r3, [sp, #16]
 8007ac0:	429f      	cmp	r7, r3
 8007ac2:	d900      	bls.n	8007ac6 <_scanf_float+0x86>
 8007ac4:	e0ee      	b.n	8007ca4 <_scanf_float+0x264>
 8007ac6:	2001      	movs	r0, #1
 8007ac8:	b00b      	add	sp, #44	@ 0x2c
 8007aca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007acc:	0018      	movs	r0, r3
 8007ace:	3861      	subs	r0, #97	@ 0x61
 8007ad0:	280d      	cmp	r0, #13
 8007ad2:	d8e6      	bhi.n	8007aa2 <_scanf_float+0x62>
 8007ad4:	f7f8 fb2a 	bl	800012c <__gnu_thumb1_case_shi>
 8007ad8:	ffe50089 	.word	0xffe50089
 8007adc:	ffe5ffe5 	.word	0xffe5ffe5
 8007ae0:	00a700bb 	.word	0x00a700bb
 8007ae4:	ffe5ffe5 	.word	0xffe5ffe5
 8007ae8:	ffe5008f 	.word	0xffe5008f
 8007aec:	ffe5ffe5 	.word	0xffe5ffe5
 8007af0:	006bffe5 	.word	0x006bffe5
 8007af4:	3841      	subs	r0, #65	@ 0x41
 8007af6:	e7eb      	b.n	8007ad0 <_scanf_float+0x90>
 8007af8:	280e      	cmp	r0, #14
 8007afa:	d8d2      	bhi.n	8007aa2 <_scanf_float+0x62>
 8007afc:	f7f8 fb16 	bl	800012c <__gnu_thumb1_case_shi>
 8007b00:	ffd1004f 	.word	0xffd1004f
 8007b04:	009d004f 	.word	0x009d004f
 8007b08:	0021ffd1 	.word	0x0021ffd1
 8007b0c:	00410041 	.word	0x00410041
 8007b10:	00410041 	.word	0x00410041
 8007b14:	00410041 	.word	0x00410041
 8007b18:	00410041 	.word	0x00410041
 8007b1c:	0041      	.short	0x0041
 8007b1e:	2b6e      	cmp	r3, #110	@ 0x6e
 8007b20:	d80a      	bhi.n	8007b38 <_scanf_float+0xf8>
 8007b22:	2b60      	cmp	r3, #96	@ 0x60
 8007b24:	d8d2      	bhi.n	8007acc <_scanf_float+0x8c>
 8007b26:	2b54      	cmp	r3, #84	@ 0x54
 8007b28:	d100      	bne.n	8007b2c <_scanf_float+0xec>
 8007b2a:	e081      	b.n	8007c30 <_scanf_float+0x1f0>
 8007b2c:	2b59      	cmp	r3, #89	@ 0x59
 8007b2e:	d1b8      	bne.n	8007aa2 <_scanf_float+0x62>
 8007b30:	2d07      	cmp	r5, #7
 8007b32:	d1b6      	bne.n	8007aa2 <_scanf_float+0x62>
 8007b34:	2508      	movs	r5, #8
 8007b36:	e02f      	b.n	8007b98 <_scanf_float+0x158>
 8007b38:	2b74      	cmp	r3, #116	@ 0x74
 8007b3a:	d079      	beq.n	8007c30 <_scanf_float+0x1f0>
 8007b3c:	2b79      	cmp	r3, #121	@ 0x79
 8007b3e:	d0f7      	beq.n	8007b30 <_scanf_float+0xf0>
 8007b40:	e7af      	b.n	8007aa2 <_scanf_float+0x62>
 8007b42:	6821      	ldr	r1, [r4, #0]
 8007b44:	05c8      	lsls	r0, r1, #23
 8007b46:	d51c      	bpl.n	8007b82 <_scanf_float+0x142>
 8007b48:	2380      	movs	r3, #128	@ 0x80
 8007b4a:	4399      	bics	r1, r3
 8007b4c:	9b01      	ldr	r3, [sp, #4]
 8007b4e:	6021      	str	r1, [r4, #0]
 8007b50:	3301      	adds	r3, #1
 8007b52:	9301      	str	r3, [sp, #4]
 8007b54:	9b06      	ldr	r3, [sp, #24]
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d003      	beq.n	8007b62 <_scanf_float+0x122>
 8007b5a:	3b01      	subs	r3, #1
 8007b5c:	3201      	adds	r2, #1
 8007b5e:	9306      	str	r3, [sp, #24]
 8007b60:	60a2      	str	r2, [r4, #8]
 8007b62:	68a3      	ldr	r3, [r4, #8]
 8007b64:	3b01      	subs	r3, #1
 8007b66:	60a3      	str	r3, [r4, #8]
 8007b68:	6923      	ldr	r3, [r4, #16]
 8007b6a:	3301      	adds	r3, #1
 8007b6c:	6123      	str	r3, [r4, #16]
 8007b6e:	6873      	ldr	r3, [r6, #4]
 8007b70:	3b01      	subs	r3, #1
 8007b72:	6073      	str	r3, [r6, #4]
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	dc00      	bgt.n	8007b7a <_scanf_float+0x13a>
 8007b78:	e08a      	b.n	8007c90 <_scanf_float+0x250>
 8007b7a:	6833      	ldr	r3, [r6, #0]
 8007b7c:	3301      	adds	r3, #1
 8007b7e:	6033      	str	r3, [r6, #0]
 8007b80:	e781      	b.n	8007a86 <_scanf_float+0x46>
 8007b82:	9a02      	ldr	r2, [sp, #8]
 8007b84:	1951      	adds	r1, r2, r5
 8007b86:	2900      	cmp	r1, #0
 8007b88:	d000      	beq.n	8007b8c <_scanf_float+0x14c>
 8007b8a:	e78a      	b.n	8007aa2 <_scanf_float+0x62>
 8007b8c:	000d      	movs	r5, r1
 8007b8e:	6822      	ldr	r2, [r4, #0]
 8007b90:	486d      	ldr	r0, [pc, #436]	@ (8007d48 <_scanf_float+0x308>)
 8007b92:	9102      	str	r1, [sp, #8]
 8007b94:	4002      	ands	r2, r0
 8007b96:	6022      	str	r2, [r4, #0]
 8007b98:	703b      	strb	r3, [r7, #0]
 8007b9a:	3701      	adds	r7, #1
 8007b9c:	e7e1      	b.n	8007b62 <_scanf_float+0x122>
 8007b9e:	2180      	movs	r1, #128	@ 0x80
 8007ba0:	6822      	ldr	r2, [r4, #0]
 8007ba2:	420a      	tst	r2, r1
 8007ba4:	d100      	bne.n	8007ba8 <_scanf_float+0x168>
 8007ba6:	e77c      	b.n	8007aa2 <_scanf_float+0x62>
 8007ba8:	438a      	bics	r2, r1
 8007baa:	6022      	str	r2, [r4, #0]
 8007bac:	e7f4      	b.n	8007b98 <_scanf_float+0x158>
 8007bae:	9a02      	ldr	r2, [sp, #8]
 8007bb0:	2a00      	cmp	r2, #0
 8007bb2:	d10f      	bne.n	8007bd4 <_scanf_float+0x194>
 8007bb4:	9a01      	ldr	r2, [sp, #4]
 8007bb6:	2a00      	cmp	r2, #0
 8007bb8:	d10f      	bne.n	8007bda <_scanf_float+0x19a>
 8007bba:	6822      	ldr	r2, [r4, #0]
 8007bbc:	21e0      	movs	r1, #224	@ 0xe0
 8007bbe:	0010      	movs	r0, r2
 8007bc0:	00c9      	lsls	r1, r1, #3
 8007bc2:	4008      	ands	r0, r1
 8007bc4:	4288      	cmp	r0, r1
 8007bc6:	d108      	bne.n	8007bda <_scanf_float+0x19a>
 8007bc8:	4960      	ldr	r1, [pc, #384]	@ (8007d4c <_scanf_float+0x30c>)
 8007bca:	400a      	ands	r2, r1
 8007bcc:	6022      	str	r2, [r4, #0]
 8007bce:	2201      	movs	r2, #1
 8007bd0:	9202      	str	r2, [sp, #8]
 8007bd2:	e7e1      	b.n	8007b98 <_scanf_float+0x158>
 8007bd4:	9a02      	ldr	r2, [sp, #8]
 8007bd6:	2a02      	cmp	r2, #2
 8007bd8:	d058      	beq.n	8007c8c <_scanf_float+0x24c>
 8007bda:	2d01      	cmp	r5, #1
 8007bdc:	d002      	beq.n	8007be4 <_scanf_float+0x1a4>
 8007bde:	2d04      	cmp	r5, #4
 8007be0:	d000      	beq.n	8007be4 <_scanf_float+0x1a4>
 8007be2:	e75e      	b.n	8007aa2 <_scanf_float+0x62>
 8007be4:	3501      	adds	r5, #1
 8007be6:	b2ed      	uxtb	r5, r5
 8007be8:	e7d6      	b.n	8007b98 <_scanf_float+0x158>
 8007bea:	9a02      	ldr	r2, [sp, #8]
 8007bec:	2a01      	cmp	r2, #1
 8007bee:	d000      	beq.n	8007bf2 <_scanf_float+0x1b2>
 8007bf0:	e757      	b.n	8007aa2 <_scanf_float+0x62>
 8007bf2:	2202      	movs	r2, #2
 8007bf4:	e7ec      	b.n	8007bd0 <_scanf_float+0x190>
 8007bf6:	2d00      	cmp	r5, #0
 8007bf8:	d110      	bne.n	8007c1c <_scanf_float+0x1dc>
 8007bfa:	9a01      	ldr	r2, [sp, #4]
 8007bfc:	2a00      	cmp	r2, #0
 8007bfe:	d000      	beq.n	8007c02 <_scanf_float+0x1c2>
 8007c00:	e752      	b.n	8007aa8 <_scanf_float+0x68>
 8007c02:	6822      	ldr	r2, [r4, #0]
 8007c04:	21e0      	movs	r1, #224	@ 0xe0
 8007c06:	0010      	movs	r0, r2
 8007c08:	00c9      	lsls	r1, r1, #3
 8007c0a:	4008      	ands	r0, r1
 8007c0c:	4288      	cmp	r0, r1
 8007c0e:	d000      	beq.n	8007c12 <_scanf_float+0x1d2>
 8007c10:	e11d      	b.n	8007e4e <_scanf_float+0x40e>
 8007c12:	494e      	ldr	r1, [pc, #312]	@ (8007d4c <_scanf_float+0x30c>)
 8007c14:	3501      	adds	r5, #1
 8007c16:	400a      	ands	r2, r1
 8007c18:	6022      	str	r2, [r4, #0]
 8007c1a:	e7bd      	b.n	8007b98 <_scanf_float+0x158>
 8007c1c:	21fd      	movs	r1, #253	@ 0xfd
 8007c1e:	1eea      	subs	r2, r5, #3
 8007c20:	420a      	tst	r2, r1
 8007c22:	d0df      	beq.n	8007be4 <_scanf_float+0x1a4>
 8007c24:	e73d      	b.n	8007aa2 <_scanf_float+0x62>
 8007c26:	2d02      	cmp	r5, #2
 8007c28:	d000      	beq.n	8007c2c <_scanf_float+0x1ec>
 8007c2a:	e73a      	b.n	8007aa2 <_scanf_float+0x62>
 8007c2c:	2503      	movs	r5, #3
 8007c2e:	e7b3      	b.n	8007b98 <_scanf_float+0x158>
 8007c30:	2d06      	cmp	r5, #6
 8007c32:	d000      	beq.n	8007c36 <_scanf_float+0x1f6>
 8007c34:	e735      	b.n	8007aa2 <_scanf_float+0x62>
 8007c36:	2507      	movs	r5, #7
 8007c38:	e7ae      	b.n	8007b98 <_scanf_float+0x158>
 8007c3a:	6822      	ldr	r2, [r4, #0]
 8007c3c:	0591      	lsls	r1, r2, #22
 8007c3e:	d400      	bmi.n	8007c42 <_scanf_float+0x202>
 8007c40:	e72f      	b.n	8007aa2 <_scanf_float+0x62>
 8007c42:	4943      	ldr	r1, [pc, #268]	@ (8007d50 <_scanf_float+0x310>)
 8007c44:	400a      	ands	r2, r1
 8007c46:	6022      	str	r2, [r4, #0]
 8007c48:	9a01      	ldr	r2, [sp, #4]
 8007c4a:	9205      	str	r2, [sp, #20]
 8007c4c:	e7a4      	b.n	8007b98 <_scanf_float+0x158>
 8007c4e:	21a0      	movs	r1, #160	@ 0xa0
 8007c50:	2080      	movs	r0, #128	@ 0x80
 8007c52:	6822      	ldr	r2, [r4, #0]
 8007c54:	00c9      	lsls	r1, r1, #3
 8007c56:	4011      	ands	r1, r2
 8007c58:	00c0      	lsls	r0, r0, #3
 8007c5a:	4281      	cmp	r1, r0
 8007c5c:	d006      	beq.n	8007c6c <_scanf_float+0x22c>
 8007c5e:	4202      	tst	r2, r0
 8007c60:	d100      	bne.n	8007c64 <_scanf_float+0x224>
 8007c62:	e71e      	b.n	8007aa2 <_scanf_float+0x62>
 8007c64:	9901      	ldr	r1, [sp, #4]
 8007c66:	2900      	cmp	r1, #0
 8007c68:	d100      	bne.n	8007c6c <_scanf_float+0x22c>
 8007c6a:	e0f0      	b.n	8007e4e <_scanf_float+0x40e>
 8007c6c:	0591      	lsls	r1, r2, #22
 8007c6e:	d404      	bmi.n	8007c7a <_scanf_float+0x23a>
 8007c70:	9901      	ldr	r1, [sp, #4]
 8007c72:	9805      	ldr	r0, [sp, #20]
 8007c74:	9709      	str	r7, [sp, #36]	@ 0x24
 8007c76:	1a09      	subs	r1, r1, r0
 8007c78:	9108      	str	r1, [sp, #32]
 8007c7a:	4934      	ldr	r1, [pc, #208]	@ (8007d4c <_scanf_float+0x30c>)
 8007c7c:	400a      	ands	r2, r1
 8007c7e:	21c0      	movs	r1, #192	@ 0xc0
 8007c80:	0049      	lsls	r1, r1, #1
 8007c82:	430a      	orrs	r2, r1
 8007c84:	6022      	str	r2, [r4, #0]
 8007c86:	2200      	movs	r2, #0
 8007c88:	9201      	str	r2, [sp, #4]
 8007c8a:	e785      	b.n	8007b98 <_scanf_float+0x158>
 8007c8c:	2203      	movs	r2, #3
 8007c8e:	e79f      	b.n	8007bd0 <_scanf_float+0x190>
 8007c90:	23c0      	movs	r3, #192	@ 0xc0
 8007c92:	005b      	lsls	r3, r3, #1
 8007c94:	0031      	movs	r1, r6
 8007c96:	58e3      	ldr	r3, [r4, r3]
 8007c98:	9803      	ldr	r0, [sp, #12]
 8007c9a:	4798      	blx	r3
 8007c9c:	2800      	cmp	r0, #0
 8007c9e:	d100      	bne.n	8007ca2 <_scanf_float+0x262>
 8007ca0:	e6f1      	b.n	8007a86 <_scanf_float+0x46>
 8007ca2:	e6fe      	b.n	8007aa2 <_scanf_float+0x62>
 8007ca4:	3f01      	subs	r7, #1
 8007ca6:	5963      	ldr	r3, [r4, r5]
 8007ca8:	0032      	movs	r2, r6
 8007caa:	7839      	ldrb	r1, [r7, #0]
 8007cac:	9803      	ldr	r0, [sp, #12]
 8007cae:	4798      	blx	r3
 8007cb0:	6923      	ldr	r3, [r4, #16]
 8007cb2:	3b01      	subs	r3, #1
 8007cb4:	6123      	str	r3, [r4, #16]
 8007cb6:	e702      	b.n	8007abe <_scanf_float+0x7e>
 8007cb8:	1e6b      	subs	r3, r5, #1
 8007cba:	2b06      	cmp	r3, #6
 8007cbc:	d80e      	bhi.n	8007cdc <_scanf_float+0x29c>
 8007cbe:	9702      	str	r7, [sp, #8]
 8007cc0:	2d02      	cmp	r5, #2
 8007cc2:	d920      	bls.n	8007d06 <_scanf_float+0x2c6>
 8007cc4:	1beb      	subs	r3, r5, r7
 8007cc6:	b2db      	uxtb	r3, r3
 8007cc8:	9306      	str	r3, [sp, #24]
 8007cca:	9b02      	ldr	r3, [sp, #8]
 8007ccc:	9a06      	ldr	r2, [sp, #24]
 8007cce:	189b      	adds	r3, r3, r2
 8007cd0:	b2db      	uxtb	r3, r3
 8007cd2:	2b03      	cmp	r3, #3
 8007cd4:	d127      	bne.n	8007d26 <_scanf_float+0x2e6>
 8007cd6:	3d03      	subs	r5, #3
 8007cd8:	b2ed      	uxtb	r5, r5
 8007cda:	1b7f      	subs	r7, r7, r5
 8007cdc:	6823      	ldr	r3, [r4, #0]
 8007cde:	05da      	lsls	r2, r3, #23
 8007ce0:	d553      	bpl.n	8007d8a <_scanf_float+0x34a>
 8007ce2:	055b      	lsls	r3, r3, #21
 8007ce4:	d536      	bpl.n	8007d54 <_scanf_float+0x314>
 8007ce6:	25be      	movs	r5, #190	@ 0xbe
 8007ce8:	006d      	lsls	r5, r5, #1
 8007cea:	9b04      	ldr	r3, [sp, #16]
 8007cec:	429f      	cmp	r7, r3
 8007cee:	d800      	bhi.n	8007cf2 <_scanf_float+0x2b2>
 8007cf0:	e6e9      	b.n	8007ac6 <_scanf_float+0x86>
 8007cf2:	3f01      	subs	r7, #1
 8007cf4:	5963      	ldr	r3, [r4, r5]
 8007cf6:	0032      	movs	r2, r6
 8007cf8:	7839      	ldrb	r1, [r7, #0]
 8007cfa:	9803      	ldr	r0, [sp, #12]
 8007cfc:	4798      	blx	r3
 8007cfe:	6923      	ldr	r3, [r4, #16]
 8007d00:	3b01      	subs	r3, #1
 8007d02:	6123      	str	r3, [r4, #16]
 8007d04:	e7f1      	b.n	8007cea <_scanf_float+0x2aa>
 8007d06:	25be      	movs	r5, #190	@ 0xbe
 8007d08:	006d      	lsls	r5, r5, #1
 8007d0a:	9b04      	ldr	r3, [sp, #16]
 8007d0c:	429f      	cmp	r7, r3
 8007d0e:	d800      	bhi.n	8007d12 <_scanf_float+0x2d2>
 8007d10:	e6d9      	b.n	8007ac6 <_scanf_float+0x86>
 8007d12:	3f01      	subs	r7, #1
 8007d14:	5963      	ldr	r3, [r4, r5]
 8007d16:	0032      	movs	r2, r6
 8007d18:	7839      	ldrb	r1, [r7, #0]
 8007d1a:	9803      	ldr	r0, [sp, #12]
 8007d1c:	4798      	blx	r3
 8007d1e:	6923      	ldr	r3, [r4, #16]
 8007d20:	3b01      	subs	r3, #1
 8007d22:	6123      	str	r3, [r4, #16]
 8007d24:	e7f1      	b.n	8007d0a <_scanf_float+0x2ca>
 8007d26:	9b02      	ldr	r3, [sp, #8]
 8007d28:	0032      	movs	r2, r6
 8007d2a:	3b01      	subs	r3, #1
 8007d2c:	7819      	ldrb	r1, [r3, #0]
 8007d2e:	9302      	str	r3, [sp, #8]
 8007d30:	23be      	movs	r3, #190	@ 0xbe
 8007d32:	005b      	lsls	r3, r3, #1
 8007d34:	58e3      	ldr	r3, [r4, r3]
 8007d36:	9803      	ldr	r0, [sp, #12]
 8007d38:	4798      	blx	r3
 8007d3a:	6923      	ldr	r3, [r4, #16]
 8007d3c:	3b01      	subs	r3, #1
 8007d3e:	6123      	str	r3, [r4, #16]
 8007d40:	e7c3      	b.n	8007cca <_scanf_float+0x28a>
 8007d42:	46c0      	nop			@ (mov r8, r8)
 8007d44:	fffffeff 	.word	0xfffffeff
 8007d48:	fffffe7f 	.word	0xfffffe7f
 8007d4c:	fffff87f 	.word	0xfffff87f
 8007d50:	fffffd7f 	.word	0xfffffd7f
 8007d54:	6923      	ldr	r3, [r4, #16]
 8007d56:	1e7d      	subs	r5, r7, #1
 8007d58:	7829      	ldrb	r1, [r5, #0]
 8007d5a:	3b01      	subs	r3, #1
 8007d5c:	6123      	str	r3, [r4, #16]
 8007d5e:	2965      	cmp	r1, #101	@ 0x65
 8007d60:	d00c      	beq.n	8007d7c <_scanf_float+0x33c>
 8007d62:	2945      	cmp	r1, #69	@ 0x45
 8007d64:	d00a      	beq.n	8007d7c <_scanf_float+0x33c>
 8007d66:	23be      	movs	r3, #190	@ 0xbe
 8007d68:	005b      	lsls	r3, r3, #1
 8007d6a:	58e3      	ldr	r3, [r4, r3]
 8007d6c:	0032      	movs	r2, r6
 8007d6e:	9803      	ldr	r0, [sp, #12]
 8007d70:	4798      	blx	r3
 8007d72:	6923      	ldr	r3, [r4, #16]
 8007d74:	1ebd      	subs	r5, r7, #2
 8007d76:	3b01      	subs	r3, #1
 8007d78:	7829      	ldrb	r1, [r5, #0]
 8007d7a:	6123      	str	r3, [r4, #16]
 8007d7c:	23be      	movs	r3, #190	@ 0xbe
 8007d7e:	005b      	lsls	r3, r3, #1
 8007d80:	0032      	movs	r2, r6
 8007d82:	58e3      	ldr	r3, [r4, r3]
 8007d84:	9803      	ldr	r0, [sp, #12]
 8007d86:	4798      	blx	r3
 8007d88:	002f      	movs	r7, r5
 8007d8a:	6821      	ldr	r1, [r4, #0]
 8007d8c:	2310      	movs	r3, #16
 8007d8e:	000a      	movs	r2, r1
 8007d90:	401a      	ands	r2, r3
 8007d92:	4219      	tst	r1, r3
 8007d94:	d001      	beq.n	8007d9a <_scanf_float+0x35a>
 8007d96:	2000      	movs	r0, #0
 8007d98:	e696      	b.n	8007ac8 <_scanf_float+0x88>
 8007d9a:	21c0      	movs	r1, #192	@ 0xc0
 8007d9c:	703a      	strb	r2, [r7, #0]
 8007d9e:	6823      	ldr	r3, [r4, #0]
 8007da0:	00c9      	lsls	r1, r1, #3
 8007da2:	400b      	ands	r3, r1
 8007da4:	2180      	movs	r1, #128	@ 0x80
 8007da6:	00c9      	lsls	r1, r1, #3
 8007da8:	428b      	cmp	r3, r1
 8007daa:	d11c      	bne.n	8007de6 <_scanf_float+0x3a6>
 8007dac:	9b05      	ldr	r3, [sp, #20]
 8007dae:	9a01      	ldr	r2, [sp, #4]
 8007db0:	9905      	ldr	r1, [sp, #20]
 8007db2:	1a9a      	subs	r2, r3, r2
 8007db4:	9b01      	ldr	r3, [sp, #4]
 8007db6:	428b      	cmp	r3, r1
 8007db8:	d121      	bne.n	8007dfe <_scanf_float+0x3be>
 8007dba:	2200      	movs	r2, #0
 8007dbc:	9904      	ldr	r1, [sp, #16]
 8007dbe:	9803      	ldr	r0, [sp, #12]
 8007dc0:	f002 fc6e 	bl	800a6a0 <_strtod_r>
 8007dc4:	9b07      	ldr	r3, [sp, #28]
 8007dc6:	6822      	ldr	r2, [r4, #0]
 8007dc8:	0006      	movs	r6, r0
 8007dca:	000f      	movs	r7, r1
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	0791      	lsls	r1, r2, #30
 8007dd0:	d522      	bpl.n	8007e18 <_scanf_float+0x3d8>
 8007dd2:	9907      	ldr	r1, [sp, #28]
 8007dd4:	1d1a      	adds	r2, r3, #4
 8007dd6:	600a      	str	r2, [r1, #0]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	601e      	str	r6, [r3, #0]
 8007ddc:	605f      	str	r7, [r3, #4]
 8007dde:	68e3      	ldr	r3, [r4, #12]
 8007de0:	3301      	adds	r3, #1
 8007de2:	60e3      	str	r3, [r4, #12]
 8007de4:	e7d7      	b.n	8007d96 <_scanf_float+0x356>
 8007de6:	9b08      	ldr	r3, [sp, #32]
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d0e6      	beq.n	8007dba <_scanf_float+0x37a>
 8007dec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007dee:	9803      	ldr	r0, [sp, #12]
 8007df0:	1c59      	adds	r1, r3, #1
 8007df2:	230a      	movs	r3, #10
 8007df4:	f002 fce6 	bl	800a7c4 <_strtol_r>
 8007df8:	9b08      	ldr	r3, [sp, #32]
 8007dfa:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 8007dfc:	1ac2      	subs	r2, r0, r3
 8007dfe:	0023      	movs	r3, r4
 8007e00:	3370      	adds	r3, #112	@ 0x70
 8007e02:	33ff      	adds	r3, #255	@ 0xff
 8007e04:	429f      	cmp	r7, r3
 8007e06:	d302      	bcc.n	8007e0e <_scanf_float+0x3ce>
 8007e08:	0027      	movs	r7, r4
 8007e0a:	376f      	adds	r7, #111	@ 0x6f
 8007e0c:	37ff      	adds	r7, #255	@ 0xff
 8007e0e:	0038      	movs	r0, r7
 8007e10:	4910      	ldr	r1, [pc, #64]	@ (8007e54 <_scanf_float+0x414>)
 8007e12:	f000 f8e7 	bl	8007fe4 <siprintf>
 8007e16:	e7d0      	b.n	8007dba <_scanf_float+0x37a>
 8007e18:	1d19      	adds	r1, r3, #4
 8007e1a:	0752      	lsls	r2, r2, #29
 8007e1c:	d502      	bpl.n	8007e24 <_scanf_float+0x3e4>
 8007e1e:	9a07      	ldr	r2, [sp, #28]
 8007e20:	6011      	str	r1, [r2, #0]
 8007e22:	e7d9      	b.n	8007dd8 <_scanf_float+0x398>
 8007e24:	9a07      	ldr	r2, [sp, #28]
 8007e26:	0030      	movs	r0, r6
 8007e28:	6011      	str	r1, [r2, #0]
 8007e2a:	681d      	ldr	r5, [r3, #0]
 8007e2c:	0032      	movs	r2, r6
 8007e2e:	003b      	movs	r3, r7
 8007e30:	0039      	movs	r1, r7
 8007e32:	f7fa faf5 	bl	8002420 <__aeabi_dcmpun>
 8007e36:	2800      	cmp	r0, #0
 8007e38:	d004      	beq.n	8007e44 <_scanf_float+0x404>
 8007e3a:	4807      	ldr	r0, [pc, #28]	@ (8007e58 <_scanf_float+0x418>)
 8007e3c:	f000 f9d0 	bl	80081e0 <nanf>
 8007e40:	6028      	str	r0, [r5, #0]
 8007e42:	e7cc      	b.n	8007dde <_scanf_float+0x39e>
 8007e44:	0030      	movs	r0, r6
 8007e46:	0039      	movs	r1, r7
 8007e48:	f7fa fb9a 	bl	8002580 <__aeabi_d2f>
 8007e4c:	e7f8      	b.n	8007e40 <_scanf_float+0x400>
 8007e4e:	2300      	movs	r3, #0
 8007e50:	9301      	str	r3, [sp, #4]
 8007e52:	e62d      	b.n	8007ab0 <_scanf_float+0x70>
 8007e54:	0800bf94 	.word	0x0800bf94
 8007e58:	0800c32d 	.word	0x0800c32d

08007e5c <std>:
 8007e5c:	2300      	movs	r3, #0
 8007e5e:	b510      	push	{r4, lr}
 8007e60:	0004      	movs	r4, r0
 8007e62:	6003      	str	r3, [r0, #0]
 8007e64:	6043      	str	r3, [r0, #4]
 8007e66:	6083      	str	r3, [r0, #8]
 8007e68:	8181      	strh	r1, [r0, #12]
 8007e6a:	6643      	str	r3, [r0, #100]	@ 0x64
 8007e6c:	81c2      	strh	r2, [r0, #14]
 8007e6e:	6103      	str	r3, [r0, #16]
 8007e70:	6143      	str	r3, [r0, #20]
 8007e72:	6183      	str	r3, [r0, #24]
 8007e74:	0019      	movs	r1, r3
 8007e76:	2208      	movs	r2, #8
 8007e78:	305c      	adds	r0, #92	@ 0x5c
 8007e7a:	f000 f91f 	bl	80080bc <memset>
 8007e7e:	4b0b      	ldr	r3, [pc, #44]	@ (8007eac <std+0x50>)
 8007e80:	6224      	str	r4, [r4, #32]
 8007e82:	6263      	str	r3, [r4, #36]	@ 0x24
 8007e84:	4b0a      	ldr	r3, [pc, #40]	@ (8007eb0 <std+0x54>)
 8007e86:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007e88:	4b0a      	ldr	r3, [pc, #40]	@ (8007eb4 <std+0x58>)
 8007e8a:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007e8c:	4b0a      	ldr	r3, [pc, #40]	@ (8007eb8 <std+0x5c>)
 8007e8e:	6323      	str	r3, [r4, #48]	@ 0x30
 8007e90:	4b0a      	ldr	r3, [pc, #40]	@ (8007ebc <std+0x60>)
 8007e92:	429c      	cmp	r4, r3
 8007e94:	d005      	beq.n	8007ea2 <std+0x46>
 8007e96:	4b0a      	ldr	r3, [pc, #40]	@ (8007ec0 <std+0x64>)
 8007e98:	429c      	cmp	r4, r3
 8007e9a:	d002      	beq.n	8007ea2 <std+0x46>
 8007e9c:	4b09      	ldr	r3, [pc, #36]	@ (8007ec4 <std+0x68>)
 8007e9e:	429c      	cmp	r4, r3
 8007ea0:	d103      	bne.n	8007eaa <std+0x4e>
 8007ea2:	0020      	movs	r0, r4
 8007ea4:	3058      	adds	r0, #88	@ 0x58
 8007ea6:	f000 f98d 	bl	80081c4 <__retarget_lock_init_recursive>
 8007eaa:	bd10      	pop	{r4, pc}
 8007eac:	08008025 	.word	0x08008025
 8007eb0:	0800804d 	.word	0x0800804d
 8007eb4:	08008085 	.word	0x08008085
 8007eb8:	080080b1 	.word	0x080080b1
 8007ebc:	200004e0 	.word	0x200004e0
 8007ec0:	20000548 	.word	0x20000548
 8007ec4:	200005b0 	.word	0x200005b0

08007ec8 <stdio_exit_handler>:
 8007ec8:	b510      	push	{r4, lr}
 8007eca:	4a03      	ldr	r2, [pc, #12]	@ (8007ed8 <stdio_exit_handler+0x10>)
 8007ecc:	4903      	ldr	r1, [pc, #12]	@ (8007edc <stdio_exit_handler+0x14>)
 8007ece:	4804      	ldr	r0, [pc, #16]	@ (8007ee0 <stdio_exit_handler+0x18>)
 8007ed0:	f000 f86c 	bl	8007fac <_fwalk_sglue>
 8007ed4:	bd10      	pop	{r4, pc}
 8007ed6:	46c0      	nop			@ (mov r8, r8)
 8007ed8:	2000001c 	.word	0x2000001c
 8007edc:	0800ab95 	.word	0x0800ab95
 8007ee0:	2000002c 	.word	0x2000002c

08007ee4 <cleanup_stdio>:
 8007ee4:	6841      	ldr	r1, [r0, #4]
 8007ee6:	4b0b      	ldr	r3, [pc, #44]	@ (8007f14 <cleanup_stdio+0x30>)
 8007ee8:	b510      	push	{r4, lr}
 8007eea:	0004      	movs	r4, r0
 8007eec:	4299      	cmp	r1, r3
 8007eee:	d001      	beq.n	8007ef4 <cleanup_stdio+0x10>
 8007ef0:	f002 fe50 	bl	800ab94 <_fflush_r>
 8007ef4:	68a1      	ldr	r1, [r4, #8]
 8007ef6:	4b08      	ldr	r3, [pc, #32]	@ (8007f18 <cleanup_stdio+0x34>)
 8007ef8:	4299      	cmp	r1, r3
 8007efa:	d002      	beq.n	8007f02 <cleanup_stdio+0x1e>
 8007efc:	0020      	movs	r0, r4
 8007efe:	f002 fe49 	bl	800ab94 <_fflush_r>
 8007f02:	68e1      	ldr	r1, [r4, #12]
 8007f04:	4b05      	ldr	r3, [pc, #20]	@ (8007f1c <cleanup_stdio+0x38>)
 8007f06:	4299      	cmp	r1, r3
 8007f08:	d002      	beq.n	8007f10 <cleanup_stdio+0x2c>
 8007f0a:	0020      	movs	r0, r4
 8007f0c:	f002 fe42 	bl	800ab94 <_fflush_r>
 8007f10:	bd10      	pop	{r4, pc}
 8007f12:	46c0      	nop			@ (mov r8, r8)
 8007f14:	200004e0 	.word	0x200004e0
 8007f18:	20000548 	.word	0x20000548
 8007f1c:	200005b0 	.word	0x200005b0

08007f20 <global_stdio_init.part.0>:
 8007f20:	b510      	push	{r4, lr}
 8007f22:	4b09      	ldr	r3, [pc, #36]	@ (8007f48 <global_stdio_init.part.0+0x28>)
 8007f24:	4a09      	ldr	r2, [pc, #36]	@ (8007f4c <global_stdio_init.part.0+0x2c>)
 8007f26:	2104      	movs	r1, #4
 8007f28:	601a      	str	r2, [r3, #0]
 8007f2a:	4809      	ldr	r0, [pc, #36]	@ (8007f50 <global_stdio_init.part.0+0x30>)
 8007f2c:	2200      	movs	r2, #0
 8007f2e:	f7ff ff95 	bl	8007e5c <std>
 8007f32:	2201      	movs	r2, #1
 8007f34:	2109      	movs	r1, #9
 8007f36:	4807      	ldr	r0, [pc, #28]	@ (8007f54 <global_stdio_init.part.0+0x34>)
 8007f38:	f7ff ff90 	bl	8007e5c <std>
 8007f3c:	2202      	movs	r2, #2
 8007f3e:	2112      	movs	r1, #18
 8007f40:	4805      	ldr	r0, [pc, #20]	@ (8007f58 <global_stdio_init.part.0+0x38>)
 8007f42:	f7ff ff8b 	bl	8007e5c <std>
 8007f46:	bd10      	pop	{r4, pc}
 8007f48:	20000618 	.word	0x20000618
 8007f4c:	08007ec9 	.word	0x08007ec9
 8007f50:	200004e0 	.word	0x200004e0
 8007f54:	20000548 	.word	0x20000548
 8007f58:	200005b0 	.word	0x200005b0

08007f5c <__sfp_lock_acquire>:
 8007f5c:	b510      	push	{r4, lr}
 8007f5e:	4802      	ldr	r0, [pc, #8]	@ (8007f68 <__sfp_lock_acquire+0xc>)
 8007f60:	f000 f931 	bl	80081c6 <__retarget_lock_acquire_recursive>
 8007f64:	bd10      	pop	{r4, pc}
 8007f66:	46c0      	nop			@ (mov r8, r8)
 8007f68:	20000621 	.word	0x20000621

08007f6c <__sfp_lock_release>:
 8007f6c:	b510      	push	{r4, lr}
 8007f6e:	4802      	ldr	r0, [pc, #8]	@ (8007f78 <__sfp_lock_release+0xc>)
 8007f70:	f000 f92a 	bl	80081c8 <__retarget_lock_release_recursive>
 8007f74:	bd10      	pop	{r4, pc}
 8007f76:	46c0      	nop			@ (mov r8, r8)
 8007f78:	20000621 	.word	0x20000621

08007f7c <__sinit>:
 8007f7c:	b510      	push	{r4, lr}
 8007f7e:	0004      	movs	r4, r0
 8007f80:	f7ff ffec 	bl	8007f5c <__sfp_lock_acquire>
 8007f84:	6a23      	ldr	r3, [r4, #32]
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d002      	beq.n	8007f90 <__sinit+0x14>
 8007f8a:	f7ff ffef 	bl	8007f6c <__sfp_lock_release>
 8007f8e:	bd10      	pop	{r4, pc}
 8007f90:	4b04      	ldr	r3, [pc, #16]	@ (8007fa4 <__sinit+0x28>)
 8007f92:	6223      	str	r3, [r4, #32]
 8007f94:	4b04      	ldr	r3, [pc, #16]	@ (8007fa8 <__sinit+0x2c>)
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d1f6      	bne.n	8007f8a <__sinit+0xe>
 8007f9c:	f7ff ffc0 	bl	8007f20 <global_stdio_init.part.0>
 8007fa0:	e7f3      	b.n	8007f8a <__sinit+0xe>
 8007fa2:	46c0      	nop			@ (mov r8, r8)
 8007fa4:	08007ee5 	.word	0x08007ee5
 8007fa8:	20000618 	.word	0x20000618

08007fac <_fwalk_sglue>:
 8007fac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007fae:	0014      	movs	r4, r2
 8007fb0:	2600      	movs	r6, #0
 8007fb2:	9000      	str	r0, [sp, #0]
 8007fb4:	9101      	str	r1, [sp, #4]
 8007fb6:	68a5      	ldr	r5, [r4, #8]
 8007fb8:	6867      	ldr	r7, [r4, #4]
 8007fba:	3f01      	subs	r7, #1
 8007fbc:	d504      	bpl.n	8007fc8 <_fwalk_sglue+0x1c>
 8007fbe:	6824      	ldr	r4, [r4, #0]
 8007fc0:	2c00      	cmp	r4, #0
 8007fc2:	d1f8      	bne.n	8007fb6 <_fwalk_sglue+0xa>
 8007fc4:	0030      	movs	r0, r6
 8007fc6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007fc8:	89ab      	ldrh	r3, [r5, #12]
 8007fca:	2b01      	cmp	r3, #1
 8007fcc:	d908      	bls.n	8007fe0 <_fwalk_sglue+0x34>
 8007fce:	220e      	movs	r2, #14
 8007fd0:	5eab      	ldrsh	r3, [r5, r2]
 8007fd2:	3301      	adds	r3, #1
 8007fd4:	d004      	beq.n	8007fe0 <_fwalk_sglue+0x34>
 8007fd6:	0029      	movs	r1, r5
 8007fd8:	9800      	ldr	r0, [sp, #0]
 8007fda:	9b01      	ldr	r3, [sp, #4]
 8007fdc:	4798      	blx	r3
 8007fde:	4306      	orrs	r6, r0
 8007fe0:	3568      	adds	r5, #104	@ 0x68
 8007fe2:	e7ea      	b.n	8007fba <_fwalk_sglue+0xe>

08007fe4 <siprintf>:
 8007fe4:	b40e      	push	{r1, r2, r3}
 8007fe6:	b500      	push	{lr}
 8007fe8:	490b      	ldr	r1, [pc, #44]	@ (8008018 <siprintf+0x34>)
 8007fea:	b09c      	sub	sp, #112	@ 0x70
 8007fec:	ab1d      	add	r3, sp, #116	@ 0x74
 8007fee:	9002      	str	r0, [sp, #8]
 8007ff0:	9006      	str	r0, [sp, #24]
 8007ff2:	9107      	str	r1, [sp, #28]
 8007ff4:	9104      	str	r1, [sp, #16]
 8007ff6:	4809      	ldr	r0, [pc, #36]	@ (800801c <siprintf+0x38>)
 8007ff8:	4909      	ldr	r1, [pc, #36]	@ (8008020 <siprintf+0x3c>)
 8007ffa:	cb04      	ldmia	r3!, {r2}
 8007ffc:	9105      	str	r1, [sp, #20]
 8007ffe:	6800      	ldr	r0, [r0, #0]
 8008000:	a902      	add	r1, sp, #8
 8008002:	9301      	str	r3, [sp, #4]
 8008004:	f002 fc42 	bl	800a88c <_svfiprintf_r>
 8008008:	2200      	movs	r2, #0
 800800a:	9b02      	ldr	r3, [sp, #8]
 800800c:	701a      	strb	r2, [r3, #0]
 800800e:	b01c      	add	sp, #112	@ 0x70
 8008010:	bc08      	pop	{r3}
 8008012:	b003      	add	sp, #12
 8008014:	4718      	bx	r3
 8008016:	46c0      	nop			@ (mov r8, r8)
 8008018:	7fffffff 	.word	0x7fffffff
 800801c:	20000028 	.word	0x20000028
 8008020:	ffff0208 	.word	0xffff0208

08008024 <__sread>:
 8008024:	b570      	push	{r4, r5, r6, lr}
 8008026:	000c      	movs	r4, r1
 8008028:	250e      	movs	r5, #14
 800802a:	5f49      	ldrsh	r1, [r1, r5]
 800802c:	f000 f878 	bl	8008120 <_read_r>
 8008030:	2800      	cmp	r0, #0
 8008032:	db03      	blt.n	800803c <__sread+0x18>
 8008034:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8008036:	181b      	adds	r3, r3, r0
 8008038:	6563      	str	r3, [r4, #84]	@ 0x54
 800803a:	bd70      	pop	{r4, r5, r6, pc}
 800803c:	89a3      	ldrh	r3, [r4, #12]
 800803e:	4a02      	ldr	r2, [pc, #8]	@ (8008048 <__sread+0x24>)
 8008040:	4013      	ands	r3, r2
 8008042:	81a3      	strh	r3, [r4, #12]
 8008044:	e7f9      	b.n	800803a <__sread+0x16>
 8008046:	46c0      	nop			@ (mov r8, r8)
 8008048:	ffffefff 	.word	0xffffefff

0800804c <__swrite>:
 800804c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800804e:	001f      	movs	r7, r3
 8008050:	898b      	ldrh	r3, [r1, #12]
 8008052:	0005      	movs	r5, r0
 8008054:	000c      	movs	r4, r1
 8008056:	0016      	movs	r6, r2
 8008058:	05db      	lsls	r3, r3, #23
 800805a:	d505      	bpl.n	8008068 <__swrite+0x1c>
 800805c:	230e      	movs	r3, #14
 800805e:	5ec9      	ldrsh	r1, [r1, r3]
 8008060:	2200      	movs	r2, #0
 8008062:	2302      	movs	r3, #2
 8008064:	f000 f848 	bl	80080f8 <_lseek_r>
 8008068:	89a3      	ldrh	r3, [r4, #12]
 800806a:	4a05      	ldr	r2, [pc, #20]	@ (8008080 <__swrite+0x34>)
 800806c:	0028      	movs	r0, r5
 800806e:	4013      	ands	r3, r2
 8008070:	81a3      	strh	r3, [r4, #12]
 8008072:	0032      	movs	r2, r6
 8008074:	230e      	movs	r3, #14
 8008076:	5ee1      	ldrsh	r1, [r4, r3]
 8008078:	003b      	movs	r3, r7
 800807a:	f000 f865 	bl	8008148 <_write_r>
 800807e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008080:	ffffefff 	.word	0xffffefff

08008084 <__sseek>:
 8008084:	b570      	push	{r4, r5, r6, lr}
 8008086:	000c      	movs	r4, r1
 8008088:	250e      	movs	r5, #14
 800808a:	5f49      	ldrsh	r1, [r1, r5]
 800808c:	f000 f834 	bl	80080f8 <_lseek_r>
 8008090:	89a3      	ldrh	r3, [r4, #12]
 8008092:	1c42      	adds	r2, r0, #1
 8008094:	d103      	bne.n	800809e <__sseek+0x1a>
 8008096:	4a05      	ldr	r2, [pc, #20]	@ (80080ac <__sseek+0x28>)
 8008098:	4013      	ands	r3, r2
 800809a:	81a3      	strh	r3, [r4, #12]
 800809c:	bd70      	pop	{r4, r5, r6, pc}
 800809e:	2280      	movs	r2, #128	@ 0x80
 80080a0:	0152      	lsls	r2, r2, #5
 80080a2:	4313      	orrs	r3, r2
 80080a4:	81a3      	strh	r3, [r4, #12]
 80080a6:	6560      	str	r0, [r4, #84]	@ 0x54
 80080a8:	e7f8      	b.n	800809c <__sseek+0x18>
 80080aa:	46c0      	nop			@ (mov r8, r8)
 80080ac:	ffffefff 	.word	0xffffefff

080080b0 <__sclose>:
 80080b0:	b510      	push	{r4, lr}
 80080b2:	230e      	movs	r3, #14
 80080b4:	5ec9      	ldrsh	r1, [r1, r3]
 80080b6:	f000 f80d 	bl	80080d4 <_close_r>
 80080ba:	bd10      	pop	{r4, pc}

080080bc <memset>:
 80080bc:	0003      	movs	r3, r0
 80080be:	1882      	adds	r2, r0, r2
 80080c0:	4293      	cmp	r3, r2
 80080c2:	d100      	bne.n	80080c6 <memset+0xa>
 80080c4:	4770      	bx	lr
 80080c6:	7019      	strb	r1, [r3, #0]
 80080c8:	3301      	adds	r3, #1
 80080ca:	e7f9      	b.n	80080c0 <memset+0x4>

080080cc <_localeconv_r>:
 80080cc:	4800      	ldr	r0, [pc, #0]	@ (80080d0 <_localeconv_r+0x4>)
 80080ce:	4770      	bx	lr
 80080d0:	20000168 	.word	0x20000168

080080d4 <_close_r>:
 80080d4:	2300      	movs	r3, #0
 80080d6:	b570      	push	{r4, r5, r6, lr}
 80080d8:	4d06      	ldr	r5, [pc, #24]	@ (80080f4 <_close_r+0x20>)
 80080da:	0004      	movs	r4, r0
 80080dc:	0008      	movs	r0, r1
 80080de:	602b      	str	r3, [r5, #0]
 80080e0:	f7fa fd48 	bl	8002b74 <_close>
 80080e4:	1c43      	adds	r3, r0, #1
 80080e6:	d103      	bne.n	80080f0 <_close_r+0x1c>
 80080e8:	682b      	ldr	r3, [r5, #0]
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d000      	beq.n	80080f0 <_close_r+0x1c>
 80080ee:	6023      	str	r3, [r4, #0]
 80080f0:	bd70      	pop	{r4, r5, r6, pc}
 80080f2:	46c0      	nop			@ (mov r8, r8)
 80080f4:	2000061c 	.word	0x2000061c

080080f8 <_lseek_r>:
 80080f8:	b570      	push	{r4, r5, r6, lr}
 80080fa:	0004      	movs	r4, r0
 80080fc:	0008      	movs	r0, r1
 80080fe:	0011      	movs	r1, r2
 8008100:	001a      	movs	r2, r3
 8008102:	2300      	movs	r3, #0
 8008104:	4d05      	ldr	r5, [pc, #20]	@ (800811c <_lseek_r+0x24>)
 8008106:	602b      	str	r3, [r5, #0]
 8008108:	f7fa fd55 	bl	8002bb6 <_lseek>
 800810c:	1c43      	adds	r3, r0, #1
 800810e:	d103      	bne.n	8008118 <_lseek_r+0x20>
 8008110:	682b      	ldr	r3, [r5, #0]
 8008112:	2b00      	cmp	r3, #0
 8008114:	d000      	beq.n	8008118 <_lseek_r+0x20>
 8008116:	6023      	str	r3, [r4, #0]
 8008118:	bd70      	pop	{r4, r5, r6, pc}
 800811a:	46c0      	nop			@ (mov r8, r8)
 800811c:	2000061c 	.word	0x2000061c

08008120 <_read_r>:
 8008120:	b570      	push	{r4, r5, r6, lr}
 8008122:	0004      	movs	r4, r0
 8008124:	0008      	movs	r0, r1
 8008126:	0011      	movs	r1, r2
 8008128:	001a      	movs	r2, r3
 800812a:	2300      	movs	r3, #0
 800812c:	4d05      	ldr	r5, [pc, #20]	@ (8008144 <_read_r+0x24>)
 800812e:	602b      	str	r3, [r5, #0]
 8008130:	f7fa fce7 	bl	8002b02 <_read>
 8008134:	1c43      	adds	r3, r0, #1
 8008136:	d103      	bne.n	8008140 <_read_r+0x20>
 8008138:	682b      	ldr	r3, [r5, #0]
 800813a:	2b00      	cmp	r3, #0
 800813c:	d000      	beq.n	8008140 <_read_r+0x20>
 800813e:	6023      	str	r3, [r4, #0]
 8008140:	bd70      	pop	{r4, r5, r6, pc}
 8008142:	46c0      	nop			@ (mov r8, r8)
 8008144:	2000061c 	.word	0x2000061c

08008148 <_write_r>:
 8008148:	b570      	push	{r4, r5, r6, lr}
 800814a:	0004      	movs	r4, r0
 800814c:	0008      	movs	r0, r1
 800814e:	0011      	movs	r1, r2
 8008150:	001a      	movs	r2, r3
 8008152:	2300      	movs	r3, #0
 8008154:	4d05      	ldr	r5, [pc, #20]	@ (800816c <_write_r+0x24>)
 8008156:	602b      	str	r3, [r5, #0]
 8008158:	f7fa fcf0 	bl	8002b3c <_write>
 800815c:	1c43      	adds	r3, r0, #1
 800815e:	d103      	bne.n	8008168 <_write_r+0x20>
 8008160:	682b      	ldr	r3, [r5, #0]
 8008162:	2b00      	cmp	r3, #0
 8008164:	d000      	beq.n	8008168 <_write_r+0x20>
 8008166:	6023      	str	r3, [r4, #0]
 8008168:	bd70      	pop	{r4, r5, r6, pc}
 800816a:	46c0      	nop			@ (mov r8, r8)
 800816c:	2000061c 	.word	0x2000061c

08008170 <__errno>:
 8008170:	4b01      	ldr	r3, [pc, #4]	@ (8008178 <__errno+0x8>)
 8008172:	6818      	ldr	r0, [r3, #0]
 8008174:	4770      	bx	lr
 8008176:	46c0      	nop			@ (mov r8, r8)
 8008178:	20000028 	.word	0x20000028

0800817c <__libc_init_array>:
 800817c:	b570      	push	{r4, r5, r6, lr}
 800817e:	2600      	movs	r6, #0
 8008180:	4c0c      	ldr	r4, [pc, #48]	@ (80081b4 <__libc_init_array+0x38>)
 8008182:	4d0d      	ldr	r5, [pc, #52]	@ (80081b8 <__libc_init_array+0x3c>)
 8008184:	1b64      	subs	r4, r4, r5
 8008186:	10a4      	asrs	r4, r4, #2
 8008188:	42a6      	cmp	r6, r4
 800818a:	d109      	bne.n	80081a0 <__libc_init_array+0x24>
 800818c:	2600      	movs	r6, #0
 800818e:	f003 fc43 	bl	800ba18 <_init>
 8008192:	4c0a      	ldr	r4, [pc, #40]	@ (80081bc <__libc_init_array+0x40>)
 8008194:	4d0a      	ldr	r5, [pc, #40]	@ (80081c0 <__libc_init_array+0x44>)
 8008196:	1b64      	subs	r4, r4, r5
 8008198:	10a4      	asrs	r4, r4, #2
 800819a:	42a6      	cmp	r6, r4
 800819c:	d105      	bne.n	80081aa <__libc_init_array+0x2e>
 800819e:	bd70      	pop	{r4, r5, r6, pc}
 80081a0:	00b3      	lsls	r3, r6, #2
 80081a2:	58eb      	ldr	r3, [r5, r3]
 80081a4:	4798      	blx	r3
 80081a6:	3601      	adds	r6, #1
 80081a8:	e7ee      	b.n	8008188 <__libc_init_array+0xc>
 80081aa:	00b3      	lsls	r3, r6, #2
 80081ac:	58eb      	ldr	r3, [r5, r3]
 80081ae:	4798      	blx	r3
 80081b0:	3601      	adds	r6, #1
 80081b2:	e7f2      	b.n	800819a <__libc_init_array+0x1e>
 80081b4:	0800c390 	.word	0x0800c390
 80081b8:	0800c390 	.word	0x0800c390
 80081bc:	0800c394 	.word	0x0800c394
 80081c0:	0800c390 	.word	0x0800c390

080081c4 <__retarget_lock_init_recursive>:
 80081c4:	4770      	bx	lr

080081c6 <__retarget_lock_acquire_recursive>:
 80081c6:	4770      	bx	lr

080081c8 <__retarget_lock_release_recursive>:
 80081c8:	4770      	bx	lr

080081ca <memchr>:
 80081ca:	b2c9      	uxtb	r1, r1
 80081cc:	1882      	adds	r2, r0, r2
 80081ce:	4290      	cmp	r0, r2
 80081d0:	d101      	bne.n	80081d6 <memchr+0xc>
 80081d2:	2000      	movs	r0, #0
 80081d4:	4770      	bx	lr
 80081d6:	7803      	ldrb	r3, [r0, #0]
 80081d8:	428b      	cmp	r3, r1
 80081da:	d0fb      	beq.n	80081d4 <memchr+0xa>
 80081dc:	3001      	adds	r0, #1
 80081de:	e7f6      	b.n	80081ce <memchr+0x4>

080081e0 <nanf>:
 80081e0:	4800      	ldr	r0, [pc, #0]	@ (80081e4 <nanf+0x4>)
 80081e2:	4770      	bx	lr
 80081e4:	7fc00000 	.word	0x7fc00000

080081e8 <quorem>:
 80081e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80081ea:	6902      	ldr	r2, [r0, #16]
 80081ec:	690f      	ldr	r7, [r1, #16]
 80081ee:	b087      	sub	sp, #28
 80081f0:	0006      	movs	r6, r0
 80081f2:	000b      	movs	r3, r1
 80081f4:	2000      	movs	r0, #0
 80081f6:	9102      	str	r1, [sp, #8]
 80081f8:	42ba      	cmp	r2, r7
 80081fa:	db6d      	blt.n	80082d8 <quorem+0xf0>
 80081fc:	3f01      	subs	r7, #1
 80081fe:	00bc      	lsls	r4, r7, #2
 8008200:	3314      	adds	r3, #20
 8008202:	9305      	str	r3, [sp, #20]
 8008204:	191b      	adds	r3, r3, r4
 8008206:	9303      	str	r3, [sp, #12]
 8008208:	0033      	movs	r3, r6
 800820a:	3314      	adds	r3, #20
 800820c:	191c      	adds	r4, r3, r4
 800820e:	9301      	str	r3, [sp, #4]
 8008210:	6823      	ldr	r3, [r4, #0]
 8008212:	9304      	str	r3, [sp, #16]
 8008214:	9b03      	ldr	r3, [sp, #12]
 8008216:	9804      	ldr	r0, [sp, #16]
 8008218:	681d      	ldr	r5, [r3, #0]
 800821a:	3501      	adds	r5, #1
 800821c:	0029      	movs	r1, r5
 800821e:	f7f7 ff8f 	bl	8000140 <__udivsi3>
 8008222:	9b04      	ldr	r3, [sp, #16]
 8008224:	9000      	str	r0, [sp, #0]
 8008226:	42ab      	cmp	r3, r5
 8008228:	d32b      	bcc.n	8008282 <quorem+0x9a>
 800822a:	9b05      	ldr	r3, [sp, #20]
 800822c:	9d01      	ldr	r5, [sp, #4]
 800822e:	469c      	mov	ip, r3
 8008230:	2300      	movs	r3, #0
 8008232:	9305      	str	r3, [sp, #20]
 8008234:	9304      	str	r3, [sp, #16]
 8008236:	4662      	mov	r2, ip
 8008238:	ca08      	ldmia	r2!, {r3}
 800823a:	6828      	ldr	r0, [r5, #0]
 800823c:	4694      	mov	ip, r2
 800823e:	9a00      	ldr	r2, [sp, #0]
 8008240:	b299      	uxth	r1, r3
 8008242:	4351      	muls	r1, r2
 8008244:	9a05      	ldr	r2, [sp, #20]
 8008246:	0c1b      	lsrs	r3, r3, #16
 8008248:	1889      	adds	r1, r1, r2
 800824a:	9a00      	ldr	r2, [sp, #0]
 800824c:	4353      	muls	r3, r2
 800824e:	0c0a      	lsrs	r2, r1, #16
 8008250:	189b      	adds	r3, r3, r2
 8008252:	0c1a      	lsrs	r2, r3, #16
 8008254:	b289      	uxth	r1, r1
 8008256:	9205      	str	r2, [sp, #20]
 8008258:	b282      	uxth	r2, r0
 800825a:	1a52      	subs	r2, r2, r1
 800825c:	9904      	ldr	r1, [sp, #16]
 800825e:	0c00      	lsrs	r0, r0, #16
 8008260:	1852      	adds	r2, r2, r1
 8008262:	b29b      	uxth	r3, r3
 8008264:	1411      	asrs	r1, r2, #16
 8008266:	1ac3      	subs	r3, r0, r3
 8008268:	185b      	adds	r3, r3, r1
 800826a:	1419      	asrs	r1, r3, #16
 800826c:	b292      	uxth	r2, r2
 800826e:	041b      	lsls	r3, r3, #16
 8008270:	431a      	orrs	r2, r3
 8008272:	9b03      	ldr	r3, [sp, #12]
 8008274:	9104      	str	r1, [sp, #16]
 8008276:	c504      	stmia	r5!, {r2}
 8008278:	4563      	cmp	r3, ip
 800827a:	d2dc      	bcs.n	8008236 <quorem+0x4e>
 800827c:	6823      	ldr	r3, [r4, #0]
 800827e:	2b00      	cmp	r3, #0
 8008280:	d030      	beq.n	80082e4 <quorem+0xfc>
 8008282:	0030      	movs	r0, r6
 8008284:	9902      	ldr	r1, [sp, #8]
 8008286:	f001 fa11 	bl	80096ac <__mcmp>
 800828a:	2800      	cmp	r0, #0
 800828c:	db23      	blt.n	80082d6 <quorem+0xee>
 800828e:	0034      	movs	r4, r6
 8008290:	2500      	movs	r5, #0
 8008292:	9902      	ldr	r1, [sp, #8]
 8008294:	3414      	adds	r4, #20
 8008296:	3114      	adds	r1, #20
 8008298:	6823      	ldr	r3, [r4, #0]
 800829a:	c901      	ldmia	r1!, {r0}
 800829c:	9302      	str	r3, [sp, #8]
 800829e:	466b      	mov	r3, sp
 80082a0:	891b      	ldrh	r3, [r3, #8]
 80082a2:	b282      	uxth	r2, r0
 80082a4:	1a9a      	subs	r2, r3, r2
 80082a6:	9b02      	ldr	r3, [sp, #8]
 80082a8:	1952      	adds	r2, r2, r5
 80082aa:	0c00      	lsrs	r0, r0, #16
 80082ac:	0c1b      	lsrs	r3, r3, #16
 80082ae:	1a1b      	subs	r3, r3, r0
 80082b0:	1410      	asrs	r0, r2, #16
 80082b2:	181b      	adds	r3, r3, r0
 80082b4:	141d      	asrs	r5, r3, #16
 80082b6:	b292      	uxth	r2, r2
 80082b8:	041b      	lsls	r3, r3, #16
 80082ba:	431a      	orrs	r2, r3
 80082bc:	9b03      	ldr	r3, [sp, #12]
 80082be:	c404      	stmia	r4!, {r2}
 80082c0:	428b      	cmp	r3, r1
 80082c2:	d2e9      	bcs.n	8008298 <quorem+0xb0>
 80082c4:	9a01      	ldr	r2, [sp, #4]
 80082c6:	00bb      	lsls	r3, r7, #2
 80082c8:	18d3      	adds	r3, r2, r3
 80082ca:	681a      	ldr	r2, [r3, #0]
 80082cc:	2a00      	cmp	r2, #0
 80082ce:	d013      	beq.n	80082f8 <quorem+0x110>
 80082d0:	9b00      	ldr	r3, [sp, #0]
 80082d2:	3301      	adds	r3, #1
 80082d4:	9300      	str	r3, [sp, #0]
 80082d6:	9800      	ldr	r0, [sp, #0]
 80082d8:	b007      	add	sp, #28
 80082da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80082dc:	6823      	ldr	r3, [r4, #0]
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d104      	bne.n	80082ec <quorem+0x104>
 80082e2:	3f01      	subs	r7, #1
 80082e4:	9b01      	ldr	r3, [sp, #4]
 80082e6:	3c04      	subs	r4, #4
 80082e8:	42a3      	cmp	r3, r4
 80082ea:	d3f7      	bcc.n	80082dc <quorem+0xf4>
 80082ec:	6137      	str	r7, [r6, #16]
 80082ee:	e7c8      	b.n	8008282 <quorem+0x9a>
 80082f0:	681a      	ldr	r2, [r3, #0]
 80082f2:	2a00      	cmp	r2, #0
 80082f4:	d104      	bne.n	8008300 <quorem+0x118>
 80082f6:	3f01      	subs	r7, #1
 80082f8:	9a01      	ldr	r2, [sp, #4]
 80082fa:	3b04      	subs	r3, #4
 80082fc:	429a      	cmp	r2, r3
 80082fe:	d3f7      	bcc.n	80082f0 <quorem+0x108>
 8008300:	6137      	str	r7, [r6, #16]
 8008302:	e7e5      	b.n	80082d0 <quorem+0xe8>

08008304 <_dtoa_r>:
 8008304:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008306:	0014      	movs	r4, r2
 8008308:	001d      	movs	r5, r3
 800830a:	69c6      	ldr	r6, [r0, #28]
 800830c:	b09d      	sub	sp, #116	@ 0x74
 800830e:	940a      	str	r4, [sp, #40]	@ 0x28
 8008310:	950b      	str	r5, [sp, #44]	@ 0x2c
 8008312:	9f25      	ldr	r7, [sp, #148]	@ 0x94
 8008314:	9003      	str	r0, [sp, #12]
 8008316:	2e00      	cmp	r6, #0
 8008318:	d10f      	bne.n	800833a <_dtoa_r+0x36>
 800831a:	2010      	movs	r0, #16
 800831c:	f000 fe30 	bl	8008f80 <malloc>
 8008320:	9b03      	ldr	r3, [sp, #12]
 8008322:	1e02      	subs	r2, r0, #0
 8008324:	61d8      	str	r0, [r3, #28]
 8008326:	d104      	bne.n	8008332 <_dtoa_r+0x2e>
 8008328:	21ef      	movs	r1, #239	@ 0xef
 800832a:	4bc7      	ldr	r3, [pc, #796]	@ (8008648 <_dtoa_r+0x344>)
 800832c:	48c7      	ldr	r0, [pc, #796]	@ (800864c <_dtoa_r+0x348>)
 800832e:	f002 fca3 	bl	800ac78 <__assert_func>
 8008332:	6046      	str	r6, [r0, #4]
 8008334:	6086      	str	r6, [r0, #8]
 8008336:	6006      	str	r6, [r0, #0]
 8008338:	60c6      	str	r6, [r0, #12]
 800833a:	9b03      	ldr	r3, [sp, #12]
 800833c:	69db      	ldr	r3, [r3, #28]
 800833e:	6819      	ldr	r1, [r3, #0]
 8008340:	2900      	cmp	r1, #0
 8008342:	d00b      	beq.n	800835c <_dtoa_r+0x58>
 8008344:	685a      	ldr	r2, [r3, #4]
 8008346:	2301      	movs	r3, #1
 8008348:	4093      	lsls	r3, r2
 800834a:	604a      	str	r2, [r1, #4]
 800834c:	608b      	str	r3, [r1, #8]
 800834e:	9803      	ldr	r0, [sp, #12]
 8008350:	f000 ff16 	bl	8009180 <_Bfree>
 8008354:	2200      	movs	r2, #0
 8008356:	9b03      	ldr	r3, [sp, #12]
 8008358:	69db      	ldr	r3, [r3, #28]
 800835a:	601a      	str	r2, [r3, #0]
 800835c:	2d00      	cmp	r5, #0
 800835e:	da1e      	bge.n	800839e <_dtoa_r+0x9a>
 8008360:	2301      	movs	r3, #1
 8008362:	603b      	str	r3, [r7, #0]
 8008364:	006b      	lsls	r3, r5, #1
 8008366:	085b      	lsrs	r3, r3, #1
 8008368:	930b      	str	r3, [sp, #44]	@ 0x2c
 800836a:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800836c:	4bb8      	ldr	r3, [pc, #736]	@ (8008650 <_dtoa_r+0x34c>)
 800836e:	4ab8      	ldr	r2, [pc, #736]	@ (8008650 <_dtoa_r+0x34c>)
 8008370:	403b      	ands	r3, r7
 8008372:	4293      	cmp	r3, r2
 8008374:	d116      	bne.n	80083a4 <_dtoa_r+0xa0>
 8008376:	4bb7      	ldr	r3, [pc, #732]	@ (8008654 <_dtoa_r+0x350>)
 8008378:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800837a:	6013      	str	r3, [r2, #0]
 800837c:	033b      	lsls	r3, r7, #12
 800837e:	0b1b      	lsrs	r3, r3, #12
 8008380:	4323      	orrs	r3, r4
 8008382:	d101      	bne.n	8008388 <_dtoa_r+0x84>
 8008384:	f000 fd83 	bl	8008e8e <_dtoa_r+0xb8a>
 8008388:	4bb3      	ldr	r3, [pc, #716]	@ (8008658 <_dtoa_r+0x354>)
 800838a:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 800838c:	9308      	str	r3, [sp, #32]
 800838e:	2a00      	cmp	r2, #0
 8008390:	d002      	beq.n	8008398 <_dtoa_r+0x94>
 8008392:	4bb2      	ldr	r3, [pc, #712]	@ (800865c <_dtoa_r+0x358>)
 8008394:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8008396:	6013      	str	r3, [r2, #0]
 8008398:	9808      	ldr	r0, [sp, #32]
 800839a:	b01d      	add	sp, #116	@ 0x74
 800839c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800839e:	2300      	movs	r3, #0
 80083a0:	603b      	str	r3, [r7, #0]
 80083a2:	e7e2      	b.n	800836a <_dtoa_r+0x66>
 80083a4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80083a6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80083a8:	9212      	str	r2, [sp, #72]	@ 0x48
 80083aa:	9313      	str	r3, [sp, #76]	@ 0x4c
 80083ac:	9812      	ldr	r0, [sp, #72]	@ 0x48
 80083ae:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 80083b0:	2200      	movs	r2, #0
 80083b2:	2300      	movs	r3, #0
 80083b4:	f7f8 f84a 	bl	800044c <__aeabi_dcmpeq>
 80083b8:	1e06      	subs	r6, r0, #0
 80083ba:	d00b      	beq.n	80083d4 <_dtoa_r+0xd0>
 80083bc:	2301      	movs	r3, #1
 80083be:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80083c0:	6013      	str	r3, [r2, #0]
 80083c2:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d002      	beq.n	80083ce <_dtoa_r+0xca>
 80083c8:	4ba5      	ldr	r3, [pc, #660]	@ (8008660 <_dtoa_r+0x35c>)
 80083ca:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 80083cc:	6013      	str	r3, [r2, #0]
 80083ce:	4ba5      	ldr	r3, [pc, #660]	@ (8008664 <_dtoa_r+0x360>)
 80083d0:	9308      	str	r3, [sp, #32]
 80083d2:	e7e1      	b.n	8008398 <_dtoa_r+0x94>
 80083d4:	ab1a      	add	r3, sp, #104	@ 0x68
 80083d6:	9301      	str	r3, [sp, #4]
 80083d8:	ab1b      	add	r3, sp, #108	@ 0x6c
 80083da:	9300      	str	r3, [sp, #0]
 80083dc:	9803      	ldr	r0, [sp, #12]
 80083de:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80083e0:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80083e2:	f001 fa85 	bl	80098f0 <__d2b>
 80083e6:	007a      	lsls	r2, r7, #1
 80083e8:	9005      	str	r0, [sp, #20]
 80083ea:	0d52      	lsrs	r2, r2, #21
 80083ec:	d100      	bne.n	80083f0 <_dtoa_r+0xec>
 80083ee:	e07b      	b.n	80084e8 <_dtoa_r+0x1e4>
 80083f0:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80083f2:	9618      	str	r6, [sp, #96]	@ 0x60
 80083f4:	0319      	lsls	r1, r3, #12
 80083f6:	4b9c      	ldr	r3, [pc, #624]	@ (8008668 <_dtoa_r+0x364>)
 80083f8:	0b09      	lsrs	r1, r1, #12
 80083fa:	430b      	orrs	r3, r1
 80083fc:	499b      	ldr	r1, [pc, #620]	@ (800866c <_dtoa_r+0x368>)
 80083fe:	1857      	adds	r7, r2, r1
 8008400:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8008402:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8008404:	0019      	movs	r1, r3
 8008406:	2200      	movs	r2, #0
 8008408:	4b99      	ldr	r3, [pc, #612]	@ (8008670 <_dtoa_r+0x36c>)
 800840a:	f7f9 fc6d 	bl	8001ce8 <__aeabi_dsub>
 800840e:	4a99      	ldr	r2, [pc, #612]	@ (8008674 <_dtoa_r+0x370>)
 8008410:	4b99      	ldr	r3, [pc, #612]	@ (8008678 <_dtoa_r+0x374>)
 8008412:	f7f9 f9a1 	bl	8001758 <__aeabi_dmul>
 8008416:	4a99      	ldr	r2, [pc, #612]	@ (800867c <_dtoa_r+0x378>)
 8008418:	4b99      	ldr	r3, [pc, #612]	@ (8008680 <_dtoa_r+0x37c>)
 800841a:	f7f8 f9f5 	bl	8000808 <__aeabi_dadd>
 800841e:	0004      	movs	r4, r0
 8008420:	0038      	movs	r0, r7
 8008422:	000d      	movs	r5, r1
 8008424:	f7fa f85a 	bl	80024dc <__aeabi_i2d>
 8008428:	4a96      	ldr	r2, [pc, #600]	@ (8008684 <_dtoa_r+0x380>)
 800842a:	4b97      	ldr	r3, [pc, #604]	@ (8008688 <_dtoa_r+0x384>)
 800842c:	f7f9 f994 	bl	8001758 <__aeabi_dmul>
 8008430:	0002      	movs	r2, r0
 8008432:	000b      	movs	r3, r1
 8008434:	0020      	movs	r0, r4
 8008436:	0029      	movs	r1, r5
 8008438:	f7f8 f9e6 	bl	8000808 <__aeabi_dadd>
 800843c:	0004      	movs	r4, r0
 800843e:	000d      	movs	r5, r1
 8008440:	f7fa f810 	bl	8002464 <__aeabi_d2iz>
 8008444:	2200      	movs	r2, #0
 8008446:	9004      	str	r0, [sp, #16]
 8008448:	2300      	movs	r3, #0
 800844a:	0020      	movs	r0, r4
 800844c:	0029      	movs	r1, r5
 800844e:	f7f8 f803 	bl	8000458 <__aeabi_dcmplt>
 8008452:	2800      	cmp	r0, #0
 8008454:	d00b      	beq.n	800846e <_dtoa_r+0x16a>
 8008456:	9804      	ldr	r0, [sp, #16]
 8008458:	f7fa f840 	bl	80024dc <__aeabi_i2d>
 800845c:	002b      	movs	r3, r5
 800845e:	0022      	movs	r2, r4
 8008460:	f7f7 fff4 	bl	800044c <__aeabi_dcmpeq>
 8008464:	4243      	negs	r3, r0
 8008466:	4158      	adcs	r0, r3
 8008468:	9b04      	ldr	r3, [sp, #16]
 800846a:	1a1b      	subs	r3, r3, r0
 800846c:	9304      	str	r3, [sp, #16]
 800846e:	2301      	movs	r3, #1
 8008470:	9315      	str	r3, [sp, #84]	@ 0x54
 8008472:	9b04      	ldr	r3, [sp, #16]
 8008474:	2b16      	cmp	r3, #22
 8008476:	d810      	bhi.n	800849a <_dtoa_r+0x196>
 8008478:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800847a:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800847c:	9a04      	ldr	r2, [sp, #16]
 800847e:	4b83      	ldr	r3, [pc, #524]	@ (800868c <_dtoa_r+0x388>)
 8008480:	00d2      	lsls	r2, r2, #3
 8008482:	189b      	adds	r3, r3, r2
 8008484:	681a      	ldr	r2, [r3, #0]
 8008486:	685b      	ldr	r3, [r3, #4]
 8008488:	f7f7 ffe6 	bl	8000458 <__aeabi_dcmplt>
 800848c:	2800      	cmp	r0, #0
 800848e:	d047      	beq.n	8008520 <_dtoa_r+0x21c>
 8008490:	9b04      	ldr	r3, [sp, #16]
 8008492:	3b01      	subs	r3, #1
 8008494:	9304      	str	r3, [sp, #16]
 8008496:	2300      	movs	r3, #0
 8008498:	9315      	str	r3, [sp, #84]	@ 0x54
 800849a:	2200      	movs	r2, #0
 800849c:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 800849e:	9206      	str	r2, [sp, #24]
 80084a0:	1bdb      	subs	r3, r3, r7
 80084a2:	1e5a      	subs	r2, r3, #1
 80084a4:	d53e      	bpl.n	8008524 <_dtoa_r+0x220>
 80084a6:	2201      	movs	r2, #1
 80084a8:	1ad3      	subs	r3, r2, r3
 80084aa:	9306      	str	r3, [sp, #24]
 80084ac:	2300      	movs	r3, #0
 80084ae:	930d      	str	r3, [sp, #52]	@ 0x34
 80084b0:	9b04      	ldr	r3, [sp, #16]
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	db38      	blt.n	8008528 <_dtoa_r+0x224>
 80084b6:	9a04      	ldr	r2, [sp, #16]
 80084b8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80084ba:	4694      	mov	ip, r2
 80084bc:	4463      	add	r3, ip
 80084be:	930d      	str	r3, [sp, #52]	@ 0x34
 80084c0:	2300      	movs	r3, #0
 80084c2:	9214      	str	r2, [sp, #80]	@ 0x50
 80084c4:	930f      	str	r3, [sp, #60]	@ 0x3c
 80084c6:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80084c8:	2401      	movs	r4, #1
 80084ca:	2b09      	cmp	r3, #9
 80084cc:	d867      	bhi.n	800859e <_dtoa_r+0x29a>
 80084ce:	2b05      	cmp	r3, #5
 80084d0:	dd02      	ble.n	80084d8 <_dtoa_r+0x1d4>
 80084d2:	2400      	movs	r4, #0
 80084d4:	3b04      	subs	r3, #4
 80084d6:	9322      	str	r3, [sp, #136]	@ 0x88
 80084d8:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80084da:	1e98      	subs	r0, r3, #2
 80084dc:	2803      	cmp	r0, #3
 80084de:	d867      	bhi.n	80085b0 <_dtoa_r+0x2ac>
 80084e0:	f7f7 fe1a 	bl	8000118 <__gnu_thumb1_case_uqi>
 80084e4:	5b383a2b 	.word	0x5b383a2b
 80084e8:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 80084ea:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 80084ec:	18f6      	adds	r6, r6, r3
 80084ee:	4b68      	ldr	r3, [pc, #416]	@ (8008690 <_dtoa_r+0x38c>)
 80084f0:	18f2      	adds	r2, r6, r3
 80084f2:	2a20      	cmp	r2, #32
 80084f4:	dd0f      	ble.n	8008516 <_dtoa_r+0x212>
 80084f6:	2340      	movs	r3, #64	@ 0x40
 80084f8:	1a9b      	subs	r3, r3, r2
 80084fa:	409f      	lsls	r7, r3
 80084fc:	4b65      	ldr	r3, [pc, #404]	@ (8008694 <_dtoa_r+0x390>)
 80084fe:	0038      	movs	r0, r7
 8008500:	18f3      	adds	r3, r6, r3
 8008502:	40dc      	lsrs	r4, r3
 8008504:	4320      	orrs	r0, r4
 8008506:	f7fa f817 	bl	8002538 <__aeabi_ui2d>
 800850a:	2201      	movs	r2, #1
 800850c:	4b62      	ldr	r3, [pc, #392]	@ (8008698 <_dtoa_r+0x394>)
 800850e:	1e77      	subs	r7, r6, #1
 8008510:	18cb      	adds	r3, r1, r3
 8008512:	9218      	str	r2, [sp, #96]	@ 0x60
 8008514:	e776      	b.n	8008404 <_dtoa_r+0x100>
 8008516:	2320      	movs	r3, #32
 8008518:	0020      	movs	r0, r4
 800851a:	1a9b      	subs	r3, r3, r2
 800851c:	4098      	lsls	r0, r3
 800851e:	e7f2      	b.n	8008506 <_dtoa_r+0x202>
 8008520:	9015      	str	r0, [sp, #84]	@ 0x54
 8008522:	e7ba      	b.n	800849a <_dtoa_r+0x196>
 8008524:	920d      	str	r2, [sp, #52]	@ 0x34
 8008526:	e7c3      	b.n	80084b0 <_dtoa_r+0x1ac>
 8008528:	9b06      	ldr	r3, [sp, #24]
 800852a:	9a04      	ldr	r2, [sp, #16]
 800852c:	1a9b      	subs	r3, r3, r2
 800852e:	9306      	str	r3, [sp, #24]
 8008530:	4253      	negs	r3, r2
 8008532:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008534:	2300      	movs	r3, #0
 8008536:	9314      	str	r3, [sp, #80]	@ 0x50
 8008538:	e7c5      	b.n	80084c6 <_dtoa_r+0x1c2>
 800853a:	2300      	movs	r3, #0
 800853c:	9310      	str	r3, [sp, #64]	@ 0x40
 800853e:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008540:	930e      	str	r3, [sp, #56]	@ 0x38
 8008542:	9309      	str	r3, [sp, #36]	@ 0x24
 8008544:	2b00      	cmp	r3, #0
 8008546:	dc13      	bgt.n	8008570 <_dtoa_r+0x26c>
 8008548:	2301      	movs	r3, #1
 800854a:	001a      	movs	r2, r3
 800854c:	930e      	str	r3, [sp, #56]	@ 0x38
 800854e:	9309      	str	r3, [sp, #36]	@ 0x24
 8008550:	9223      	str	r2, [sp, #140]	@ 0x8c
 8008552:	e00d      	b.n	8008570 <_dtoa_r+0x26c>
 8008554:	2301      	movs	r3, #1
 8008556:	e7f1      	b.n	800853c <_dtoa_r+0x238>
 8008558:	2300      	movs	r3, #0
 800855a:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800855c:	9310      	str	r3, [sp, #64]	@ 0x40
 800855e:	4694      	mov	ip, r2
 8008560:	9b04      	ldr	r3, [sp, #16]
 8008562:	4463      	add	r3, ip
 8008564:	930e      	str	r3, [sp, #56]	@ 0x38
 8008566:	3301      	adds	r3, #1
 8008568:	9309      	str	r3, [sp, #36]	@ 0x24
 800856a:	2b00      	cmp	r3, #0
 800856c:	dc00      	bgt.n	8008570 <_dtoa_r+0x26c>
 800856e:	2301      	movs	r3, #1
 8008570:	9a03      	ldr	r2, [sp, #12]
 8008572:	2100      	movs	r1, #0
 8008574:	69d0      	ldr	r0, [r2, #28]
 8008576:	2204      	movs	r2, #4
 8008578:	0015      	movs	r5, r2
 800857a:	3514      	adds	r5, #20
 800857c:	429d      	cmp	r5, r3
 800857e:	d91b      	bls.n	80085b8 <_dtoa_r+0x2b4>
 8008580:	6041      	str	r1, [r0, #4]
 8008582:	9803      	ldr	r0, [sp, #12]
 8008584:	f000 fdb8 	bl	80090f8 <_Balloc>
 8008588:	9008      	str	r0, [sp, #32]
 800858a:	2800      	cmp	r0, #0
 800858c:	d117      	bne.n	80085be <_dtoa_r+0x2ba>
 800858e:	21b0      	movs	r1, #176	@ 0xb0
 8008590:	4b42      	ldr	r3, [pc, #264]	@ (800869c <_dtoa_r+0x398>)
 8008592:	482e      	ldr	r0, [pc, #184]	@ (800864c <_dtoa_r+0x348>)
 8008594:	9a08      	ldr	r2, [sp, #32]
 8008596:	31ff      	adds	r1, #255	@ 0xff
 8008598:	e6c9      	b.n	800832e <_dtoa_r+0x2a>
 800859a:	2301      	movs	r3, #1
 800859c:	e7dd      	b.n	800855a <_dtoa_r+0x256>
 800859e:	2300      	movs	r3, #0
 80085a0:	9410      	str	r4, [sp, #64]	@ 0x40
 80085a2:	9322      	str	r3, [sp, #136]	@ 0x88
 80085a4:	3b01      	subs	r3, #1
 80085a6:	930e      	str	r3, [sp, #56]	@ 0x38
 80085a8:	9309      	str	r3, [sp, #36]	@ 0x24
 80085aa:	2200      	movs	r2, #0
 80085ac:	3313      	adds	r3, #19
 80085ae:	e7cf      	b.n	8008550 <_dtoa_r+0x24c>
 80085b0:	2301      	movs	r3, #1
 80085b2:	9310      	str	r3, [sp, #64]	@ 0x40
 80085b4:	3b02      	subs	r3, #2
 80085b6:	e7f6      	b.n	80085a6 <_dtoa_r+0x2a2>
 80085b8:	3101      	adds	r1, #1
 80085ba:	0052      	lsls	r2, r2, #1
 80085bc:	e7dc      	b.n	8008578 <_dtoa_r+0x274>
 80085be:	9b03      	ldr	r3, [sp, #12]
 80085c0:	9a08      	ldr	r2, [sp, #32]
 80085c2:	69db      	ldr	r3, [r3, #28]
 80085c4:	601a      	str	r2, [r3, #0]
 80085c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80085c8:	2b0e      	cmp	r3, #14
 80085ca:	d900      	bls.n	80085ce <_dtoa_r+0x2ca>
 80085cc:	e0d9      	b.n	8008782 <_dtoa_r+0x47e>
 80085ce:	2c00      	cmp	r4, #0
 80085d0:	d100      	bne.n	80085d4 <_dtoa_r+0x2d0>
 80085d2:	e0d6      	b.n	8008782 <_dtoa_r+0x47e>
 80085d4:	9b04      	ldr	r3, [sp, #16]
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	dd64      	ble.n	80086a4 <_dtoa_r+0x3a0>
 80085da:	210f      	movs	r1, #15
 80085dc:	9a04      	ldr	r2, [sp, #16]
 80085de:	4b2b      	ldr	r3, [pc, #172]	@ (800868c <_dtoa_r+0x388>)
 80085e0:	400a      	ands	r2, r1
 80085e2:	00d2      	lsls	r2, r2, #3
 80085e4:	189b      	adds	r3, r3, r2
 80085e6:	681e      	ldr	r6, [r3, #0]
 80085e8:	685f      	ldr	r7, [r3, #4]
 80085ea:	9b04      	ldr	r3, [sp, #16]
 80085ec:	2402      	movs	r4, #2
 80085ee:	111d      	asrs	r5, r3, #4
 80085f0:	05db      	lsls	r3, r3, #23
 80085f2:	d50a      	bpl.n	800860a <_dtoa_r+0x306>
 80085f4:	4b2a      	ldr	r3, [pc, #168]	@ (80086a0 <_dtoa_r+0x39c>)
 80085f6:	400d      	ands	r5, r1
 80085f8:	6a1a      	ldr	r2, [r3, #32]
 80085fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80085fc:	9812      	ldr	r0, [sp, #72]	@ 0x48
 80085fe:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8008600:	f7f8 fc66 	bl	8000ed0 <__aeabi_ddiv>
 8008604:	900a      	str	r0, [sp, #40]	@ 0x28
 8008606:	910b      	str	r1, [sp, #44]	@ 0x2c
 8008608:	3401      	adds	r4, #1
 800860a:	4b25      	ldr	r3, [pc, #148]	@ (80086a0 <_dtoa_r+0x39c>)
 800860c:	930c      	str	r3, [sp, #48]	@ 0x30
 800860e:	2d00      	cmp	r5, #0
 8008610:	d108      	bne.n	8008624 <_dtoa_r+0x320>
 8008612:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8008614:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008616:	0032      	movs	r2, r6
 8008618:	003b      	movs	r3, r7
 800861a:	f7f8 fc59 	bl	8000ed0 <__aeabi_ddiv>
 800861e:	900a      	str	r0, [sp, #40]	@ 0x28
 8008620:	910b      	str	r1, [sp, #44]	@ 0x2c
 8008622:	e05a      	b.n	80086da <_dtoa_r+0x3d6>
 8008624:	2301      	movs	r3, #1
 8008626:	421d      	tst	r5, r3
 8008628:	d009      	beq.n	800863e <_dtoa_r+0x33a>
 800862a:	18e4      	adds	r4, r4, r3
 800862c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800862e:	0030      	movs	r0, r6
 8008630:	681a      	ldr	r2, [r3, #0]
 8008632:	685b      	ldr	r3, [r3, #4]
 8008634:	0039      	movs	r1, r7
 8008636:	f7f9 f88f 	bl	8001758 <__aeabi_dmul>
 800863a:	0006      	movs	r6, r0
 800863c:	000f      	movs	r7, r1
 800863e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008640:	106d      	asrs	r5, r5, #1
 8008642:	3308      	adds	r3, #8
 8008644:	e7e2      	b.n	800860c <_dtoa_r+0x308>
 8008646:	46c0      	nop			@ (mov r8, r8)
 8008648:	0800bfa6 	.word	0x0800bfa6
 800864c:	0800bfbd 	.word	0x0800bfbd
 8008650:	7ff00000 	.word	0x7ff00000
 8008654:	0000270f 	.word	0x0000270f
 8008658:	0800bfa2 	.word	0x0800bfa2
 800865c:	0800bfa5 	.word	0x0800bfa5
 8008660:	0800bf71 	.word	0x0800bf71
 8008664:	0800bf70 	.word	0x0800bf70
 8008668:	3ff00000 	.word	0x3ff00000
 800866c:	fffffc01 	.word	0xfffffc01
 8008670:	3ff80000 	.word	0x3ff80000
 8008674:	636f4361 	.word	0x636f4361
 8008678:	3fd287a7 	.word	0x3fd287a7
 800867c:	8b60c8b3 	.word	0x8b60c8b3
 8008680:	3fc68a28 	.word	0x3fc68a28
 8008684:	509f79fb 	.word	0x509f79fb
 8008688:	3fd34413 	.word	0x3fd34413
 800868c:	0800c0b8 	.word	0x0800c0b8
 8008690:	00000432 	.word	0x00000432
 8008694:	00000412 	.word	0x00000412
 8008698:	fe100000 	.word	0xfe100000
 800869c:	0800c015 	.word	0x0800c015
 80086a0:	0800c090 	.word	0x0800c090
 80086a4:	9b04      	ldr	r3, [sp, #16]
 80086a6:	2402      	movs	r4, #2
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d016      	beq.n	80086da <_dtoa_r+0x3d6>
 80086ac:	9812      	ldr	r0, [sp, #72]	@ 0x48
 80086ae:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 80086b0:	220f      	movs	r2, #15
 80086b2:	425d      	negs	r5, r3
 80086b4:	402a      	ands	r2, r5
 80086b6:	4bd7      	ldr	r3, [pc, #860]	@ (8008a14 <_dtoa_r+0x710>)
 80086b8:	00d2      	lsls	r2, r2, #3
 80086ba:	189b      	adds	r3, r3, r2
 80086bc:	681a      	ldr	r2, [r3, #0]
 80086be:	685b      	ldr	r3, [r3, #4]
 80086c0:	f7f9 f84a 	bl	8001758 <__aeabi_dmul>
 80086c4:	2701      	movs	r7, #1
 80086c6:	2300      	movs	r3, #0
 80086c8:	900a      	str	r0, [sp, #40]	@ 0x28
 80086ca:	910b      	str	r1, [sp, #44]	@ 0x2c
 80086cc:	4ed2      	ldr	r6, [pc, #840]	@ (8008a18 <_dtoa_r+0x714>)
 80086ce:	112d      	asrs	r5, r5, #4
 80086d0:	2d00      	cmp	r5, #0
 80086d2:	d000      	beq.n	80086d6 <_dtoa_r+0x3d2>
 80086d4:	e0ba      	b.n	800884c <_dtoa_r+0x548>
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d1a1      	bne.n	800861e <_dtoa_r+0x31a>
 80086da:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 80086dc:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 80086de:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d100      	bne.n	80086e6 <_dtoa_r+0x3e2>
 80086e4:	e0bd      	b.n	8008862 <_dtoa_r+0x55e>
 80086e6:	2200      	movs	r2, #0
 80086e8:	0030      	movs	r0, r6
 80086ea:	0039      	movs	r1, r7
 80086ec:	4bcb      	ldr	r3, [pc, #812]	@ (8008a1c <_dtoa_r+0x718>)
 80086ee:	f7f7 feb3 	bl	8000458 <__aeabi_dcmplt>
 80086f2:	2800      	cmp	r0, #0
 80086f4:	d100      	bne.n	80086f8 <_dtoa_r+0x3f4>
 80086f6:	e0b4      	b.n	8008862 <_dtoa_r+0x55e>
 80086f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d100      	bne.n	8008700 <_dtoa_r+0x3fc>
 80086fe:	e0b0      	b.n	8008862 <_dtoa_r+0x55e>
 8008700:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008702:	2b00      	cmp	r3, #0
 8008704:	dd39      	ble.n	800877a <_dtoa_r+0x476>
 8008706:	9b04      	ldr	r3, [sp, #16]
 8008708:	2200      	movs	r2, #0
 800870a:	3b01      	subs	r3, #1
 800870c:	930c      	str	r3, [sp, #48]	@ 0x30
 800870e:	0030      	movs	r0, r6
 8008710:	4bc3      	ldr	r3, [pc, #780]	@ (8008a20 <_dtoa_r+0x71c>)
 8008712:	0039      	movs	r1, r7
 8008714:	f7f9 f820 	bl	8001758 <__aeabi_dmul>
 8008718:	900a      	str	r0, [sp, #40]	@ 0x28
 800871a:	910b      	str	r1, [sp, #44]	@ 0x2c
 800871c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800871e:	3401      	adds	r4, #1
 8008720:	0020      	movs	r0, r4
 8008722:	9311      	str	r3, [sp, #68]	@ 0x44
 8008724:	f7f9 feda 	bl	80024dc <__aeabi_i2d>
 8008728:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800872a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800872c:	f7f9 f814 	bl	8001758 <__aeabi_dmul>
 8008730:	4bbc      	ldr	r3, [pc, #752]	@ (8008a24 <_dtoa_r+0x720>)
 8008732:	2200      	movs	r2, #0
 8008734:	f7f8 f868 	bl	8000808 <__aeabi_dadd>
 8008738:	4bbb      	ldr	r3, [pc, #748]	@ (8008a28 <_dtoa_r+0x724>)
 800873a:	0006      	movs	r6, r0
 800873c:	18cf      	adds	r7, r1, r3
 800873e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8008740:	2b00      	cmp	r3, #0
 8008742:	d000      	beq.n	8008746 <_dtoa_r+0x442>
 8008744:	e091      	b.n	800886a <_dtoa_r+0x566>
 8008746:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8008748:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800874a:	2200      	movs	r2, #0
 800874c:	4bb7      	ldr	r3, [pc, #732]	@ (8008a2c <_dtoa_r+0x728>)
 800874e:	f7f9 facb 	bl	8001ce8 <__aeabi_dsub>
 8008752:	0032      	movs	r2, r6
 8008754:	003b      	movs	r3, r7
 8008756:	0004      	movs	r4, r0
 8008758:	000d      	movs	r5, r1
 800875a:	f7f7 fe91 	bl	8000480 <__aeabi_dcmpgt>
 800875e:	2800      	cmp	r0, #0
 8008760:	d000      	beq.n	8008764 <_dtoa_r+0x460>
 8008762:	e29d      	b.n	8008ca0 <_dtoa_r+0x99c>
 8008764:	2180      	movs	r1, #128	@ 0x80
 8008766:	0609      	lsls	r1, r1, #24
 8008768:	187b      	adds	r3, r7, r1
 800876a:	0032      	movs	r2, r6
 800876c:	0020      	movs	r0, r4
 800876e:	0029      	movs	r1, r5
 8008770:	f7f7 fe72 	bl	8000458 <__aeabi_dcmplt>
 8008774:	2800      	cmp	r0, #0
 8008776:	d000      	beq.n	800877a <_dtoa_r+0x476>
 8008778:	e130      	b.n	80089dc <_dtoa_r+0x6d8>
 800877a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800877c:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 800877e:	930a      	str	r3, [sp, #40]	@ 0x28
 8008780:	940b      	str	r4, [sp, #44]	@ 0x2c
 8008782:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8008784:	2b00      	cmp	r3, #0
 8008786:	da00      	bge.n	800878a <_dtoa_r+0x486>
 8008788:	e177      	b.n	8008a7a <_dtoa_r+0x776>
 800878a:	9a04      	ldr	r2, [sp, #16]
 800878c:	2a0e      	cmp	r2, #14
 800878e:	dd00      	ble.n	8008792 <_dtoa_r+0x48e>
 8008790:	e173      	b.n	8008a7a <_dtoa_r+0x776>
 8008792:	4ba0      	ldr	r3, [pc, #640]	@ (8008a14 <_dtoa_r+0x710>)
 8008794:	00d2      	lsls	r2, r2, #3
 8008796:	189b      	adds	r3, r3, r2
 8008798:	685c      	ldr	r4, [r3, #4]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	9306      	str	r3, [sp, #24]
 800879e:	9407      	str	r4, [sp, #28]
 80087a0:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	da03      	bge.n	80087ae <_dtoa_r+0x4aa>
 80087a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	dc00      	bgt.n	80087ae <_dtoa_r+0x4aa>
 80087ac:	e106      	b.n	80089bc <_dtoa_r+0x6b8>
 80087ae:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 80087b0:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 80087b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80087b4:	9d08      	ldr	r5, [sp, #32]
 80087b6:	3b01      	subs	r3, #1
 80087b8:	195b      	adds	r3, r3, r5
 80087ba:	930a      	str	r3, [sp, #40]	@ 0x28
 80087bc:	9a06      	ldr	r2, [sp, #24]
 80087be:	9b07      	ldr	r3, [sp, #28]
 80087c0:	0030      	movs	r0, r6
 80087c2:	0039      	movs	r1, r7
 80087c4:	f7f8 fb84 	bl	8000ed0 <__aeabi_ddiv>
 80087c8:	f7f9 fe4c 	bl	8002464 <__aeabi_d2iz>
 80087cc:	9009      	str	r0, [sp, #36]	@ 0x24
 80087ce:	f7f9 fe85 	bl	80024dc <__aeabi_i2d>
 80087d2:	9a06      	ldr	r2, [sp, #24]
 80087d4:	9b07      	ldr	r3, [sp, #28]
 80087d6:	f7f8 ffbf 	bl	8001758 <__aeabi_dmul>
 80087da:	0002      	movs	r2, r0
 80087dc:	000b      	movs	r3, r1
 80087de:	0030      	movs	r0, r6
 80087e0:	0039      	movs	r1, r7
 80087e2:	f7f9 fa81 	bl	8001ce8 <__aeabi_dsub>
 80087e6:	002b      	movs	r3, r5
 80087e8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80087ea:	3501      	adds	r5, #1
 80087ec:	3230      	adds	r2, #48	@ 0x30
 80087ee:	701a      	strb	r2, [r3, #0]
 80087f0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80087f2:	002c      	movs	r4, r5
 80087f4:	429a      	cmp	r2, r3
 80087f6:	d000      	beq.n	80087fa <_dtoa_r+0x4f6>
 80087f8:	e131      	b.n	8008a5e <_dtoa_r+0x75a>
 80087fa:	0002      	movs	r2, r0
 80087fc:	000b      	movs	r3, r1
 80087fe:	f7f8 f803 	bl	8000808 <__aeabi_dadd>
 8008802:	9a06      	ldr	r2, [sp, #24]
 8008804:	9b07      	ldr	r3, [sp, #28]
 8008806:	0006      	movs	r6, r0
 8008808:	000f      	movs	r7, r1
 800880a:	f7f7 fe39 	bl	8000480 <__aeabi_dcmpgt>
 800880e:	2800      	cmp	r0, #0
 8008810:	d000      	beq.n	8008814 <_dtoa_r+0x510>
 8008812:	e10f      	b.n	8008a34 <_dtoa_r+0x730>
 8008814:	9a06      	ldr	r2, [sp, #24]
 8008816:	9b07      	ldr	r3, [sp, #28]
 8008818:	0030      	movs	r0, r6
 800881a:	0039      	movs	r1, r7
 800881c:	f7f7 fe16 	bl	800044c <__aeabi_dcmpeq>
 8008820:	2800      	cmp	r0, #0
 8008822:	d003      	beq.n	800882c <_dtoa_r+0x528>
 8008824:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008826:	07dd      	lsls	r5, r3, #31
 8008828:	d500      	bpl.n	800882c <_dtoa_r+0x528>
 800882a:	e103      	b.n	8008a34 <_dtoa_r+0x730>
 800882c:	9905      	ldr	r1, [sp, #20]
 800882e:	9803      	ldr	r0, [sp, #12]
 8008830:	f000 fca6 	bl	8009180 <_Bfree>
 8008834:	2300      	movs	r3, #0
 8008836:	7023      	strb	r3, [r4, #0]
 8008838:	9b04      	ldr	r3, [sp, #16]
 800883a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800883c:	3301      	adds	r3, #1
 800883e:	6013      	str	r3, [r2, #0]
 8008840:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8008842:	2b00      	cmp	r3, #0
 8008844:	d100      	bne.n	8008848 <_dtoa_r+0x544>
 8008846:	e5a7      	b.n	8008398 <_dtoa_r+0x94>
 8008848:	601c      	str	r4, [r3, #0]
 800884a:	e5a5      	b.n	8008398 <_dtoa_r+0x94>
 800884c:	423d      	tst	r5, r7
 800884e:	d005      	beq.n	800885c <_dtoa_r+0x558>
 8008850:	6832      	ldr	r2, [r6, #0]
 8008852:	6873      	ldr	r3, [r6, #4]
 8008854:	f7f8 ff80 	bl	8001758 <__aeabi_dmul>
 8008858:	003b      	movs	r3, r7
 800885a:	3401      	adds	r4, #1
 800885c:	106d      	asrs	r5, r5, #1
 800885e:	3608      	adds	r6, #8
 8008860:	e736      	b.n	80086d0 <_dtoa_r+0x3cc>
 8008862:	9b04      	ldr	r3, [sp, #16]
 8008864:	930c      	str	r3, [sp, #48]	@ 0x30
 8008866:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008868:	e75a      	b.n	8008720 <_dtoa_r+0x41c>
 800886a:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800886c:	4b69      	ldr	r3, [pc, #420]	@ (8008a14 <_dtoa_r+0x710>)
 800886e:	3a01      	subs	r2, #1
 8008870:	00d2      	lsls	r2, r2, #3
 8008872:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8008874:	189b      	adds	r3, r3, r2
 8008876:	681a      	ldr	r2, [r3, #0]
 8008878:	685b      	ldr	r3, [r3, #4]
 800887a:	2900      	cmp	r1, #0
 800887c:	d04c      	beq.n	8008918 <_dtoa_r+0x614>
 800887e:	2000      	movs	r0, #0
 8008880:	496b      	ldr	r1, [pc, #428]	@ (8008a30 <_dtoa_r+0x72c>)
 8008882:	f7f8 fb25 	bl	8000ed0 <__aeabi_ddiv>
 8008886:	0032      	movs	r2, r6
 8008888:	003b      	movs	r3, r7
 800888a:	f7f9 fa2d 	bl	8001ce8 <__aeabi_dsub>
 800888e:	9a08      	ldr	r2, [sp, #32]
 8008890:	0006      	movs	r6, r0
 8008892:	4694      	mov	ip, r2
 8008894:	000f      	movs	r7, r1
 8008896:	9b08      	ldr	r3, [sp, #32]
 8008898:	9316      	str	r3, [sp, #88]	@ 0x58
 800889a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800889c:	4463      	add	r3, ip
 800889e:	9311      	str	r3, [sp, #68]	@ 0x44
 80088a0:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80088a2:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80088a4:	f7f9 fdde 	bl	8002464 <__aeabi_d2iz>
 80088a8:	0005      	movs	r5, r0
 80088aa:	f7f9 fe17 	bl	80024dc <__aeabi_i2d>
 80088ae:	0002      	movs	r2, r0
 80088b0:	000b      	movs	r3, r1
 80088b2:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80088b4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80088b6:	f7f9 fa17 	bl	8001ce8 <__aeabi_dsub>
 80088ba:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80088bc:	3530      	adds	r5, #48	@ 0x30
 80088be:	1c5c      	adds	r4, r3, #1
 80088c0:	701d      	strb	r5, [r3, #0]
 80088c2:	0032      	movs	r2, r6
 80088c4:	003b      	movs	r3, r7
 80088c6:	900a      	str	r0, [sp, #40]	@ 0x28
 80088c8:	910b      	str	r1, [sp, #44]	@ 0x2c
 80088ca:	f7f7 fdc5 	bl	8000458 <__aeabi_dcmplt>
 80088ce:	2800      	cmp	r0, #0
 80088d0:	d16a      	bne.n	80089a8 <_dtoa_r+0x6a4>
 80088d2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80088d4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80088d6:	2000      	movs	r0, #0
 80088d8:	4950      	ldr	r1, [pc, #320]	@ (8008a1c <_dtoa_r+0x718>)
 80088da:	f7f9 fa05 	bl	8001ce8 <__aeabi_dsub>
 80088de:	0032      	movs	r2, r6
 80088e0:	003b      	movs	r3, r7
 80088e2:	f7f7 fdb9 	bl	8000458 <__aeabi_dcmplt>
 80088e6:	2800      	cmp	r0, #0
 80088e8:	d000      	beq.n	80088ec <_dtoa_r+0x5e8>
 80088ea:	e0a5      	b.n	8008a38 <_dtoa_r+0x734>
 80088ec:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80088ee:	42a3      	cmp	r3, r4
 80088f0:	d100      	bne.n	80088f4 <_dtoa_r+0x5f0>
 80088f2:	e742      	b.n	800877a <_dtoa_r+0x476>
 80088f4:	2200      	movs	r2, #0
 80088f6:	0030      	movs	r0, r6
 80088f8:	0039      	movs	r1, r7
 80088fa:	4b49      	ldr	r3, [pc, #292]	@ (8008a20 <_dtoa_r+0x71c>)
 80088fc:	f7f8 ff2c 	bl	8001758 <__aeabi_dmul>
 8008900:	2200      	movs	r2, #0
 8008902:	0006      	movs	r6, r0
 8008904:	000f      	movs	r7, r1
 8008906:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8008908:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800890a:	4b45      	ldr	r3, [pc, #276]	@ (8008a20 <_dtoa_r+0x71c>)
 800890c:	f7f8 ff24 	bl	8001758 <__aeabi_dmul>
 8008910:	9416      	str	r4, [sp, #88]	@ 0x58
 8008912:	900a      	str	r0, [sp, #40]	@ 0x28
 8008914:	910b      	str	r1, [sp, #44]	@ 0x2c
 8008916:	e7c3      	b.n	80088a0 <_dtoa_r+0x59c>
 8008918:	0030      	movs	r0, r6
 800891a:	0039      	movs	r1, r7
 800891c:	f7f8 ff1c 	bl	8001758 <__aeabi_dmul>
 8008920:	9d08      	ldr	r5, [sp, #32]
 8008922:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8008924:	002b      	movs	r3, r5
 8008926:	4694      	mov	ip, r2
 8008928:	9016      	str	r0, [sp, #88]	@ 0x58
 800892a:	9117      	str	r1, [sp, #92]	@ 0x5c
 800892c:	4463      	add	r3, ip
 800892e:	9319      	str	r3, [sp, #100]	@ 0x64
 8008930:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8008932:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008934:	f7f9 fd96 	bl	8002464 <__aeabi_d2iz>
 8008938:	0004      	movs	r4, r0
 800893a:	f7f9 fdcf 	bl	80024dc <__aeabi_i2d>
 800893e:	000b      	movs	r3, r1
 8008940:	0002      	movs	r2, r0
 8008942:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8008944:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008946:	f7f9 f9cf 	bl	8001ce8 <__aeabi_dsub>
 800894a:	3430      	adds	r4, #48	@ 0x30
 800894c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800894e:	702c      	strb	r4, [r5, #0]
 8008950:	3501      	adds	r5, #1
 8008952:	0006      	movs	r6, r0
 8008954:	000f      	movs	r7, r1
 8008956:	42ab      	cmp	r3, r5
 8008958:	d129      	bne.n	80089ae <_dtoa_r+0x6aa>
 800895a:	9816      	ldr	r0, [sp, #88]	@ 0x58
 800895c:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 800895e:	9b08      	ldr	r3, [sp, #32]
 8008960:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8008962:	469c      	mov	ip, r3
 8008964:	2200      	movs	r2, #0
 8008966:	4b32      	ldr	r3, [pc, #200]	@ (8008a30 <_dtoa_r+0x72c>)
 8008968:	4464      	add	r4, ip
 800896a:	f7f7 ff4d 	bl	8000808 <__aeabi_dadd>
 800896e:	0002      	movs	r2, r0
 8008970:	000b      	movs	r3, r1
 8008972:	0030      	movs	r0, r6
 8008974:	0039      	movs	r1, r7
 8008976:	f7f7 fd83 	bl	8000480 <__aeabi_dcmpgt>
 800897a:	2800      	cmp	r0, #0
 800897c:	d15c      	bne.n	8008a38 <_dtoa_r+0x734>
 800897e:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8008980:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008982:	2000      	movs	r0, #0
 8008984:	492a      	ldr	r1, [pc, #168]	@ (8008a30 <_dtoa_r+0x72c>)
 8008986:	f7f9 f9af 	bl	8001ce8 <__aeabi_dsub>
 800898a:	0002      	movs	r2, r0
 800898c:	000b      	movs	r3, r1
 800898e:	0030      	movs	r0, r6
 8008990:	0039      	movs	r1, r7
 8008992:	f7f7 fd61 	bl	8000458 <__aeabi_dcmplt>
 8008996:	2800      	cmp	r0, #0
 8008998:	d100      	bne.n	800899c <_dtoa_r+0x698>
 800899a:	e6ee      	b.n	800877a <_dtoa_r+0x476>
 800899c:	0023      	movs	r3, r4
 800899e:	3c01      	subs	r4, #1
 80089a0:	7822      	ldrb	r2, [r4, #0]
 80089a2:	2a30      	cmp	r2, #48	@ 0x30
 80089a4:	d0fa      	beq.n	800899c <_dtoa_r+0x698>
 80089a6:	001c      	movs	r4, r3
 80089a8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80089aa:	9304      	str	r3, [sp, #16]
 80089ac:	e73e      	b.n	800882c <_dtoa_r+0x528>
 80089ae:	2200      	movs	r2, #0
 80089b0:	4b1b      	ldr	r3, [pc, #108]	@ (8008a20 <_dtoa_r+0x71c>)
 80089b2:	f7f8 fed1 	bl	8001758 <__aeabi_dmul>
 80089b6:	900a      	str	r0, [sp, #40]	@ 0x28
 80089b8:	910b      	str	r1, [sp, #44]	@ 0x2c
 80089ba:	e7b9      	b.n	8008930 <_dtoa_r+0x62c>
 80089bc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d10c      	bne.n	80089dc <_dtoa_r+0x6d8>
 80089c2:	9806      	ldr	r0, [sp, #24]
 80089c4:	9907      	ldr	r1, [sp, #28]
 80089c6:	2200      	movs	r2, #0
 80089c8:	4b18      	ldr	r3, [pc, #96]	@ (8008a2c <_dtoa_r+0x728>)
 80089ca:	f7f8 fec5 	bl	8001758 <__aeabi_dmul>
 80089ce:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80089d0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80089d2:	f7f7 fd5f 	bl	8000494 <__aeabi_dcmpge>
 80089d6:	2800      	cmp	r0, #0
 80089d8:	d100      	bne.n	80089dc <_dtoa_r+0x6d8>
 80089da:	e164      	b.n	8008ca6 <_dtoa_r+0x9a2>
 80089dc:	2600      	movs	r6, #0
 80089de:	0037      	movs	r7, r6
 80089e0:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80089e2:	9c08      	ldr	r4, [sp, #32]
 80089e4:	43db      	mvns	r3, r3
 80089e6:	930c      	str	r3, [sp, #48]	@ 0x30
 80089e8:	2300      	movs	r3, #0
 80089ea:	9304      	str	r3, [sp, #16]
 80089ec:	0031      	movs	r1, r6
 80089ee:	9803      	ldr	r0, [sp, #12]
 80089f0:	f000 fbc6 	bl	8009180 <_Bfree>
 80089f4:	2f00      	cmp	r7, #0
 80089f6:	d0d7      	beq.n	80089a8 <_dtoa_r+0x6a4>
 80089f8:	9b04      	ldr	r3, [sp, #16]
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d005      	beq.n	8008a0a <_dtoa_r+0x706>
 80089fe:	42bb      	cmp	r3, r7
 8008a00:	d003      	beq.n	8008a0a <_dtoa_r+0x706>
 8008a02:	0019      	movs	r1, r3
 8008a04:	9803      	ldr	r0, [sp, #12]
 8008a06:	f000 fbbb 	bl	8009180 <_Bfree>
 8008a0a:	0039      	movs	r1, r7
 8008a0c:	9803      	ldr	r0, [sp, #12]
 8008a0e:	f000 fbb7 	bl	8009180 <_Bfree>
 8008a12:	e7c9      	b.n	80089a8 <_dtoa_r+0x6a4>
 8008a14:	0800c0b8 	.word	0x0800c0b8
 8008a18:	0800c090 	.word	0x0800c090
 8008a1c:	3ff00000 	.word	0x3ff00000
 8008a20:	40240000 	.word	0x40240000
 8008a24:	401c0000 	.word	0x401c0000
 8008a28:	fcc00000 	.word	0xfcc00000
 8008a2c:	40140000 	.word	0x40140000
 8008a30:	3fe00000 	.word	0x3fe00000
 8008a34:	9b04      	ldr	r3, [sp, #16]
 8008a36:	930c      	str	r3, [sp, #48]	@ 0x30
 8008a38:	0023      	movs	r3, r4
 8008a3a:	001c      	movs	r4, r3
 8008a3c:	3b01      	subs	r3, #1
 8008a3e:	781a      	ldrb	r2, [r3, #0]
 8008a40:	2a39      	cmp	r2, #57	@ 0x39
 8008a42:	d108      	bne.n	8008a56 <_dtoa_r+0x752>
 8008a44:	9a08      	ldr	r2, [sp, #32]
 8008a46:	429a      	cmp	r2, r3
 8008a48:	d1f7      	bne.n	8008a3a <_dtoa_r+0x736>
 8008a4a:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8008a4c:	9908      	ldr	r1, [sp, #32]
 8008a4e:	3201      	adds	r2, #1
 8008a50:	920c      	str	r2, [sp, #48]	@ 0x30
 8008a52:	2230      	movs	r2, #48	@ 0x30
 8008a54:	700a      	strb	r2, [r1, #0]
 8008a56:	781a      	ldrb	r2, [r3, #0]
 8008a58:	3201      	adds	r2, #1
 8008a5a:	701a      	strb	r2, [r3, #0]
 8008a5c:	e7a4      	b.n	80089a8 <_dtoa_r+0x6a4>
 8008a5e:	2200      	movs	r2, #0
 8008a60:	4bc6      	ldr	r3, [pc, #792]	@ (8008d7c <_dtoa_r+0xa78>)
 8008a62:	f7f8 fe79 	bl	8001758 <__aeabi_dmul>
 8008a66:	2200      	movs	r2, #0
 8008a68:	2300      	movs	r3, #0
 8008a6a:	0006      	movs	r6, r0
 8008a6c:	000f      	movs	r7, r1
 8008a6e:	f7f7 fced 	bl	800044c <__aeabi_dcmpeq>
 8008a72:	2800      	cmp	r0, #0
 8008a74:	d100      	bne.n	8008a78 <_dtoa_r+0x774>
 8008a76:	e6a1      	b.n	80087bc <_dtoa_r+0x4b8>
 8008a78:	e6d8      	b.n	800882c <_dtoa_r+0x528>
 8008a7a:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 8008a7c:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 8008a7e:	9c06      	ldr	r4, [sp, #24]
 8008a80:	2f00      	cmp	r7, #0
 8008a82:	d014      	beq.n	8008aae <_dtoa_r+0x7aa>
 8008a84:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8008a86:	2a01      	cmp	r2, #1
 8008a88:	dd00      	ble.n	8008a8c <_dtoa_r+0x788>
 8008a8a:	e0c8      	b.n	8008c1e <_dtoa_r+0x91a>
 8008a8c:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8008a8e:	2a00      	cmp	r2, #0
 8008a90:	d100      	bne.n	8008a94 <_dtoa_r+0x790>
 8008a92:	e0be      	b.n	8008c12 <_dtoa_r+0x90e>
 8008a94:	4aba      	ldr	r2, [pc, #744]	@ (8008d80 <_dtoa_r+0xa7c>)
 8008a96:	189b      	adds	r3, r3, r2
 8008a98:	9a06      	ldr	r2, [sp, #24]
 8008a9a:	2101      	movs	r1, #1
 8008a9c:	18d2      	adds	r2, r2, r3
 8008a9e:	9206      	str	r2, [sp, #24]
 8008aa0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8008aa2:	9803      	ldr	r0, [sp, #12]
 8008aa4:	18d3      	adds	r3, r2, r3
 8008aa6:	930d      	str	r3, [sp, #52]	@ 0x34
 8008aa8:	f000 fc6e 	bl	8009388 <__i2b>
 8008aac:	0007      	movs	r7, r0
 8008aae:	2c00      	cmp	r4, #0
 8008ab0:	d00e      	beq.n	8008ad0 <_dtoa_r+0x7cc>
 8008ab2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	dd0b      	ble.n	8008ad0 <_dtoa_r+0x7cc>
 8008ab8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8008aba:	0023      	movs	r3, r4
 8008abc:	4294      	cmp	r4, r2
 8008abe:	dd00      	ble.n	8008ac2 <_dtoa_r+0x7be>
 8008ac0:	0013      	movs	r3, r2
 8008ac2:	9a06      	ldr	r2, [sp, #24]
 8008ac4:	1ae4      	subs	r4, r4, r3
 8008ac6:	1ad2      	subs	r2, r2, r3
 8008ac8:	9206      	str	r2, [sp, #24]
 8008aca:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8008acc:	1ad3      	subs	r3, r2, r3
 8008ace:	930d      	str	r3, [sp, #52]	@ 0x34
 8008ad0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d01f      	beq.n	8008b16 <_dtoa_r+0x812>
 8008ad6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d100      	bne.n	8008ade <_dtoa_r+0x7da>
 8008adc:	e0b5      	b.n	8008c4a <_dtoa_r+0x946>
 8008ade:	2d00      	cmp	r5, #0
 8008ae0:	d010      	beq.n	8008b04 <_dtoa_r+0x800>
 8008ae2:	0039      	movs	r1, r7
 8008ae4:	002a      	movs	r2, r5
 8008ae6:	9803      	ldr	r0, [sp, #12]
 8008ae8:	f000 fd18 	bl	800951c <__pow5mult>
 8008aec:	9a05      	ldr	r2, [sp, #20]
 8008aee:	0001      	movs	r1, r0
 8008af0:	0007      	movs	r7, r0
 8008af2:	9803      	ldr	r0, [sp, #12]
 8008af4:	f000 fc60 	bl	80093b8 <__multiply>
 8008af8:	0006      	movs	r6, r0
 8008afa:	9905      	ldr	r1, [sp, #20]
 8008afc:	9803      	ldr	r0, [sp, #12]
 8008afe:	f000 fb3f 	bl	8009180 <_Bfree>
 8008b02:	9605      	str	r6, [sp, #20]
 8008b04:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008b06:	1b5a      	subs	r2, r3, r5
 8008b08:	42ab      	cmp	r3, r5
 8008b0a:	d004      	beq.n	8008b16 <_dtoa_r+0x812>
 8008b0c:	9905      	ldr	r1, [sp, #20]
 8008b0e:	9803      	ldr	r0, [sp, #12]
 8008b10:	f000 fd04 	bl	800951c <__pow5mult>
 8008b14:	9005      	str	r0, [sp, #20]
 8008b16:	2101      	movs	r1, #1
 8008b18:	9803      	ldr	r0, [sp, #12]
 8008b1a:	f000 fc35 	bl	8009388 <__i2b>
 8008b1e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8008b20:	0006      	movs	r6, r0
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d100      	bne.n	8008b28 <_dtoa_r+0x824>
 8008b26:	e1bc      	b.n	8008ea2 <_dtoa_r+0xb9e>
 8008b28:	001a      	movs	r2, r3
 8008b2a:	0001      	movs	r1, r0
 8008b2c:	9803      	ldr	r0, [sp, #12]
 8008b2e:	f000 fcf5 	bl	800951c <__pow5mult>
 8008b32:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8008b34:	0006      	movs	r6, r0
 8008b36:	2500      	movs	r5, #0
 8008b38:	2b01      	cmp	r3, #1
 8008b3a:	dc16      	bgt.n	8008b6a <_dtoa_r+0x866>
 8008b3c:	2500      	movs	r5, #0
 8008b3e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008b40:	42ab      	cmp	r3, r5
 8008b42:	d10e      	bne.n	8008b62 <_dtoa_r+0x85e>
 8008b44:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008b46:	031b      	lsls	r3, r3, #12
 8008b48:	42ab      	cmp	r3, r5
 8008b4a:	d10a      	bne.n	8008b62 <_dtoa_r+0x85e>
 8008b4c:	4b8d      	ldr	r3, [pc, #564]	@ (8008d84 <_dtoa_r+0xa80>)
 8008b4e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8008b50:	4213      	tst	r3, r2
 8008b52:	d006      	beq.n	8008b62 <_dtoa_r+0x85e>
 8008b54:	9b06      	ldr	r3, [sp, #24]
 8008b56:	3501      	adds	r5, #1
 8008b58:	3301      	adds	r3, #1
 8008b5a:	9306      	str	r3, [sp, #24]
 8008b5c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008b5e:	3301      	adds	r3, #1
 8008b60:	930d      	str	r3, [sp, #52]	@ 0x34
 8008b62:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8008b64:	2001      	movs	r0, #1
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d008      	beq.n	8008b7c <_dtoa_r+0x878>
 8008b6a:	6933      	ldr	r3, [r6, #16]
 8008b6c:	3303      	adds	r3, #3
 8008b6e:	009b      	lsls	r3, r3, #2
 8008b70:	18f3      	adds	r3, r6, r3
 8008b72:	6858      	ldr	r0, [r3, #4]
 8008b74:	f000 fbb8 	bl	80092e8 <__hi0bits>
 8008b78:	2320      	movs	r3, #32
 8008b7a:	1a18      	subs	r0, r3, r0
 8008b7c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008b7e:	1818      	adds	r0, r3, r0
 8008b80:	0002      	movs	r2, r0
 8008b82:	231f      	movs	r3, #31
 8008b84:	401a      	ands	r2, r3
 8008b86:	4218      	tst	r0, r3
 8008b88:	d065      	beq.n	8008c56 <_dtoa_r+0x952>
 8008b8a:	3301      	adds	r3, #1
 8008b8c:	1a9b      	subs	r3, r3, r2
 8008b8e:	2b04      	cmp	r3, #4
 8008b90:	dd5d      	ble.n	8008c4e <_dtoa_r+0x94a>
 8008b92:	231c      	movs	r3, #28
 8008b94:	1a9b      	subs	r3, r3, r2
 8008b96:	9a06      	ldr	r2, [sp, #24]
 8008b98:	18e4      	adds	r4, r4, r3
 8008b9a:	18d2      	adds	r2, r2, r3
 8008b9c:	9206      	str	r2, [sp, #24]
 8008b9e:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8008ba0:	18d3      	adds	r3, r2, r3
 8008ba2:	930d      	str	r3, [sp, #52]	@ 0x34
 8008ba4:	9b06      	ldr	r3, [sp, #24]
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	dd05      	ble.n	8008bb6 <_dtoa_r+0x8b2>
 8008baa:	001a      	movs	r2, r3
 8008bac:	9905      	ldr	r1, [sp, #20]
 8008bae:	9803      	ldr	r0, [sp, #12]
 8008bb0:	f000 fd10 	bl	80095d4 <__lshift>
 8008bb4:	9005      	str	r0, [sp, #20]
 8008bb6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	dd05      	ble.n	8008bc8 <_dtoa_r+0x8c4>
 8008bbc:	0031      	movs	r1, r6
 8008bbe:	001a      	movs	r2, r3
 8008bc0:	9803      	ldr	r0, [sp, #12]
 8008bc2:	f000 fd07 	bl	80095d4 <__lshift>
 8008bc6:	0006      	movs	r6, r0
 8008bc8:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d045      	beq.n	8008c5a <_dtoa_r+0x956>
 8008bce:	0031      	movs	r1, r6
 8008bd0:	9805      	ldr	r0, [sp, #20]
 8008bd2:	f000 fd6b 	bl	80096ac <__mcmp>
 8008bd6:	2800      	cmp	r0, #0
 8008bd8:	da3f      	bge.n	8008c5a <_dtoa_r+0x956>
 8008bda:	9b04      	ldr	r3, [sp, #16]
 8008bdc:	220a      	movs	r2, #10
 8008bde:	3b01      	subs	r3, #1
 8008be0:	930c      	str	r3, [sp, #48]	@ 0x30
 8008be2:	9905      	ldr	r1, [sp, #20]
 8008be4:	2300      	movs	r3, #0
 8008be6:	9803      	ldr	r0, [sp, #12]
 8008be8:	f000 faee 	bl	80091c8 <__multadd>
 8008bec:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8008bee:	9005      	str	r0, [sp, #20]
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d100      	bne.n	8008bf6 <_dtoa_r+0x8f2>
 8008bf4:	e15c      	b.n	8008eb0 <_dtoa_r+0xbac>
 8008bf6:	2300      	movs	r3, #0
 8008bf8:	0039      	movs	r1, r7
 8008bfa:	220a      	movs	r2, #10
 8008bfc:	9803      	ldr	r0, [sp, #12]
 8008bfe:	f000 fae3 	bl	80091c8 <__multadd>
 8008c02:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008c04:	0007      	movs	r7, r0
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	dc55      	bgt.n	8008cb6 <_dtoa_r+0x9b2>
 8008c0a:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8008c0c:	2b02      	cmp	r3, #2
 8008c0e:	dc2d      	bgt.n	8008c6c <_dtoa_r+0x968>
 8008c10:	e051      	b.n	8008cb6 <_dtoa_r+0x9b2>
 8008c12:	2336      	movs	r3, #54	@ 0x36
 8008c14:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8008c16:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 8008c18:	9c06      	ldr	r4, [sp, #24]
 8008c1a:	1a9b      	subs	r3, r3, r2
 8008c1c:	e73c      	b.n	8008a98 <_dtoa_r+0x794>
 8008c1e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008c20:	1e5d      	subs	r5, r3, #1
 8008c22:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008c24:	42ab      	cmp	r3, r5
 8008c26:	db08      	blt.n	8008c3a <_dtoa_r+0x936>
 8008c28:	1b5d      	subs	r5, r3, r5
 8008c2a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008c2c:	9c06      	ldr	r4, [sp, #24]
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	db00      	blt.n	8008c34 <_dtoa_r+0x930>
 8008c32:	e731      	b.n	8008a98 <_dtoa_r+0x794>
 8008c34:	1ae4      	subs	r4, r4, r3
 8008c36:	2300      	movs	r3, #0
 8008c38:	e72e      	b.n	8008a98 <_dtoa_r+0x794>
 8008c3a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008c3c:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8008c3e:	1aeb      	subs	r3, r5, r3
 8008c40:	18d3      	adds	r3, r2, r3
 8008c42:	950f      	str	r5, [sp, #60]	@ 0x3c
 8008c44:	9314      	str	r3, [sp, #80]	@ 0x50
 8008c46:	2500      	movs	r5, #0
 8008c48:	e7ef      	b.n	8008c2a <_dtoa_r+0x926>
 8008c4a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8008c4c:	e75e      	b.n	8008b0c <_dtoa_r+0x808>
 8008c4e:	2b04      	cmp	r3, #4
 8008c50:	d0a8      	beq.n	8008ba4 <_dtoa_r+0x8a0>
 8008c52:	331c      	adds	r3, #28
 8008c54:	e79f      	b.n	8008b96 <_dtoa_r+0x892>
 8008c56:	0013      	movs	r3, r2
 8008c58:	e7fb      	b.n	8008c52 <_dtoa_r+0x94e>
 8008c5a:	9b04      	ldr	r3, [sp, #16]
 8008c5c:	930c      	str	r3, [sp, #48]	@ 0x30
 8008c5e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008c60:	930e      	str	r3, [sp, #56]	@ 0x38
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	dc23      	bgt.n	8008cae <_dtoa_r+0x9aa>
 8008c66:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8008c68:	2b02      	cmp	r3, #2
 8008c6a:	dd20      	ble.n	8008cae <_dtoa_r+0x9aa>
 8008c6c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d000      	beq.n	8008c74 <_dtoa_r+0x970>
 8008c72:	e6b5      	b.n	80089e0 <_dtoa_r+0x6dc>
 8008c74:	0031      	movs	r1, r6
 8008c76:	2205      	movs	r2, #5
 8008c78:	9803      	ldr	r0, [sp, #12]
 8008c7a:	f000 faa5 	bl	80091c8 <__multadd>
 8008c7e:	0006      	movs	r6, r0
 8008c80:	0001      	movs	r1, r0
 8008c82:	9805      	ldr	r0, [sp, #20]
 8008c84:	f000 fd12 	bl	80096ac <__mcmp>
 8008c88:	2800      	cmp	r0, #0
 8008c8a:	dc00      	bgt.n	8008c8e <_dtoa_r+0x98a>
 8008c8c:	e6a8      	b.n	80089e0 <_dtoa_r+0x6dc>
 8008c8e:	9b08      	ldr	r3, [sp, #32]
 8008c90:	9a08      	ldr	r2, [sp, #32]
 8008c92:	1c5c      	adds	r4, r3, #1
 8008c94:	2331      	movs	r3, #49	@ 0x31
 8008c96:	7013      	strb	r3, [r2, #0]
 8008c98:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008c9a:	3301      	adds	r3, #1
 8008c9c:	930c      	str	r3, [sp, #48]	@ 0x30
 8008c9e:	e6a3      	b.n	80089e8 <_dtoa_r+0x6e4>
 8008ca0:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 8008ca2:	0037      	movs	r7, r6
 8008ca4:	e7f3      	b.n	8008c8e <_dtoa_r+0x98a>
 8008ca6:	9b04      	ldr	r3, [sp, #16]
 8008ca8:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 8008caa:	930c      	str	r3, [sp, #48]	@ 0x30
 8008cac:	e7f9      	b.n	8008ca2 <_dtoa_r+0x99e>
 8008cae:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d100      	bne.n	8008cb6 <_dtoa_r+0x9b2>
 8008cb4:	e100      	b.n	8008eb8 <_dtoa_r+0xbb4>
 8008cb6:	2c00      	cmp	r4, #0
 8008cb8:	dd05      	ble.n	8008cc6 <_dtoa_r+0x9c2>
 8008cba:	0039      	movs	r1, r7
 8008cbc:	0022      	movs	r2, r4
 8008cbe:	9803      	ldr	r0, [sp, #12]
 8008cc0:	f000 fc88 	bl	80095d4 <__lshift>
 8008cc4:	0007      	movs	r7, r0
 8008cc6:	0038      	movs	r0, r7
 8008cc8:	2d00      	cmp	r5, #0
 8008cca:	d018      	beq.n	8008cfe <_dtoa_r+0x9fa>
 8008ccc:	6879      	ldr	r1, [r7, #4]
 8008cce:	9803      	ldr	r0, [sp, #12]
 8008cd0:	f000 fa12 	bl	80090f8 <_Balloc>
 8008cd4:	1e04      	subs	r4, r0, #0
 8008cd6:	d105      	bne.n	8008ce4 <_dtoa_r+0x9e0>
 8008cd8:	0022      	movs	r2, r4
 8008cda:	4b2b      	ldr	r3, [pc, #172]	@ (8008d88 <_dtoa_r+0xa84>)
 8008cdc:	482b      	ldr	r0, [pc, #172]	@ (8008d8c <_dtoa_r+0xa88>)
 8008cde:	492c      	ldr	r1, [pc, #176]	@ (8008d90 <_dtoa_r+0xa8c>)
 8008ce0:	f7ff fb25 	bl	800832e <_dtoa_r+0x2a>
 8008ce4:	0039      	movs	r1, r7
 8008ce6:	693a      	ldr	r2, [r7, #16]
 8008ce8:	310c      	adds	r1, #12
 8008cea:	3202      	adds	r2, #2
 8008cec:	0092      	lsls	r2, r2, #2
 8008cee:	300c      	adds	r0, #12
 8008cf0:	f001 ffb2 	bl	800ac58 <memcpy>
 8008cf4:	2201      	movs	r2, #1
 8008cf6:	0021      	movs	r1, r4
 8008cf8:	9803      	ldr	r0, [sp, #12]
 8008cfa:	f000 fc6b 	bl	80095d4 <__lshift>
 8008cfe:	9b08      	ldr	r3, [sp, #32]
 8008d00:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008d02:	9306      	str	r3, [sp, #24]
 8008d04:	3b01      	subs	r3, #1
 8008d06:	189b      	adds	r3, r3, r2
 8008d08:	2201      	movs	r2, #1
 8008d0a:	9704      	str	r7, [sp, #16]
 8008d0c:	0007      	movs	r7, r0
 8008d0e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008d10:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008d12:	4013      	ands	r3, r2
 8008d14:	930e      	str	r3, [sp, #56]	@ 0x38
 8008d16:	0031      	movs	r1, r6
 8008d18:	9805      	ldr	r0, [sp, #20]
 8008d1a:	f7ff fa65 	bl	80081e8 <quorem>
 8008d1e:	9904      	ldr	r1, [sp, #16]
 8008d20:	0005      	movs	r5, r0
 8008d22:	900a      	str	r0, [sp, #40]	@ 0x28
 8008d24:	9805      	ldr	r0, [sp, #20]
 8008d26:	f000 fcc1 	bl	80096ac <__mcmp>
 8008d2a:	003a      	movs	r2, r7
 8008d2c:	900d      	str	r0, [sp, #52]	@ 0x34
 8008d2e:	0031      	movs	r1, r6
 8008d30:	9803      	ldr	r0, [sp, #12]
 8008d32:	f000 fcd7 	bl	80096e4 <__mdiff>
 8008d36:	2201      	movs	r2, #1
 8008d38:	68c3      	ldr	r3, [r0, #12]
 8008d3a:	0004      	movs	r4, r0
 8008d3c:	3530      	adds	r5, #48	@ 0x30
 8008d3e:	9209      	str	r2, [sp, #36]	@ 0x24
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d104      	bne.n	8008d4e <_dtoa_r+0xa4a>
 8008d44:	0001      	movs	r1, r0
 8008d46:	9805      	ldr	r0, [sp, #20]
 8008d48:	f000 fcb0 	bl	80096ac <__mcmp>
 8008d4c:	9009      	str	r0, [sp, #36]	@ 0x24
 8008d4e:	0021      	movs	r1, r4
 8008d50:	9803      	ldr	r0, [sp, #12]
 8008d52:	f000 fa15 	bl	8009180 <_Bfree>
 8008d56:	9b06      	ldr	r3, [sp, #24]
 8008d58:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008d5a:	1c5c      	adds	r4, r3, #1
 8008d5c:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8008d5e:	4313      	orrs	r3, r2
 8008d60:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008d62:	4313      	orrs	r3, r2
 8008d64:	d116      	bne.n	8008d94 <_dtoa_r+0xa90>
 8008d66:	2d39      	cmp	r5, #57	@ 0x39
 8008d68:	d02f      	beq.n	8008dca <_dtoa_r+0xac6>
 8008d6a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	dd01      	ble.n	8008d74 <_dtoa_r+0xa70>
 8008d70:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8008d72:	3531      	adds	r5, #49	@ 0x31
 8008d74:	9b06      	ldr	r3, [sp, #24]
 8008d76:	701d      	strb	r5, [r3, #0]
 8008d78:	e638      	b.n	80089ec <_dtoa_r+0x6e8>
 8008d7a:	46c0      	nop			@ (mov r8, r8)
 8008d7c:	40240000 	.word	0x40240000
 8008d80:	00000433 	.word	0x00000433
 8008d84:	7ff00000 	.word	0x7ff00000
 8008d88:	0800c015 	.word	0x0800c015
 8008d8c:	0800bfbd 	.word	0x0800bfbd
 8008d90:	000002ef 	.word	0x000002ef
 8008d94:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	db04      	blt.n	8008da4 <_dtoa_r+0xaa0>
 8008d9a:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8008d9c:	4313      	orrs	r3, r2
 8008d9e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008da0:	4313      	orrs	r3, r2
 8008da2:	d11e      	bne.n	8008de2 <_dtoa_r+0xade>
 8008da4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	dde4      	ble.n	8008d74 <_dtoa_r+0xa70>
 8008daa:	9905      	ldr	r1, [sp, #20]
 8008dac:	2201      	movs	r2, #1
 8008dae:	9803      	ldr	r0, [sp, #12]
 8008db0:	f000 fc10 	bl	80095d4 <__lshift>
 8008db4:	0031      	movs	r1, r6
 8008db6:	9005      	str	r0, [sp, #20]
 8008db8:	f000 fc78 	bl	80096ac <__mcmp>
 8008dbc:	2800      	cmp	r0, #0
 8008dbe:	dc02      	bgt.n	8008dc6 <_dtoa_r+0xac2>
 8008dc0:	d1d8      	bne.n	8008d74 <_dtoa_r+0xa70>
 8008dc2:	07eb      	lsls	r3, r5, #31
 8008dc4:	d5d6      	bpl.n	8008d74 <_dtoa_r+0xa70>
 8008dc6:	2d39      	cmp	r5, #57	@ 0x39
 8008dc8:	d1d2      	bne.n	8008d70 <_dtoa_r+0xa6c>
 8008dca:	2339      	movs	r3, #57	@ 0x39
 8008dcc:	9a06      	ldr	r2, [sp, #24]
 8008dce:	7013      	strb	r3, [r2, #0]
 8008dd0:	0023      	movs	r3, r4
 8008dd2:	001c      	movs	r4, r3
 8008dd4:	3b01      	subs	r3, #1
 8008dd6:	781a      	ldrb	r2, [r3, #0]
 8008dd8:	2a39      	cmp	r2, #57	@ 0x39
 8008dda:	d04f      	beq.n	8008e7c <_dtoa_r+0xb78>
 8008ddc:	3201      	adds	r2, #1
 8008dde:	701a      	strb	r2, [r3, #0]
 8008de0:	e604      	b.n	80089ec <_dtoa_r+0x6e8>
 8008de2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	dd03      	ble.n	8008df0 <_dtoa_r+0xaec>
 8008de8:	2d39      	cmp	r5, #57	@ 0x39
 8008dea:	d0ee      	beq.n	8008dca <_dtoa_r+0xac6>
 8008dec:	3501      	adds	r5, #1
 8008dee:	e7c1      	b.n	8008d74 <_dtoa_r+0xa70>
 8008df0:	9b06      	ldr	r3, [sp, #24]
 8008df2:	9a06      	ldr	r2, [sp, #24]
 8008df4:	701d      	strb	r5, [r3, #0]
 8008df6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008df8:	4293      	cmp	r3, r2
 8008dfa:	d02a      	beq.n	8008e52 <_dtoa_r+0xb4e>
 8008dfc:	2300      	movs	r3, #0
 8008dfe:	220a      	movs	r2, #10
 8008e00:	9905      	ldr	r1, [sp, #20]
 8008e02:	9803      	ldr	r0, [sp, #12]
 8008e04:	f000 f9e0 	bl	80091c8 <__multadd>
 8008e08:	9b04      	ldr	r3, [sp, #16]
 8008e0a:	9005      	str	r0, [sp, #20]
 8008e0c:	42bb      	cmp	r3, r7
 8008e0e:	d109      	bne.n	8008e24 <_dtoa_r+0xb20>
 8008e10:	2300      	movs	r3, #0
 8008e12:	220a      	movs	r2, #10
 8008e14:	9904      	ldr	r1, [sp, #16]
 8008e16:	9803      	ldr	r0, [sp, #12]
 8008e18:	f000 f9d6 	bl	80091c8 <__multadd>
 8008e1c:	9004      	str	r0, [sp, #16]
 8008e1e:	0007      	movs	r7, r0
 8008e20:	9406      	str	r4, [sp, #24]
 8008e22:	e778      	b.n	8008d16 <_dtoa_r+0xa12>
 8008e24:	9904      	ldr	r1, [sp, #16]
 8008e26:	2300      	movs	r3, #0
 8008e28:	220a      	movs	r2, #10
 8008e2a:	9803      	ldr	r0, [sp, #12]
 8008e2c:	f000 f9cc 	bl	80091c8 <__multadd>
 8008e30:	2300      	movs	r3, #0
 8008e32:	9004      	str	r0, [sp, #16]
 8008e34:	220a      	movs	r2, #10
 8008e36:	0039      	movs	r1, r7
 8008e38:	9803      	ldr	r0, [sp, #12]
 8008e3a:	f000 f9c5 	bl	80091c8 <__multadd>
 8008e3e:	e7ee      	b.n	8008e1e <_dtoa_r+0xb1a>
 8008e40:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008e42:	2401      	movs	r4, #1
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	dd00      	ble.n	8008e4a <_dtoa_r+0xb46>
 8008e48:	001c      	movs	r4, r3
 8008e4a:	9b08      	ldr	r3, [sp, #32]
 8008e4c:	191c      	adds	r4, r3, r4
 8008e4e:	2300      	movs	r3, #0
 8008e50:	9304      	str	r3, [sp, #16]
 8008e52:	9905      	ldr	r1, [sp, #20]
 8008e54:	2201      	movs	r2, #1
 8008e56:	9803      	ldr	r0, [sp, #12]
 8008e58:	f000 fbbc 	bl	80095d4 <__lshift>
 8008e5c:	0031      	movs	r1, r6
 8008e5e:	9005      	str	r0, [sp, #20]
 8008e60:	f000 fc24 	bl	80096ac <__mcmp>
 8008e64:	2800      	cmp	r0, #0
 8008e66:	dcb3      	bgt.n	8008dd0 <_dtoa_r+0xacc>
 8008e68:	d101      	bne.n	8008e6e <_dtoa_r+0xb6a>
 8008e6a:	07ed      	lsls	r5, r5, #31
 8008e6c:	d4b0      	bmi.n	8008dd0 <_dtoa_r+0xacc>
 8008e6e:	0023      	movs	r3, r4
 8008e70:	001c      	movs	r4, r3
 8008e72:	3b01      	subs	r3, #1
 8008e74:	781a      	ldrb	r2, [r3, #0]
 8008e76:	2a30      	cmp	r2, #48	@ 0x30
 8008e78:	d0fa      	beq.n	8008e70 <_dtoa_r+0xb6c>
 8008e7a:	e5b7      	b.n	80089ec <_dtoa_r+0x6e8>
 8008e7c:	9a08      	ldr	r2, [sp, #32]
 8008e7e:	429a      	cmp	r2, r3
 8008e80:	d1a7      	bne.n	8008dd2 <_dtoa_r+0xace>
 8008e82:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008e84:	3301      	adds	r3, #1
 8008e86:	930c      	str	r3, [sp, #48]	@ 0x30
 8008e88:	2331      	movs	r3, #49	@ 0x31
 8008e8a:	7013      	strb	r3, [r2, #0]
 8008e8c:	e5ae      	b.n	80089ec <_dtoa_r+0x6e8>
 8008e8e:	4b15      	ldr	r3, [pc, #84]	@ (8008ee4 <_dtoa_r+0xbe0>)
 8008e90:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8008e92:	9308      	str	r3, [sp, #32]
 8008e94:	4b14      	ldr	r3, [pc, #80]	@ (8008ee8 <_dtoa_r+0xbe4>)
 8008e96:	2a00      	cmp	r2, #0
 8008e98:	d001      	beq.n	8008e9e <_dtoa_r+0xb9a>
 8008e9a:	f7ff fa7b 	bl	8008394 <_dtoa_r+0x90>
 8008e9e:	f7ff fa7b 	bl	8008398 <_dtoa_r+0x94>
 8008ea2:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8008ea4:	2b01      	cmp	r3, #1
 8008ea6:	dc00      	bgt.n	8008eaa <_dtoa_r+0xba6>
 8008ea8:	e648      	b.n	8008b3c <_dtoa_r+0x838>
 8008eaa:	2001      	movs	r0, #1
 8008eac:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 8008eae:	e665      	b.n	8008b7c <_dtoa_r+0x878>
 8008eb0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	dc00      	bgt.n	8008eb8 <_dtoa_r+0xbb4>
 8008eb6:	e6d6      	b.n	8008c66 <_dtoa_r+0x962>
 8008eb8:	2400      	movs	r4, #0
 8008eba:	0031      	movs	r1, r6
 8008ebc:	9805      	ldr	r0, [sp, #20]
 8008ebe:	f7ff f993 	bl	80081e8 <quorem>
 8008ec2:	9b08      	ldr	r3, [sp, #32]
 8008ec4:	3030      	adds	r0, #48	@ 0x30
 8008ec6:	5518      	strb	r0, [r3, r4]
 8008ec8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008eca:	3401      	adds	r4, #1
 8008ecc:	0005      	movs	r5, r0
 8008ece:	429c      	cmp	r4, r3
 8008ed0:	dab6      	bge.n	8008e40 <_dtoa_r+0xb3c>
 8008ed2:	2300      	movs	r3, #0
 8008ed4:	220a      	movs	r2, #10
 8008ed6:	9905      	ldr	r1, [sp, #20]
 8008ed8:	9803      	ldr	r0, [sp, #12]
 8008eda:	f000 f975 	bl	80091c8 <__multadd>
 8008ede:	9005      	str	r0, [sp, #20]
 8008ee0:	e7eb      	b.n	8008eba <_dtoa_r+0xbb6>
 8008ee2:	46c0      	nop			@ (mov r8, r8)
 8008ee4:	0800bf99 	.word	0x0800bf99
 8008ee8:	0800bfa1 	.word	0x0800bfa1

08008eec <_free_r>:
 8008eec:	b570      	push	{r4, r5, r6, lr}
 8008eee:	0005      	movs	r5, r0
 8008ef0:	1e0c      	subs	r4, r1, #0
 8008ef2:	d010      	beq.n	8008f16 <_free_r+0x2a>
 8008ef4:	3c04      	subs	r4, #4
 8008ef6:	6823      	ldr	r3, [r4, #0]
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	da00      	bge.n	8008efe <_free_r+0x12>
 8008efc:	18e4      	adds	r4, r4, r3
 8008efe:	0028      	movs	r0, r5
 8008f00:	f000 f8ea 	bl	80090d8 <__malloc_lock>
 8008f04:	4a1d      	ldr	r2, [pc, #116]	@ (8008f7c <_free_r+0x90>)
 8008f06:	6813      	ldr	r3, [r2, #0]
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d105      	bne.n	8008f18 <_free_r+0x2c>
 8008f0c:	6063      	str	r3, [r4, #4]
 8008f0e:	6014      	str	r4, [r2, #0]
 8008f10:	0028      	movs	r0, r5
 8008f12:	f000 f8e9 	bl	80090e8 <__malloc_unlock>
 8008f16:	bd70      	pop	{r4, r5, r6, pc}
 8008f18:	42a3      	cmp	r3, r4
 8008f1a:	d908      	bls.n	8008f2e <_free_r+0x42>
 8008f1c:	6820      	ldr	r0, [r4, #0]
 8008f1e:	1821      	adds	r1, r4, r0
 8008f20:	428b      	cmp	r3, r1
 8008f22:	d1f3      	bne.n	8008f0c <_free_r+0x20>
 8008f24:	6819      	ldr	r1, [r3, #0]
 8008f26:	685b      	ldr	r3, [r3, #4]
 8008f28:	1809      	adds	r1, r1, r0
 8008f2a:	6021      	str	r1, [r4, #0]
 8008f2c:	e7ee      	b.n	8008f0c <_free_r+0x20>
 8008f2e:	001a      	movs	r2, r3
 8008f30:	685b      	ldr	r3, [r3, #4]
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d001      	beq.n	8008f3a <_free_r+0x4e>
 8008f36:	42a3      	cmp	r3, r4
 8008f38:	d9f9      	bls.n	8008f2e <_free_r+0x42>
 8008f3a:	6811      	ldr	r1, [r2, #0]
 8008f3c:	1850      	adds	r0, r2, r1
 8008f3e:	42a0      	cmp	r0, r4
 8008f40:	d10b      	bne.n	8008f5a <_free_r+0x6e>
 8008f42:	6820      	ldr	r0, [r4, #0]
 8008f44:	1809      	adds	r1, r1, r0
 8008f46:	1850      	adds	r0, r2, r1
 8008f48:	6011      	str	r1, [r2, #0]
 8008f4a:	4283      	cmp	r3, r0
 8008f4c:	d1e0      	bne.n	8008f10 <_free_r+0x24>
 8008f4e:	6818      	ldr	r0, [r3, #0]
 8008f50:	685b      	ldr	r3, [r3, #4]
 8008f52:	1841      	adds	r1, r0, r1
 8008f54:	6011      	str	r1, [r2, #0]
 8008f56:	6053      	str	r3, [r2, #4]
 8008f58:	e7da      	b.n	8008f10 <_free_r+0x24>
 8008f5a:	42a0      	cmp	r0, r4
 8008f5c:	d902      	bls.n	8008f64 <_free_r+0x78>
 8008f5e:	230c      	movs	r3, #12
 8008f60:	602b      	str	r3, [r5, #0]
 8008f62:	e7d5      	b.n	8008f10 <_free_r+0x24>
 8008f64:	6820      	ldr	r0, [r4, #0]
 8008f66:	1821      	adds	r1, r4, r0
 8008f68:	428b      	cmp	r3, r1
 8008f6a:	d103      	bne.n	8008f74 <_free_r+0x88>
 8008f6c:	6819      	ldr	r1, [r3, #0]
 8008f6e:	685b      	ldr	r3, [r3, #4]
 8008f70:	1809      	adds	r1, r1, r0
 8008f72:	6021      	str	r1, [r4, #0]
 8008f74:	6063      	str	r3, [r4, #4]
 8008f76:	6054      	str	r4, [r2, #4]
 8008f78:	e7ca      	b.n	8008f10 <_free_r+0x24>
 8008f7a:	46c0      	nop			@ (mov r8, r8)
 8008f7c:	20000628 	.word	0x20000628

08008f80 <malloc>:
 8008f80:	b510      	push	{r4, lr}
 8008f82:	4b03      	ldr	r3, [pc, #12]	@ (8008f90 <malloc+0x10>)
 8008f84:	0001      	movs	r1, r0
 8008f86:	6818      	ldr	r0, [r3, #0]
 8008f88:	f000 f826 	bl	8008fd8 <_malloc_r>
 8008f8c:	bd10      	pop	{r4, pc}
 8008f8e:	46c0      	nop			@ (mov r8, r8)
 8008f90:	20000028 	.word	0x20000028

08008f94 <sbrk_aligned>:
 8008f94:	b570      	push	{r4, r5, r6, lr}
 8008f96:	4e0f      	ldr	r6, [pc, #60]	@ (8008fd4 <sbrk_aligned+0x40>)
 8008f98:	000d      	movs	r5, r1
 8008f9a:	6831      	ldr	r1, [r6, #0]
 8008f9c:	0004      	movs	r4, r0
 8008f9e:	2900      	cmp	r1, #0
 8008fa0:	d102      	bne.n	8008fa8 <sbrk_aligned+0x14>
 8008fa2:	f001 fe47 	bl	800ac34 <_sbrk_r>
 8008fa6:	6030      	str	r0, [r6, #0]
 8008fa8:	0029      	movs	r1, r5
 8008faa:	0020      	movs	r0, r4
 8008fac:	f001 fe42 	bl	800ac34 <_sbrk_r>
 8008fb0:	1c43      	adds	r3, r0, #1
 8008fb2:	d103      	bne.n	8008fbc <sbrk_aligned+0x28>
 8008fb4:	2501      	movs	r5, #1
 8008fb6:	426d      	negs	r5, r5
 8008fb8:	0028      	movs	r0, r5
 8008fba:	bd70      	pop	{r4, r5, r6, pc}
 8008fbc:	2303      	movs	r3, #3
 8008fbe:	1cc5      	adds	r5, r0, #3
 8008fc0:	439d      	bics	r5, r3
 8008fc2:	42a8      	cmp	r0, r5
 8008fc4:	d0f8      	beq.n	8008fb8 <sbrk_aligned+0x24>
 8008fc6:	1a29      	subs	r1, r5, r0
 8008fc8:	0020      	movs	r0, r4
 8008fca:	f001 fe33 	bl	800ac34 <_sbrk_r>
 8008fce:	3001      	adds	r0, #1
 8008fd0:	d1f2      	bne.n	8008fb8 <sbrk_aligned+0x24>
 8008fd2:	e7ef      	b.n	8008fb4 <sbrk_aligned+0x20>
 8008fd4:	20000624 	.word	0x20000624

08008fd8 <_malloc_r>:
 8008fd8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008fda:	2203      	movs	r2, #3
 8008fdc:	1ccb      	adds	r3, r1, #3
 8008fde:	4393      	bics	r3, r2
 8008fe0:	3308      	adds	r3, #8
 8008fe2:	0005      	movs	r5, r0
 8008fe4:	001f      	movs	r7, r3
 8008fe6:	2b0c      	cmp	r3, #12
 8008fe8:	d234      	bcs.n	8009054 <_malloc_r+0x7c>
 8008fea:	270c      	movs	r7, #12
 8008fec:	42b9      	cmp	r1, r7
 8008fee:	d833      	bhi.n	8009058 <_malloc_r+0x80>
 8008ff0:	0028      	movs	r0, r5
 8008ff2:	f000 f871 	bl	80090d8 <__malloc_lock>
 8008ff6:	4e37      	ldr	r6, [pc, #220]	@ (80090d4 <_malloc_r+0xfc>)
 8008ff8:	6833      	ldr	r3, [r6, #0]
 8008ffa:	001c      	movs	r4, r3
 8008ffc:	2c00      	cmp	r4, #0
 8008ffe:	d12f      	bne.n	8009060 <_malloc_r+0x88>
 8009000:	0039      	movs	r1, r7
 8009002:	0028      	movs	r0, r5
 8009004:	f7ff ffc6 	bl	8008f94 <sbrk_aligned>
 8009008:	0004      	movs	r4, r0
 800900a:	1c43      	adds	r3, r0, #1
 800900c:	d15f      	bne.n	80090ce <_malloc_r+0xf6>
 800900e:	6834      	ldr	r4, [r6, #0]
 8009010:	9400      	str	r4, [sp, #0]
 8009012:	9b00      	ldr	r3, [sp, #0]
 8009014:	2b00      	cmp	r3, #0
 8009016:	d14a      	bne.n	80090ae <_malloc_r+0xd6>
 8009018:	2c00      	cmp	r4, #0
 800901a:	d052      	beq.n	80090c2 <_malloc_r+0xea>
 800901c:	6823      	ldr	r3, [r4, #0]
 800901e:	0028      	movs	r0, r5
 8009020:	18e3      	adds	r3, r4, r3
 8009022:	9900      	ldr	r1, [sp, #0]
 8009024:	9301      	str	r3, [sp, #4]
 8009026:	f001 fe05 	bl	800ac34 <_sbrk_r>
 800902a:	9b01      	ldr	r3, [sp, #4]
 800902c:	4283      	cmp	r3, r0
 800902e:	d148      	bne.n	80090c2 <_malloc_r+0xea>
 8009030:	6823      	ldr	r3, [r4, #0]
 8009032:	0028      	movs	r0, r5
 8009034:	1aff      	subs	r7, r7, r3
 8009036:	0039      	movs	r1, r7
 8009038:	f7ff ffac 	bl	8008f94 <sbrk_aligned>
 800903c:	3001      	adds	r0, #1
 800903e:	d040      	beq.n	80090c2 <_malloc_r+0xea>
 8009040:	6823      	ldr	r3, [r4, #0]
 8009042:	19db      	adds	r3, r3, r7
 8009044:	6023      	str	r3, [r4, #0]
 8009046:	6833      	ldr	r3, [r6, #0]
 8009048:	685a      	ldr	r2, [r3, #4]
 800904a:	2a00      	cmp	r2, #0
 800904c:	d133      	bne.n	80090b6 <_malloc_r+0xde>
 800904e:	9b00      	ldr	r3, [sp, #0]
 8009050:	6033      	str	r3, [r6, #0]
 8009052:	e019      	b.n	8009088 <_malloc_r+0xb0>
 8009054:	2b00      	cmp	r3, #0
 8009056:	dac9      	bge.n	8008fec <_malloc_r+0x14>
 8009058:	230c      	movs	r3, #12
 800905a:	602b      	str	r3, [r5, #0]
 800905c:	2000      	movs	r0, #0
 800905e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009060:	6821      	ldr	r1, [r4, #0]
 8009062:	1bc9      	subs	r1, r1, r7
 8009064:	d420      	bmi.n	80090a8 <_malloc_r+0xd0>
 8009066:	290b      	cmp	r1, #11
 8009068:	d90a      	bls.n	8009080 <_malloc_r+0xa8>
 800906a:	19e2      	adds	r2, r4, r7
 800906c:	6027      	str	r7, [r4, #0]
 800906e:	42a3      	cmp	r3, r4
 8009070:	d104      	bne.n	800907c <_malloc_r+0xa4>
 8009072:	6032      	str	r2, [r6, #0]
 8009074:	6863      	ldr	r3, [r4, #4]
 8009076:	6011      	str	r1, [r2, #0]
 8009078:	6053      	str	r3, [r2, #4]
 800907a:	e005      	b.n	8009088 <_malloc_r+0xb0>
 800907c:	605a      	str	r2, [r3, #4]
 800907e:	e7f9      	b.n	8009074 <_malloc_r+0x9c>
 8009080:	6862      	ldr	r2, [r4, #4]
 8009082:	42a3      	cmp	r3, r4
 8009084:	d10e      	bne.n	80090a4 <_malloc_r+0xcc>
 8009086:	6032      	str	r2, [r6, #0]
 8009088:	0028      	movs	r0, r5
 800908a:	f000 f82d 	bl	80090e8 <__malloc_unlock>
 800908e:	0020      	movs	r0, r4
 8009090:	2207      	movs	r2, #7
 8009092:	300b      	adds	r0, #11
 8009094:	1d23      	adds	r3, r4, #4
 8009096:	4390      	bics	r0, r2
 8009098:	1ac2      	subs	r2, r0, r3
 800909a:	4298      	cmp	r0, r3
 800909c:	d0df      	beq.n	800905e <_malloc_r+0x86>
 800909e:	1a1b      	subs	r3, r3, r0
 80090a0:	50a3      	str	r3, [r4, r2]
 80090a2:	e7dc      	b.n	800905e <_malloc_r+0x86>
 80090a4:	605a      	str	r2, [r3, #4]
 80090a6:	e7ef      	b.n	8009088 <_malloc_r+0xb0>
 80090a8:	0023      	movs	r3, r4
 80090aa:	6864      	ldr	r4, [r4, #4]
 80090ac:	e7a6      	b.n	8008ffc <_malloc_r+0x24>
 80090ae:	9c00      	ldr	r4, [sp, #0]
 80090b0:	6863      	ldr	r3, [r4, #4]
 80090b2:	9300      	str	r3, [sp, #0]
 80090b4:	e7ad      	b.n	8009012 <_malloc_r+0x3a>
 80090b6:	001a      	movs	r2, r3
 80090b8:	685b      	ldr	r3, [r3, #4]
 80090ba:	42a3      	cmp	r3, r4
 80090bc:	d1fb      	bne.n	80090b6 <_malloc_r+0xde>
 80090be:	2300      	movs	r3, #0
 80090c0:	e7da      	b.n	8009078 <_malloc_r+0xa0>
 80090c2:	230c      	movs	r3, #12
 80090c4:	0028      	movs	r0, r5
 80090c6:	602b      	str	r3, [r5, #0]
 80090c8:	f000 f80e 	bl	80090e8 <__malloc_unlock>
 80090cc:	e7c6      	b.n	800905c <_malloc_r+0x84>
 80090ce:	6007      	str	r7, [r0, #0]
 80090d0:	e7da      	b.n	8009088 <_malloc_r+0xb0>
 80090d2:	46c0      	nop			@ (mov r8, r8)
 80090d4:	20000628 	.word	0x20000628

080090d8 <__malloc_lock>:
 80090d8:	b510      	push	{r4, lr}
 80090da:	4802      	ldr	r0, [pc, #8]	@ (80090e4 <__malloc_lock+0xc>)
 80090dc:	f7ff f873 	bl	80081c6 <__retarget_lock_acquire_recursive>
 80090e0:	bd10      	pop	{r4, pc}
 80090e2:	46c0      	nop			@ (mov r8, r8)
 80090e4:	20000620 	.word	0x20000620

080090e8 <__malloc_unlock>:
 80090e8:	b510      	push	{r4, lr}
 80090ea:	4802      	ldr	r0, [pc, #8]	@ (80090f4 <__malloc_unlock+0xc>)
 80090ec:	f7ff f86c 	bl	80081c8 <__retarget_lock_release_recursive>
 80090f0:	bd10      	pop	{r4, pc}
 80090f2:	46c0      	nop			@ (mov r8, r8)
 80090f4:	20000620 	.word	0x20000620

080090f8 <_Balloc>:
 80090f8:	b570      	push	{r4, r5, r6, lr}
 80090fa:	69c5      	ldr	r5, [r0, #28]
 80090fc:	0006      	movs	r6, r0
 80090fe:	000c      	movs	r4, r1
 8009100:	2d00      	cmp	r5, #0
 8009102:	d10e      	bne.n	8009122 <_Balloc+0x2a>
 8009104:	2010      	movs	r0, #16
 8009106:	f7ff ff3b 	bl	8008f80 <malloc>
 800910a:	1e02      	subs	r2, r0, #0
 800910c:	61f0      	str	r0, [r6, #28]
 800910e:	d104      	bne.n	800911a <_Balloc+0x22>
 8009110:	216b      	movs	r1, #107	@ 0x6b
 8009112:	4b19      	ldr	r3, [pc, #100]	@ (8009178 <_Balloc+0x80>)
 8009114:	4819      	ldr	r0, [pc, #100]	@ (800917c <_Balloc+0x84>)
 8009116:	f001 fdaf 	bl	800ac78 <__assert_func>
 800911a:	6045      	str	r5, [r0, #4]
 800911c:	6085      	str	r5, [r0, #8]
 800911e:	6005      	str	r5, [r0, #0]
 8009120:	60c5      	str	r5, [r0, #12]
 8009122:	69f5      	ldr	r5, [r6, #28]
 8009124:	68eb      	ldr	r3, [r5, #12]
 8009126:	2b00      	cmp	r3, #0
 8009128:	d013      	beq.n	8009152 <_Balloc+0x5a>
 800912a:	69f3      	ldr	r3, [r6, #28]
 800912c:	00a2      	lsls	r2, r4, #2
 800912e:	68db      	ldr	r3, [r3, #12]
 8009130:	189b      	adds	r3, r3, r2
 8009132:	6818      	ldr	r0, [r3, #0]
 8009134:	2800      	cmp	r0, #0
 8009136:	d118      	bne.n	800916a <_Balloc+0x72>
 8009138:	2101      	movs	r1, #1
 800913a:	000d      	movs	r5, r1
 800913c:	40a5      	lsls	r5, r4
 800913e:	1d6a      	adds	r2, r5, #5
 8009140:	0030      	movs	r0, r6
 8009142:	0092      	lsls	r2, r2, #2
 8009144:	f001 fdb6 	bl	800acb4 <_calloc_r>
 8009148:	2800      	cmp	r0, #0
 800914a:	d00c      	beq.n	8009166 <_Balloc+0x6e>
 800914c:	6044      	str	r4, [r0, #4]
 800914e:	6085      	str	r5, [r0, #8]
 8009150:	e00d      	b.n	800916e <_Balloc+0x76>
 8009152:	2221      	movs	r2, #33	@ 0x21
 8009154:	2104      	movs	r1, #4
 8009156:	0030      	movs	r0, r6
 8009158:	f001 fdac 	bl	800acb4 <_calloc_r>
 800915c:	69f3      	ldr	r3, [r6, #28]
 800915e:	60e8      	str	r0, [r5, #12]
 8009160:	68db      	ldr	r3, [r3, #12]
 8009162:	2b00      	cmp	r3, #0
 8009164:	d1e1      	bne.n	800912a <_Balloc+0x32>
 8009166:	2000      	movs	r0, #0
 8009168:	bd70      	pop	{r4, r5, r6, pc}
 800916a:	6802      	ldr	r2, [r0, #0]
 800916c:	601a      	str	r2, [r3, #0]
 800916e:	2300      	movs	r3, #0
 8009170:	6103      	str	r3, [r0, #16]
 8009172:	60c3      	str	r3, [r0, #12]
 8009174:	e7f8      	b.n	8009168 <_Balloc+0x70>
 8009176:	46c0      	nop			@ (mov r8, r8)
 8009178:	0800bfa6 	.word	0x0800bfa6
 800917c:	0800c026 	.word	0x0800c026

08009180 <_Bfree>:
 8009180:	b570      	push	{r4, r5, r6, lr}
 8009182:	69c6      	ldr	r6, [r0, #28]
 8009184:	0005      	movs	r5, r0
 8009186:	000c      	movs	r4, r1
 8009188:	2e00      	cmp	r6, #0
 800918a:	d10e      	bne.n	80091aa <_Bfree+0x2a>
 800918c:	2010      	movs	r0, #16
 800918e:	f7ff fef7 	bl	8008f80 <malloc>
 8009192:	1e02      	subs	r2, r0, #0
 8009194:	61e8      	str	r0, [r5, #28]
 8009196:	d104      	bne.n	80091a2 <_Bfree+0x22>
 8009198:	218f      	movs	r1, #143	@ 0x8f
 800919a:	4b09      	ldr	r3, [pc, #36]	@ (80091c0 <_Bfree+0x40>)
 800919c:	4809      	ldr	r0, [pc, #36]	@ (80091c4 <_Bfree+0x44>)
 800919e:	f001 fd6b 	bl	800ac78 <__assert_func>
 80091a2:	6046      	str	r6, [r0, #4]
 80091a4:	6086      	str	r6, [r0, #8]
 80091a6:	6006      	str	r6, [r0, #0]
 80091a8:	60c6      	str	r6, [r0, #12]
 80091aa:	2c00      	cmp	r4, #0
 80091ac:	d007      	beq.n	80091be <_Bfree+0x3e>
 80091ae:	69eb      	ldr	r3, [r5, #28]
 80091b0:	6862      	ldr	r2, [r4, #4]
 80091b2:	68db      	ldr	r3, [r3, #12]
 80091b4:	0092      	lsls	r2, r2, #2
 80091b6:	189b      	adds	r3, r3, r2
 80091b8:	681a      	ldr	r2, [r3, #0]
 80091ba:	6022      	str	r2, [r4, #0]
 80091bc:	601c      	str	r4, [r3, #0]
 80091be:	bd70      	pop	{r4, r5, r6, pc}
 80091c0:	0800bfa6 	.word	0x0800bfa6
 80091c4:	0800c026 	.word	0x0800c026

080091c8 <__multadd>:
 80091c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80091ca:	000f      	movs	r7, r1
 80091cc:	9001      	str	r0, [sp, #4]
 80091ce:	000c      	movs	r4, r1
 80091d0:	001e      	movs	r6, r3
 80091d2:	2000      	movs	r0, #0
 80091d4:	690d      	ldr	r5, [r1, #16]
 80091d6:	3714      	adds	r7, #20
 80091d8:	683b      	ldr	r3, [r7, #0]
 80091da:	3001      	adds	r0, #1
 80091dc:	b299      	uxth	r1, r3
 80091de:	4351      	muls	r1, r2
 80091e0:	0c1b      	lsrs	r3, r3, #16
 80091e2:	4353      	muls	r3, r2
 80091e4:	1989      	adds	r1, r1, r6
 80091e6:	0c0e      	lsrs	r6, r1, #16
 80091e8:	199b      	adds	r3, r3, r6
 80091ea:	0c1e      	lsrs	r6, r3, #16
 80091ec:	b289      	uxth	r1, r1
 80091ee:	041b      	lsls	r3, r3, #16
 80091f0:	185b      	adds	r3, r3, r1
 80091f2:	c708      	stmia	r7!, {r3}
 80091f4:	4285      	cmp	r5, r0
 80091f6:	dcef      	bgt.n	80091d8 <__multadd+0x10>
 80091f8:	2e00      	cmp	r6, #0
 80091fa:	d022      	beq.n	8009242 <__multadd+0x7a>
 80091fc:	68a3      	ldr	r3, [r4, #8]
 80091fe:	42ab      	cmp	r3, r5
 8009200:	dc19      	bgt.n	8009236 <__multadd+0x6e>
 8009202:	6861      	ldr	r1, [r4, #4]
 8009204:	9801      	ldr	r0, [sp, #4]
 8009206:	3101      	adds	r1, #1
 8009208:	f7ff ff76 	bl	80090f8 <_Balloc>
 800920c:	1e07      	subs	r7, r0, #0
 800920e:	d105      	bne.n	800921c <__multadd+0x54>
 8009210:	003a      	movs	r2, r7
 8009212:	21ba      	movs	r1, #186	@ 0xba
 8009214:	4b0c      	ldr	r3, [pc, #48]	@ (8009248 <__multadd+0x80>)
 8009216:	480d      	ldr	r0, [pc, #52]	@ (800924c <__multadd+0x84>)
 8009218:	f001 fd2e 	bl	800ac78 <__assert_func>
 800921c:	0021      	movs	r1, r4
 800921e:	6922      	ldr	r2, [r4, #16]
 8009220:	310c      	adds	r1, #12
 8009222:	3202      	adds	r2, #2
 8009224:	0092      	lsls	r2, r2, #2
 8009226:	300c      	adds	r0, #12
 8009228:	f001 fd16 	bl	800ac58 <memcpy>
 800922c:	0021      	movs	r1, r4
 800922e:	9801      	ldr	r0, [sp, #4]
 8009230:	f7ff ffa6 	bl	8009180 <_Bfree>
 8009234:	003c      	movs	r4, r7
 8009236:	1d2b      	adds	r3, r5, #4
 8009238:	009b      	lsls	r3, r3, #2
 800923a:	18e3      	adds	r3, r4, r3
 800923c:	3501      	adds	r5, #1
 800923e:	605e      	str	r6, [r3, #4]
 8009240:	6125      	str	r5, [r4, #16]
 8009242:	0020      	movs	r0, r4
 8009244:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009246:	46c0      	nop			@ (mov r8, r8)
 8009248:	0800c015 	.word	0x0800c015
 800924c:	0800c026 	.word	0x0800c026

08009250 <__s2b>:
 8009250:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009252:	0007      	movs	r7, r0
 8009254:	0018      	movs	r0, r3
 8009256:	000c      	movs	r4, r1
 8009258:	3008      	adds	r0, #8
 800925a:	2109      	movs	r1, #9
 800925c:	9301      	str	r3, [sp, #4]
 800925e:	0015      	movs	r5, r2
 8009260:	f7f6 fff8 	bl	8000254 <__divsi3>
 8009264:	2301      	movs	r3, #1
 8009266:	2100      	movs	r1, #0
 8009268:	4283      	cmp	r3, r0
 800926a:	db0a      	blt.n	8009282 <__s2b+0x32>
 800926c:	0038      	movs	r0, r7
 800926e:	f7ff ff43 	bl	80090f8 <_Balloc>
 8009272:	1e01      	subs	r1, r0, #0
 8009274:	d108      	bne.n	8009288 <__s2b+0x38>
 8009276:	000a      	movs	r2, r1
 8009278:	4b19      	ldr	r3, [pc, #100]	@ (80092e0 <__s2b+0x90>)
 800927a:	481a      	ldr	r0, [pc, #104]	@ (80092e4 <__s2b+0x94>)
 800927c:	31d3      	adds	r1, #211	@ 0xd3
 800927e:	f001 fcfb 	bl	800ac78 <__assert_func>
 8009282:	005b      	lsls	r3, r3, #1
 8009284:	3101      	adds	r1, #1
 8009286:	e7ef      	b.n	8009268 <__s2b+0x18>
 8009288:	9b08      	ldr	r3, [sp, #32]
 800928a:	6143      	str	r3, [r0, #20]
 800928c:	2301      	movs	r3, #1
 800928e:	6103      	str	r3, [r0, #16]
 8009290:	2d09      	cmp	r5, #9
 8009292:	dd18      	ble.n	80092c6 <__s2b+0x76>
 8009294:	0023      	movs	r3, r4
 8009296:	3309      	adds	r3, #9
 8009298:	001e      	movs	r6, r3
 800929a:	9300      	str	r3, [sp, #0]
 800929c:	1964      	adds	r4, r4, r5
 800929e:	7833      	ldrb	r3, [r6, #0]
 80092a0:	220a      	movs	r2, #10
 80092a2:	0038      	movs	r0, r7
 80092a4:	3b30      	subs	r3, #48	@ 0x30
 80092a6:	f7ff ff8f 	bl	80091c8 <__multadd>
 80092aa:	3601      	adds	r6, #1
 80092ac:	0001      	movs	r1, r0
 80092ae:	42a6      	cmp	r6, r4
 80092b0:	d1f5      	bne.n	800929e <__s2b+0x4e>
 80092b2:	002c      	movs	r4, r5
 80092b4:	9b00      	ldr	r3, [sp, #0]
 80092b6:	3c08      	subs	r4, #8
 80092b8:	191c      	adds	r4, r3, r4
 80092ba:	002e      	movs	r6, r5
 80092bc:	9b01      	ldr	r3, [sp, #4]
 80092be:	429e      	cmp	r6, r3
 80092c0:	db04      	blt.n	80092cc <__s2b+0x7c>
 80092c2:	0008      	movs	r0, r1
 80092c4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80092c6:	2509      	movs	r5, #9
 80092c8:	340a      	adds	r4, #10
 80092ca:	e7f6      	b.n	80092ba <__s2b+0x6a>
 80092cc:	1b63      	subs	r3, r4, r5
 80092ce:	5d9b      	ldrb	r3, [r3, r6]
 80092d0:	220a      	movs	r2, #10
 80092d2:	0038      	movs	r0, r7
 80092d4:	3b30      	subs	r3, #48	@ 0x30
 80092d6:	f7ff ff77 	bl	80091c8 <__multadd>
 80092da:	3601      	adds	r6, #1
 80092dc:	0001      	movs	r1, r0
 80092de:	e7ed      	b.n	80092bc <__s2b+0x6c>
 80092e0:	0800c015 	.word	0x0800c015
 80092e4:	0800c026 	.word	0x0800c026

080092e8 <__hi0bits>:
 80092e8:	2280      	movs	r2, #128	@ 0x80
 80092ea:	0003      	movs	r3, r0
 80092ec:	0252      	lsls	r2, r2, #9
 80092ee:	2000      	movs	r0, #0
 80092f0:	4293      	cmp	r3, r2
 80092f2:	d201      	bcs.n	80092f8 <__hi0bits+0x10>
 80092f4:	041b      	lsls	r3, r3, #16
 80092f6:	3010      	adds	r0, #16
 80092f8:	2280      	movs	r2, #128	@ 0x80
 80092fa:	0452      	lsls	r2, r2, #17
 80092fc:	4293      	cmp	r3, r2
 80092fe:	d201      	bcs.n	8009304 <__hi0bits+0x1c>
 8009300:	3008      	adds	r0, #8
 8009302:	021b      	lsls	r3, r3, #8
 8009304:	2280      	movs	r2, #128	@ 0x80
 8009306:	0552      	lsls	r2, r2, #21
 8009308:	4293      	cmp	r3, r2
 800930a:	d201      	bcs.n	8009310 <__hi0bits+0x28>
 800930c:	3004      	adds	r0, #4
 800930e:	011b      	lsls	r3, r3, #4
 8009310:	2280      	movs	r2, #128	@ 0x80
 8009312:	05d2      	lsls	r2, r2, #23
 8009314:	4293      	cmp	r3, r2
 8009316:	d201      	bcs.n	800931c <__hi0bits+0x34>
 8009318:	3002      	adds	r0, #2
 800931a:	009b      	lsls	r3, r3, #2
 800931c:	2b00      	cmp	r3, #0
 800931e:	db03      	blt.n	8009328 <__hi0bits+0x40>
 8009320:	3001      	adds	r0, #1
 8009322:	4213      	tst	r3, r2
 8009324:	d100      	bne.n	8009328 <__hi0bits+0x40>
 8009326:	2020      	movs	r0, #32
 8009328:	4770      	bx	lr

0800932a <__lo0bits>:
 800932a:	6803      	ldr	r3, [r0, #0]
 800932c:	0001      	movs	r1, r0
 800932e:	2207      	movs	r2, #7
 8009330:	0018      	movs	r0, r3
 8009332:	4010      	ands	r0, r2
 8009334:	4213      	tst	r3, r2
 8009336:	d00d      	beq.n	8009354 <__lo0bits+0x2a>
 8009338:	3a06      	subs	r2, #6
 800933a:	2000      	movs	r0, #0
 800933c:	4213      	tst	r3, r2
 800933e:	d105      	bne.n	800934c <__lo0bits+0x22>
 8009340:	3002      	adds	r0, #2
 8009342:	4203      	tst	r3, r0
 8009344:	d003      	beq.n	800934e <__lo0bits+0x24>
 8009346:	40d3      	lsrs	r3, r2
 8009348:	0010      	movs	r0, r2
 800934a:	600b      	str	r3, [r1, #0]
 800934c:	4770      	bx	lr
 800934e:	089b      	lsrs	r3, r3, #2
 8009350:	600b      	str	r3, [r1, #0]
 8009352:	e7fb      	b.n	800934c <__lo0bits+0x22>
 8009354:	b29a      	uxth	r2, r3
 8009356:	2a00      	cmp	r2, #0
 8009358:	d101      	bne.n	800935e <__lo0bits+0x34>
 800935a:	2010      	movs	r0, #16
 800935c:	0c1b      	lsrs	r3, r3, #16
 800935e:	b2da      	uxtb	r2, r3
 8009360:	2a00      	cmp	r2, #0
 8009362:	d101      	bne.n	8009368 <__lo0bits+0x3e>
 8009364:	3008      	adds	r0, #8
 8009366:	0a1b      	lsrs	r3, r3, #8
 8009368:	071a      	lsls	r2, r3, #28
 800936a:	d101      	bne.n	8009370 <__lo0bits+0x46>
 800936c:	3004      	adds	r0, #4
 800936e:	091b      	lsrs	r3, r3, #4
 8009370:	079a      	lsls	r2, r3, #30
 8009372:	d101      	bne.n	8009378 <__lo0bits+0x4e>
 8009374:	3002      	adds	r0, #2
 8009376:	089b      	lsrs	r3, r3, #2
 8009378:	07da      	lsls	r2, r3, #31
 800937a:	d4e9      	bmi.n	8009350 <__lo0bits+0x26>
 800937c:	3001      	adds	r0, #1
 800937e:	085b      	lsrs	r3, r3, #1
 8009380:	d1e6      	bne.n	8009350 <__lo0bits+0x26>
 8009382:	2020      	movs	r0, #32
 8009384:	e7e2      	b.n	800934c <__lo0bits+0x22>
	...

08009388 <__i2b>:
 8009388:	b510      	push	{r4, lr}
 800938a:	000c      	movs	r4, r1
 800938c:	2101      	movs	r1, #1
 800938e:	f7ff feb3 	bl	80090f8 <_Balloc>
 8009392:	2800      	cmp	r0, #0
 8009394:	d107      	bne.n	80093a6 <__i2b+0x1e>
 8009396:	2146      	movs	r1, #70	@ 0x46
 8009398:	4c05      	ldr	r4, [pc, #20]	@ (80093b0 <__i2b+0x28>)
 800939a:	0002      	movs	r2, r0
 800939c:	4b05      	ldr	r3, [pc, #20]	@ (80093b4 <__i2b+0x2c>)
 800939e:	0020      	movs	r0, r4
 80093a0:	31ff      	adds	r1, #255	@ 0xff
 80093a2:	f001 fc69 	bl	800ac78 <__assert_func>
 80093a6:	2301      	movs	r3, #1
 80093a8:	6144      	str	r4, [r0, #20]
 80093aa:	6103      	str	r3, [r0, #16]
 80093ac:	bd10      	pop	{r4, pc}
 80093ae:	46c0      	nop			@ (mov r8, r8)
 80093b0:	0800c026 	.word	0x0800c026
 80093b4:	0800c015 	.word	0x0800c015

080093b8 <__multiply>:
 80093b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80093ba:	0014      	movs	r4, r2
 80093bc:	690a      	ldr	r2, [r1, #16]
 80093be:	6923      	ldr	r3, [r4, #16]
 80093c0:	000d      	movs	r5, r1
 80093c2:	b08b      	sub	sp, #44	@ 0x2c
 80093c4:	429a      	cmp	r2, r3
 80093c6:	db02      	blt.n	80093ce <__multiply+0x16>
 80093c8:	0023      	movs	r3, r4
 80093ca:	000c      	movs	r4, r1
 80093cc:	001d      	movs	r5, r3
 80093ce:	6927      	ldr	r7, [r4, #16]
 80093d0:	692e      	ldr	r6, [r5, #16]
 80093d2:	6861      	ldr	r1, [r4, #4]
 80093d4:	19bb      	adds	r3, r7, r6
 80093d6:	9303      	str	r3, [sp, #12]
 80093d8:	68a3      	ldr	r3, [r4, #8]
 80093da:	19ba      	adds	r2, r7, r6
 80093dc:	4293      	cmp	r3, r2
 80093de:	da00      	bge.n	80093e2 <__multiply+0x2a>
 80093e0:	3101      	adds	r1, #1
 80093e2:	f7ff fe89 	bl	80090f8 <_Balloc>
 80093e6:	9002      	str	r0, [sp, #8]
 80093e8:	2800      	cmp	r0, #0
 80093ea:	d106      	bne.n	80093fa <__multiply+0x42>
 80093ec:	21b1      	movs	r1, #177	@ 0xb1
 80093ee:	4b49      	ldr	r3, [pc, #292]	@ (8009514 <__multiply+0x15c>)
 80093f0:	4849      	ldr	r0, [pc, #292]	@ (8009518 <__multiply+0x160>)
 80093f2:	9a02      	ldr	r2, [sp, #8]
 80093f4:	0049      	lsls	r1, r1, #1
 80093f6:	f001 fc3f 	bl	800ac78 <__assert_func>
 80093fa:	9b02      	ldr	r3, [sp, #8]
 80093fc:	2200      	movs	r2, #0
 80093fe:	3314      	adds	r3, #20
 8009400:	469c      	mov	ip, r3
 8009402:	19bb      	adds	r3, r7, r6
 8009404:	009b      	lsls	r3, r3, #2
 8009406:	4463      	add	r3, ip
 8009408:	9304      	str	r3, [sp, #16]
 800940a:	4663      	mov	r3, ip
 800940c:	9904      	ldr	r1, [sp, #16]
 800940e:	428b      	cmp	r3, r1
 8009410:	d32a      	bcc.n	8009468 <__multiply+0xb0>
 8009412:	0023      	movs	r3, r4
 8009414:	00bf      	lsls	r7, r7, #2
 8009416:	3314      	adds	r3, #20
 8009418:	3514      	adds	r5, #20
 800941a:	9308      	str	r3, [sp, #32]
 800941c:	00b6      	lsls	r6, r6, #2
 800941e:	19db      	adds	r3, r3, r7
 8009420:	9305      	str	r3, [sp, #20]
 8009422:	19ab      	adds	r3, r5, r6
 8009424:	9309      	str	r3, [sp, #36]	@ 0x24
 8009426:	2304      	movs	r3, #4
 8009428:	9306      	str	r3, [sp, #24]
 800942a:	0023      	movs	r3, r4
 800942c:	9a05      	ldr	r2, [sp, #20]
 800942e:	3315      	adds	r3, #21
 8009430:	9501      	str	r5, [sp, #4]
 8009432:	429a      	cmp	r2, r3
 8009434:	d305      	bcc.n	8009442 <__multiply+0x8a>
 8009436:	1b13      	subs	r3, r2, r4
 8009438:	3b15      	subs	r3, #21
 800943a:	089b      	lsrs	r3, r3, #2
 800943c:	3301      	adds	r3, #1
 800943e:	009b      	lsls	r3, r3, #2
 8009440:	9306      	str	r3, [sp, #24]
 8009442:	9b01      	ldr	r3, [sp, #4]
 8009444:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009446:	4293      	cmp	r3, r2
 8009448:	d310      	bcc.n	800946c <__multiply+0xb4>
 800944a:	9b03      	ldr	r3, [sp, #12]
 800944c:	2b00      	cmp	r3, #0
 800944e:	dd05      	ble.n	800945c <__multiply+0xa4>
 8009450:	9b04      	ldr	r3, [sp, #16]
 8009452:	3b04      	subs	r3, #4
 8009454:	9304      	str	r3, [sp, #16]
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	2b00      	cmp	r3, #0
 800945a:	d056      	beq.n	800950a <__multiply+0x152>
 800945c:	9b02      	ldr	r3, [sp, #8]
 800945e:	9a03      	ldr	r2, [sp, #12]
 8009460:	0018      	movs	r0, r3
 8009462:	611a      	str	r2, [r3, #16]
 8009464:	b00b      	add	sp, #44	@ 0x2c
 8009466:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009468:	c304      	stmia	r3!, {r2}
 800946a:	e7cf      	b.n	800940c <__multiply+0x54>
 800946c:	9b01      	ldr	r3, [sp, #4]
 800946e:	6818      	ldr	r0, [r3, #0]
 8009470:	b280      	uxth	r0, r0
 8009472:	2800      	cmp	r0, #0
 8009474:	d01e      	beq.n	80094b4 <__multiply+0xfc>
 8009476:	4667      	mov	r7, ip
 8009478:	2500      	movs	r5, #0
 800947a:	9e08      	ldr	r6, [sp, #32]
 800947c:	ce02      	ldmia	r6!, {r1}
 800947e:	683b      	ldr	r3, [r7, #0]
 8009480:	9307      	str	r3, [sp, #28]
 8009482:	b28b      	uxth	r3, r1
 8009484:	4343      	muls	r3, r0
 8009486:	001a      	movs	r2, r3
 8009488:	466b      	mov	r3, sp
 800948a:	0c09      	lsrs	r1, r1, #16
 800948c:	8b9b      	ldrh	r3, [r3, #28]
 800948e:	4341      	muls	r1, r0
 8009490:	18d3      	adds	r3, r2, r3
 8009492:	9a07      	ldr	r2, [sp, #28]
 8009494:	195b      	adds	r3, r3, r5
 8009496:	0c12      	lsrs	r2, r2, #16
 8009498:	1889      	adds	r1, r1, r2
 800949a:	0c1a      	lsrs	r2, r3, #16
 800949c:	188a      	adds	r2, r1, r2
 800949e:	b29b      	uxth	r3, r3
 80094a0:	0c15      	lsrs	r5, r2, #16
 80094a2:	0412      	lsls	r2, r2, #16
 80094a4:	431a      	orrs	r2, r3
 80094a6:	9b05      	ldr	r3, [sp, #20]
 80094a8:	c704      	stmia	r7!, {r2}
 80094aa:	42b3      	cmp	r3, r6
 80094ac:	d8e6      	bhi.n	800947c <__multiply+0xc4>
 80094ae:	4663      	mov	r3, ip
 80094b0:	9a06      	ldr	r2, [sp, #24]
 80094b2:	509d      	str	r5, [r3, r2]
 80094b4:	9b01      	ldr	r3, [sp, #4]
 80094b6:	6818      	ldr	r0, [r3, #0]
 80094b8:	0c00      	lsrs	r0, r0, #16
 80094ba:	d020      	beq.n	80094fe <__multiply+0x146>
 80094bc:	4663      	mov	r3, ip
 80094be:	0025      	movs	r5, r4
 80094c0:	4661      	mov	r1, ip
 80094c2:	2700      	movs	r7, #0
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	3514      	adds	r5, #20
 80094c8:	682a      	ldr	r2, [r5, #0]
 80094ca:	680e      	ldr	r6, [r1, #0]
 80094cc:	b292      	uxth	r2, r2
 80094ce:	4342      	muls	r2, r0
 80094d0:	0c36      	lsrs	r6, r6, #16
 80094d2:	1992      	adds	r2, r2, r6
 80094d4:	19d2      	adds	r2, r2, r7
 80094d6:	0416      	lsls	r6, r2, #16
 80094d8:	b29b      	uxth	r3, r3
 80094da:	431e      	orrs	r6, r3
 80094dc:	600e      	str	r6, [r1, #0]
 80094de:	cd40      	ldmia	r5!, {r6}
 80094e0:	684b      	ldr	r3, [r1, #4]
 80094e2:	0c36      	lsrs	r6, r6, #16
 80094e4:	4346      	muls	r6, r0
 80094e6:	b29b      	uxth	r3, r3
 80094e8:	0c12      	lsrs	r2, r2, #16
 80094ea:	18f3      	adds	r3, r6, r3
 80094ec:	189b      	adds	r3, r3, r2
 80094ee:	9a05      	ldr	r2, [sp, #20]
 80094f0:	0c1f      	lsrs	r7, r3, #16
 80094f2:	3104      	adds	r1, #4
 80094f4:	42aa      	cmp	r2, r5
 80094f6:	d8e7      	bhi.n	80094c8 <__multiply+0x110>
 80094f8:	4662      	mov	r2, ip
 80094fa:	9906      	ldr	r1, [sp, #24]
 80094fc:	5053      	str	r3, [r2, r1]
 80094fe:	9b01      	ldr	r3, [sp, #4]
 8009500:	3304      	adds	r3, #4
 8009502:	9301      	str	r3, [sp, #4]
 8009504:	2304      	movs	r3, #4
 8009506:	449c      	add	ip, r3
 8009508:	e79b      	b.n	8009442 <__multiply+0x8a>
 800950a:	9b03      	ldr	r3, [sp, #12]
 800950c:	3b01      	subs	r3, #1
 800950e:	9303      	str	r3, [sp, #12]
 8009510:	e79b      	b.n	800944a <__multiply+0x92>
 8009512:	46c0      	nop			@ (mov r8, r8)
 8009514:	0800c015 	.word	0x0800c015
 8009518:	0800c026 	.word	0x0800c026

0800951c <__pow5mult>:
 800951c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800951e:	2303      	movs	r3, #3
 8009520:	0015      	movs	r5, r2
 8009522:	0007      	movs	r7, r0
 8009524:	000e      	movs	r6, r1
 8009526:	401a      	ands	r2, r3
 8009528:	421d      	tst	r5, r3
 800952a:	d008      	beq.n	800953e <__pow5mult+0x22>
 800952c:	4925      	ldr	r1, [pc, #148]	@ (80095c4 <__pow5mult+0xa8>)
 800952e:	3a01      	subs	r2, #1
 8009530:	0092      	lsls	r2, r2, #2
 8009532:	5852      	ldr	r2, [r2, r1]
 8009534:	2300      	movs	r3, #0
 8009536:	0031      	movs	r1, r6
 8009538:	f7ff fe46 	bl	80091c8 <__multadd>
 800953c:	0006      	movs	r6, r0
 800953e:	10ad      	asrs	r5, r5, #2
 8009540:	d03d      	beq.n	80095be <__pow5mult+0xa2>
 8009542:	69fc      	ldr	r4, [r7, #28]
 8009544:	2c00      	cmp	r4, #0
 8009546:	d10f      	bne.n	8009568 <__pow5mult+0x4c>
 8009548:	2010      	movs	r0, #16
 800954a:	f7ff fd19 	bl	8008f80 <malloc>
 800954e:	1e02      	subs	r2, r0, #0
 8009550:	61f8      	str	r0, [r7, #28]
 8009552:	d105      	bne.n	8009560 <__pow5mult+0x44>
 8009554:	21b4      	movs	r1, #180	@ 0xb4
 8009556:	4b1c      	ldr	r3, [pc, #112]	@ (80095c8 <__pow5mult+0xac>)
 8009558:	481c      	ldr	r0, [pc, #112]	@ (80095cc <__pow5mult+0xb0>)
 800955a:	31ff      	adds	r1, #255	@ 0xff
 800955c:	f001 fb8c 	bl	800ac78 <__assert_func>
 8009560:	6044      	str	r4, [r0, #4]
 8009562:	6084      	str	r4, [r0, #8]
 8009564:	6004      	str	r4, [r0, #0]
 8009566:	60c4      	str	r4, [r0, #12]
 8009568:	69fb      	ldr	r3, [r7, #28]
 800956a:	689c      	ldr	r4, [r3, #8]
 800956c:	9301      	str	r3, [sp, #4]
 800956e:	2c00      	cmp	r4, #0
 8009570:	d108      	bne.n	8009584 <__pow5mult+0x68>
 8009572:	0038      	movs	r0, r7
 8009574:	4916      	ldr	r1, [pc, #88]	@ (80095d0 <__pow5mult+0xb4>)
 8009576:	f7ff ff07 	bl	8009388 <__i2b>
 800957a:	9b01      	ldr	r3, [sp, #4]
 800957c:	0004      	movs	r4, r0
 800957e:	6098      	str	r0, [r3, #8]
 8009580:	2300      	movs	r3, #0
 8009582:	6003      	str	r3, [r0, #0]
 8009584:	2301      	movs	r3, #1
 8009586:	421d      	tst	r5, r3
 8009588:	d00a      	beq.n	80095a0 <__pow5mult+0x84>
 800958a:	0031      	movs	r1, r6
 800958c:	0022      	movs	r2, r4
 800958e:	0038      	movs	r0, r7
 8009590:	f7ff ff12 	bl	80093b8 <__multiply>
 8009594:	0031      	movs	r1, r6
 8009596:	9001      	str	r0, [sp, #4]
 8009598:	0038      	movs	r0, r7
 800959a:	f7ff fdf1 	bl	8009180 <_Bfree>
 800959e:	9e01      	ldr	r6, [sp, #4]
 80095a0:	106d      	asrs	r5, r5, #1
 80095a2:	d00c      	beq.n	80095be <__pow5mult+0xa2>
 80095a4:	6820      	ldr	r0, [r4, #0]
 80095a6:	2800      	cmp	r0, #0
 80095a8:	d107      	bne.n	80095ba <__pow5mult+0x9e>
 80095aa:	0022      	movs	r2, r4
 80095ac:	0021      	movs	r1, r4
 80095ae:	0038      	movs	r0, r7
 80095b0:	f7ff ff02 	bl	80093b8 <__multiply>
 80095b4:	2300      	movs	r3, #0
 80095b6:	6020      	str	r0, [r4, #0]
 80095b8:	6003      	str	r3, [r0, #0]
 80095ba:	0004      	movs	r4, r0
 80095bc:	e7e2      	b.n	8009584 <__pow5mult+0x68>
 80095be:	0030      	movs	r0, r6
 80095c0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80095c2:	46c0      	nop			@ (mov r8, r8)
 80095c4:	0800c080 	.word	0x0800c080
 80095c8:	0800bfa6 	.word	0x0800bfa6
 80095cc:	0800c026 	.word	0x0800c026
 80095d0:	00000271 	.word	0x00000271

080095d4 <__lshift>:
 80095d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80095d6:	000c      	movs	r4, r1
 80095d8:	0016      	movs	r6, r2
 80095da:	6923      	ldr	r3, [r4, #16]
 80095dc:	1157      	asrs	r7, r2, #5
 80095de:	b085      	sub	sp, #20
 80095e0:	18fb      	adds	r3, r7, r3
 80095e2:	9301      	str	r3, [sp, #4]
 80095e4:	3301      	adds	r3, #1
 80095e6:	9300      	str	r3, [sp, #0]
 80095e8:	6849      	ldr	r1, [r1, #4]
 80095ea:	68a3      	ldr	r3, [r4, #8]
 80095ec:	9002      	str	r0, [sp, #8]
 80095ee:	9a00      	ldr	r2, [sp, #0]
 80095f0:	4293      	cmp	r3, r2
 80095f2:	db10      	blt.n	8009616 <__lshift+0x42>
 80095f4:	9802      	ldr	r0, [sp, #8]
 80095f6:	f7ff fd7f 	bl	80090f8 <_Balloc>
 80095fa:	2300      	movs	r3, #0
 80095fc:	0001      	movs	r1, r0
 80095fe:	0005      	movs	r5, r0
 8009600:	001a      	movs	r2, r3
 8009602:	3114      	adds	r1, #20
 8009604:	4298      	cmp	r0, r3
 8009606:	d10c      	bne.n	8009622 <__lshift+0x4e>
 8009608:	21ef      	movs	r1, #239	@ 0xef
 800960a:	002a      	movs	r2, r5
 800960c:	4b25      	ldr	r3, [pc, #148]	@ (80096a4 <__lshift+0xd0>)
 800960e:	4826      	ldr	r0, [pc, #152]	@ (80096a8 <__lshift+0xd4>)
 8009610:	0049      	lsls	r1, r1, #1
 8009612:	f001 fb31 	bl	800ac78 <__assert_func>
 8009616:	3101      	adds	r1, #1
 8009618:	005b      	lsls	r3, r3, #1
 800961a:	e7e8      	b.n	80095ee <__lshift+0x1a>
 800961c:	0098      	lsls	r0, r3, #2
 800961e:	500a      	str	r2, [r1, r0]
 8009620:	3301      	adds	r3, #1
 8009622:	42bb      	cmp	r3, r7
 8009624:	dbfa      	blt.n	800961c <__lshift+0x48>
 8009626:	43fb      	mvns	r3, r7
 8009628:	17db      	asrs	r3, r3, #31
 800962a:	401f      	ands	r7, r3
 800962c:	00bf      	lsls	r7, r7, #2
 800962e:	0023      	movs	r3, r4
 8009630:	201f      	movs	r0, #31
 8009632:	19c9      	adds	r1, r1, r7
 8009634:	0037      	movs	r7, r6
 8009636:	6922      	ldr	r2, [r4, #16]
 8009638:	3314      	adds	r3, #20
 800963a:	0092      	lsls	r2, r2, #2
 800963c:	189a      	adds	r2, r3, r2
 800963e:	4007      	ands	r7, r0
 8009640:	4206      	tst	r6, r0
 8009642:	d029      	beq.n	8009698 <__lshift+0xc4>
 8009644:	3001      	adds	r0, #1
 8009646:	1bc0      	subs	r0, r0, r7
 8009648:	9003      	str	r0, [sp, #12]
 800964a:	468c      	mov	ip, r1
 800964c:	2000      	movs	r0, #0
 800964e:	681e      	ldr	r6, [r3, #0]
 8009650:	40be      	lsls	r6, r7
 8009652:	4306      	orrs	r6, r0
 8009654:	4660      	mov	r0, ip
 8009656:	c040      	stmia	r0!, {r6}
 8009658:	4684      	mov	ip, r0
 800965a:	9e03      	ldr	r6, [sp, #12]
 800965c:	cb01      	ldmia	r3!, {r0}
 800965e:	40f0      	lsrs	r0, r6
 8009660:	429a      	cmp	r2, r3
 8009662:	d8f4      	bhi.n	800964e <__lshift+0x7a>
 8009664:	0026      	movs	r6, r4
 8009666:	3615      	adds	r6, #21
 8009668:	2304      	movs	r3, #4
 800966a:	42b2      	cmp	r2, r6
 800966c:	d304      	bcc.n	8009678 <__lshift+0xa4>
 800966e:	1b13      	subs	r3, r2, r4
 8009670:	3b15      	subs	r3, #21
 8009672:	089b      	lsrs	r3, r3, #2
 8009674:	3301      	adds	r3, #1
 8009676:	009b      	lsls	r3, r3, #2
 8009678:	50c8      	str	r0, [r1, r3]
 800967a:	2800      	cmp	r0, #0
 800967c:	d002      	beq.n	8009684 <__lshift+0xb0>
 800967e:	9b01      	ldr	r3, [sp, #4]
 8009680:	3302      	adds	r3, #2
 8009682:	9300      	str	r3, [sp, #0]
 8009684:	9b00      	ldr	r3, [sp, #0]
 8009686:	9802      	ldr	r0, [sp, #8]
 8009688:	3b01      	subs	r3, #1
 800968a:	0021      	movs	r1, r4
 800968c:	612b      	str	r3, [r5, #16]
 800968e:	f7ff fd77 	bl	8009180 <_Bfree>
 8009692:	0028      	movs	r0, r5
 8009694:	b005      	add	sp, #20
 8009696:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009698:	cb01      	ldmia	r3!, {r0}
 800969a:	c101      	stmia	r1!, {r0}
 800969c:	429a      	cmp	r2, r3
 800969e:	d8fb      	bhi.n	8009698 <__lshift+0xc4>
 80096a0:	e7f0      	b.n	8009684 <__lshift+0xb0>
 80096a2:	46c0      	nop			@ (mov r8, r8)
 80096a4:	0800c015 	.word	0x0800c015
 80096a8:	0800c026 	.word	0x0800c026

080096ac <__mcmp>:
 80096ac:	b530      	push	{r4, r5, lr}
 80096ae:	690b      	ldr	r3, [r1, #16]
 80096b0:	6904      	ldr	r4, [r0, #16]
 80096b2:	0002      	movs	r2, r0
 80096b4:	1ae0      	subs	r0, r4, r3
 80096b6:	429c      	cmp	r4, r3
 80096b8:	d10f      	bne.n	80096da <__mcmp+0x2e>
 80096ba:	3214      	adds	r2, #20
 80096bc:	009b      	lsls	r3, r3, #2
 80096be:	3114      	adds	r1, #20
 80096c0:	0014      	movs	r4, r2
 80096c2:	18c9      	adds	r1, r1, r3
 80096c4:	18d2      	adds	r2, r2, r3
 80096c6:	3a04      	subs	r2, #4
 80096c8:	3904      	subs	r1, #4
 80096ca:	6815      	ldr	r5, [r2, #0]
 80096cc:	680b      	ldr	r3, [r1, #0]
 80096ce:	429d      	cmp	r5, r3
 80096d0:	d004      	beq.n	80096dc <__mcmp+0x30>
 80096d2:	2001      	movs	r0, #1
 80096d4:	429d      	cmp	r5, r3
 80096d6:	d200      	bcs.n	80096da <__mcmp+0x2e>
 80096d8:	3802      	subs	r0, #2
 80096da:	bd30      	pop	{r4, r5, pc}
 80096dc:	4294      	cmp	r4, r2
 80096de:	d3f2      	bcc.n	80096c6 <__mcmp+0x1a>
 80096e0:	e7fb      	b.n	80096da <__mcmp+0x2e>
	...

080096e4 <__mdiff>:
 80096e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80096e6:	000c      	movs	r4, r1
 80096e8:	b087      	sub	sp, #28
 80096ea:	9000      	str	r0, [sp, #0]
 80096ec:	0011      	movs	r1, r2
 80096ee:	0020      	movs	r0, r4
 80096f0:	0017      	movs	r7, r2
 80096f2:	f7ff ffdb 	bl	80096ac <__mcmp>
 80096f6:	1e05      	subs	r5, r0, #0
 80096f8:	d110      	bne.n	800971c <__mdiff+0x38>
 80096fa:	0001      	movs	r1, r0
 80096fc:	9800      	ldr	r0, [sp, #0]
 80096fe:	f7ff fcfb 	bl	80090f8 <_Balloc>
 8009702:	1e02      	subs	r2, r0, #0
 8009704:	d104      	bne.n	8009710 <__mdiff+0x2c>
 8009706:	4b40      	ldr	r3, [pc, #256]	@ (8009808 <__mdiff+0x124>)
 8009708:	4840      	ldr	r0, [pc, #256]	@ (800980c <__mdiff+0x128>)
 800970a:	4941      	ldr	r1, [pc, #260]	@ (8009810 <__mdiff+0x12c>)
 800970c:	f001 fab4 	bl	800ac78 <__assert_func>
 8009710:	2301      	movs	r3, #1
 8009712:	6145      	str	r5, [r0, #20]
 8009714:	6103      	str	r3, [r0, #16]
 8009716:	0010      	movs	r0, r2
 8009718:	b007      	add	sp, #28
 800971a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800971c:	2600      	movs	r6, #0
 800971e:	42b0      	cmp	r0, r6
 8009720:	da03      	bge.n	800972a <__mdiff+0x46>
 8009722:	0023      	movs	r3, r4
 8009724:	003c      	movs	r4, r7
 8009726:	001f      	movs	r7, r3
 8009728:	3601      	adds	r6, #1
 800972a:	6861      	ldr	r1, [r4, #4]
 800972c:	9800      	ldr	r0, [sp, #0]
 800972e:	f7ff fce3 	bl	80090f8 <_Balloc>
 8009732:	1e02      	subs	r2, r0, #0
 8009734:	d103      	bne.n	800973e <__mdiff+0x5a>
 8009736:	4b34      	ldr	r3, [pc, #208]	@ (8009808 <__mdiff+0x124>)
 8009738:	4834      	ldr	r0, [pc, #208]	@ (800980c <__mdiff+0x128>)
 800973a:	4936      	ldr	r1, [pc, #216]	@ (8009814 <__mdiff+0x130>)
 800973c:	e7e6      	b.n	800970c <__mdiff+0x28>
 800973e:	6923      	ldr	r3, [r4, #16]
 8009740:	3414      	adds	r4, #20
 8009742:	9300      	str	r3, [sp, #0]
 8009744:	009b      	lsls	r3, r3, #2
 8009746:	18e3      	adds	r3, r4, r3
 8009748:	0021      	movs	r1, r4
 800974a:	9401      	str	r4, [sp, #4]
 800974c:	003c      	movs	r4, r7
 800974e:	9302      	str	r3, [sp, #8]
 8009750:	693b      	ldr	r3, [r7, #16]
 8009752:	3414      	adds	r4, #20
 8009754:	009b      	lsls	r3, r3, #2
 8009756:	18e3      	adds	r3, r4, r3
 8009758:	9303      	str	r3, [sp, #12]
 800975a:	0003      	movs	r3, r0
 800975c:	60c6      	str	r6, [r0, #12]
 800975e:	468c      	mov	ip, r1
 8009760:	2000      	movs	r0, #0
 8009762:	3314      	adds	r3, #20
 8009764:	9304      	str	r3, [sp, #16]
 8009766:	9305      	str	r3, [sp, #20]
 8009768:	4663      	mov	r3, ip
 800976a:	cb20      	ldmia	r3!, {r5}
 800976c:	b2a9      	uxth	r1, r5
 800976e:	000e      	movs	r6, r1
 8009770:	469c      	mov	ip, r3
 8009772:	cc08      	ldmia	r4!, {r3}
 8009774:	0c2d      	lsrs	r5, r5, #16
 8009776:	b299      	uxth	r1, r3
 8009778:	1a71      	subs	r1, r6, r1
 800977a:	1809      	adds	r1, r1, r0
 800977c:	0c1b      	lsrs	r3, r3, #16
 800977e:	1408      	asrs	r0, r1, #16
 8009780:	1aeb      	subs	r3, r5, r3
 8009782:	181b      	adds	r3, r3, r0
 8009784:	1418      	asrs	r0, r3, #16
 8009786:	b289      	uxth	r1, r1
 8009788:	041b      	lsls	r3, r3, #16
 800978a:	4319      	orrs	r1, r3
 800978c:	9b05      	ldr	r3, [sp, #20]
 800978e:	c302      	stmia	r3!, {r1}
 8009790:	9305      	str	r3, [sp, #20]
 8009792:	9b03      	ldr	r3, [sp, #12]
 8009794:	42a3      	cmp	r3, r4
 8009796:	d8e7      	bhi.n	8009768 <__mdiff+0x84>
 8009798:	0039      	movs	r1, r7
 800979a:	9c03      	ldr	r4, [sp, #12]
 800979c:	3115      	adds	r1, #21
 800979e:	2304      	movs	r3, #4
 80097a0:	428c      	cmp	r4, r1
 80097a2:	d304      	bcc.n	80097ae <__mdiff+0xca>
 80097a4:	1be3      	subs	r3, r4, r7
 80097a6:	3b15      	subs	r3, #21
 80097a8:	089b      	lsrs	r3, r3, #2
 80097aa:	3301      	adds	r3, #1
 80097ac:	009b      	lsls	r3, r3, #2
 80097ae:	9901      	ldr	r1, [sp, #4]
 80097b0:	18cd      	adds	r5, r1, r3
 80097b2:	9904      	ldr	r1, [sp, #16]
 80097b4:	002e      	movs	r6, r5
 80097b6:	18cb      	adds	r3, r1, r3
 80097b8:	001f      	movs	r7, r3
 80097ba:	9902      	ldr	r1, [sp, #8]
 80097bc:	428e      	cmp	r6, r1
 80097be:	d311      	bcc.n	80097e4 <__mdiff+0x100>
 80097c0:	9c02      	ldr	r4, [sp, #8]
 80097c2:	1ee9      	subs	r1, r5, #3
 80097c4:	2000      	movs	r0, #0
 80097c6:	428c      	cmp	r4, r1
 80097c8:	d304      	bcc.n	80097d4 <__mdiff+0xf0>
 80097ca:	0021      	movs	r1, r4
 80097cc:	3103      	adds	r1, #3
 80097ce:	1b49      	subs	r1, r1, r5
 80097d0:	0889      	lsrs	r1, r1, #2
 80097d2:	0088      	lsls	r0, r1, #2
 80097d4:	181b      	adds	r3, r3, r0
 80097d6:	3b04      	subs	r3, #4
 80097d8:	6819      	ldr	r1, [r3, #0]
 80097da:	2900      	cmp	r1, #0
 80097dc:	d010      	beq.n	8009800 <__mdiff+0x11c>
 80097de:	9b00      	ldr	r3, [sp, #0]
 80097e0:	6113      	str	r3, [r2, #16]
 80097e2:	e798      	b.n	8009716 <__mdiff+0x32>
 80097e4:	4684      	mov	ip, r0
 80097e6:	ce02      	ldmia	r6!, {r1}
 80097e8:	b288      	uxth	r0, r1
 80097ea:	4460      	add	r0, ip
 80097ec:	1400      	asrs	r0, r0, #16
 80097ee:	0c0c      	lsrs	r4, r1, #16
 80097f0:	1904      	adds	r4, r0, r4
 80097f2:	4461      	add	r1, ip
 80097f4:	1420      	asrs	r0, r4, #16
 80097f6:	b289      	uxth	r1, r1
 80097f8:	0424      	lsls	r4, r4, #16
 80097fa:	4321      	orrs	r1, r4
 80097fc:	c702      	stmia	r7!, {r1}
 80097fe:	e7dc      	b.n	80097ba <__mdiff+0xd6>
 8009800:	9900      	ldr	r1, [sp, #0]
 8009802:	3901      	subs	r1, #1
 8009804:	9100      	str	r1, [sp, #0]
 8009806:	e7e6      	b.n	80097d6 <__mdiff+0xf2>
 8009808:	0800c015 	.word	0x0800c015
 800980c:	0800c026 	.word	0x0800c026
 8009810:	00000237 	.word	0x00000237
 8009814:	00000245 	.word	0x00000245

08009818 <__ulp>:
 8009818:	b510      	push	{r4, lr}
 800981a:	2400      	movs	r4, #0
 800981c:	4b0c      	ldr	r3, [pc, #48]	@ (8009850 <__ulp+0x38>)
 800981e:	4a0d      	ldr	r2, [pc, #52]	@ (8009854 <__ulp+0x3c>)
 8009820:	400b      	ands	r3, r1
 8009822:	189b      	adds	r3, r3, r2
 8009824:	42a3      	cmp	r3, r4
 8009826:	dc06      	bgt.n	8009836 <__ulp+0x1e>
 8009828:	425b      	negs	r3, r3
 800982a:	151a      	asrs	r2, r3, #20
 800982c:	2a13      	cmp	r2, #19
 800982e:	dc05      	bgt.n	800983c <__ulp+0x24>
 8009830:	2380      	movs	r3, #128	@ 0x80
 8009832:	031b      	lsls	r3, r3, #12
 8009834:	4113      	asrs	r3, r2
 8009836:	0019      	movs	r1, r3
 8009838:	0020      	movs	r0, r4
 800983a:	bd10      	pop	{r4, pc}
 800983c:	3a14      	subs	r2, #20
 800983e:	2401      	movs	r4, #1
 8009840:	2a1e      	cmp	r2, #30
 8009842:	dc02      	bgt.n	800984a <__ulp+0x32>
 8009844:	2480      	movs	r4, #128	@ 0x80
 8009846:	0624      	lsls	r4, r4, #24
 8009848:	40d4      	lsrs	r4, r2
 800984a:	2300      	movs	r3, #0
 800984c:	e7f3      	b.n	8009836 <__ulp+0x1e>
 800984e:	46c0      	nop			@ (mov r8, r8)
 8009850:	7ff00000 	.word	0x7ff00000
 8009854:	fcc00000 	.word	0xfcc00000

08009858 <__b2d>:
 8009858:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800985a:	0006      	movs	r6, r0
 800985c:	6903      	ldr	r3, [r0, #16]
 800985e:	3614      	adds	r6, #20
 8009860:	009b      	lsls	r3, r3, #2
 8009862:	18f3      	adds	r3, r6, r3
 8009864:	1f1d      	subs	r5, r3, #4
 8009866:	682c      	ldr	r4, [r5, #0]
 8009868:	000f      	movs	r7, r1
 800986a:	0020      	movs	r0, r4
 800986c:	9301      	str	r3, [sp, #4]
 800986e:	f7ff fd3b 	bl	80092e8 <__hi0bits>
 8009872:	2220      	movs	r2, #32
 8009874:	1a12      	subs	r2, r2, r0
 8009876:	603a      	str	r2, [r7, #0]
 8009878:	0003      	movs	r3, r0
 800987a:	4a1c      	ldr	r2, [pc, #112]	@ (80098ec <__b2d+0x94>)
 800987c:	280a      	cmp	r0, #10
 800987e:	dc15      	bgt.n	80098ac <__b2d+0x54>
 8009880:	210b      	movs	r1, #11
 8009882:	0027      	movs	r7, r4
 8009884:	1a09      	subs	r1, r1, r0
 8009886:	40cf      	lsrs	r7, r1
 8009888:	433a      	orrs	r2, r7
 800988a:	468c      	mov	ip, r1
 800988c:	0011      	movs	r1, r2
 800988e:	2200      	movs	r2, #0
 8009890:	42ae      	cmp	r6, r5
 8009892:	d202      	bcs.n	800989a <__b2d+0x42>
 8009894:	9a01      	ldr	r2, [sp, #4]
 8009896:	3a08      	subs	r2, #8
 8009898:	6812      	ldr	r2, [r2, #0]
 800989a:	3315      	adds	r3, #21
 800989c:	409c      	lsls	r4, r3
 800989e:	4663      	mov	r3, ip
 80098a0:	0027      	movs	r7, r4
 80098a2:	40da      	lsrs	r2, r3
 80098a4:	4317      	orrs	r7, r2
 80098a6:	0038      	movs	r0, r7
 80098a8:	b003      	add	sp, #12
 80098aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80098ac:	2700      	movs	r7, #0
 80098ae:	42ae      	cmp	r6, r5
 80098b0:	d202      	bcs.n	80098b8 <__b2d+0x60>
 80098b2:	9d01      	ldr	r5, [sp, #4]
 80098b4:	3d08      	subs	r5, #8
 80098b6:	682f      	ldr	r7, [r5, #0]
 80098b8:	210b      	movs	r1, #11
 80098ba:	4249      	negs	r1, r1
 80098bc:	468c      	mov	ip, r1
 80098be:	449c      	add	ip, r3
 80098c0:	2b0b      	cmp	r3, #11
 80098c2:	d010      	beq.n	80098e6 <__b2d+0x8e>
 80098c4:	4661      	mov	r1, ip
 80098c6:	2320      	movs	r3, #32
 80098c8:	408c      	lsls	r4, r1
 80098ca:	1a5b      	subs	r3, r3, r1
 80098cc:	0039      	movs	r1, r7
 80098ce:	40d9      	lsrs	r1, r3
 80098d0:	430c      	orrs	r4, r1
 80098d2:	4322      	orrs	r2, r4
 80098d4:	0011      	movs	r1, r2
 80098d6:	2200      	movs	r2, #0
 80098d8:	42b5      	cmp	r5, r6
 80098da:	d901      	bls.n	80098e0 <__b2d+0x88>
 80098dc:	3d04      	subs	r5, #4
 80098de:	682a      	ldr	r2, [r5, #0]
 80098e0:	4664      	mov	r4, ip
 80098e2:	40a7      	lsls	r7, r4
 80098e4:	e7dd      	b.n	80098a2 <__b2d+0x4a>
 80098e6:	4322      	orrs	r2, r4
 80098e8:	0011      	movs	r1, r2
 80098ea:	e7dc      	b.n	80098a6 <__b2d+0x4e>
 80098ec:	3ff00000 	.word	0x3ff00000

080098f0 <__d2b>:
 80098f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80098f2:	2101      	movs	r1, #1
 80098f4:	0016      	movs	r6, r2
 80098f6:	001f      	movs	r7, r3
 80098f8:	f7ff fbfe 	bl	80090f8 <_Balloc>
 80098fc:	1e04      	subs	r4, r0, #0
 80098fe:	d105      	bne.n	800990c <__d2b+0x1c>
 8009900:	0022      	movs	r2, r4
 8009902:	4b25      	ldr	r3, [pc, #148]	@ (8009998 <__d2b+0xa8>)
 8009904:	4825      	ldr	r0, [pc, #148]	@ (800999c <__d2b+0xac>)
 8009906:	4926      	ldr	r1, [pc, #152]	@ (80099a0 <__d2b+0xb0>)
 8009908:	f001 f9b6 	bl	800ac78 <__assert_func>
 800990c:	033b      	lsls	r3, r7, #12
 800990e:	007d      	lsls	r5, r7, #1
 8009910:	0b1b      	lsrs	r3, r3, #12
 8009912:	0d6d      	lsrs	r5, r5, #21
 8009914:	d002      	beq.n	800991c <__d2b+0x2c>
 8009916:	2280      	movs	r2, #128	@ 0x80
 8009918:	0352      	lsls	r2, r2, #13
 800991a:	4313      	orrs	r3, r2
 800991c:	9301      	str	r3, [sp, #4]
 800991e:	2e00      	cmp	r6, #0
 8009920:	d025      	beq.n	800996e <__d2b+0x7e>
 8009922:	4668      	mov	r0, sp
 8009924:	9600      	str	r6, [sp, #0]
 8009926:	f7ff fd00 	bl	800932a <__lo0bits>
 800992a:	9b01      	ldr	r3, [sp, #4]
 800992c:	9900      	ldr	r1, [sp, #0]
 800992e:	2800      	cmp	r0, #0
 8009930:	d01b      	beq.n	800996a <__d2b+0x7a>
 8009932:	2220      	movs	r2, #32
 8009934:	001e      	movs	r6, r3
 8009936:	1a12      	subs	r2, r2, r0
 8009938:	4096      	lsls	r6, r2
 800993a:	0032      	movs	r2, r6
 800993c:	40c3      	lsrs	r3, r0
 800993e:	430a      	orrs	r2, r1
 8009940:	6162      	str	r2, [r4, #20]
 8009942:	9301      	str	r3, [sp, #4]
 8009944:	9e01      	ldr	r6, [sp, #4]
 8009946:	61a6      	str	r6, [r4, #24]
 8009948:	1e73      	subs	r3, r6, #1
 800994a:	419e      	sbcs	r6, r3
 800994c:	3601      	adds	r6, #1
 800994e:	6126      	str	r6, [r4, #16]
 8009950:	2d00      	cmp	r5, #0
 8009952:	d014      	beq.n	800997e <__d2b+0x8e>
 8009954:	2635      	movs	r6, #53	@ 0x35
 8009956:	4b13      	ldr	r3, [pc, #76]	@ (80099a4 <__d2b+0xb4>)
 8009958:	18ed      	adds	r5, r5, r3
 800995a:	9b08      	ldr	r3, [sp, #32]
 800995c:	182d      	adds	r5, r5, r0
 800995e:	601d      	str	r5, [r3, #0]
 8009960:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009962:	1a36      	subs	r6, r6, r0
 8009964:	601e      	str	r6, [r3, #0]
 8009966:	0020      	movs	r0, r4
 8009968:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800996a:	6161      	str	r1, [r4, #20]
 800996c:	e7ea      	b.n	8009944 <__d2b+0x54>
 800996e:	a801      	add	r0, sp, #4
 8009970:	f7ff fcdb 	bl	800932a <__lo0bits>
 8009974:	9b01      	ldr	r3, [sp, #4]
 8009976:	2601      	movs	r6, #1
 8009978:	6163      	str	r3, [r4, #20]
 800997a:	3020      	adds	r0, #32
 800997c:	e7e7      	b.n	800994e <__d2b+0x5e>
 800997e:	4b0a      	ldr	r3, [pc, #40]	@ (80099a8 <__d2b+0xb8>)
 8009980:	18c0      	adds	r0, r0, r3
 8009982:	9b08      	ldr	r3, [sp, #32]
 8009984:	6018      	str	r0, [r3, #0]
 8009986:	4b09      	ldr	r3, [pc, #36]	@ (80099ac <__d2b+0xbc>)
 8009988:	18f3      	adds	r3, r6, r3
 800998a:	009b      	lsls	r3, r3, #2
 800998c:	18e3      	adds	r3, r4, r3
 800998e:	6958      	ldr	r0, [r3, #20]
 8009990:	f7ff fcaa 	bl	80092e8 <__hi0bits>
 8009994:	0176      	lsls	r6, r6, #5
 8009996:	e7e3      	b.n	8009960 <__d2b+0x70>
 8009998:	0800c015 	.word	0x0800c015
 800999c:	0800c026 	.word	0x0800c026
 80099a0:	0000030f 	.word	0x0000030f
 80099a4:	fffffbcd 	.word	0xfffffbcd
 80099a8:	fffffbce 	.word	0xfffffbce
 80099ac:	3fffffff 	.word	0x3fffffff

080099b0 <__ratio>:
 80099b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80099b2:	b087      	sub	sp, #28
 80099b4:	000f      	movs	r7, r1
 80099b6:	a904      	add	r1, sp, #16
 80099b8:	0006      	movs	r6, r0
 80099ba:	f7ff ff4d 	bl	8009858 <__b2d>
 80099be:	9000      	str	r0, [sp, #0]
 80099c0:	9101      	str	r1, [sp, #4]
 80099c2:	9b00      	ldr	r3, [sp, #0]
 80099c4:	9c01      	ldr	r4, [sp, #4]
 80099c6:	0038      	movs	r0, r7
 80099c8:	a905      	add	r1, sp, #20
 80099ca:	9302      	str	r3, [sp, #8]
 80099cc:	9403      	str	r4, [sp, #12]
 80099ce:	f7ff ff43 	bl	8009858 <__b2d>
 80099d2:	000d      	movs	r5, r1
 80099d4:	0002      	movs	r2, r0
 80099d6:	000b      	movs	r3, r1
 80099d8:	6930      	ldr	r0, [r6, #16]
 80099da:	6939      	ldr	r1, [r7, #16]
 80099dc:	9e04      	ldr	r6, [sp, #16]
 80099de:	1a40      	subs	r0, r0, r1
 80099e0:	9905      	ldr	r1, [sp, #20]
 80099e2:	0140      	lsls	r0, r0, #5
 80099e4:	1a71      	subs	r1, r6, r1
 80099e6:	1841      	adds	r1, r0, r1
 80099e8:	0508      	lsls	r0, r1, #20
 80099ea:	2900      	cmp	r1, #0
 80099ec:	dd08      	ble.n	8009a00 <__ratio+0x50>
 80099ee:	9901      	ldr	r1, [sp, #4]
 80099f0:	1841      	adds	r1, r0, r1
 80099f2:	9103      	str	r1, [sp, #12]
 80099f4:	9802      	ldr	r0, [sp, #8]
 80099f6:	9903      	ldr	r1, [sp, #12]
 80099f8:	f7f7 fa6a 	bl	8000ed0 <__aeabi_ddiv>
 80099fc:	b007      	add	sp, #28
 80099fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009a00:	1a2b      	subs	r3, r5, r0
 8009a02:	e7f7      	b.n	80099f4 <__ratio+0x44>

08009a04 <__copybits>:
 8009a04:	b570      	push	{r4, r5, r6, lr}
 8009a06:	0014      	movs	r4, r2
 8009a08:	0005      	movs	r5, r0
 8009a0a:	3901      	subs	r1, #1
 8009a0c:	6913      	ldr	r3, [r2, #16]
 8009a0e:	1149      	asrs	r1, r1, #5
 8009a10:	3101      	adds	r1, #1
 8009a12:	0089      	lsls	r1, r1, #2
 8009a14:	3414      	adds	r4, #20
 8009a16:	009b      	lsls	r3, r3, #2
 8009a18:	1841      	adds	r1, r0, r1
 8009a1a:	18e3      	adds	r3, r4, r3
 8009a1c:	42a3      	cmp	r3, r4
 8009a1e:	d80d      	bhi.n	8009a3c <__copybits+0x38>
 8009a20:	0014      	movs	r4, r2
 8009a22:	3411      	adds	r4, #17
 8009a24:	2500      	movs	r5, #0
 8009a26:	429c      	cmp	r4, r3
 8009a28:	d803      	bhi.n	8009a32 <__copybits+0x2e>
 8009a2a:	1a9b      	subs	r3, r3, r2
 8009a2c:	3b11      	subs	r3, #17
 8009a2e:	089b      	lsrs	r3, r3, #2
 8009a30:	009d      	lsls	r5, r3, #2
 8009a32:	2300      	movs	r3, #0
 8009a34:	1940      	adds	r0, r0, r5
 8009a36:	4281      	cmp	r1, r0
 8009a38:	d803      	bhi.n	8009a42 <__copybits+0x3e>
 8009a3a:	bd70      	pop	{r4, r5, r6, pc}
 8009a3c:	cc40      	ldmia	r4!, {r6}
 8009a3e:	c540      	stmia	r5!, {r6}
 8009a40:	e7ec      	b.n	8009a1c <__copybits+0x18>
 8009a42:	c008      	stmia	r0!, {r3}
 8009a44:	e7f7      	b.n	8009a36 <__copybits+0x32>

08009a46 <__any_on>:
 8009a46:	0002      	movs	r2, r0
 8009a48:	6900      	ldr	r0, [r0, #16]
 8009a4a:	b510      	push	{r4, lr}
 8009a4c:	3214      	adds	r2, #20
 8009a4e:	114b      	asrs	r3, r1, #5
 8009a50:	4298      	cmp	r0, r3
 8009a52:	db13      	blt.n	8009a7c <__any_on+0x36>
 8009a54:	dd0c      	ble.n	8009a70 <__any_on+0x2a>
 8009a56:	241f      	movs	r4, #31
 8009a58:	0008      	movs	r0, r1
 8009a5a:	4020      	ands	r0, r4
 8009a5c:	4221      	tst	r1, r4
 8009a5e:	d007      	beq.n	8009a70 <__any_on+0x2a>
 8009a60:	0099      	lsls	r1, r3, #2
 8009a62:	588c      	ldr	r4, [r1, r2]
 8009a64:	0021      	movs	r1, r4
 8009a66:	40c1      	lsrs	r1, r0
 8009a68:	4081      	lsls	r1, r0
 8009a6a:	2001      	movs	r0, #1
 8009a6c:	428c      	cmp	r4, r1
 8009a6e:	d104      	bne.n	8009a7a <__any_on+0x34>
 8009a70:	009b      	lsls	r3, r3, #2
 8009a72:	18d3      	adds	r3, r2, r3
 8009a74:	4293      	cmp	r3, r2
 8009a76:	d803      	bhi.n	8009a80 <__any_on+0x3a>
 8009a78:	2000      	movs	r0, #0
 8009a7a:	bd10      	pop	{r4, pc}
 8009a7c:	0003      	movs	r3, r0
 8009a7e:	e7f7      	b.n	8009a70 <__any_on+0x2a>
 8009a80:	3b04      	subs	r3, #4
 8009a82:	6819      	ldr	r1, [r3, #0]
 8009a84:	2900      	cmp	r1, #0
 8009a86:	d0f5      	beq.n	8009a74 <__any_on+0x2e>
 8009a88:	2001      	movs	r0, #1
 8009a8a:	e7f6      	b.n	8009a7a <__any_on+0x34>

08009a8c <sulp>:
 8009a8c:	b570      	push	{r4, r5, r6, lr}
 8009a8e:	0016      	movs	r6, r2
 8009a90:	000d      	movs	r5, r1
 8009a92:	f7ff fec1 	bl	8009818 <__ulp>
 8009a96:	2e00      	cmp	r6, #0
 8009a98:	d00d      	beq.n	8009ab6 <sulp+0x2a>
 8009a9a:	236b      	movs	r3, #107	@ 0x6b
 8009a9c:	006a      	lsls	r2, r5, #1
 8009a9e:	0d52      	lsrs	r2, r2, #21
 8009aa0:	1a9b      	subs	r3, r3, r2
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	dd07      	ble.n	8009ab6 <sulp+0x2a>
 8009aa6:	2400      	movs	r4, #0
 8009aa8:	4a03      	ldr	r2, [pc, #12]	@ (8009ab8 <sulp+0x2c>)
 8009aaa:	051b      	lsls	r3, r3, #20
 8009aac:	189d      	adds	r5, r3, r2
 8009aae:	002b      	movs	r3, r5
 8009ab0:	0022      	movs	r2, r4
 8009ab2:	f7f7 fe51 	bl	8001758 <__aeabi_dmul>
 8009ab6:	bd70      	pop	{r4, r5, r6, pc}
 8009ab8:	3ff00000 	.word	0x3ff00000

08009abc <_strtod_l>:
 8009abc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009abe:	b0a3      	sub	sp, #140	@ 0x8c
 8009ac0:	921b      	str	r2, [sp, #108]	@ 0x6c
 8009ac2:	2200      	movs	r2, #0
 8009ac4:	2600      	movs	r6, #0
 8009ac6:	2700      	movs	r7, #0
 8009ac8:	9005      	str	r0, [sp, #20]
 8009aca:	9109      	str	r1, [sp, #36]	@ 0x24
 8009acc:	921e      	str	r2, [sp, #120]	@ 0x78
 8009ace:	911d      	str	r1, [sp, #116]	@ 0x74
 8009ad0:	780a      	ldrb	r2, [r1, #0]
 8009ad2:	2a2b      	cmp	r2, #43	@ 0x2b
 8009ad4:	d053      	beq.n	8009b7e <_strtod_l+0xc2>
 8009ad6:	d83f      	bhi.n	8009b58 <_strtod_l+0x9c>
 8009ad8:	2a0d      	cmp	r2, #13
 8009ada:	d839      	bhi.n	8009b50 <_strtod_l+0x94>
 8009adc:	2a08      	cmp	r2, #8
 8009ade:	d839      	bhi.n	8009b54 <_strtod_l+0x98>
 8009ae0:	2a00      	cmp	r2, #0
 8009ae2:	d042      	beq.n	8009b6a <_strtod_l+0xae>
 8009ae4:	2200      	movs	r2, #0
 8009ae6:	9212      	str	r2, [sp, #72]	@ 0x48
 8009ae8:	2100      	movs	r1, #0
 8009aea:	9d1d      	ldr	r5, [sp, #116]	@ 0x74
 8009aec:	910c      	str	r1, [sp, #48]	@ 0x30
 8009aee:	782a      	ldrb	r2, [r5, #0]
 8009af0:	2a30      	cmp	r2, #48	@ 0x30
 8009af2:	d000      	beq.n	8009af6 <_strtod_l+0x3a>
 8009af4:	e083      	b.n	8009bfe <_strtod_l+0x142>
 8009af6:	786a      	ldrb	r2, [r5, #1]
 8009af8:	3120      	adds	r1, #32
 8009afa:	438a      	bics	r2, r1
 8009afc:	2a58      	cmp	r2, #88	@ 0x58
 8009afe:	d000      	beq.n	8009b02 <_strtod_l+0x46>
 8009b00:	e073      	b.n	8009bea <_strtod_l+0x12e>
 8009b02:	9302      	str	r3, [sp, #8]
 8009b04:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009b06:	4a95      	ldr	r2, [pc, #596]	@ (8009d5c <_strtod_l+0x2a0>)
 8009b08:	9301      	str	r3, [sp, #4]
 8009b0a:	ab1e      	add	r3, sp, #120	@ 0x78
 8009b0c:	9300      	str	r3, [sp, #0]
 8009b0e:	9805      	ldr	r0, [sp, #20]
 8009b10:	ab1f      	add	r3, sp, #124	@ 0x7c
 8009b12:	a91d      	add	r1, sp, #116	@ 0x74
 8009b14:	f001 f964 	bl	800ade0 <__gethex>
 8009b18:	230f      	movs	r3, #15
 8009b1a:	0002      	movs	r2, r0
 8009b1c:	401a      	ands	r2, r3
 8009b1e:	0004      	movs	r4, r0
 8009b20:	9206      	str	r2, [sp, #24]
 8009b22:	4218      	tst	r0, r3
 8009b24:	d005      	beq.n	8009b32 <_strtod_l+0x76>
 8009b26:	2a06      	cmp	r2, #6
 8009b28:	d12b      	bne.n	8009b82 <_strtod_l+0xc6>
 8009b2a:	2300      	movs	r3, #0
 8009b2c:	3501      	adds	r5, #1
 8009b2e:	951d      	str	r5, [sp, #116]	@ 0x74
 8009b30:	9312      	str	r3, [sp, #72]	@ 0x48
 8009b32:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	d002      	beq.n	8009b3e <_strtod_l+0x82>
 8009b38:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8009b3a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8009b3c:	6013      	str	r3, [r2, #0]
 8009b3e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	d019      	beq.n	8009b78 <_strtod_l+0xbc>
 8009b44:	2380      	movs	r3, #128	@ 0x80
 8009b46:	0030      	movs	r0, r6
 8009b48:	061b      	lsls	r3, r3, #24
 8009b4a:	18f9      	adds	r1, r7, r3
 8009b4c:	b023      	add	sp, #140	@ 0x8c
 8009b4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009b50:	2a20      	cmp	r2, #32
 8009b52:	d1c7      	bne.n	8009ae4 <_strtod_l+0x28>
 8009b54:	3101      	adds	r1, #1
 8009b56:	e7ba      	b.n	8009ace <_strtod_l+0x12>
 8009b58:	2a2d      	cmp	r2, #45	@ 0x2d
 8009b5a:	d1c3      	bne.n	8009ae4 <_strtod_l+0x28>
 8009b5c:	3a2c      	subs	r2, #44	@ 0x2c
 8009b5e:	9212      	str	r2, [sp, #72]	@ 0x48
 8009b60:	1c4a      	adds	r2, r1, #1
 8009b62:	921d      	str	r2, [sp, #116]	@ 0x74
 8009b64:	784a      	ldrb	r2, [r1, #1]
 8009b66:	2a00      	cmp	r2, #0
 8009b68:	d1be      	bne.n	8009ae8 <_strtod_l+0x2c>
 8009b6a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009b6c:	931d      	str	r3, [sp, #116]	@ 0x74
 8009b6e:	2300      	movs	r3, #0
 8009b70:	9312      	str	r3, [sp, #72]	@ 0x48
 8009b72:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	d1df      	bne.n	8009b38 <_strtod_l+0x7c>
 8009b78:	0030      	movs	r0, r6
 8009b7a:	0039      	movs	r1, r7
 8009b7c:	e7e6      	b.n	8009b4c <_strtod_l+0x90>
 8009b7e:	2200      	movs	r2, #0
 8009b80:	e7ed      	b.n	8009b5e <_strtod_l+0xa2>
 8009b82:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 8009b84:	2a00      	cmp	r2, #0
 8009b86:	d007      	beq.n	8009b98 <_strtod_l+0xdc>
 8009b88:	2135      	movs	r1, #53	@ 0x35
 8009b8a:	a820      	add	r0, sp, #128	@ 0x80
 8009b8c:	f7ff ff3a 	bl	8009a04 <__copybits>
 8009b90:	991e      	ldr	r1, [sp, #120]	@ 0x78
 8009b92:	9805      	ldr	r0, [sp, #20]
 8009b94:	f7ff faf4 	bl	8009180 <_Bfree>
 8009b98:	9806      	ldr	r0, [sp, #24]
 8009b9a:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8009b9c:	3801      	subs	r0, #1
 8009b9e:	2804      	cmp	r0, #4
 8009ba0:	d806      	bhi.n	8009bb0 <_strtod_l+0xf4>
 8009ba2:	f7f6 fab9 	bl	8000118 <__gnu_thumb1_case_uqi>
 8009ba6:	0312      	.short	0x0312
 8009ba8:	1e1c      	.short	0x1e1c
 8009baa:	12          	.byte	0x12
 8009bab:	00          	.byte	0x00
 8009bac:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8009bae:	9f21      	ldr	r7, [sp, #132]	@ 0x84
 8009bb0:	05e4      	lsls	r4, r4, #23
 8009bb2:	d502      	bpl.n	8009bba <_strtod_l+0xfe>
 8009bb4:	2380      	movs	r3, #128	@ 0x80
 8009bb6:	061b      	lsls	r3, r3, #24
 8009bb8:	431f      	orrs	r7, r3
 8009bba:	4b69      	ldr	r3, [pc, #420]	@ (8009d60 <_strtod_l+0x2a4>)
 8009bbc:	423b      	tst	r3, r7
 8009bbe:	d1b8      	bne.n	8009b32 <_strtod_l+0x76>
 8009bc0:	f7fe fad6 	bl	8008170 <__errno>
 8009bc4:	2322      	movs	r3, #34	@ 0x22
 8009bc6:	6003      	str	r3, [r0, #0]
 8009bc8:	e7b3      	b.n	8009b32 <_strtod_l+0x76>
 8009bca:	4966      	ldr	r1, [pc, #408]	@ (8009d64 <_strtod_l+0x2a8>)
 8009bcc:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8009bce:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8009bd0:	400a      	ands	r2, r1
 8009bd2:	4965      	ldr	r1, [pc, #404]	@ (8009d68 <_strtod_l+0x2ac>)
 8009bd4:	185b      	adds	r3, r3, r1
 8009bd6:	051b      	lsls	r3, r3, #20
 8009bd8:	431a      	orrs	r2, r3
 8009bda:	0017      	movs	r7, r2
 8009bdc:	e7e8      	b.n	8009bb0 <_strtod_l+0xf4>
 8009bde:	4f60      	ldr	r7, [pc, #384]	@ (8009d60 <_strtod_l+0x2a4>)
 8009be0:	e7e6      	b.n	8009bb0 <_strtod_l+0xf4>
 8009be2:	2601      	movs	r6, #1
 8009be4:	4f61      	ldr	r7, [pc, #388]	@ (8009d6c <_strtod_l+0x2b0>)
 8009be6:	4276      	negs	r6, r6
 8009be8:	e7e2      	b.n	8009bb0 <_strtod_l+0xf4>
 8009bea:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8009bec:	1c5a      	adds	r2, r3, #1
 8009bee:	921d      	str	r2, [sp, #116]	@ 0x74
 8009bf0:	785b      	ldrb	r3, [r3, #1]
 8009bf2:	2b30      	cmp	r3, #48	@ 0x30
 8009bf4:	d0f9      	beq.n	8009bea <_strtod_l+0x12e>
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	d09b      	beq.n	8009b32 <_strtod_l+0x76>
 8009bfa:	2301      	movs	r3, #1
 8009bfc:	930c      	str	r3, [sp, #48]	@ 0x30
 8009bfe:	2500      	movs	r5, #0
 8009c00:	220a      	movs	r2, #10
 8009c02:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8009c04:	950d      	str	r5, [sp, #52]	@ 0x34
 8009c06:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009c08:	9508      	str	r5, [sp, #32]
 8009c0a:	981d      	ldr	r0, [sp, #116]	@ 0x74
 8009c0c:	7804      	ldrb	r4, [r0, #0]
 8009c0e:	0023      	movs	r3, r4
 8009c10:	3b30      	subs	r3, #48	@ 0x30
 8009c12:	b2d9      	uxtb	r1, r3
 8009c14:	2909      	cmp	r1, #9
 8009c16:	d927      	bls.n	8009c68 <_strtod_l+0x1ac>
 8009c18:	2201      	movs	r2, #1
 8009c1a:	4955      	ldr	r1, [pc, #340]	@ (8009d70 <_strtod_l+0x2b4>)
 8009c1c:	f000 fff8 	bl	800ac10 <strncmp>
 8009c20:	2800      	cmp	r0, #0
 8009c22:	d031      	beq.n	8009c88 <_strtod_l+0x1cc>
 8009c24:	2000      	movs	r0, #0
 8009c26:	0023      	movs	r3, r4
 8009c28:	4684      	mov	ip, r0
 8009c2a:	9a08      	ldr	r2, [sp, #32]
 8009c2c:	900e      	str	r0, [sp, #56]	@ 0x38
 8009c2e:	9206      	str	r2, [sp, #24]
 8009c30:	2220      	movs	r2, #32
 8009c32:	0019      	movs	r1, r3
 8009c34:	4391      	bics	r1, r2
 8009c36:	000a      	movs	r2, r1
 8009c38:	2100      	movs	r1, #0
 8009c3a:	9107      	str	r1, [sp, #28]
 8009c3c:	2a45      	cmp	r2, #69	@ 0x45
 8009c3e:	d000      	beq.n	8009c42 <_strtod_l+0x186>
 8009c40:	e0c0      	b.n	8009dc4 <_strtod_l+0x308>
 8009c42:	9b06      	ldr	r3, [sp, #24]
 8009c44:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8009c46:	4303      	orrs	r3, r0
 8009c48:	4313      	orrs	r3, r2
 8009c4a:	428b      	cmp	r3, r1
 8009c4c:	d08d      	beq.n	8009b6a <_strtod_l+0xae>
 8009c4e:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8009c50:	9309      	str	r3, [sp, #36]	@ 0x24
 8009c52:	3301      	adds	r3, #1
 8009c54:	931d      	str	r3, [sp, #116]	@ 0x74
 8009c56:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009c58:	785b      	ldrb	r3, [r3, #1]
 8009c5a:	2b2b      	cmp	r3, #43	@ 0x2b
 8009c5c:	d070      	beq.n	8009d40 <_strtod_l+0x284>
 8009c5e:	000c      	movs	r4, r1
 8009c60:	2b2d      	cmp	r3, #45	@ 0x2d
 8009c62:	d173      	bne.n	8009d4c <_strtod_l+0x290>
 8009c64:	2401      	movs	r4, #1
 8009c66:	e06c      	b.n	8009d42 <_strtod_l+0x286>
 8009c68:	9908      	ldr	r1, [sp, #32]
 8009c6a:	2908      	cmp	r1, #8
 8009c6c:	dc09      	bgt.n	8009c82 <_strtod_l+0x1c6>
 8009c6e:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8009c70:	4351      	muls	r1, r2
 8009c72:	185b      	adds	r3, r3, r1
 8009c74:	930d      	str	r3, [sp, #52]	@ 0x34
 8009c76:	9b08      	ldr	r3, [sp, #32]
 8009c78:	3001      	adds	r0, #1
 8009c7a:	3301      	adds	r3, #1
 8009c7c:	9308      	str	r3, [sp, #32]
 8009c7e:	901d      	str	r0, [sp, #116]	@ 0x74
 8009c80:	e7c3      	b.n	8009c0a <_strtod_l+0x14e>
 8009c82:	4355      	muls	r5, r2
 8009c84:	195d      	adds	r5, r3, r5
 8009c86:	e7f6      	b.n	8009c76 <_strtod_l+0x1ba>
 8009c88:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8009c8a:	1c5a      	adds	r2, r3, #1
 8009c8c:	921d      	str	r2, [sp, #116]	@ 0x74
 8009c8e:	9a08      	ldr	r2, [sp, #32]
 8009c90:	785b      	ldrb	r3, [r3, #1]
 8009c92:	2a00      	cmp	r2, #0
 8009c94:	d03a      	beq.n	8009d0c <_strtod_l+0x250>
 8009c96:	900e      	str	r0, [sp, #56]	@ 0x38
 8009c98:	9206      	str	r2, [sp, #24]
 8009c9a:	001a      	movs	r2, r3
 8009c9c:	3a30      	subs	r2, #48	@ 0x30
 8009c9e:	2a09      	cmp	r2, #9
 8009ca0:	d912      	bls.n	8009cc8 <_strtod_l+0x20c>
 8009ca2:	2201      	movs	r2, #1
 8009ca4:	4694      	mov	ip, r2
 8009ca6:	e7c3      	b.n	8009c30 <_strtod_l+0x174>
 8009ca8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8009caa:	3001      	adds	r0, #1
 8009cac:	1c5a      	adds	r2, r3, #1
 8009cae:	921d      	str	r2, [sp, #116]	@ 0x74
 8009cb0:	785b      	ldrb	r3, [r3, #1]
 8009cb2:	2b30      	cmp	r3, #48	@ 0x30
 8009cb4:	d0f8      	beq.n	8009ca8 <_strtod_l+0x1ec>
 8009cb6:	001a      	movs	r2, r3
 8009cb8:	3a31      	subs	r2, #49	@ 0x31
 8009cba:	2a08      	cmp	r2, #8
 8009cbc:	d83b      	bhi.n	8009d36 <_strtod_l+0x27a>
 8009cbe:	900e      	str	r0, [sp, #56]	@ 0x38
 8009cc0:	2000      	movs	r0, #0
 8009cc2:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8009cc4:	9006      	str	r0, [sp, #24]
 8009cc6:	9213      	str	r2, [sp, #76]	@ 0x4c
 8009cc8:	001a      	movs	r2, r3
 8009cca:	1c41      	adds	r1, r0, #1
 8009ccc:	3a30      	subs	r2, #48	@ 0x30
 8009cce:	2b30      	cmp	r3, #48	@ 0x30
 8009cd0:	d016      	beq.n	8009d00 <_strtod_l+0x244>
 8009cd2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009cd4:	185b      	adds	r3, r3, r1
 8009cd6:	930e      	str	r3, [sp, #56]	@ 0x38
 8009cd8:	9b06      	ldr	r3, [sp, #24]
 8009cda:	210a      	movs	r1, #10
 8009cdc:	469c      	mov	ip, r3
 8009cde:	4484      	add	ip, r0
 8009ce0:	459c      	cmp	ip, r3
 8009ce2:	d115      	bne.n	8009d10 <_strtod_l+0x254>
 8009ce4:	9906      	ldr	r1, [sp, #24]
 8009ce6:	9b06      	ldr	r3, [sp, #24]
 8009ce8:	3101      	adds	r1, #1
 8009cea:	1809      	adds	r1, r1, r0
 8009cec:	181b      	adds	r3, r3, r0
 8009cee:	9106      	str	r1, [sp, #24]
 8009cf0:	2b08      	cmp	r3, #8
 8009cf2:	dc19      	bgt.n	8009d28 <_strtod_l+0x26c>
 8009cf4:	230a      	movs	r3, #10
 8009cf6:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8009cf8:	434b      	muls	r3, r1
 8009cfa:	2100      	movs	r1, #0
 8009cfc:	18d3      	adds	r3, r2, r3
 8009cfe:	930d      	str	r3, [sp, #52]	@ 0x34
 8009d00:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8009d02:	0008      	movs	r0, r1
 8009d04:	1c5a      	adds	r2, r3, #1
 8009d06:	921d      	str	r2, [sp, #116]	@ 0x74
 8009d08:	785b      	ldrb	r3, [r3, #1]
 8009d0a:	e7c6      	b.n	8009c9a <_strtod_l+0x1de>
 8009d0c:	9808      	ldr	r0, [sp, #32]
 8009d0e:	e7d0      	b.n	8009cb2 <_strtod_l+0x1f6>
 8009d10:	1c5c      	adds	r4, r3, #1
 8009d12:	2b08      	cmp	r3, #8
 8009d14:	dc04      	bgt.n	8009d20 <_strtod_l+0x264>
 8009d16:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009d18:	434b      	muls	r3, r1
 8009d1a:	930d      	str	r3, [sp, #52]	@ 0x34
 8009d1c:	0023      	movs	r3, r4
 8009d1e:	e7df      	b.n	8009ce0 <_strtod_l+0x224>
 8009d20:	2c10      	cmp	r4, #16
 8009d22:	dcfb      	bgt.n	8009d1c <_strtod_l+0x260>
 8009d24:	434d      	muls	r5, r1
 8009d26:	e7f9      	b.n	8009d1c <_strtod_l+0x260>
 8009d28:	2100      	movs	r1, #0
 8009d2a:	2b0f      	cmp	r3, #15
 8009d2c:	dce8      	bgt.n	8009d00 <_strtod_l+0x244>
 8009d2e:	230a      	movs	r3, #10
 8009d30:	435d      	muls	r5, r3
 8009d32:	1955      	adds	r5, r2, r5
 8009d34:	e7e4      	b.n	8009d00 <_strtod_l+0x244>
 8009d36:	2200      	movs	r2, #0
 8009d38:	920e      	str	r2, [sp, #56]	@ 0x38
 8009d3a:	9206      	str	r2, [sp, #24]
 8009d3c:	3201      	adds	r2, #1
 8009d3e:	e7b1      	b.n	8009ca4 <_strtod_l+0x1e8>
 8009d40:	2400      	movs	r4, #0
 8009d42:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009d44:	3302      	adds	r3, #2
 8009d46:	931d      	str	r3, [sp, #116]	@ 0x74
 8009d48:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009d4a:	789b      	ldrb	r3, [r3, #2]
 8009d4c:	001a      	movs	r2, r3
 8009d4e:	3a30      	subs	r2, #48	@ 0x30
 8009d50:	2a09      	cmp	r2, #9
 8009d52:	d913      	bls.n	8009d7c <_strtod_l+0x2c0>
 8009d54:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009d56:	921d      	str	r2, [sp, #116]	@ 0x74
 8009d58:	2200      	movs	r2, #0
 8009d5a:	e032      	b.n	8009dc2 <_strtod_l+0x306>
 8009d5c:	0800c198 	.word	0x0800c198
 8009d60:	7ff00000 	.word	0x7ff00000
 8009d64:	ffefffff 	.word	0xffefffff
 8009d68:	00000433 	.word	0x00000433
 8009d6c:	7fffffff 	.word	0x7fffffff
 8009d70:	0800c180 	.word	0x0800c180
 8009d74:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8009d76:	1c5a      	adds	r2, r3, #1
 8009d78:	921d      	str	r2, [sp, #116]	@ 0x74
 8009d7a:	785b      	ldrb	r3, [r3, #1]
 8009d7c:	2b30      	cmp	r3, #48	@ 0x30
 8009d7e:	d0f9      	beq.n	8009d74 <_strtod_l+0x2b8>
 8009d80:	2200      	movs	r2, #0
 8009d82:	9207      	str	r2, [sp, #28]
 8009d84:	001a      	movs	r2, r3
 8009d86:	3a31      	subs	r2, #49	@ 0x31
 8009d88:	2a08      	cmp	r2, #8
 8009d8a:	d81b      	bhi.n	8009dc4 <_strtod_l+0x308>
 8009d8c:	3b30      	subs	r3, #48	@ 0x30
 8009d8e:	9310      	str	r3, [sp, #64]	@ 0x40
 8009d90:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8009d92:	9307      	str	r3, [sp, #28]
 8009d94:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8009d96:	1c59      	adds	r1, r3, #1
 8009d98:	911d      	str	r1, [sp, #116]	@ 0x74
 8009d9a:	785b      	ldrb	r3, [r3, #1]
 8009d9c:	001a      	movs	r2, r3
 8009d9e:	3a30      	subs	r2, #48	@ 0x30
 8009da0:	2a09      	cmp	r2, #9
 8009da2:	d93a      	bls.n	8009e1a <_strtod_l+0x35e>
 8009da4:	9a07      	ldr	r2, [sp, #28]
 8009da6:	1a8a      	subs	r2, r1, r2
 8009da8:	49b4      	ldr	r1, [pc, #720]	@ (800a07c <_strtod_l+0x5c0>)
 8009daa:	9107      	str	r1, [sp, #28]
 8009dac:	2a08      	cmp	r2, #8
 8009dae:	dc04      	bgt.n	8009dba <_strtod_l+0x2fe>
 8009db0:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8009db2:	9207      	str	r2, [sp, #28]
 8009db4:	428a      	cmp	r2, r1
 8009db6:	dd00      	ble.n	8009dba <_strtod_l+0x2fe>
 8009db8:	9107      	str	r1, [sp, #28]
 8009dba:	2c00      	cmp	r4, #0
 8009dbc:	d002      	beq.n	8009dc4 <_strtod_l+0x308>
 8009dbe:	9a07      	ldr	r2, [sp, #28]
 8009dc0:	4252      	negs	r2, r2
 8009dc2:	9207      	str	r2, [sp, #28]
 8009dc4:	9a06      	ldr	r2, [sp, #24]
 8009dc6:	2a00      	cmp	r2, #0
 8009dc8:	d14d      	bne.n	8009e66 <_strtod_l+0x3aa>
 8009dca:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8009dcc:	4310      	orrs	r0, r2
 8009dce:	d000      	beq.n	8009dd2 <_strtod_l+0x316>
 8009dd0:	e6af      	b.n	8009b32 <_strtod_l+0x76>
 8009dd2:	4662      	mov	r2, ip
 8009dd4:	2a00      	cmp	r2, #0
 8009dd6:	d000      	beq.n	8009dda <_strtod_l+0x31e>
 8009dd8:	e6c7      	b.n	8009b6a <_strtod_l+0xae>
 8009dda:	2b69      	cmp	r3, #105	@ 0x69
 8009ddc:	d027      	beq.n	8009e2e <_strtod_l+0x372>
 8009dde:	dc23      	bgt.n	8009e28 <_strtod_l+0x36c>
 8009de0:	2b49      	cmp	r3, #73	@ 0x49
 8009de2:	d024      	beq.n	8009e2e <_strtod_l+0x372>
 8009de4:	2b4e      	cmp	r3, #78	@ 0x4e
 8009de6:	d000      	beq.n	8009dea <_strtod_l+0x32e>
 8009de8:	e6bf      	b.n	8009b6a <_strtod_l+0xae>
 8009dea:	49a5      	ldr	r1, [pc, #660]	@ (800a080 <_strtod_l+0x5c4>)
 8009dec:	a81d      	add	r0, sp, #116	@ 0x74
 8009dee:	f001 fa2d 	bl	800b24c <__match>
 8009df2:	2800      	cmp	r0, #0
 8009df4:	d100      	bne.n	8009df8 <_strtod_l+0x33c>
 8009df6:	e6b8      	b.n	8009b6a <_strtod_l+0xae>
 8009df8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8009dfa:	781b      	ldrb	r3, [r3, #0]
 8009dfc:	2b28      	cmp	r3, #40	@ 0x28
 8009dfe:	d12c      	bne.n	8009e5a <_strtod_l+0x39e>
 8009e00:	49a0      	ldr	r1, [pc, #640]	@ (800a084 <_strtod_l+0x5c8>)
 8009e02:	aa20      	add	r2, sp, #128	@ 0x80
 8009e04:	a81d      	add	r0, sp, #116	@ 0x74
 8009e06:	f001 fa35 	bl	800b274 <__hexnan>
 8009e0a:	2805      	cmp	r0, #5
 8009e0c:	d125      	bne.n	8009e5a <_strtod_l+0x39e>
 8009e0e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009e10:	4a9d      	ldr	r2, [pc, #628]	@ (800a088 <_strtod_l+0x5cc>)
 8009e12:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8009e14:	431a      	orrs	r2, r3
 8009e16:	0017      	movs	r7, r2
 8009e18:	e68b      	b.n	8009b32 <_strtod_l+0x76>
 8009e1a:	220a      	movs	r2, #10
 8009e1c:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8009e1e:	434a      	muls	r2, r1
 8009e20:	18d2      	adds	r2, r2, r3
 8009e22:	3a30      	subs	r2, #48	@ 0x30
 8009e24:	9210      	str	r2, [sp, #64]	@ 0x40
 8009e26:	e7b5      	b.n	8009d94 <_strtod_l+0x2d8>
 8009e28:	2b6e      	cmp	r3, #110	@ 0x6e
 8009e2a:	d0de      	beq.n	8009dea <_strtod_l+0x32e>
 8009e2c:	e69d      	b.n	8009b6a <_strtod_l+0xae>
 8009e2e:	4997      	ldr	r1, [pc, #604]	@ (800a08c <_strtod_l+0x5d0>)
 8009e30:	a81d      	add	r0, sp, #116	@ 0x74
 8009e32:	f001 fa0b 	bl	800b24c <__match>
 8009e36:	2800      	cmp	r0, #0
 8009e38:	d100      	bne.n	8009e3c <_strtod_l+0x380>
 8009e3a:	e696      	b.n	8009b6a <_strtod_l+0xae>
 8009e3c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8009e3e:	4994      	ldr	r1, [pc, #592]	@ (800a090 <_strtod_l+0x5d4>)
 8009e40:	3b01      	subs	r3, #1
 8009e42:	a81d      	add	r0, sp, #116	@ 0x74
 8009e44:	931d      	str	r3, [sp, #116]	@ 0x74
 8009e46:	f001 fa01 	bl	800b24c <__match>
 8009e4a:	2800      	cmp	r0, #0
 8009e4c:	d102      	bne.n	8009e54 <_strtod_l+0x398>
 8009e4e:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8009e50:	3301      	adds	r3, #1
 8009e52:	931d      	str	r3, [sp, #116]	@ 0x74
 8009e54:	2600      	movs	r6, #0
 8009e56:	4f8c      	ldr	r7, [pc, #560]	@ (800a088 <_strtod_l+0x5cc>)
 8009e58:	e66b      	b.n	8009b32 <_strtod_l+0x76>
 8009e5a:	488e      	ldr	r0, [pc, #568]	@ (800a094 <_strtod_l+0x5d8>)
 8009e5c:	f000 ff06 	bl	800ac6c <nan>
 8009e60:	0006      	movs	r6, r0
 8009e62:	000f      	movs	r7, r1
 8009e64:	e665      	b.n	8009b32 <_strtod_l+0x76>
 8009e66:	9b07      	ldr	r3, [sp, #28]
 8009e68:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009e6a:	1a9b      	subs	r3, r3, r2
 8009e6c:	930c      	str	r3, [sp, #48]	@ 0x30
 8009e6e:	9b08      	ldr	r3, [sp, #32]
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	d101      	bne.n	8009e78 <_strtod_l+0x3bc>
 8009e74:	9b06      	ldr	r3, [sp, #24]
 8009e76:	9308      	str	r3, [sp, #32]
 8009e78:	9c06      	ldr	r4, [sp, #24]
 8009e7a:	2c10      	cmp	r4, #16
 8009e7c:	dd00      	ble.n	8009e80 <_strtod_l+0x3c4>
 8009e7e:	2410      	movs	r4, #16
 8009e80:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8009e82:	f7f8 fb59 	bl	8002538 <__aeabi_ui2d>
 8009e86:	9b06      	ldr	r3, [sp, #24]
 8009e88:	0006      	movs	r6, r0
 8009e8a:	000f      	movs	r7, r1
 8009e8c:	2b09      	cmp	r3, #9
 8009e8e:	dc13      	bgt.n	8009eb8 <_strtod_l+0x3fc>
 8009e90:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d100      	bne.n	8009e98 <_strtod_l+0x3dc>
 8009e96:	e64c      	b.n	8009b32 <_strtod_l+0x76>
 8009e98:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	dc00      	bgt.n	8009ea0 <_strtod_l+0x3e4>
 8009e9e:	e07e      	b.n	8009f9e <_strtod_l+0x4e2>
 8009ea0:	2b16      	cmp	r3, #22
 8009ea2:	dc63      	bgt.n	8009f6c <_strtod_l+0x4b0>
 8009ea4:	497c      	ldr	r1, [pc, #496]	@ (800a098 <_strtod_l+0x5dc>)
 8009ea6:	00db      	lsls	r3, r3, #3
 8009ea8:	18c9      	adds	r1, r1, r3
 8009eaa:	0032      	movs	r2, r6
 8009eac:	6808      	ldr	r0, [r1, #0]
 8009eae:	6849      	ldr	r1, [r1, #4]
 8009eb0:	003b      	movs	r3, r7
 8009eb2:	f7f7 fc51 	bl	8001758 <__aeabi_dmul>
 8009eb6:	e7d3      	b.n	8009e60 <_strtod_l+0x3a4>
 8009eb8:	0022      	movs	r2, r4
 8009eba:	4b77      	ldr	r3, [pc, #476]	@ (800a098 <_strtod_l+0x5dc>)
 8009ebc:	3a09      	subs	r2, #9
 8009ebe:	00d2      	lsls	r2, r2, #3
 8009ec0:	189b      	adds	r3, r3, r2
 8009ec2:	681a      	ldr	r2, [r3, #0]
 8009ec4:	685b      	ldr	r3, [r3, #4]
 8009ec6:	f7f7 fc47 	bl	8001758 <__aeabi_dmul>
 8009eca:	0006      	movs	r6, r0
 8009ecc:	0028      	movs	r0, r5
 8009ece:	000f      	movs	r7, r1
 8009ed0:	f7f8 fb32 	bl	8002538 <__aeabi_ui2d>
 8009ed4:	000b      	movs	r3, r1
 8009ed6:	0002      	movs	r2, r0
 8009ed8:	0039      	movs	r1, r7
 8009eda:	0030      	movs	r0, r6
 8009edc:	f7f6 fc94 	bl	8000808 <__aeabi_dadd>
 8009ee0:	9b06      	ldr	r3, [sp, #24]
 8009ee2:	0006      	movs	r6, r0
 8009ee4:	000f      	movs	r7, r1
 8009ee6:	2b0f      	cmp	r3, #15
 8009ee8:	ddd2      	ble.n	8009e90 <_strtod_l+0x3d4>
 8009eea:	9b06      	ldr	r3, [sp, #24]
 8009eec:	1b1c      	subs	r4, r3, r4
 8009eee:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009ef0:	18e4      	adds	r4, r4, r3
 8009ef2:	2c00      	cmp	r4, #0
 8009ef4:	dc00      	bgt.n	8009ef8 <_strtod_l+0x43c>
 8009ef6:	e09b      	b.n	800a030 <_strtod_l+0x574>
 8009ef8:	220f      	movs	r2, #15
 8009efa:	0023      	movs	r3, r4
 8009efc:	4013      	ands	r3, r2
 8009efe:	4214      	tst	r4, r2
 8009f00:	d00a      	beq.n	8009f18 <_strtod_l+0x45c>
 8009f02:	4965      	ldr	r1, [pc, #404]	@ (800a098 <_strtod_l+0x5dc>)
 8009f04:	00db      	lsls	r3, r3, #3
 8009f06:	18c9      	adds	r1, r1, r3
 8009f08:	0032      	movs	r2, r6
 8009f0a:	6808      	ldr	r0, [r1, #0]
 8009f0c:	6849      	ldr	r1, [r1, #4]
 8009f0e:	003b      	movs	r3, r7
 8009f10:	f7f7 fc22 	bl	8001758 <__aeabi_dmul>
 8009f14:	0006      	movs	r6, r0
 8009f16:	000f      	movs	r7, r1
 8009f18:	230f      	movs	r3, #15
 8009f1a:	439c      	bics	r4, r3
 8009f1c:	d073      	beq.n	800a006 <_strtod_l+0x54a>
 8009f1e:	3326      	adds	r3, #38	@ 0x26
 8009f20:	33ff      	adds	r3, #255	@ 0xff
 8009f22:	429c      	cmp	r4, r3
 8009f24:	dd4b      	ble.n	8009fbe <_strtod_l+0x502>
 8009f26:	2300      	movs	r3, #0
 8009f28:	9306      	str	r3, [sp, #24]
 8009f2a:	9307      	str	r3, [sp, #28]
 8009f2c:	930d      	str	r3, [sp, #52]	@ 0x34
 8009f2e:	9308      	str	r3, [sp, #32]
 8009f30:	2322      	movs	r3, #34	@ 0x22
 8009f32:	2600      	movs	r6, #0
 8009f34:	9a05      	ldr	r2, [sp, #20]
 8009f36:	4f54      	ldr	r7, [pc, #336]	@ (800a088 <_strtod_l+0x5cc>)
 8009f38:	6013      	str	r3, [r2, #0]
 8009f3a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009f3c:	42b3      	cmp	r3, r6
 8009f3e:	d100      	bne.n	8009f42 <_strtod_l+0x486>
 8009f40:	e5f7      	b.n	8009b32 <_strtod_l+0x76>
 8009f42:	991e      	ldr	r1, [sp, #120]	@ 0x78
 8009f44:	9805      	ldr	r0, [sp, #20]
 8009f46:	f7ff f91b 	bl	8009180 <_Bfree>
 8009f4a:	9908      	ldr	r1, [sp, #32]
 8009f4c:	9805      	ldr	r0, [sp, #20]
 8009f4e:	f7ff f917 	bl	8009180 <_Bfree>
 8009f52:	9907      	ldr	r1, [sp, #28]
 8009f54:	9805      	ldr	r0, [sp, #20]
 8009f56:	f7ff f913 	bl	8009180 <_Bfree>
 8009f5a:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8009f5c:	9805      	ldr	r0, [sp, #20]
 8009f5e:	f7ff f90f 	bl	8009180 <_Bfree>
 8009f62:	9906      	ldr	r1, [sp, #24]
 8009f64:	9805      	ldr	r0, [sp, #20]
 8009f66:	f7ff f90b 	bl	8009180 <_Bfree>
 8009f6a:	e5e2      	b.n	8009b32 <_strtod_l+0x76>
 8009f6c:	2325      	movs	r3, #37	@ 0x25
 8009f6e:	9a06      	ldr	r2, [sp, #24]
 8009f70:	1a9b      	subs	r3, r3, r2
 8009f72:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8009f74:	4293      	cmp	r3, r2
 8009f76:	dbb8      	blt.n	8009eea <_strtod_l+0x42e>
 8009f78:	240f      	movs	r4, #15
 8009f7a:	9b06      	ldr	r3, [sp, #24]
 8009f7c:	4d46      	ldr	r5, [pc, #280]	@ (800a098 <_strtod_l+0x5dc>)
 8009f7e:	1ae4      	subs	r4, r4, r3
 8009f80:	00e1      	lsls	r1, r4, #3
 8009f82:	1869      	adds	r1, r5, r1
 8009f84:	0032      	movs	r2, r6
 8009f86:	6808      	ldr	r0, [r1, #0]
 8009f88:	6849      	ldr	r1, [r1, #4]
 8009f8a:	003b      	movs	r3, r7
 8009f8c:	f7f7 fbe4 	bl	8001758 <__aeabi_dmul>
 8009f90:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009f92:	1b1c      	subs	r4, r3, r4
 8009f94:	00e4      	lsls	r4, r4, #3
 8009f96:	192d      	adds	r5, r5, r4
 8009f98:	682a      	ldr	r2, [r5, #0]
 8009f9a:	686b      	ldr	r3, [r5, #4]
 8009f9c:	e789      	b.n	8009eb2 <_strtod_l+0x3f6>
 8009f9e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009fa0:	3316      	adds	r3, #22
 8009fa2:	dba2      	blt.n	8009eea <_strtod_l+0x42e>
 8009fa4:	9907      	ldr	r1, [sp, #28]
 8009fa6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009fa8:	4b3b      	ldr	r3, [pc, #236]	@ (800a098 <_strtod_l+0x5dc>)
 8009faa:	1a52      	subs	r2, r2, r1
 8009fac:	00d2      	lsls	r2, r2, #3
 8009fae:	189b      	adds	r3, r3, r2
 8009fb0:	0030      	movs	r0, r6
 8009fb2:	681a      	ldr	r2, [r3, #0]
 8009fb4:	685b      	ldr	r3, [r3, #4]
 8009fb6:	0039      	movs	r1, r7
 8009fb8:	f7f6 ff8a 	bl	8000ed0 <__aeabi_ddiv>
 8009fbc:	e750      	b.n	8009e60 <_strtod_l+0x3a4>
 8009fbe:	2300      	movs	r3, #0
 8009fc0:	0030      	movs	r0, r6
 8009fc2:	0039      	movs	r1, r7
 8009fc4:	4d35      	ldr	r5, [pc, #212]	@ (800a09c <_strtod_l+0x5e0>)
 8009fc6:	1124      	asrs	r4, r4, #4
 8009fc8:	9309      	str	r3, [sp, #36]	@ 0x24
 8009fca:	2c01      	cmp	r4, #1
 8009fcc:	dc1e      	bgt.n	800a00c <_strtod_l+0x550>
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	d001      	beq.n	8009fd6 <_strtod_l+0x51a>
 8009fd2:	0006      	movs	r6, r0
 8009fd4:	000f      	movs	r7, r1
 8009fd6:	4b32      	ldr	r3, [pc, #200]	@ (800a0a0 <_strtod_l+0x5e4>)
 8009fd8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009fda:	18ff      	adds	r7, r7, r3
 8009fdc:	4b2f      	ldr	r3, [pc, #188]	@ (800a09c <_strtod_l+0x5e0>)
 8009fde:	00d5      	lsls	r5, r2, #3
 8009fe0:	195d      	adds	r5, r3, r5
 8009fe2:	0032      	movs	r2, r6
 8009fe4:	6828      	ldr	r0, [r5, #0]
 8009fe6:	6869      	ldr	r1, [r5, #4]
 8009fe8:	003b      	movs	r3, r7
 8009fea:	f7f7 fbb5 	bl	8001758 <__aeabi_dmul>
 8009fee:	4b26      	ldr	r3, [pc, #152]	@ (800a088 <_strtod_l+0x5cc>)
 8009ff0:	4a2c      	ldr	r2, [pc, #176]	@ (800a0a4 <_strtod_l+0x5e8>)
 8009ff2:	0006      	movs	r6, r0
 8009ff4:	400b      	ands	r3, r1
 8009ff6:	4293      	cmp	r3, r2
 8009ff8:	d895      	bhi.n	8009f26 <_strtod_l+0x46a>
 8009ffa:	4a2b      	ldr	r2, [pc, #172]	@ (800a0a8 <_strtod_l+0x5ec>)
 8009ffc:	4293      	cmp	r3, r2
 8009ffe:	d913      	bls.n	800a028 <_strtod_l+0x56c>
 800a000:	2601      	movs	r6, #1
 800a002:	4f2a      	ldr	r7, [pc, #168]	@ (800a0ac <_strtod_l+0x5f0>)
 800a004:	4276      	negs	r6, r6
 800a006:	2300      	movs	r3, #0
 800a008:	9309      	str	r3, [sp, #36]	@ 0x24
 800a00a:	e086      	b.n	800a11a <_strtod_l+0x65e>
 800a00c:	2201      	movs	r2, #1
 800a00e:	4214      	tst	r4, r2
 800a010:	d004      	beq.n	800a01c <_strtod_l+0x560>
 800a012:	682a      	ldr	r2, [r5, #0]
 800a014:	686b      	ldr	r3, [r5, #4]
 800a016:	f7f7 fb9f 	bl	8001758 <__aeabi_dmul>
 800a01a:	2301      	movs	r3, #1
 800a01c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a01e:	1064      	asrs	r4, r4, #1
 800a020:	3201      	adds	r2, #1
 800a022:	9209      	str	r2, [sp, #36]	@ 0x24
 800a024:	3508      	adds	r5, #8
 800a026:	e7d0      	b.n	8009fca <_strtod_l+0x50e>
 800a028:	23d4      	movs	r3, #212	@ 0xd4
 800a02a:	049b      	lsls	r3, r3, #18
 800a02c:	18cf      	adds	r7, r1, r3
 800a02e:	e7ea      	b.n	800a006 <_strtod_l+0x54a>
 800a030:	2c00      	cmp	r4, #0
 800a032:	d0e8      	beq.n	800a006 <_strtod_l+0x54a>
 800a034:	4264      	negs	r4, r4
 800a036:	230f      	movs	r3, #15
 800a038:	0022      	movs	r2, r4
 800a03a:	401a      	ands	r2, r3
 800a03c:	421c      	tst	r4, r3
 800a03e:	d00a      	beq.n	800a056 <_strtod_l+0x59a>
 800a040:	4b15      	ldr	r3, [pc, #84]	@ (800a098 <_strtod_l+0x5dc>)
 800a042:	00d2      	lsls	r2, r2, #3
 800a044:	189b      	adds	r3, r3, r2
 800a046:	0030      	movs	r0, r6
 800a048:	681a      	ldr	r2, [r3, #0]
 800a04a:	685b      	ldr	r3, [r3, #4]
 800a04c:	0039      	movs	r1, r7
 800a04e:	f7f6 ff3f 	bl	8000ed0 <__aeabi_ddiv>
 800a052:	0006      	movs	r6, r0
 800a054:	000f      	movs	r7, r1
 800a056:	1124      	asrs	r4, r4, #4
 800a058:	d0d5      	beq.n	800a006 <_strtod_l+0x54a>
 800a05a:	2c1f      	cmp	r4, #31
 800a05c:	dd28      	ble.n	800a0b0 <_strtod_l+0x5f4>
 800a05e:	2300      	movs	r3, #0
 800a060:	9306      	str	r3, [sp, #24]
 800a062:	9307      	str	r3, [sp, #28]
 800a064:	930d      	str	r3, [sp, #52]	@ 0x34
 800a066:	9308      	str	r3, [sp, #32]
 800a068:	2322      	movs	r3, #34	@ 0x22
 800a06a:	9a05      	ldr	r2, [sp, #20]
 800a06c:	2600      	movs	r6, #0
 800a06e:	6013      	str	r3, [r2, #0]
 800a070:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a072:	2700      	movs	r7, #0
 800a074:	2b00      	cmp	r3, #0
 800a076:	d000      	beq.n	800a07a <_strtod_l+0x5be>
 800a078:	e763      	b.n	8009f42 <_strtod_l+0x486>
 800a07a:	e55a      	b.n	8009b32 <_strtod_l+0x76>
 800a07c:	00004e1f 	.word	0x00004e1f
 800a080:	0800bf6d 	.word	0x0800bf6d
 800a084:	0800c184 	.word	0x0800c184
 800a088:	7ff00000 	.word	0x7ff00000
 800a08c:	0800bf65 	.word	0x0800bf65
 800a090:	0800bf9c 	.word	0x0800bf9c
 800a094:	0800c32d 	.word	0x0800c32d
 800a098:	0800c0b8 	.word	0x0800c0b8
 800a09c:	0800c090 	.word	0x0800c090
 800a0a0:	fcb00000 	.word	0xfcb00000
 800a0a4:	7ca00000 	.word	0x7ca00000
 800a0a8:	7c900000 	.word	0x7c900000
 800a0ac:	7fefffff 	.word	0x7fefffff
 800a0b0:	2310      	movs	r3, #16
 800a0b2:	0022      	movs	r2, r4
 800a0b4:	401a      	ands	r2, r3
 800a0b6:	9209      	str	r2, [sp, #36]	@ 0x24
 800a0b8:	421c      	tst	r4, r3
 800a0ba:	d001      	beq.n	800a0c0 <_strtod_l+0x604>
 800a0bc:	335a      	adds	r3, #90	@ 0x5a
 800a0be:	9309      	str	r3, [sp, #36]	@ 0x24
 800a0c0:	0030      	movs	r0, r6
 800a0c2:	0039      	movs	r1, r7
 800a0c4:	2300      	movs	r3, #0
 800a0c6:	4dbf      	ldr	r5, [pc, #764]	@ (800a3c4 <_strtod_l+0x908>)
 800a0c8:	2201      	movs	r2, #1
 800a0ca:	4214      	tst	r4, r2
 800a0cc:	d004      	beq.n	800a0d8 <_strtod_l+0x61c>
 800a0ce:	682a      	ldr	r2, [r5, #0]
 800a0d0:	686b      	ldr	r3, [r5, #4]
 800a0d2:	f7f7 fb41 	bl	8001758 <__aeabi_dmul>
 800a0d6:	2301      	movs	r3, #1
 800a0d8:	1064      	asrs	r4, r4, #1
 800a0da:	3508      	adds	r5, #8
 800a0dc:	2c00      	cmp	r4, #0
 800a0de:	d1f3      	bne.n	800a0c8 <_strtod_l+0x60c>
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	d001      	beq.n	800a0e8 <_strtod_l+0x62c>
 800a0e4:	0006      	movs	r6, r0
 800a0e6:	000f      	movs	r7, r1
 800a0e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	d00d      	beq.n	800a10a <_strtod_l+0x64e>
 800a0ee:	236b      	movs	r3, #107	@ 0x6b
 800a0f0:	007a      	lsls	r2, r7, #1
 800a0f2:	0d52      	lsrs	r2, r2, #21
 800a0f4:	0039      	movs	r1, r7
 800a0f6:	1a9b      	subs	r3, r3, r2
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	dd06      	ble.n	800a10a <_strtod_l+0x64e>
 800a0fc:	2b1f      	cmp	r3, #31
 800a0fe:	dd5a      	ble.n	800a1b6 <_strtod_l+0x6fa>
 800a100:	2600      	movs	r6, #0
 800a102:	2b34      	cmp	r3, #52	@ 0x34
 800a104:	dd50      	ble.n	800a1a8 <_strtod_l+0x6ec>
 800a106:	27dc      	movs	r7, #220	@ 0xdc
 800a108:	04bf      	lsls	r7, r7, #18
 800a10a:	2200      	movs	r2, #0
 800a10c:	2300      	movs	r3, #0
 800a10e:	0030      	movs	r0, r6
 800a110:	0039      	movs	r1, r7
 800a112:	f7f6 f99b 	bl	800044c <__aeabi_dcmpeq>
 800a116:	2800      	cmp	r0, #0
 800a118:	d1a1      	bne.n	800a05e <_strtod_l+0x5a2>
 800a11a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a11c:	9a08      	ldr	r2, [sp, #32]
 800a11e:	9300      	str	r3, [sp, #0]
 800a120:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800a122:	9b06      	ldr	r3, [sp, #24]
 800a124:	9805      	ldr	r0, [sp, #20]
 800a126:	f7ff f893 	bl	8009250 <__s2b>
 800a12a:	900d      	str	r0, [sp, #52]	@ 0x34
 800a12c:	2800      	cmp	r0, #0
 800a12e:	d100      	bne.n	800a132 <_strtod_l+0x676>
 800a130:	e6f9      	b.n	8009f26 <_strtod_l+0x46a>
 800a132:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a134:	9907      	ldr	r1, [sp, #28]
 800a136:	17da      	asrs	r2, r3, #31
 800a138:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a13a:	1a5b      	subs	r3, r3, r1
 800a13c:	401a      	ands	r2, r3
 800a13e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a140:	9217      	str	r2, [sp, #92]	@ 0x5c
 800a142:	43db      	mvns	r3, r3
 800a144:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800a146:	17db      	asrs	r3, r3, #31
 800a148:	401a      	ands	r2, r3
 800a14a:	2300      	movs	r3, #0
 800a14c:	921a      	str	r2, [sp, #104]	@ 0x68
 800a14e:	9306      	str	r3, [sp, #24]
 800a150:	9307      	str	r3, [sp, #28]
 800a152:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a154:	9805      	ldr	r0, [sp, #20]
 800a156:	6859      	ldr	r1, [r3, #4]
 800a158:	f7fe ffce 	bl	80090f8 <_Balloc>
 800a15c:	9008      	str	r0, [sp, #32]
 800a15e:	2800      	cmp	r0, #0
 800a160:	d100      	bne.n	800a164 <_strtod_l+0x6a8>
 800a162:	e6e5      	b.n	8009f30 <_strtod_l+0x474>
 800a164:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a166:	300c      	adds	r0, #12
 800a168:	0019      	movs	r1, r3
 800a16a:	691a      	ldr	r2, [r3, #16]
 800a16c:	310c      	adds	r1, #12
 800a16e:	3202      	adds	r2, #2
 800a170:	0092      	lsls	r2, r2, #2
 800a172:	f000 fd71 	bl	800ac58 <memcpy>
 800a176:	ab20      	add	r3, sp, #128	@ 0x80
 800a178:	9301      	str	r3, [sp, #4]
 800a17a:	ab1f      	add	r3, sp, #124	@ 0x7c
 800a17c:	9300      	str	r3, [sp, #0]
 800a17e:	0032      	movs	r2, r6
 800a180:	003b      	movs	r3, r7
 800a182:	9805      	ldr	r0, [sp, #20]
 800a184:	9610      	str	r6, [sp, #64]	@ 0x40
 800a186:	9711      	str	r7, [sp, #68]	@ 0x44
 800a188:	f7ff fbb2 	bl	80098f0 <__d2b>
 800a18c:	901e      	str	r0, [sp, #120]	@ 0x78
 800a18e:	2800      	cmp	r0, #0
 800a190:	d100      	bne.n	800a194 <_strtod_l+0x6d8>
 800a192:	e6cd      	b.n	8009f30 <_strtod_l+0x474>
 800a194:	2101      	movs	r1, #1
 800a196:	9805      	ldr	r0, [sp, #20]
 800a198:	f7ff f8f6 	bl	8009388 <__i2b>
 800a19c:	9007      	str	r0, [sp, #28]
 800a19e:	2800      	cmp	r0, #0
 800a1a0:	d10e      	bne.n	800a1c0 <_strtod_l+0x704>
 800a1a2:	2300      	movs	r3, #0
 800a1a4:	9307      	str	r3, [sp, #28]
 800a1a6:	e6c3      	b.n	8009f30 <_strtod_l+0x474>
 800a1a8:	234b      	movs	r3, #75	@ 0x4b
 800a1aa:	1a9a      	subs	r2, r3, r2
 800a1ac:	3b4c      	subs	r3, #76	@ 0x4c
 800a1ae:	4093      	lsls	r3, r2
 800a1b0:	4019      	ands	r1, r3
 800a1b2:	000f      	movs	r7, r1
 800a1b4:	e7a9      	b.n	800a10a <_strtod_l+0x64e>
 800a1b6:	2201      	movs	r2, #1
 800a1b8:	4252      	negs	r2, r2
 800a1ba:	409a      	lsls	r2, r3
 800a1bc:	4016      	ands	r6, r2
 800a1be:	e7a4      	b.n	800a10a <_strtod_l+0x64e>
 800a1c0:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 800a1c2:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800a1c4:	9d17      	ldr	r5, [sp, #92]	@ 0x5c
 800a1c6:	1ad4      	subs	r4, r2, r3
 800a1c8:	2b00      	cmp	r3, #0
 800a1ca:	db01      	blt.n	800a1d0 <_strtod_l+0x714>
 800a1cc:	9c1a      	ldr	r4, [sp, #104]	@ 0x68
 800a1ce:	195d      	adds	r5, r3, r5
 800a1d0:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a1d2:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800a1d4:	1a5b      	subs	r3, r3, r1
 800a1d6:	2136      	movs	r1, #54	@ 0x36
 800a1d8:	189b      	adds	r3, r3, r2
 800a1da:	1a8a      	subs	r2, r1, r2
 800a1dc:	497a      	ldr	r1, [pc, #488]	@ (800a3c8 <_strtod_l+0x90c>)
 800a1de:	2001      	movs	r0, #1
 800a1e0:	468c      	mov	ip, r1
 800a1e2:	2100      	movs	r1, #0
 800a1e4:	3b01      	subs	r3, #1
 800a1e6:	9116      	str	r1, [sp, #88]	@ 0x58
 800a1e8:	9014      	str	r0, [sp, #80]	@ 0x50
 800a1ea:	4563      	cmp	r3, ip
 800a1ec:	da06      	bge.n	800a1fc <_strtod_l+0x740>
 800a1ee:	4661      	mov	r1, ip
 800a1f0:	1ac9      	subs	r1, r1, r3
 800a1f2:	1a52      	subs	r2, r2, r1
 800a1f4:	291f      	cmp	r1, #31
 800a1f6:	dc3f      	bgt.n	800a278 <_strtod_l+0x7bc>
 800a1f8:	4088      	lsls	r0, r1
 800a1fa:	9014      	str	r0, [sp, #80]	@ 0x50
 800a1fc:	18ab      	adds	r3, r5, r2
 800a1fe:	930e      	str	r3, [sp, #56]	@ 0x38
 800a200:	18a4      	adds	r4, r4, r2
 800a202:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a204:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a206:	191c      	adds	r4, r3, r4
 800a208:	002b      	movs	r3, r5
 800a20a:	4295      	cmp	r5, r2
 800a20c:	dd00      	ble.n	800a210 <_strtod_l+0x754>
 800a20e:	0013      	movs	r3, r2
 800a210:	42a3      	cmp	r3, r4
 800a212:	dd00      	ble.n	800a216 <_strtod_l+0x75a>
 800a214:	0023      	movs	r3, r4
 800a216:	2b00      	cmp	r3, #0
 800a218:	dd04      	ble.n	800a224 <_strtod_l+0x768>
 800a21a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a21c:	1ae4      	subs	r4, r4, r3
 800a21e:	1ad2      	subs	r2, r2, r3
 800a220:	920e      	str	r2, [sp, #56]	@ 0x38
 800a222:	1aed      	subs	r5, r5, r3
 800a224:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800a226:	2b00      	cmp	r3, #0
 800a228:	dd16      	ble.n	800a258 <_strtod_l+0x79c>
 800a22a:	001a      	movs	r2, r3
 800a22c:	9907      	ldr	r1, [sp, #28]
 800a22e:	9805      	ldr	r0, [sp, #20]
 800a230:	f7ff f974 	bl	800951c <__pow5mult>
 800a234:	9007      	str	r0, [sp, #28]
 800a236:	2800      	cmp	r0, #0
 800a238:	d0b3      	beq.n	800a1a2 <_strtod_l+0x6e6>
 800a23a:	0001      	movs	r1, r0
 800a23c:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 800a23e:	9805      	ldr	r0, [sp, #20]
 800a240:	f7ff f8ba 	bl	80093b8 <__multiply>
 800a244:	9013      	str	r0, [sp, #76]	@ 0x4c
 800a246:	2800      	cmp	r0, #0
 800a248:	d100      	bne.n	800a24c <_strtod_l+0x790>
 800a24a:	e671      	b.n	8009f30 <_strtod_l+0x474>
 800a24c:	991e      	ldr	r1, [sp, #120]	@ 0x78
 800a24e:	9805      	ldr	r0, [sp, #20]
 800a250:	f7fe ff96 	bl	8009180 <_Bfree>
 800a254:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800a256:	931e      	str	r3, [sp, #120]	@ 0x78
 800a258:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	dc12      	bgt.n	800a284 <_strtod_l+0x7c8>
 800a25e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a260:	2b00      	cmp	r3, #0
 800a262:	dd18      	ble.n	800a296 <_strtod_l+0x7da>
 800a264:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800a266:	9908      	ldr	r1, [sp, #32]
 800a268:	9805      	ldr	r0, [sp, #20]
 800a26a:	f7ff f957 	bl	800951c <__pow5mult>
 800a26e:	9008      	str	r0, [sp, #32]
 800a270:	2800      	cmp	r0, #0
 800a272:	d110      	bne.n	800a296 <_strtod_l+0x7da>
 800a274:	2300      	movs	r3, #0
 800a276:	e65a      	b.n	8009f2e <_strtod_l+0x472>
 800a278:	4954      	ldr	r1, [pc, #336]	@ (800a3cc <_strtod_l+0x910>)
 800a27a:	1acb      	subs	r3, r1, r3
 800a27c:	0001      	movs	r1, r0
 800a27e:	4099      	lsls	r1, r3
 800a280:	9116      	str	r1, [sp, #88]	@ 0x58
 800a282:	e7ba      	b.n	800a1fa <_strtod_l+0x73e>
 800a284:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a286:	991e      	ldr	r1, [sp, #120]	@ 0x78
 800a288:	9805      	ldr	r0, [sp, #20]
 800a28a:	f7ff f9a3 	bl	80095d4 <__lshift>
 800a28e:	901e      	str	r0, [sp, #120]	@ 0x78
 800a290:	2800      	cmp	r0, #0
 800a292:	d1e4      	bne.n	800a25e <_strtod_l+0x7a2>
 800a294:	e64c      	b.n	8009f30 <_strtod_l+0x474>
 800a296:	2c00      	cmp	r4, #0
 800a298:	dd07      	ble.n	800a2aa <_strtod_l+0x7ee>
 800a29a:	0022      	movs	r2, r4
 800a29c:	9908      	ldr	r1, [sp, #32]
 800a29e:	9805      	ldr	r0, [sp, #20]
 800a2a0:	f7ff f998 	bl	80095d4 <__lshift>
 800a2a4:	9008      	str	r0, [sp, #32]
 800a2a6:	2800      	cmp	r0, #0
 800a2a8:	d0e4      	beq.n	800a274 <_strtod_l+0x7b8>
 800a2aa:	2d00      	cmp	r5, #0
 800a2ac:	dd08      	ble.n	800a2c0 <_strtod_l+0x804>
 800a2ae:	002a      	movs	r2, r5
 800a2b0:	9907      	ldr	r1, [sp, #28]
 800a2b2:	9805      	ldr	r0, [sp, #20]
 800a2b4:	f7ff f98e 	bl	80095d4 <__lshift>
 800a2b8:	9007      	str	r0, [sp, #28]
 800a2ba:	2800      	cmp	r0, #0
 800a2bc:	d100      	bne.n	800a2c0 <_strtod_l+0x804>
 800a2be:	e637      	b.n	8009f30 <_strtod_l+0x474>
 800a2c0:	9a08      	ldr	r2, [sp, #32]
 800a2c2:	991e      	ldr	r1, [sp, #120]	@ 0x78
 800a2c4:	9805      	ldr	r0, [sp, #20]
 800a2c6:	f7ff fa0d 	bl	80096e4 <__mdiff>
 800a2ca:	9006      	str	r0, [sp, #24]
 800a2cc:	2800      	cmp	r0, #0
 800a2ce:	d100      	bne.n	800a2d2 <_strtod_l+0x816>
 800a2d0:	e62e      	b.n	8009f30 <_strtod_l+0x474>
 800a2d2:	68c3      	ldr	r3, [r0, #12]
 800a2d4:	9907      	ldr	r1, [sp, #28]
 800a2d6:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a2d8:	2300      	movs	r3, #0
 800a2da:	60c3      	str	r3, [r0, #12]
 800a2dc:	f7ff f9e6 	bl	80096ac <__mcmp>
 800a2e0:	2800      	cmp	r0, #0
 800a2e2:	da3b      	bge.n	800a35c <_strtod_l+0x8a0>
 800a2e4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800a2e6:	4333      	orrs	r3, r6
 800a2e8:	d167      	bne.n	800a3ba <_strtod_l+0x8fe>
 800a2ea:	033b      	lsls	r3, r7, #12
 800a2ec:	d165      	bne.n	800a3ba <_strtod_l+0x8fe>
 800a2ee:	22d6      	movs	r2, #214	@ 0xd6
 800a2f0:	4b37      	ldr	r3, [pc, #220]	@ (800a3d0 <_strtod_l+0x914>)
 800a2f2:	04d2      	lsls	r2, r2, #19
 800a2f4:	403b      	ands	r3, r7
 800a2f6:	4293      	cmp	r3, r2
 800a2f8:	d95f      	bls.n	800a3ba <_strtod_l+0x8fe>
 800a2fa:	9b06      	ldr	r3, [sp, #24]
 800a2fc:	695b      	ldr	r3, [r3, #20]
 800a2fe:	2b00      	cmp	r3, #0
 800a300:	d103      	bne.n	800a30a <_strtod_l+0x84e>
 800a302:	9b06      	ldr	r3, [sp, #24]
 800a304:	691b      	ldr	r3, [r3, #16]
 800a306:	2b01      	cmp	r3, #1
 800a308:	dd57      	ble.n	800a3ba <_strtod_l+0x8fe>
 800a30a:	9906      	ldr	r1, [sp, #24]
 800a30c:	2201      	movs	r2, #1
 800a30e:	9805      	ldr	r0, [sp, #20]
 800a310:	f7ff f960 	bl	80095d4 <__lshift>
 800a314:	9907      	ldr	r1, [sp, #28]
 800a316:	9006      	str	r0, [sp, #24]
 800a318:	f7ff f9c8 	bl	80096ac <__mcmp>
 800a31c:	2800      	cmp	r0, #0
 800a31e:	dd4c      	ble.n	800a3ba <_strtod_l+0x8fe>
 800a320:	4b2b      	ldr	r3, [pc, #172]	@ (800a3d0 <_strtod_l+0x914>)
 800a322:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a324:	403b      	ands	r3, r7
 800a326:	2a00      	cmp	r2, #0
 800a328:	d074      	beq.n	800a414 <_strtod_l+0x958>
 800a32a:	22d6      	movs	r2, #214	@ 0xd6
 800a32c:	04d2      	lsls	r2, r2, #19
 800a32e:	4293      	cmp	r3, r2
 800a330:	d870      	bhi.n	800a414 <_strtod_l+0x958>
 800a332:	22dc      	movs	r2, #220	@ 0xdc
 800a334:	0492      	lsls	r2, r2, #18
 800a336:	4293      	cmp	r3, r2
 800a338:	d800      	bhi.n	800a33c <_strtod_l+0x880>
 800a33a:	e695      	b.n	800a068 <_strtod_l+0x5ac>
 800a33c:	0030      	movs	r0, r6
 800a33e:	0039      	movs	r1, r7
 800a340:	4b24      	ldr	r3, [pc, #144]	@ (800a3d4 <_strtod_l+0x918>)
 800a342:	2200      	movs	r2, #0
 800a344:	f7f7 fa08 	bl	8001758 <__aeabi_dmul>
 800a348:	4b21      	ldr	r3, [pc, #132]	@ (800a3d0 <_strtod_l+0x914>)
 800a34a:	0006      	movs	r6, r0
 800a34c:	000f      	movs	r7, r1
 800a34e:	420b      	tst	r3, r1
 800a350:	d000      	beq.n	800a354 <_strtod_l+0x898>
 800a352:	e5f6      	b.n	8009f42 <_strtod_l+0x486>
 800a354:	2322      	movs	r3, #34	@ 0x22
 800a356:	9a05      	ldr	r2, [sp, #20]
 800a358:	6013      	str	r3, [r2, #0]
 800a35a:	e5f2      	b.n	8009f42 <_strtod_l+0x486>
 800a35c:	970e      	str	r7, [sp, #56]	@ 0x38
 800a35e:	2800      	cmp	r0, #0
 800a360:	d175      	bne.n	800a44e <_strtod_l+0x992>
 800a362:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800a364:	033b      	lsls	r3, r7, #12
 800a366:	0b1b      	lsrs	r3, r3, #12
 800a368:	2a00      	cmp	r2, #0
 800a36a:	d039      	beq.n	800a3e0 <_strtod_l+0x924>
 800a36c:	4a1a      	ldr	r2, [pc, #104]	@ (800a3d8 <_strtod_l+0x91c>)
 800a36e:	4293      	cmp	r3, r2
 800a370:	d138      	bne.n	800a3e4 <_strtod_l+0x928>
 800a372:	2101      	movs	r1, #1
 800a374:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a376:	4249      	negs	r1, r1
 800a378:	0032      	movs	r2, r6
 800a37a:	0008      	movs	r0, r1
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	d00b      	beq.n	800a398 <_strtod_l+0x8dc>
 800a380:	24d4      	movs	r4, #212	@ 0xd4
 800a382:	4b13      	ldr	r3, [pc, #76]	@ (800a3d0 <_strtod_l+0x914>)
 800a384:	0008      	movs	r0, r1
 800a386:	403b      	ands	r3, r7
 800a388:	04e4      	lsls	r4, r4, #19
 800a38a:	42a3      	cmp	r3, r4
 800a38c:	d804      	bhi.n	800a398 <_strtod_l+0x8dc>
 800a38e:	306c      	adds	r0, #108	@ 0x6c
 800a390:	0d1b      	lsrs	r3, r3, #20
 800a392:	1ac3      	subs	r3, r0, r3
 800a394:	4099      	lsls	r1, r3
 800a396:	0008      	movs	r0, r1
 800a398:	4282      	cmp	r2, r0
 800a39a:	d123      	bne.n	800a3e4 <_strtod_l+0x928>
 800a39c:	4b0f      	ldr	r3, [pc, #60]	@ (800a3dc <_strtod_l+0x920>)
 800a39e:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800a3a0:	4299      	cmp	r1, r3
 800a3a2:	d102      	bne.n	800a3aa <_strtod_l+0x8ee>
 800a3a4:	3201      	adds	r2, #1
 800a3a6:	d100      	bne.n	800a3aa <_strtod_l+0x8ee>
 800a3a8:	e5c2      	b.n	8009f30 <_strtod_l+0x474>
 800a3aa:	4b09      	ldr	r3, [pc, #36]	@ (800a3d0 <_strtod_l+0x914>)
 800a3ac:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a3ae:	2600      	movs	r6, #0
 800a3b0:	401a      	ands	r2, r3
 800a3b2:	0013      	movs	r3, r2
 800a3b4:	2280      	movs	r2, #128	@ 0x80
 800a3b6:	0352      	lsls	r2, r2, #13
 800a3b8:	189f      	adds	r7, r3, r2
 800a3ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	d1bd      	bne.n	800a33c <_strtod_l+0x880>
 800a3c0:	e5bf      	b.n	8009f42 <_strtod_l+0x486>
 800a3c2:	46c0      	nop			@ (mov r8, r8)
 800a3c4:	0800c1b0 	.word	0x0800c1b0
 800a3c8:	fffffc02 	.word	0xfffffc02
 800a3cc:	fffffbe2 	.word	0xfffffbe2
 800a3d0:	7ff00000 	.word	0x7ff00000
 800a3d4:	39500000 	.word	0x39500000
 800a3d8:	000fffff 	.word	0x000fffff
 800a3dc:	7fefffff 	.word	0x7fefffff
 800a3e0:	4333      	orrs	r3, r6
 800a3e2:	d09d      	beq.n	800a320 <_strtod_l+0x864>
 800a3e4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	d01c      	beq.n	800a424 <_strtod_l+0x968>
 800a3ea:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a3ec:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800a3ee:	4213      	tst	r3, r2
 800a3f0:	d0e3      	beq.n	800a3ba <_strtod_l+0x8fe>
 800a3f2:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800a3f4:	0030      	movs	r0, r6
 800a3f6:	0039      	movs	r1, r7
 800a3f8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	d016      	beq.n	800a42c <_strtod_l+0x970>
 800a3fe:	f7ff fb45 	bl	8009a8c <sulp>
 800a402:	0002      	movs	r2, r0
 800a404:	000b      	movs	r3, r1
 800a406:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800a408:	9911      	ldr	r1, [sp, #68]	@ 0x44
 800a40a:	f7f6 f9fd 	bl	8000808 <__aeabi_dadd>
 800a40e:	0006      	movs	r6, r0
 800a410:	000f      	movs	r7, r1
 800a412:	e7d2      	b.n	800a3ba <_strtod_l+0x8fe>
 800a414:	2601      	movs	r6, #1
 800a416:	4a92      	ldr	r2, [pc, #584]	@ (800a660 <_strtod_l+0xba4>)
 800a418:	4276      	negs	r6, r6
 800a41a:	189b      	adds	r3, r3, r2
 800a41c:	4a91      	ldr	r2, [pc, #580]	@ (800a664 <_strtod_l+0xba8>)
 800a41e:	431a      	orrs	r2, r3
 800a420:	0017      	movs	r7, r2
 800a422:	e7ca      	b.n	800a3ba <_strtod_l+0x8fe>
 800a424:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800a426:	4233      	tst	r3, r6
 800a428:	d0c7      	beq.n	800a3ba <_strtod_l+0x8fe>
 800a42a:	e7e2      	b.n	800a3f2 <_strtod_l+0x936>
 800a42c:	f7ff fb2e 	bl	8009a8c <sulp>
 800a430:	0002      	movs	r2, r0
 800a432:	000b      	movs	r3, r1
 800a434:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800a436:	9911      	ldr	r1, [sp, #68]	@ 0x44
 800a438:	f7f7 fc56 	bl	8001ce8 <__aeabi_dsub>
 800a43c:	2200      	movs	r2, #0
 800a43e:	2300      	movs	r3, #0
 800a440:	0006      	movs	r6, r0
 800a442:	000f      	movs	r7, r1
 800a444:	f7f6 f802 	bl	800044c <__aeabi_dcmpeq>
 800a448:	2800      	cmp	r0, #0
 800a44a:	d0b6      	beq.n	800a3ba <_strtod_l+0x8fe>
 800a44c:	e60c      	b.n	800a068 <_strtod_l+0x5ac>
 800a44e:	9907      	ldr	r1, [sp, #28]
 800a450:	9806      	ldr	r0, [sp, #24]
 800a452:	f7ff faad 	bl	80099b0 <__ratio>
 800a456:	2380      	movs	r3, #128	@ 0x80
 800a458:	2200      	movs	r2, #0
 800a45a:	05db      	lsls	r3, r3, #23
 800a45c:	0004      	movs	r4, r0
 800a45e:	000d      	movs	r5, r1
 800a460:	f7f6 f804 	bl	800046c <__aeabi_dcmple>
 800a464:	2800      	cmp	r0, #0
 800a466:	d06c      	beq.n	800a542 <_strtod_l+0xa86>
 800a468:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	d177      	bne.n	800a55e <_strtod_l+0xaa2>
 800a46e:	2e00      	cmp	r6, #0
 800a470:	d157      	bne.n	800a522 <_strtod_l+0xa66>
 800a472:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a474:	031b      	lsls	r3, r3, #12
 800a476:	d15a      	bne.n	800a52e <_strtod_l+0xa72>
 800a478:	2200      	movs	r2, #0
 800a47a:	0020      	movs	r0, r4
 800a47c:	0029      	movs	r1, r5
 800a47e:	4b7a      	ldr	r3, [pc, #488]	@ (800a668 <_strtod_l+0xbac>)
 800a480:	f7f5 ffea 	bl	8000458 <__aeabi_dcmplt>
 800a484:	2800      	cmp	r0, #0
 800a486:	d159      	bne.n	800a53c <_strtod_l+0xa80>
 800a488:	0020      	movs	r0, r4
 800a48a:	0029      	movs	r1, r5
 800a48c:	2200      	movs	r2, #0
 800a48e:	4b77      	ldr	r3, [pc, #476]	@ (800a66c <_strtod_l+0xbb0>)
 800a490:	f7f7 f962 	bl	8001758 <__aeabi_dmul>
 800a494:	0004      	movs	r4, r0
 800a496:	000d      	movs	r5, r1
 800a498:	2380      	movs	r3, #128	@ 0x80
 800a49a:	061b      	lsls	r3, r3, #24
 800a49c:	18eb      	adds	r3, r5, r3
 800a49e:	940a      	str	r4, [sp, #40]	@ 0x28
 800a4a0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a4a2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a4a4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a4a6:	9214      	str	r2, [sp, #80]	@ 0x50
 800a4a8:	9315      	str	r3, [sp, #84]	@ 0x54
 800a4aa:	4a71      	ldr	r2, [pc, #452]	@ (800a670 <_strtod_l+0xbb4>)
 800a4ac:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a4ae:	4013      	ands	r3, r2
 800a4b0:	9316      	str	r3, [sp, #88]	@ 0x58
 800a4b2:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800a4b4:	4b6f      	ldr	r3, [pc, #444]	@ (800a674 <_strtod_l+0xbb8>)
 800a4b6:	429a      	cmp	r2, r3
 800a4b8:	d000      	beq.n	800a4bc <_strtod_l+0xa00>
 800a4ba:	e087      	b.n	800a5cc <_strtod_l+0xb10>
 800a4bc:	4a6e      	ldr	r2, [pc, #440]	@ (800a678 <_strtod_l+0xbbc>)
 800a4be:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a4c0:	4694      	mov	ip, r2
 800a4c2:	4463      	add	r3, ip
 800a4c4:	001f      	movs	r7, r3
 800a4c6:	0030      	movs	r0, r6
 800a4c8:	0019      	movs	r1, r3
 800a4ca:	f7ff f9a5 	bl	8009818 <__ulp>
 800a4ce:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a4d0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a4d2:	f7f7 f941 	bl	8001758 <__aeabi_dmul>
 800a4d6:	0032      	movs	r2, r6
 800a4d8:	003b      	movs	r3, r7
 800a4da:	f7f6 f995 	bl	8000808 <__aeabi_dadd>
 800a4de:	4a64      	ldr	r2, [pc, #400]	@ (800a670 <_strtod_l+0xbb4>)
 800a4e0:	4b66      	ldr	r3, [pc, #408]	@ (800a67c <_strtod_l+0xbc0>)
 800a4e2:	0006      	movs	r6, r0
 800a4e4:	400a      	ands	r2, r1
 800a4e6:	429a      	cmp	r2, r3
 800a4e8:	d940      	bls.n	800a56c <_strtod_l+0xab0>
 800a4ea:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800a4ec:	4a64      	ldr	r2, [pc, #400]	@ (800a680 <_strtod_l+0xbc4>)
 800a4ee:	4293      	cmp	r3, r2
 800a4f0:	d103      	bne.n	800a4fa <_strtod_l+0xa3e>
 800a4f2:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800a4f4:	3301      	adds	r3, #1
 800a4f6:	d100      	bne.n	800a4fa <_strtod_l+0xa3e>
 800a4f8:	e51a      	b.n	8009f30 <_strtod_l+0x474>
 800a4fa:	2601      	movs	r6, #1
 800a4fc:	4f60      	ldr	r7, [pc, #384]	@ (800a680 <_strtod_l+0xbc4>)
 800a4fe:	4276      	negs	r6, r6
 800a500:	991e      	ldr	r1, [sp, #120]	@ 0x78
 800a502:	9805      	ldr	r0, [sp, #20]
 800a504:	f7fe fe3c 	bl	8009180 <_Bfree>
 800a508:	9908      	ldr	r1, [sp, #32]
 800a50a:	9805      	ldr	r0, [sp, #20]
 800a50c:	f7fe fe38 	bl	8009180 <_Bfree>
 800a510:	9907      	ldr	r1, [sp, #28]
 800a512:	9805      	ldr	r0, [sp, #20]
 800a514:	f7fe fe34 	bl	8009180 <_Bfree>
 800a518:	9906      	ldr	r1, [sp, #24]
 800a51a:	9805      	ldr	r0, [sp, #20]
 800a51c:	f7fe fe30 	bl	8009180 <_Bfree>
 800a520:	e617      	b.n	800a152 <_strtod_l+0x696>
 800a522:	2e01      	cmp	r6, #1
 800a524:	d103      	bne.n	800a52e <_strtod_l+0xa72>
 800a526:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a528:	2b00      	cmp	r3, #0
 800a52a:	d100      	bne.n	800a52e <_strtod_l+0xa72>
 800a52c:	e59c      	b.n	800a068 <_strtod_l+0x5ac>
 800a52e:	2300      	movs	r3, #0
 800a530:	4c54      	ldr	r4, [pc, #336]	@ (800a684 <_strtod_l+0xbc8>)
 800a532:	4d4d      	ldr	r5, [pc, #308]	@ (800a668 <_strtod_l+0xbac>)
 800a534:	930a      	str	r3, [sp, #40]	@ 0x28
 800a536:	940b      	str	r4, [sp, #44]	@ 0x2c
 800a538:	2400      	movs	r4, #0
 800a53a:	e7b2      	b.n	800a4a2 <_strtod_l+0x9e6>
 800a53c:	2400      	movs	r4, #0
 800a53e:	4d4b      	ldr	r5, [pc, #300]	@ (800a66c <_strtod_l+0xbb0>)
 800a540:	e7aa      	b.n	800a498 <_strtod_l+0x9dc>
 800a542:	0020      	movs	r0, r4
 800a544:	0029      	movs	r1, r5
 800a546:	4b49      	ldr	r3, [pc, #292]	@ (800a66c <_strtod_l+0xbb0>)
 800a548:	2200      	movs	r2, #0
 800a54a:	f7f7 f905 	bl	8001758 <__aeabi_dmul>
 800a54e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800a550:	0004      	movs	r4, r0
 800a552:	000d      	movs	r5, r1
 800a554:	2b00      	cmp	r3, #0
 800a556:	d09f      	beq.n	800a498 <_strtod_l+0x9dc>
 800a558:	940a      	str	r4, [sp, #40]	@ 0x28
 800a55a:	950b      	str	r5, [sp, #44]	@ 0x2c
 800a55c:	e7a1      	b.n	800a4a2 <_strtod_l+0x9e6>
 800a55e:	2300      	movs	r3, #0
 800a560:	4c41      	ldr	r4, [pc, #260]	@ (800a668 <_strtod_l+0xbac>)
 800a562:	0025      	movs	r5, r4
 800a564:	930a      	str	r3, [sp, #40]	@ 0x28
 800a566:	940b      	str	r4, [sp, #44]	@ 0x2c
 800a568:	001c      	movs	r4, r3
 800a56a:	e79a      	b.n	800a4a2 <_strtod_l+0x9e6>
 800a56c:	23d4      	movs	r3, #212	@ 0xd4
 800a56e:	049b      	lsls	r3, r3, #18
 800a570:	18cf      	adds	r7, r1, r3
 800a572:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a574:	9710      	str	r7, [sp, #64]	@ 0x40
 800a576:	2b00      	cmp	r3, #0
 800a578:	d1c2      	bne.n	800a500 <_strtod_l+0xa44>
 800a57a:	4b3d      	ldr	r3, [pc, #244]	@ (800a670 <_strtod_l+0xbb4>)
 800a57c:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800a57e:	403b      	ands	r3, r7
 800a580:	429a      	cmp	r2, r3
 800a582:	d1bd      	bne.n	800a500 <_strtod_l+0xa44>
 800a584:	0020      	movs	r0, r4
 800a586:	0029      	movs	r1, r5
 800a588:	f7f5 ffe6 	bl	8000558 <__aeabi_d2lz>
 800a58c:	f7f6 f81e 	bl	80005cc <__aeabi_l2d>
 800a590:	0002      	movs	r2, r0
 800a592:	000b      	movs	r3, r1
 800a594:	0020      	movs	r0, r4
 800a596:	0029      	movs	r1, r5
 800a598:	f7f7 fba6 	bl	8001ce8 <__aeabi_dsub>
 800a59c:	033c      	lsls	r4, r7, #12
 800a59e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800a5a0:	0b24      	lsrs	r4, r4, #12
 800a5a2:	4334      	orrs	r4, r6
 800a5a4:	900e      	str	r0, [sp, #56]	@ 0x38
 800a5a6:	910f      	str	r1, [sp, #60]	@ 0x3c
 800a5a8:	4a37      	ldr	r2, [pc, #220]	@ (800a688 <_strtod_l+0xbcc>)
 800a5aa:	431c      	orrs	r4, r3
 800a5ac:	d052      	beq.n	800a654 <_strtod_l+0xb98>
 800a5ae:	4b37      	ldr	r3, [pc, #220]	@ (800a68c <_strtod_l+0xbd0>)
 800a5b0:	f7f5 ff52 	bl	8000458 <__aeabi_dcmplt>
 800a5b4:	2800      	cmp	r0, #0
 800a5b6:	d000      	beq.n	800a5ba <_strtod_l+0xafe>
 800a5b8:	e4c3      	b.n	8009f42 <_strtod_l+0x486>
 800a5ba:	980e      	ldr	r0, [sp, #56]	@ 0x38
 800a5bc:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800a5be:	4a34      	ldr	r2, [pc, #208]	@ (800a690 <_strtod_l+0xbd4>)
 800a5c0:	4b2a      	ldr	r3, [pc, #168]	@ (800a66c <_strtod_l+0xbb0>)
 800a5c2:	f7f5 ff5d 	bl	8000480 <__aeabi_dcmpgt>
 800a5c6:	2800      	cmp	r0, #0
 800a5c8:	d09a      	beq.n	800a500 <_strtod_l+0xa44>
 800a5ca:	e4ba      	b.n	8009f42 <_strtod_l+0x486>
 800a5cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	d02a      	beq.n	800a628 <_strtod_l+0xb6c>
 800a5d2:	23d4      	movs	r3, #212	@ 0xd4
 800a5d4:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800a5d6:	04db      	lsls	r3, r3, #19
 800a5d8:	429a      	cmp	r2, r3
 800a5da:	d825      	bhi.n	800a628 <_strtod_l+0xb6c>
 800a5dc:	0020      	movs	r0, r4
 800a5de:	0029      	movs	r1, r5
 800a5e0:	4a2c      	ldr	r2, [pc, #176]	@ (800a694 <_strtod_l+0xbd8>)
 800a5e2:	4b2d      	ldr	r3, [pc, #180]	@ (800a698 <_strtod_l+0xbdc>)
 800a5e4:	f7f5 ff42 	bl	800046c <__aeabi_dcmple>
 800a5e8:	2800      	cmp	r0, #0
 800a5ea:	d016      	beq.n	800a61a <_strtod_l+0xb5e>
 800a5ec:	0020      	movs	r0, r4
 800a5ee:	0029      	movs	r1, r5
 800a5f0:	f7f5 ff94 	bl	800051c <__aeabi_d2uiz>
 800a5f4:	2800      	cmp	r0, #0
 800a5f6:	d100      	bne.n	800a5fa <_strtod_l+0xb3e>
 800a5f8:	3001      	adds	r0, #1
 800a5fa:	f7f7 ff9d 	bl	8002538 <__aeabi_ui2d>
 800a5fe:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800a600:	0004      	movs	r4, r0
 800a602:	000d      	movs	r5, r1
 800a604:	2b00      	cmp	r3, #0
 800a606:	d122      	bne.n	800a64e <_strtod_l+0xb92>
 800a608:	2380      	movs	r3, #128	@ 0x80
 800a60a:	061b      	lsls	r3, r3, #24
 800a60c:	18cb      	adds	r3, r1, r3
 800a60e:	9018      	str	r0, [sp, #96]	@ 0x60
 800a610:	9319      	str	r3, [sp, #100]	@ 0x64
 800a612:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 800a614:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a616:	9214      	str	r2, [sp, #80]	@ 0x50
 800a618:	9315      	str	r3, [sp, #84]	@ 0x54
 800a61a:	22d6      	movs	r2, #214	@ 0xd6
 800a61c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800a61e:	04d2      	lsls	r2, r2, #19
 800a620:	189b      	adds	r3, r3, r2
 800a622:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800a624:	1a9b      	subs	r3, r3, r2
 800a626:	9315      	str	r3, [sp, #84]	@ 0x54
 800a628:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800a62a:	9911      	ldr	r1, [sp, #68]	@ 0x44
 800a62c:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 800a62e:	9f15      	ldr	r7, [sp, #84]	@ 0x54
 800a630:	f7ff f8f2 	bl	8009818 <__ulp>
 800a634:	0002      	movs	r2, r0
 800a636:	000b      	movs	r3, r1
 800a638:	0030      	movs	r0, r6
 800a63a:	0039      	movs	r1, r7
 800a63c:	f7f7 f88c 	bl	8001758 <__aeabi_dmul>
 800a640:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 800a642:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800a644:	f7f6 f8e0 	bl	8000808 <__aeabi_dadd>
 800a648:	0006      	movs	r6, r0
 800a64a:	000f      	movs	r7, r1
 800a64c:	e791      	b.n	800a572 <_strtod_l+0xab6>
 800a64e:	9418      	str	r4, [sp, #96]	@ 0x60
 800a650:	9519      	str	r5, [sp, #100]	@ 0x64
 800a652:	e7de      	b.n	800a612 <_strtod_l+0xb56>
 800a654:	4b11      	ldr	r3, [pc, #68]	@ (800a69c <_strtod_l+0xbe0>)
 800a656:	980e      	ldr	r0, [sp, #56]	@ 0x38
 800a658:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800a65a:	f7f5 fefd 	bl	8000458 <__aeabi_dcmplt>
 800a65e:	e7b2      	b.n	800a5c6 <_strtod_l+0xb0a>
 800a660:	fff00000 	.word	0xfff00000
 800a664:	000fffff 	.word	0x000fffff
 800a668:	3ff00000 	.word	0x3ff00000
 800a66c:	3fe00000 	.word	0x3fe00000
 800a670:	7ff00000 	.word	0x7ff00000
 800a674:	7fe00000 	.word	0x7fe00000
 800a678:	fcb00000 	.word	0xfcb00000
 800a67c:	7c9fffff 	.word	0x7c9fffff
 800a680:	7fefffff 	.word	0x7fefffff
 800a684:	bff00000 	.word	0xbff00000
 800a688:	94a03595 	.word	0x94a03595
 800a68c:	3fdfffff 	.word	0x3fdfffff
 800a690:	35afe535 	.word	0x35afe535
 800a694:	ffc00000 	.word	0xffc00000
 800a698:	41dfffff 	.word	0x41dfffff
 800a69c:	3fcfffff 	.word	0x3fcfffff

0800a6a0 <_strtod_r>:
 800a6a0:	b510      	push	{r4, lr}
 800a6a2:	4b02      	ldr	r3, [pc, #8]	@ (800a6ac <_strtod_r+0xc>)
 800a6a4:	f7ff fa0a 	bl	8009abc <_strtod_l>
 800a6a8:	bd10      	pop	{r4, pc}
 800a6aa:	46c0      	nop			@ (mov r8, r8)
 800a6ac:	20000078 	.word	0x20000078

0800a6b0 <_strtol_l.constprop.0>:
 800a6b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a6b2:	b085      	sub	sp, #20
 800a6b4:	0017      	movs	r7, r2
 800a6b6:	001e      	movs	r6, r3
 800a6b8:	9003      	str	r0, [sp, #12]
 800a6ba:	9101      	str	r1, [sp, #4]
 800a6bc:	2b24      	cmp	r3, #36	@ 0x24
 800a6be:	d844      	bhi.n	800a74a <_strtol_l.constprop.0+0x9a>
 800a6c0:	000c      	movs	r4, r1
 800a6c2:	2b01      	cmp	r3, #1
 800a6c4:	d041      	beq.n	800a74a <_strtol_l.constprop.0+0x9a>
 800a6c6:	4b3d      	ldr	r3, [pc, #244]	@ (800a7bc <_strtol_l.constprop.0+0x10c>)
 800a6c8:	2208      	movs	r2, #8
 800a6ca:	469c      	mov	ip, r3
 800a6cc:	0023      	movs	r3, r4
 800a6ce:	4661      	mov	r1, ip
 800a6d0:	781d      	ldrb	r5, [r3, #0]
 800a6d2:	3401      	adds	r4, #1
 800a6d4:	5d48      	ldrb	r0, [r1, r5]
 800a6d6:	0001      	movs	r1, r0
 800a6d8:	4011      	ands	r1, r2
 800a6da:	4210      	tst	r0, r2
 800a6dc:	d1f6      	bne.n	800a6cc <_strtol_l.constprop.0+0x1c>
 800a6de:	2d2d      	cmp	r5, #45	@ 0x2d
 800a6e0:	d13a      	bne.n	800a758 <_strtol_l.constprop.0+0xa8>
 800a6e2:	7825      	ldrb	r5, [r4, #0]
 800a6e4:	1c9c      	adds	r4, r3, #2
 800a6e6:	2301      	movs	r3, #1
 800a6e8:	9300      	str	r3, [sp, #0]
 800a6ea:	2210      	movs	r2, #16
 800a6ec:	0033      	movs	r3, r6
 800a6ee:	4393      	bics	r3, r2
 800a6f0:	d109      	bne.n	800a706 <_strtol_l.constprop.0+0x56>
 800a6f2:	2d30      	cmp	r5, #48	@ 0x30
 800a6f4:	d136      	bne.n	800a764 <_strtol_l.constprop.0+0xb4>
 800a6f6:	2120      	movs	r1, #32
 800a6f8:	7823      	ldrb	r3, [r4, #0]
 800a6fa:	438b      	bics	r3, r1
 800a6fc:	2b58      	cmp	r3, #88	@ 0x58
 800a6fe:	d131      	bne.n	800a764 <_strtol_l.constprop.0+0xb4>
 800a700:	0016      	movs	r6, r2
 800a702:	7865      	ldrb	r5, [r4, #1]
 800a704:	3402      	adds	r4, #2
 800a706:	4a2e      	ldr	r2, [pc, #184]	@ (800a7c0 <_strtol_l.constprop.0+0x110>)
 800a708:	9b00      	ldr	r3, [sp, #0]
 800a70a:	4694      	mov	ip, r2
 800a70c:	4463      	add	r3, ip
 800a70e:	0031      	movs	r1, r6
 800a710:	0018      	movs	r0, r3
 800a712:	9302      	str	r3, [sp, #8]
 800a714:	f7f5 fd9a 	bl	800024c <__aeabi_uidivmod>
 800a718:	2200      	movs	r2, #0
 800a71a:	4684      	mov	ip, r0
 800a71c:	0010      	movs	r0, r2
 800a71e:	002b      	movs	r3, r5
 800a720:	3b30      	subs	r3, #48	@ 0x30
 800a722:	2b09      	cmp	r3, #9
 800a724:	d825      	bhi.n	800a772 <_strtol_l.constprop.0+0xc2>
 800a726:	001d      	movs	r5, r3
 800a728:	42ae      	cmp	r6, r5
 800a72a:	dd31      	ble.n	800a790 <_strtol_l.constprop.0+0xe0>
 800a72c:	1c53      	adds	r3, r2, #1
 800a72e:	d009      	beq.n	800a744 <_strtol_l.constprop.0+0x94>
 800a730:	2201      	movs	r2, #1
 800a732:	4252      	negs	r2, r2
 800a734:	4584      	cmp	ip, r0
 800a736:	d305      	bcc.n	800a744 <_strtol_l.constprop.0+0x94>
 800a738:	d101      	bne.n	800a73e <_strtol_l.constprop.0+0x8e>
 800a73a:	42a9      	cmp	r1, r5
 800a73c:	db25      	blt.n	800a78a <_strtol_l.constprop.0+0xda>
 800a73e:	2201      	movs	r2, #1
 800a740:	4370      	muls	r0, r6
 800a742:	1828      	adds	r0, r5, r0
 800a744:	7825      	ldrb	r5, [r4, #0]
 800a746:	3401      	adds	r4, #1
 800a748:	e7e9      	b.n	800a71e <_strtol_l.constprop.0+0x6e>
 800a74a:	f7fd fd11 	bl	8008170 <__errno>
 800a74e:	2316      	movs	r3, #22
 800a750:	6003      	str	r3, [r0, #0]
 800a752:	2000      	movs	r0, #0
 800a754:	b005      	add	sp, #20
 800a756:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a758:	9100      	str	r1, [sp, #0]
 800a75a:	2d2b      	cmp	r5, #43	@ 0x2b
 800a75c:	d1c5      	bne.n	800a6ea <_strtol_l.constprop.0+0x3a>
 800a75e:	7825      	ldrb	r5, [r4, #0]
 800a760:	1c9c      	adds	r4, r3, #2
 800a762:	e7c2      	b.n	800a6ea <_strtol_l.constprop.0+0x3a>
 800a764:	2e00      	cmp	r6, #0
 800a766:	d1ce      	bne.n	800a706 <_strtol_l.constprop.0+0x56>
 800a768:	3608      	adds	r6, #8
 800a76a:	2d30      	cmp	r5, #48	@ 0x30
 800a76c:	d0cb      	beq.n	800a706 <_strtol_l.constprop.0+0x56>
 800a76e:	3602      	adds	r6, #2
 800a770:	e7c9      	b.n	800a706 <_strtol_l.constprop.0+0x56>
 800a772:	002b      	movs	r3, r5
 800a774:	3b41      	subs	r3, #65	@ 0x41
 800a776:	2b19      	cmp	r3, #25
 800a778:	d801      	bhi.n	800a77e <_strtol_l.constprop.0+0xce>
 800a77a:	3d37      	subs	r5, #55	@ 0x37
 800a77c:	e7d4      	b.n	800a728 <_strtol_l.constprop.0+0x78>
 800a77e:	002b      	movs	r3, r5
 800a780:	3b61      	subs	r3, #97	@ 0x61
 800a782:	2b19      	cmp	r3, #25
 800a784:	d804      	bhi.n	800a790 <_strtol_l.constprop.0+0xe0>
 800a786:	3d57      	subs	r5, #87	@ 0x57
 800a788:	e7ce      	b.n	800a728 <_strtol_l.constprop.0+0x78>
 800a78a:	2201      	movs	r2, #1
 800a78c:	4252      	negs	r2, r2
 800a78e:	e7d9      	b.n	800a744 <_strtol_l.constprop.0+0x94>
 800a790:	1c53      	adds	r3, r2, #1
 800a792:	d108      	bne.n	800a7a6 <_strtol_l.constprop.0+0xf6>
 800a794:	2322      	movs	r3, #34	@ 0x22
 800a796:	9a03      	ldr	r2, [sp, #12]
 800a798:	9802      	ldr	r0, [sp, #8]
 800a79a:	6013      	str	r3, [r2, #0]
 800a79c:	2f00      	cmp	r7, #0
 800a79e:	d0d9      	beq.n	800a754 <_strtol_l.constprop.0+0xa4>
 800a7a0:	1e63      	subs	r3, r4, #1
 800a7a2:	9301      	str	r3, [sp, #4]
 800a7a4:	e007      	b.n	800a7b6 <_strtol_l.constprop.0+0x106>
 800a7a6:	9b00      	ldr	r3, [sp, #0]
 800a7a8:	2b00      	cmp	r3, #0
 800a7aa:	d000      	beq.n	800a7ae <_strtol_l.constprop.0+0xfe>
 800a7ac:	4240      	negs	r0, r0
 800a7ae:	2f00      	cmp	r7, #0
 800a7b0:	d0d0      	beq.n	800a754 <_strtol_l.constprop.0+0xa4>
 800a7b2:	2a00      	cmp	r2, #0
 800a7b4:	d1f4      	bne.n	800a7a0 <_strtol_l.constprop.0+0xf0>
 800a7b6:	9b01      	ldr	r3, [sp, #4]
 800a7b8:	603b      	str	r3, [r7, #0]
 800a7ba:	e7cb      	b.n	800a754 <_strtol_l.constprop.0+0xa4>
 800a7bc:	0800c1d9 	.word	0x0800c1d9
 800a7c0:	7fffffff 	.word	0x7fffffff

0800a7c4 <_strtol_r>:
 800a7c4:	b510      	push	{r4, lr}
 800a7c6:	f7ff ff73 	bl	800a6b0 <_strtol_l.constprop.0>
 800a7ca:	bd10      	pop	{r4, pc}

0800a7cc <__ssputs_r>:
 800a7cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a7ce:	688e      	ldr	r6, [r1, #8]
 800a7d0:	b085      	sub	sp, #20
 800a7d2:	001f      	movs	r7, r3
 800a7d4:	000c      	movs	r4, r1
 800a7d6:	680b      	ldr	r3, [r1, #0]
 800a7d8:	9002      	str	r0, [sp, #8]
 800a7da:	9203      	str	r2, [sp, #12]
 800a7dc:	42be      	cmp	r6, r7
 800a7de:	d830      	bhi.n	800a842 <__ssputs_r+0x76>
 800a7e0:	210c      	movs	r1, #12
 800a7e2:	5e62      	ldrsh	r2, [r4, r1]
 800a7e4:	2190      	movs	r1, #144	@ 0x90
 800a7e6:	00c9      	lsls	r1, r1, #3
 800a7e8:	420a      	tst	r2, r1
 800a7ea:	d028      	beq.n	800a83e <__ssputs_r+0x72>
 800a7ec:	2003      	movs	r0, #3
 800a7ee:	6921      	ldr	r1, [r4, #16]
 800a7f0:	1a5b      	subs	r3, r3, r1
 800a7f2:	9301      	str	r3, [sp, #4]
 800a7f4:	6963      	ldr	r3, [r4, #20]
 800a7f6:	4343      	muls	r3, r0
 800a7f8:	9801      	ldr	r0, [sp, #4]
 800a7fa:	0fdd      	lsrs	r5, r3, #31
 800a7fc:	18ed      	adds	r5, r5, r3
 800a7fe:	1c7b      	adds	r3, r7, #1
 800a800:	181b      	adds	r3, r3, r0
 800a802:	106d      	asrs	r5, r5, #1
 800a804:	42ab      	cmp	r3, r5
 800a806:	d900      	bls.n	800a80a <__ssputs_r+0x3e>
 800a808:	001d      	movs	r5, r3
 800a80a:	0552      	lsls	r2, r2, #21
 800a80c:	d528      	bpl.n	800a860 <__ssputs_r+0x94>
 800a80e:	0029      	movs	r1, r5
 800a810:	9802      	ldr	r0, [sp, #8]
 800a812:	f7fe fbe1 	bl	8008fd8 <_malloc_r>
 800a816:	1e06      	subs	r6, r0, #0
 800a818:	d02c      	beq.n	800a874 <__ssputs_r+0xa8>
 800a81a:	9a01      	ldr	r2, [sp, #4]
 800a81c:	6921      	ldr	r1, [r4, #16]
 800a81e:	f000 fa1b 	bl	800ac58 <memcpy>
 800a822:	89a2      	ldrh	r2, [r4, #12]
 800a824:	4b18      	ldr	r3, [pc, #96]	@ (800a888 <__ssputs_r+0xbc>)
 800a826:	401a      	ands	r2, r3
 800a828:	2380      	movs	r3, #128	@ 0x80
 800a82a:	4313      	orrs	r3, r2
 800a82c:	81a3      	strh	r3, [r4, #12]
 800a82e:	9b01      	ldr	r3, [sp, #4]
 800a830:	6126      	str	r6, [r4, #16]
 800a832:	18f6      	adds	r6, r6, r3
 800a834:	6026      	str	r6, [r4, #0]
 800a836:	003e      	movs	r6, r7
 800a838:	6165      	str	r5, [r4, #20]
 800a83a:	1aed      	subs	r5, r5, r3
 800a83c:	60a5      	str	r5, [r4, #8]
 800a83e:	42be      	cmp	r6, r7
 800a840:	d900      	bls.n	800a844 <__ssputs_r+0x78>
 800a842:	003e      	movs	r6, r7
 800a844:	0032      	movs	r2, r6
 800a846:	9903      	ldr	r1, [sp, #12]
 800a848:	6820      	ldr	r0, [r4, #0]
 800a84a:	f000 f9ce 	bl	800abea <memmove>
 800a84e:	2000      	movs	r0, #0
 800a850:	68a3      	ldr	r3, [r4, #8]
 800a852:	1b9b      	subs	r3, r3, r6
 800a854:	60a3      	str	r3, [r4, #8]
 800a856:	6823      	ldr	r3, [r4, #0]
 800a858:	199b      	adds	r3, r3, r6
 800a85a:	6023      	str	r3, [r4, #0]
 800a85c:	b005      	add	sp, #20
 800a85e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a860:	002a      	movs	r2, r5
 800a862:	9802      	ldr	r0, [sp, #8]
 800a864:	f000 fdc0 	bl	800b3e8 <_realloc_r>
 800a868:	1e06      	subs	r6, r0, #0
 800a86a:	d1e0      	bne.n	800a82e <__ssputs_r+0x62>
 800a86c:	6921      	ldr	r1, [r4, #16]
 800a86e:	9802      	ldr	r0, [sp, #8]
 800a870:	f7fe fb3c 	bl	8008eec <_free_r>
 800a874:	230c      	movs	r3, #12
 800a876:	2001      	movs	r0, #1
 800a878:	9a02      	ldr	r2, [sp, #8]
 800a87a:	4240      	negs	r0, r0
 800a87c:	6013      	str	r3, [r2, #0]
 800a87e:	89a2      	ldrh	r2, [r4, #12]
 800a880:	3334      	adds	r3, #52	@ 0x34
 800a882:	4313      	orrs	r3, r2
 800a884:	81a3      	strh	r3, [r4, #12]
 800a886:	e7e9      	b.n	800a85c <__ssputs_r+0x90>
 800a888:	fffffb7f 	.word	0xfffffb7f

0800a88c <_svfiprintf_r>:
 800a88c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a88e:	b0a1      	sub	sp, #132	@ 0x84
 800a890:	9003      	str	r0, [sp, #12]
 800a892:	001d      	movs	r5, r3
 800a894:	898b      	ldrh	r3, [r1, #12]
 800a896:	000f      	movs	r7, r1
 800a898:	0016      	movs	r6, r2
 800a89a:	061b      	lsls	r3, r3, #24
 800a89c:	d511      	bpl.n	800a8c2 <_svfiprintf_r+0x36>
 800a89e:	690b      	ldr	r3, [r1, #16]
 800a8a0:	2b00      	cmp	r3, #0
 800a8a2:	d10e      	bne.n	800a8c2 <_svfiprintf_r+0x36>
 800a8a4:	2140      	movs	r1, #64	@ 0x40
 800a8a6:	f7fe fb97 	bl	8008fd8 <_malloc_r>
 800a8aa:	6038      	str	r0, [r7, #0]
 800a8ac:	6138      	str	r0, [r7, #16]
 800a8ae:	2800      	cmp	r0, #0
 800a8b0:	d105      	bne.n	800a8be <_svfiprintf_r+0x32>
 800a8b2:	230c      	movs	r3, #12
 800a8b4:	9a03      	ldr	r2, [sp, #12]
 800a8b6:	6013      	str	r3, [r2, #0]
 800a8b8:	2001      	movs	r0, #1
 800a8ba:	4240      	negs	r0, r0
 800a8bc:	e0cf      	b.n	800aa5e <_svfiprintf_r+0x1d2>
 800a8be:	2340      	movs	r3, #64	@ 0x40
 800a8c0:	617b      	str	r3, [r7, #20]
 800a8c2:	2300      	movs	r3, #0
 800a8c4:	ac08      	add	r4, sp, #32
 800a8c6:	6163      	str	r3, [r4, #20]
 800a8c8:	3320      	adds	r3, #32
 800a8ca:	7663      	strb	r3, [r4, #25]
 800a8cc:	3310      	adds	r3, #16
 800a8ce:	76a3      	strb	r3, [r4, #26]
 800a8d0:	9507      	str	r5, [sp, #28]
 800a8d2:	0035      	movs	r5, r6
 800a8d4:	782b      	ldrb	r3, [r5, #0]
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	d001      	beq.n	800a8de <_svfiprintf_r+0x52>
 800a8da:	2b25      	cmp	r3, #37	@ 0x25
 800a8dc:	d148      	bne.n	800a970 <_svfiprintf_r+0xe4>
 800a8de:	1bab      	subs	r3, r5, r6
 800a8e0:	9305      	str	r3, [sp, #20]
 800a8e2:	42b5      	cmp	r5, r6
 800a8e4:	d00b      	beq.n	800a8fe <_svfiprintf_r+0x72>
 800a8e6:	0032      	movs	r2, r6
 800a8e8:	0039      	movs	r1, r7
 800a8ea:	9803      	ldr	r0, [sp, #12]
 800a8ec:	f7ff ff6e 	bl	800a7cc <__ssputs_r>
 800a8f0:	3001      	adds	r0, #1
 800a8f2:	d100      	bne.n	800a8f6 <_svfiprintf_r+0x6a>
 800a8f4:	e0ae      	b.n	800aa54 <_svfiprintf_r+0x1c8>
 800a8f6:	6963      	ldr	r3, [r4, #20]
 800a8f8:	9a05      	ldr	r2, [sp, #20]
 800a8fa:	189b      	adds	r3, r3, r2
 800a8fc:	6163      	str	r3, [r4, #20]
 800a8fe:	782b      	ldrb	r3, [r5, #0]
 800a900:	2b00      	cmp	r3, #0
 800a902:	d100      	bne.n	800a906 <_svfiprintf_r+0x7a>
 800a904:	e0a6      	b.n	800aa54 <_svfiprintf_r+0x1c8>
 800a906:	2201      	movs	r2, #1
 800a908:	2300      	movs	r3, #0
 800a90a:	4252      	negs	r2, r2
 800a90c:	6062      	str	r2, [r4, #4]
 800a90e:	a904      	add	r1, sp, #16
 800a910:	3254      	adds	r2, #84	@ 0x54
 800a912:	1852      	adds	r2, r2, r1
 800a914:	1c6e      	adds	r6, r5, #1
 800a916:	6023      	str	r3, [r4, #0]
 800a918:	60e3      	str	r3, [r4, #12]
 800a91a:	60a3      	str	r3, [r4, #8]
 800a91c:	7013      	strb	r3, [r2, #0]
 800a91e:	65a3      	str	r3, [r4, #88]	@ 0x58
 800a920:	4b54      	ldr	r3, [pc, #336]	@ (800aa74 <_svfiprintf_r+0x1e8>)
 800a922:	2205      	movs	r2, #5
 800a924:	0018      	movs	r0, r3
 800a926:	7831      	ldrb	r1, [r6, #0]
 800a928:	9305      	str	r3, [sp, #20]
 800a92a:	f7fd fc4e 	bl	80081ca <memchr>
 800a92e:	1c75      	adds	r5, r6, #1
 800a930:	2800      	cmp	r0, #0
 800a932:	d11f      	bne.n	800a974 <_svfiprintf_r+0xe8>
 800a934:	6822      	ldr	r2, [r4, #0]
 800a936:	06d3      	lsls	r3, r2, #27
 800a938:	d504      	bpl.n	800a944 <_svfiprintf_r+0xb8>
 800a93a:	2353      	movs	r3, #83	@ 0x53
 800a93c:	a904      	add	r1, sp, #16
 800a93e:	185b      	adds	r3, r3, r1
 800a940:	2120      	movs	r1, #32
 800a942:	7019      	strb	r1, [r3, #0]
 800a944:	0713      	lsls	r3, r2, #28
 800a946:	d504      	bpl.n	800a952 <_svfiprintf_r+0xc6>
 800a948:	2353      	movs	r3, #83	@ 0x53
 800a94a:	a904      	add	r1, sp, #16
 800a94c:	185b      	adds	r3, r3, r1
 800a94e:	212b      	movs	r1, #43	@ 0x2b
 800a950:	7019      	strb	r1, [r3, #0]
 800a952:	7833      	ldrb	r3, [r6, #0]
 800a954:	2b2a      	cmp	r3, #42	@ 0x2a
 800a956:	d016      	beq.n	800a986 <_svfiprintf_r+0xfa>
 800a958:	0035      	movs	r5, r6
 800a95a:	2100      	movs	r1, #0
 800a95c:	200a      	movs	r0, #10
 800a95e:	68e3      	ldr	r3, [r4, #12]
 800a960:	782a      	ldrb	r2, [r5, #0]
 800a962:	1c6e      	adds	r6, r5, #1
 800a964:	3a30      	subs	r2, #48	@ 0x30
 800a966:	2a09      	cmp	r2, #9
 800a968:	d950      	bls.n	800aa0c <_svfiprintf_r+0x180>
 800a96a:	2900      	cmp	r1, #0
 800a96c:	d111      	bne.n	800a992 <_svfiprintf_r+0x106>
 800a96e:	e017      	b.n	800a9a0 <_svfiprintf_r+0x114>
 800a970:	3501      	adds	r5, #1
 800a972:	e7af      	b.n	800a8d4 <_svfiprintf_r+0x48>
 800a974:	9b05      	ldr	r3, [sp, #20]
 800a976:	6822      	ldr	r2, [r4, #0]
 800a978:	1ac0      	subs	r0, r0, r3
 800a97a:	2301      	movs	r3, #1
 800a97c:	4083      	lsls	r3, r0
 800a97e:	4313      	orrs	r3, r2
 800a980:	002e      	movs	r6, r5
 800a982:	6023      	str	r3, [r4, #0]
 800a984:	e7cc      	b.n	800a920 <_svfiprintf_r+0x94>
 800a986:	9b07      	ldr	r3, [sp, #28]
 800a988:	1d19      	adds	r1, r3, #4
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	9107      	str	r1, [sp, #28]
 800a98e:	2b00      	cmp	r3, #0
 800a990:	db01      	blt.n	800a996 <_svfiprintf_r+0x10a>
 800a992:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a994:	e004      	b.n	800a9a0 <_svfiprintf_r+0x114>
 800a996:	425b      	negs	r3, r3
 800a998:	60e3      	str	r3, [r4, #12]
 800a99a:	2302      	movs	r3, #2
 800a99c:	4313      	orrs	r3, r2
 800a99e:	6023      	str	r3, [r4, #0]
 800a9a0:	782b      	ldrb	r3, [r5, #0]
 800a9a2:	2b2e      	cmp	r3, #46	@ 0x2e
 800a9a4:	d10c      	bne.n	800a9c0 <_svfiprintf_r+0x134>
 800a9a6:	786b      	ldrb	r3, [r5, #1]
 800a9a8:	2b2a      	cmp	r3, #42	@ 0x2a
 800a9aa:	d134      	bne.n	800aa16 <_svfiprintf_r+0x18a>
 800a9ac:	9b07      	ldr	r3, [sp, #28]
 800a9ae:	3502      	adds	r5, #2
 800a9b0:	1d1a      	adds	r2, r3, #4
 800a9b2:	681b      	ldr	r3, [r3, #0]
 800a9b4:	9207      	str	r2, [sp, #28]
 800a9b6:	2b00      	cmp	r3, #0
 800a9b8:	da01      	bge.n	800a9be <_svfiprintf_r+0x132>
 800a9ba:	2301      	movs	r3, #1
 800a9bc:	425b      	negs	r3, r3
 800a9be:	9309      	str	r3, [sp, #36]	@ 0x24
 800a9c0:	4e2d      	ldr	r6, [pc, #180]	@ (800aa78 <_svfiprintf_r+0x1ec>)
 800a9c2:	2203      	movs	r2, #3
 800a9c4:	0030      	movs	r0, r6
 800a9c6:	7829      	ldrb	r1, [r5, #0]
 800a9c8:	f7fd fbff 	bl	80081ca <memchr>
 800a9cc:	2800      	cmp	r0, #0
 800a9ce:	d006      	beq.n	800a9de <_svfiprintf_r+0x152>
 800a9d0:	2340      	movs	r3, #64	@ 0x40
 800a9d2:	1b80      	subs	r0, r0, r6
 800a9d4:	4083      	lsls	r3, r0
 800a9d6:	6822      	ldr	r2, [r4, #0]
 800a9d8:	3501      	adds	r5, #1
 800a9da:	4313      	orrs	r3, r2
 800a9dc:	6023      	str	r3, [r4, #0]
 800a9de:	7829      	ldrb	r1, [r5, #0]
 800a9e0:	2206      	movs	r2, #6
 800a9e2:	4826      	ldr	r0, [pc, #152]	@ (800aa7c <_svfiprintf_r+0x1f0>)
 800a9e4:	1c6e      	adds	r6, r5, #1
 800a9e6:	7621      	strb	r1, [r4, #24]
 800a9e8:	f7fd fbef 	bl	80081ca <memchr>
 800a9ec:	2800      	cmp	r0, #0
 800a9ee:	d038      	beq.n	800aa62 <_svfiprintf_r+0x1d6>
 800a9f0:	4b23      	ldr	r3, [pc, #140]	@ (800aa80 <_svfiprintf_r+0x1f4>)
 800a9f2:	2b00      	cmp	r3, #0
 800a9f4:	d122      	bne.n	800aa3c <_svfiprintf_r+0x1b0>
 800a9f6:	2207      	movs	r2, #7
 800a9f8:	9b07      	ldr	r3, [sp, #28]
 800a9fa:	3307      	adds	r3, #7
 800a9fc:	4393      	bics	r3, r2
 800a9fe:	3308      	adds	r3, #8
 800aa00:	9307      	str	r3, [sp, #28]
 800aa02:	6963      	ldr	r3, [r4, #20]
 800aa04:	9a04      	ldr	r2, [sp, #16]
 800aa06:	189b      	adds	r3, r3, r2
 800aa08:	6163      	str	r3, [r4, #20]
 800aa0a:	e762      	b.n	800a8d2 <_svfiprintf_r+0x46>
 800aa0c:	4343      	muls	r3, r0
 800aa0e:	0035      	movs	r5, r6
 800aa10:	2101      	movs	r1, #1
 800aa12:	189b      	adds	r3, r3, r2
 800aa14:	e7a4      	b.n	800a960 <_svfiprintf_r+0xd4>
 800aa16:	2300      	movs	r3, #0
 800aa18:	200a      	movs	r0, #10
 800aa1a:	0019      	movs	r1, r3
 800aa1c:	3501      	adds	r5, #1
 800aa1e:	6063      	str	r3, [r4, #4]
 800aa20:	782a      	ldrb	r2, [r5, #0]
 800aa22:	1c6e      	adds	r6, r5, #1
 800aa24:	3a30      	subs	r2, #48	@ 0x30
 800aa26:	2a09      	cmp	r2, #9
 800aa28:	d903      	bls.n	800aa32 <_svfiprintf_r+0x1a6>
 800aa2a:	2b00      	cmp	r3, #0
 800aa2c:	d0c8      	beq.n	800a9c0 <_svfiprintf_r+0x134>
 800aa2e:	9109      	str	r1, [sp, #36]	@ 0x24
 800aa30:	e7c6      	b.n	800a9c0 <_svfiprintf_r+0x134>
 800aa32:	4341      	muls	r1, r0
 800aa34:	0035      	movs	r5, r6
 800aa36:	2301      	movs	r3, #1
 800aa38:	1889      	adds	r1, r1, r2
 800aa3a:	e7f1      	b.n	800aa20 <_svfiprintf_r+0x194>
 800aa3c:	aa07      	add	r2, sp, #28
 800aa3e:	9200      	str	r2, [sp, #0]
 800aa40:	0021      	movs	r1, r4
 800aa42:	003a      	movs	r2, r7
 800aa44:	4b0f      	ldr	r3, [pc, #60]	@ (800aa84 <_svfiprintf_r+0x1f8>)
 800aa46:	9803      	ldr	r0, [sp, #12]
 800aa48:	f7fc fc3e 	bl	80072c8 <_printf_float>
 800aa4c:	9004      	str	r0, [sp, #16]
 800aa4e:	9b04      	ldr	r3, [sp, #16]
 800aa50:	3301      	adds	r3, #1
 800aa52:	d1d6      	bne.n	800aa02 <_svfiprintf_r+0x176>
 800aa54:	89bb      	ldrh	r3, [r7, #12]
 800aa56:	980d      	ldr	r0, [sp, #52]	@ 0x34
 800aa58:	065b      	lsls	r3, r3, #25
 800aa5a:	d500      	bpl.n	800aa5e <_svfiprintf_r+0x1d2>
 800aa5c:	e72c      	b.n	800a8b8 <_svfiprintf_r+0x2c>
 800aa5e:	b021      	add	sp, #132	@ 0x84
 800aa60:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aa62:	aa07      	add	r2, sp, #28
 800aa64:	9200      	str	r2, [sp, #0]
 800aa66:	0021      	movs	r1, r4
 800aa68:	003a      	movs	r2, r7
 800aa6a:	4b06      	ldr	r3, [pc, #24]	@ (800aa84 <_svfiprintf_r+0x1f8>)
 800aa6c:	9803      	ldr	r0, [sp, #12]
 800aa6e:	f7fc fed9 	bl	8007824 <_printf_i>
 800aa72:	e7eb      	b.n	800aa4c <_svfiprintf_r+0x1c0>
 800aa74:	0800c2d9 	.word	0x0800c2d9
 800aa78:	0800c2df 	.word	0x0800c2df
 800aa7c:	0800c2e3 	.word	0x0800c2e3
 800aa80:	080072c9 	.word	0x080072c9
 800aa84:	0800a7cd 	.word	0x0800a7cd

0800aa88 <__sflush_r>:
 800aa88:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800aa8a:	220c      	movs	r2, #12
 800aa8c:	5e8b      	ldrsh	r3, [r1, r2]
 800aa8e:	0005      	movs	r5, r0
 800aa90:	000c      	movs	r4, r1
 800aa92:	071a      	lsls	r2, r3, #28
 800aa94:	d456      	bmi.n	800ab44 <__sflush_r+0xbc>
 800aa96:	684a      	ldr	r2, [r1, #4]
 800aa98:	2a00      	cmp	r2, #0
 800aa9a:	dc02      	bgt.n	800aaa2 <__sflush_r+0x1a>
 800aa9c:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 800aa9e:	2a00      	cmp	r2, #0
 800aaa0:	dd4e      	ble.n	800ab40 <__sflush_r+0xb8>
 800aaa2:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 800aaa4:	2f00      	cmp	r7, #0
 800aaa6:	d04b      	beq.n	800ab40 <__sflush_r+0xb8>
 800aaa8:	2200      	movs	r2, #0
 800aaaa:	2080      	movs	r0, #128	@ 0x80
 800aaac:	682e      	ldr	r6, [r5, #0]
 800aaae:	602a      	str	r2, [r5, #0]
 800aab0:	001a      	movs	r2, r3
 800aab2:	0140      	lsls	r0, r0, #5
 800aab4:	6a21      	ldr	r1, [r4, #32]
 800aab6:	4002      	ands	r2, r0
 800aab8:	4203      	tst	r3, r0
 800aaba:	d033      	beq.n	800ab24 <__sflush_r+0x9c>
 800aabc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800aabe:	89a3      	ldrh	r3, [r4, #12]
 800aac0:	075b      	lsls	r3, r3, #29
 800aac2:	d506      	bpl.n	800aad2 <__sflush_r+0x4a>
 800aac4:	6863      	ldr	r3, [r4, #4]
 800aac6:	1ad2      	subs	r2, r2, r3
 800aac8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800aaca:	2b00      	cmp	r3, #0
 800aacc:	d001      	beq.n	800aad2 <__sflush_r+0x4a>
 800aace:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800aad0:	1ad2      	subs	r2, r2, r3
 800aad2:	2300      	movs	r3, #0
 800aad4:	0028      	movs	r0, r5
 800aad6:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 800aad8:	6a21      	ldr	r1, [r4, #32]
 800aada:	47b8      	blx	r7
 800aadc:	89a2      	ldrh	r2, [r4, #12]
 800aade:	1c43      	adds	r3, r0, #1
 800aae0:	d106      	bne.n	800aaf0 <__sflush_r+0x68>
 800aae2:	6829      	ldr	r1, [r5, #0]
 800aae4:	291d      	cmp	r1, #29
 800aae6:	d846      	bhi.n	800ab76 <__sflush_r+0xee>
 800aae8:	4b29      	ldr	r3, [pc, #164]	@ (800ab90 <__sflush_r+0x108>)
 800aaea:	410b      	asrs	r3, r1
 800aaec:	07db      	lsls	r3, r3, #31
 800aaee:	d442      	bmi.n	800ab76 <__sflush_r+0xee>
 800aaf0:	2300      	movs	r3, #0
 800aaf2:	6063      	str	r3, [r4, #4]
 800aaf4:	6923      	ldr	r3, [r4, #16]
 800aaf6:	6023      	str	r3, [r4, #0]
 800aaf8:	04d2      	lsls	r2, r2, #19
 800aafa:	d505      	bpl.n	800ab08 <__sflush_r+0x80>
 800aafc:	1c43      	adds	r3, r0, #1
 800aafe:	d102      	bne.n	800ab06 <__sflush_r+0x7e>
 800ab00:	682b      	ldr	r3, [r5, #0]
 800ab02:	2b00      	cmp	r3, #0
 800ab04:	d100      	bne.n	800ab08 <__sflush_r+0x80>
 800ab06:	6560      	str	r0, [r4, #84]	@ 0x54
 800ab08:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ab0a:	602e      	str	r6, [r5, #0]
 800ab0c:	2900      	cmp	r1, #0
 800ab0e:	d017      	beq.n	800ab40 <__sflush_r+0xb8>
 800ab10:	0023      	movs	r3, r4
 800ab12:	3344      	adds	r3, #68	@ 0x44
 800ab14:	4299      	cmp	r1, r3
 800ab16:	d002      	beq.n	800ab1e <__sflush_r+0x96>
 800ab18:	0028      	movs	r0, r5
 800ab1a:	f7fe f9e7 	bl	8008eec <_free_r>
 800ab1e:	2300      	movs	r3, #0
 800ab20:	6363      	str	r3, [r4, #52]	@ 0x34
 800ab22:	e00d      	b.n	800ab40 <__sflush_r+0xb8>
 800ab24:	2301      	movs	r3, #1
 800ab26:	0028      	movs	r0, r5
 800ab28:	47b8      	blx	r7
 800ab2a:	0002      	movs	r2, r0
 800ab2c:	1c43      	adds	r3, r0, #1
 800ab2e:	d1c6      	bne.n	800aabe <__sflush_r+0x36>
 800ab30:	682b      	ldr	r3, [r5, #0]
 800ab32:	2b00      	cmp	r3, #0
 800ab34:	d0c3      	beq.n	800aabe <__sflush_r+0x36>
 800ab36:	2b1d      	cmp	r3, #29
 800ab38:	d001      	beq.n	800ab3e <__sflush_r+0xb6>
 800ab3a:	2b16      	cmp	r3, #22
 800ab3c:	d11a      	bne.n	800ab74 <__sflush_r+0xec>
 800ab3e:	602e      	str	r6, [r5, #0]
 800ab40:	2000      	movs	r0, #0
 800ab42:	e01e      	b.n	800ab82 <__sflush_r+0xfa>
 800ab44:	690e      	ldr	r6, [r1, #16]
 800ab46:	2e00      	cmp	r6, #0
 800ab48:	d0fa      	beq.n	800ab40 <__sflush_r+0xb8>
 800ab4a:	680f      	ldr	r7, [r1, #0]
 800ab4c:	600e      	str	r6, [r1, #0]
 800ab4e:	1bba      	subs	r2, r7, r6
 800ab50:	9201      	str	r2, [sp, #4]
 800ab52:	2200      	movs	r2, #0
 800ab54:	079b      	lsls	r3, r3, #30
 800ab56:	d100      	bne.n	800ab5a <__sflush_r+0xd2>
 800ab58:	694a      	ldr	r2, [r1, #20]
 800ab5a:	60a2      	str	r2, [r4, #8]
 800ab5c:	9b01      	ldr	r3, [sp, #4]
 800ab5e:	2b00      	cmp	r3, #0
 800ab60:	ddee      	ble.n	800ab40 <__sflush_r+0xb8>
 800ab62:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800ab64:	0032      	movs	r2, r6
 800ab66:	001f      	movs	r7, r3
 800ab68:	0028      	movs	r0, r5
 800ab6a:	9b01      	ldr	r3, [sp, #4]
 800ab6c:	6a21      	ldr	r1, [r4, #32]
 800ab6e:	47b8      	blx	r7
 800ab70:	2800      	cmp	r0, #0
 800ab72:	dc07      	bgt.n	800ab84 <__sflush_r+0xfc>
 800ab74:	89a2      	ldrh	r2, [r4, #12]
 800ab76:	2340      	movs	r3, #64	@ 0x40
 800ab78:	2001      	movs	r0, #1
 800ab7a:	4313      	orrs	r3, r2
 800ab7c:	b21b      	sxth	r3, r3
 800ab7e:	81a3      	strh	r3, [r4, #12]
 800ab80:	4240      	negs	r0, r0
 800ab82:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800ab84:	9b01      	ldr	r3, [sp, #4]
 800ab86:	1836      	adds	r6, r6, r0
 800ab88:	1a1b      	subs	r3, r3, r0
 800ab8a:	9301      	str	r3, [sp, #4]
 800ab8c:	e7e6      	b.n	800ab5c <__sflush_r+0xd4>
 800ab8e:	46c0      	nop			@ (mov r8, r8)
 800ab90:	dfbffffe 	.word	0xdfbffffe

0800ab94 <_fflush_r>:
 800ab94:	690b      	ldr	r3, [r1, #16]
 800ab96:	b570      	push	{r4, r5, r6, lr}
 800ab98:	0005      	movs	r5, r0
 800ab9a:	000c      	movs	r4, r1
 800ab9c:	2b00      	cmp	r3, #0
 800ab9e:	d102      	bne.n	800aba6 <_fflush_r+0x12>
 800aba0:	2500      	movs	r5, #0
 800aba2:	0028      	movs	r0, r5
 800aba4:	bd70      	pop	{r4, r5, r6, pc}
 800aba6:	2800      	cmp	r0, #0
 800aba8:	d004      	beq.n	800abb4 <_fflush_r+0x20>
 800abaa:	6a03      	ldr	r3, [r0, #32]
 800abac:	2b00      	cmp	r3, #0
 800abae:	d101      	bne.n	800abb4 <_fflush_r+0x20>
 800abb0:	f7fd f9e4 	bl	8007f7c <__sinit>
 800abb4:	220c      	movs	r2, #12
 800abb6:	5ea3      	ldrsh	r3, [r4, r2]
 800abb8:	2b00      	cmp	r3, #0
 800abba:	d0f1      	beq.n	800aba0 <_fflush_r+0xc>
 800abbc:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800abbe:	07d2      	lsls	r2, r2, #31
 800abc0:	d404      	bmi.n	800abcc <_fflush_r+0x38>
 800abc2:	059b      	lsls	r3, r3, #22
 800abc4:	d402      	bmi.n	800abcc <_fflush_r+0x38>
 800abc6:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800abc8:	f7fd fafd 	bl	80081c6 <__retarget_lock_acquire_recursive>
 800abcc:	0028      	movs	r0, r5
 800abce:	0021      	movs	r1, r4
 800abd0:	f7ff ff5a 	bl	800aa88 <__sflush_r>
 800abd4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800abd6:	0005      	movs	r5, r0
 800abd8:	07db      	lsls	r3, r3, #31
 800abda:	d4e2      	bmi.n	800aba2 <_fflush_r+0xe>
 800abdc:	89a3      	ldrh	r3, [r4, #12]
 800abde:	059b      	lsls	r3, r3, #22
 800abe0:	d4df      	bmi.n	800aba2 <_fflush_r+0xe>
 800abe2:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800abe4:	f7fd faf0 	bl	80081c8 <__retarget_lock_release_recursive>
 800abe8:	e7db      	b.n	800aba2 <_fflush_r+0xe>

0800abea <memmove>:
 800abea:	b510      	push	{r4, lr}
 800abec:	4288      	cmp	r0, r1
 800abee:	d806      	bhi.n	800abfe <memmove+0x14>
 800abf0:	2300      	movs	r3, #0
 800abf2:	429a      	cmp	r2, r3
 800abf4:	d008      	beq.n	800ac08 <memmove+0x1e>
 800abf6:	5ccc      	ldrb	r4, [r1, r3]
 800abf8:	54c4      	strb	r4, [r0, r3]
 800abfa:	3301      	adds	r3, #1
 800abfc:	e7f9      	b.n	800abf2 <memmove+0x8>
 800abfe:	188b      	adds	r3, r1, r2
 800ac00:	4298      	cmp	r0, r3
 800ac02:	d2f5      	bcs.n	800abf0 <memmove+0x6>
 800ac04:	3a01      	subs	r2, #1
 800ac06:	d200      	bcs.n	800ac0a <memmove+0x20>
 800ac08:	bd10      	pop	{r4, pc}
 800ac0a:	5c8b      	ldrb	r3, [r1, r2]
 800ac0c:	5483      	strb	r3, [r0, r2]
 800ac0e:	e7f9      	b.n	800ac04 <memmove+0x1a>

0800ac10 <strncmp>:
 800ac10:	b530      	push	{r4, r5, lr}
 800ac12:	0005      	movs	r5, r0
 800ac14:	1e10      	subs	r0, r2, #0
 800ac16:	d00b      	beq.n	800ac30 <strncmp+0x20>
 800ac18:	2400      	movs	r4, #0
 800ac1a:	3a01      	subs	r2, #1
 800ac1c:	5d2b      	ldrb	r3, [r5, r4]
 800ac1e:	5d08      	ldrb	r0, [r1, r4]
 800ac20:	4283      	cmp	r3, r0
 800ac22:	d104      	bne.n	800ac2e <strncmp+0x1e>
 800ac24:	42a2      	cmp	r2, r4
 800ac26:	d002      	beq.n	800ac2e <strncmp+0x1e>
 800ac28:	3401      	adds	r4, #1
 800ac2a:	2b00      	cmp	r3, #0
 800ac2c:	d1f6      	bne.n	800ac1c <strncmp+0xc>
 800ac2e:	1a18      	subs	r0, r3, r0
 800ac30:	bd30      	pop	{r4, r5, pc}
	...

0800ac34 <_sbrk_r>:
 800ac34:	2300      	movs	r3, #0
 800ac36:	b570      	push	{r4, r5, r6, lr}
 800ac38:	4d06      	ldr	r5, [pc, #24]	@ (800ac54 <_sbrk_r+0x20>)
 800ac3a:	0004      	movs	r4, r0
 800ac3c:	0008      	movs	r0, r1
 800ac3e:	602b      	str	r3, [r5, #0]
 800ac40:	f7f7 ffc4 	bl	8002bcc <_sbrk>
 800ac44:	1c43      	adds	r3, r0, #1
 800ac46:	d103      	bne.n	800ac50 <_sbrk_r+0x1c>
 800ac48:	682b      	ldr	r3, [r5, #0]
 800ac4a:	2b00      	cmp	r3, #0
 800ac4c:	d000      	beq.n	800ac50 <_sbrk_r+0x1c>
 800ac4e:	6023      	str	r3, [r4, #0]
 800ac50:	bd70      	pop	{r4, r5, r6, pc}
 800ac52:	46c0      	nop			@ (mov r8, r8)
 800ac54:	2000061c 	.word	0x2000061c

0800ac58 <memcpy>:
 800ac58:	2300      	movs	r3, #0
 800ac5a:	b510      	push	{r4, lr}
 800ac5c:	429a      	cmp	r2, r3
 800ac5e:	d100      	bne.n	800ac62 <memcpy+0xa>
 800ac60:	bd10      	pop	{r4, pc}
 800ac62:	5ccc      	ldrb	r4, [r1, r3]
 800ac64:	54c4      	strb	r4, [r0, r3]
 800ac66:	3301      	adds	r3, #1
 800ac68:	e7f8      	b.n	800ac5c <memcpy+0x4>
	...

0800ac6c <nan>:
 800ac6c:	2000      	movs	r0, #0
 800ac6e:	4901      	ldr	r1, [pc, #4]	@ (800ac74 <nan+0x8>)
 800ac70:	4770      	bx	lr
 800ac72:	46c0      	nop			@ (mov r8, r8)
 800ac74:	7ff80000 	.word	0x7ff80000

0800ac78 <__assert_func>:
 800ac78:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800ac7a:	0014      	movs	r4, r2
 800ac7c:	001a      	movs	r2, r3
 800ac7e:	4b09      	ldr	r3, [pc, #36]	@ (800aca4 <__assert_func+0x2c>)
 800ac80:	0005      	movs	r5, r0
 800ac82:	681b      	ldr	r3, [r3, #0]
 800ac84:	000e      	movs	r6, r1
 800ac86:	68d8      	ldr	r0, [r3, #12]
 800ac88:	4b07      	ldr	r3, [pc, #28]	@ (800aca8 <__assert_func+0x30>)
 800ac8a:	2c00      	cmp	r4, #0
 800ac8c:	d101      	bne.n	800ac92 <__assert_func+0x1a>
 800ac8e:	4b07      	ldr	r3, [pc, #28]	@ (800acac <__assert_func+0x34>)
 800ac90:	001c      	movs	r4, r3
 800ac92:	4907      	ldr	r1, [pc, #28]	@ (800acb0 <__assert_func+0x38>)
 800ac94:	9301      	str	r3, [sp, #4]
 800ac96:	9402      	str	r4, [sp, #8]
 800ac98:	002b      	movs	r3, r5
 800ac9a:	9600      	str	r6, [sp, #0]
 800ac9c:	f000 fbe0 	bl	800b460 <fiprintf>
 800aca0:	f000 fbee 	bl	800b480 <abort>
 800aca4:	20000028 	.word	0x20000028
 800aca8:	0800c2f2 	.word	0x0800c2f2
 800acac:	0800c32d 	.word	0x0800c32d
 800acb0:	0800c2ff 	.word	0x0800c2ff

0800acb4 <_calloc_r>:
 800acb4:	b570      	push	{r4, r5, r6, lr}
 800acb6:	0c0b      	lsrs	r3, r1, #16
 800acb8:	0c15      	lsrs	r5, r2, #16
 800acba:	2b00      	cmp	r3, #0
 800acbc:	d11e      	bne.n	800acfc <_calloc_r+0x48>
 800acbe:	2d00      	cmp	r5, #0
 800acc0:	d10c      	bne.n	800acdc <_calloc_r+0x28>
 800acc2:	b289      	uxth	r1, r1
 800acc4:	b294      	uxth	r4, r2
 800acc6:	434c      	muls	r4, r1
 800acc8:	0021      	movs	r1, r4
 800acca:	f7fe f985 	bl	8008fd8 <_malloc_r>
 800acce:	1e05      	subs	r5, r0, #0
 800acd0:	d01a      	beq.n	800ad08 <_calloc_r+0x54>
 800acd2:	0022      	movs	r2, r4
 800acd4:	2100      	movs	r1, #0
 800acd6:	f7fd f9f1 	bl	80080bc <memset>
 800acda:	e016      	b.n	800ad0a <_calloc_r+0x56>
 800acdc:	1c2b      	adds	r3, r5, #0
 800acde:	1c0c      	adds	r4, r1, #0
 800ace0:	b289      	uxth	r1, r1
 800ace2:	b292      	uxth	r2, r2
 800ace4:	434a      	muls	r2, r1
 800ace6:	b29b      	uxth	r3, r3
 800ace8:	b2a1      	uxth	r1, r4
 800acea:	4359      	muls	r1, r3
 800acec:	0c14      	lsrs	r4, r2, #16
 800acee:	190c      	adds	r4, r1, r4
 800acf0:	0c23      	lsrs	r3, r4, #16
 800acf2:	d107      	bne.n	800ad04 <_calloc_r+0x50>
 800acf4:	0424      	lsls	r4, r4, #16
 800acf6:	b292      	uxth	r2, r2
 800acf8:	4314      	orrs	r4, r2
 800acfa:	e7e5      	b.n	800acc8 <_calloc_r+0x14>
 800acfc:	2d00      	cmp	r5, #0
 800acfe:	d101      	bne.n	800ad04 <_calloc_r+0x50>
 800ad00:	1c14      	adds	r4, r2, #0
 800ad02:	e7ed      	b.n	800ace0 <_calloc_r+0x2c>
 800ad04:	230c      	movs	r3, #12
 800ad06:	6003      	str	r3, [r0, #0]
 800ad08:	2500      	movs	r5, #0
 800ad0a:	0028      	movs	r0, r5
 800ad0c:	bd70      	pop	{r4, r5, r6, pc}

0800ad0e <rshift>:
 800ad0e:	0002      	movs	r2, r0
 800ad10:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ad12:	6904      	ldr	r4, [r0, #16]
 800ad14:	b085      	sub	sp, #20
 800ad16:	3214      	adds	r2, #20
 800ad18:	114b      	asrs	r3, r1, #5
 800ad1a:	0016      	movs	r6, r2
 800ad1c:	9302      	str	r3, [sp, #8]
 800ad1e:	429c      	cmp	r4, r3
 800ad20:	dd31      	ble.n	800ad86 <rshift+0x78>
 800ad22:	261f      	movs	r6, #31
 800ad24:	000f      	movs	r7, r1
 800ad26:	009b      	lsls	r3, r3, #2
 800ad28:	00a5      	lsls	r5, r4, #2
 800ad2a:	18d3      	adds	r3, r2, r3
 800ad2c:	4037      	ands	r7, r6
 800ad2e:	1955      	adds	r5, r2, r5
 800ad30:	9300      	str	r3, [sp, #0]
 800ad32:	9701      	str	r7, [sp, #4]
 800ad34:	4231      	tst	r1, r6
 800ad36:	d10d      	bne.n	800ad54 <rshift+0x46>
 800ad38:	0016      	movs	r6, r2
 800ad3a:	0019      	movs	r1, r3
 800ad3c:	428d      	cmp	r5, r1
 800ad3e:	d836      	bhi.n	800adae <rshift+0xa0>
 800ad40:	9b00      	ldr	r3, [sp, #0]
 800ad42:	2600      	movs	r6, #0
 800ad44:	3b03      	subs	r3, #3
 800ad46:	429d      	cmp	r5, r3
 800ad48:	d302      	bcc.n	800ad50 <rshift+0x42>
 800ad4a:	9b02      	ldr	r3, [sp, #8]
 800ad4c:	1ae4      	subs	r4, r4, r3
 800ad4e:	00a6      	lsls	r6, r4, #2
 800ad50:	1996      	adds	r6, r2, r6
 800ad52:	e018      	b.n	800ad86 <rshift+0x78>
 800ad54:	2120      	movs	r1, #32
 800ad56:	9e01      	ldr	r6, [sp, #4]
 800ad58:	9f01      	ldr	r7, [sp, #4]
 800ad5a:	1b89      	subs	r1, r1, r6
 800ad5c:	9e00      	ldr	r6, [sp, #0]
 800ad5e:	9103      	str	r1, [sp, #12]
 800ad60:	ce02      	ldmia	r6!, {r1}
 800ad62:	4694      	mov	ip, r2
 800ad64:	40f9      	lsrs	r1, r7
 800ad66:	42b5      	cmp	r5, r6
 800ad68:	d816      	bhi.n	800ad98 <rshift+0x8a>
 800ad6a:	9b00      	ldr	r3, [sp, #0]
 800ad6c:	2600      	movs	r6, #0
 800ad6e:	3301      	adds	r3, #1
 800ad70:	429d      	cmp	r5, r3
 800ad72:	d303      	bcc.n	800ad7c <rshift+0x6e>
 800ad74:	9b02      	ldr	r3, [sp, #8]
 800ad76:	1ae4      	subs	r4, r4, r3
 800ad78:	00a6      	lsls	r6, r4, #2
 800ad7a:	3e04      	subs	r6, #4
 800ad7c:	1996      	adds	r6, r2, r6
 800ad7e:	6031      	str	r1, [r6, #0]
 800ad80:	2900      	cmp	r1, #0
 800ad82:	d000      	beq.n	800ad86 <rshift+0x78>
 800ad84:	3604      	adds	r6, #4
 800ad86:	1ab1      	subs	r1, r6, r2
 800ad88:	1089      	asrs	r1, r1, #2
 800ad8a:	6101      	str	r1, [r0, #16]
 800ad8c:	4296      	cmp	r6, r2
 800ad8e:	d101      	bne.n	800ad94 <rshift+0x86>
 800ad90:	2300      	movs	r3, #0
 800ad92:	6143      	str	r3, [r0, #20]
 800ad94:	b005      	add	sp, #20
 800ad96:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ad98:	6837      	ldr	r7, [r6, #0]
 800ad9a:	9b03      	ldr	r3, [sp, #12]
 800ad9c:	409f      	lsls	r7, r3
 800ad9e:	430f      	orrs	r7, r1
 800ada0:	4661      	mov	r1, ip
 800ada2:	c180      	stmia	r1!, {r7}
 800ada4:	468c      	mov	ip, r1
 800ada6:	9b01      	ldr	r3, [sp, #4]
 800ada8:	ce02      	ldmia	r6!, {r1}
 800adaa:	40d9      	lsrs	r1, r3
 800adac:	e7db      	b.n	800ad66 <rshift+0x58>
 800adae:	c980      	ldmia	r1!, {r7}
 800adb0:	c680      	stmia	r6!, {r7}
 800adb2:	e7c3      	b.n	800ad3c <rshift+0x2e>

0800adb4 <__hexdig_fun>:
 800adb4:	0002      	movs	r2, r0
 800adb6:	3a30      	subs	r2, #48	@ 0x30
 800adb8:	0003      	movs	r3, r0
 800adba:	2a09      	cmp	r2, #9
 800adbc:	d802      	bhi.n	800adc4 <__hexdig_fun+0x10>
 800adbe:	3b20      	subs	r3, #32
 800adc0:	b2d8      	uxtb	r0, r3
 800adc2:	4770      	bx	lr
 800adc4:	0002      	movs	r2, r0
 800adc6:	3a61      	subs	r2, #97	@ 0x61
 800adc8:	2a05      	cmp	r2, #5
 800adca:	d801      	bhi.n	800add0 <__hexdig_fun+0x1c>
 800adcc:	3b47      	subs	r3, #71	@ 0x47
 800adce:	e7f7      	b.n	800adc0 <__hexdig_fun+0xc>
 800add0:	001a      	movs	r2, r3
 800add2:	3a41      	subs	r2, #65	@ 0x41
 800add4:	2000      	movs	r0, #0
 800add6:	2a05      	cmp	r2, #5
 800add8:	d8f3      	bhi.n	800adc2 <__hexdig_fun+0xe>
 800adda:	3b27      	subs	r3, #39	@ 0x27
 800addc:	e7f0      	b.n	800adc0 <__hexdig_fun+0xc>
	...

0800ade0 <__gethex>:
 800ade0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ade2:	b089      	sub	sp, #36	@ 0x24
 800ade4:	9307      	str	r3, [sp, #28]
 800ade6:	680b      	ldr	r3, [r1, #0]
 800ade8:	9201      	str	r2, [sp, #4]
 800adea:	9003      	str	r0, [sp, #12]
 800adec:	9106      	str	r1, [sp, #24]
 800adee:	1c9a      	adds	r2, r3, #2
 800adf0:	0011      	movs	r1, r2
 800adf2:	3201      	adds	r2, #1
 800adf4:	1e50      	subs	r0, r2, #1
 800adf6:	7800      	ldrb	r0, [r0, #0]
 800adf8:	2830      	cmp	r0, #48	@ 0x30
 800adfa:	d0f9      	beq.n	800adf0 <__gethex+0x10>
 800adfc:	1acb      	subs	r3, r1, r3
 800adfe:	3b02      	subs	r3, #2
 800ae00:	9305      	str	r3, [sp, #20]
 800ae02:	9100      	str	r1, [sp, #0]
 800ae04:	f7ff ffd6 	bl	800adb4 <__hexdig_fun>
 800ae08:	2300      	movs	r3, #0
 800ae0a:	001d      	movs	r5, r3
 800ae0c:	9302      	str	r3, [sp, #8]
 800ae0e:	4298      	cmp	r0, r3
 800ae10:	d11e      	bne.n	800ae50 <__gethex+0x70>
 800ae12:	2201      	movs	r2, #1
 800ae14:	49a6      	ldr	r1, [pc, #664]	@ (800b0b0 <__gethex+0x2d0>)
 800ae16:	9800      	ldr	r0, [sp, #0]
 800ae18:	f7ff fefa 	bl	800ac10 <strncmp>
 800ae1c:	0007      	movs	r7, r0
 800ae1e:	42a8      	cmp	r0, r5
 800ae20:	d000      	beq.n	800ae24 <__gethex+0x44>
 800ae22:	e06a      	b.n	800aefa <__gethex+0x11a>
 800ae24:	9b00      	ldr	r3, [sp, #0]
 800ae26:	7858      	ldrb	r0, [r3, #1]
 800ae28:	1c5c      	adds	r4, r3, #1
 800ae2a:	f7ff ffc3 	bl	800adb4 <__hexdig_fun>
 800ae2e:	2301      	movs	r3, #1
 800ae30:	9302      	str	r3, [sp, #8]
 800ae32:	42a8      	cmp	r0, r5
 800ae34:	d02f      	beq.n	800ae96 <__gethex+0xb6>
 800ae36:	9400      	str	r4, [sp, #0]
 800ae38:	9b00      	ldr	r3, [sp, #0]
 800ae3a:	7818      	ldrb	r0, [r3, #0]
 800ae3c:	2830      	cmp	r0, #48	@ 0x30
 800ae3e:	d009      	beq.n	800ae54 <__gethex+0x74>
 800ae40:	f7ff ffb8 	bl	800adb4 <__hexdig_fun>
 800ae44:	4242      	negs	r2, r0
 800ae46:	4142      	adcs	r2, r0
 800ae48:	2301      	movs	r3, #1
 800ae4a:	0025      	movs	r5, r4
 800ae4c:	9202      	str	r2, [sp, #8]
 800ae4e:	9305      	str	r3, [sp, #20]
 800ae50:	9c00      	ldr	r4, [sp, #0]
 800ae52:	e004      	b.n	800ae5e <__gethex+0x7e>
 800ae54:	9b00      	ldr	r3, [sp, #0]
 800ae56:	3301      	adds	r3, #1
 800ae58:	9300      	str	r3, [sp, #0]
 800ae5a:	e7ed      	b.n	800ae38 <__gethex+0x58>
 800ae5c:	3401      	adds	r4, #1
 800ae5e:	7820      	ldrb	r0, [r4, #0]
 800ae60:	f7ff ffa8 	bl	800adb4 <__hexdig_fun>
 800ae64:	1e07      	subs	r7, r0, #0
 800ae66:	d1f9      	bne.n	800ae5c <__gethex+0x7c>
 800ae68:	2201      	movs	r2, #1
 800ae6a:	0020      	movs	r0, r4
 800ae6c:	4990      	ldr	r1, [pc, #576]	@ (800b0b0 <__gethex+0x2d0>)
 800ae6e:	f7ff fecf 	bl	800ac10 <strncmp>
 800ae72:	2800      	cmp	r0, #0
 800ae74:	d10d      	bne.n	800ae92 <__gethex+0xb2>
 800ae76:	2d00      	cmp	r5, #0
 800ae78:	d106      	bne.n	800ae88 <__gethex+0xa8>
 800ae7a:	3401      	adds	r4, #1
 800ae7c:	0025      	movs	r5, r4
 800ae7e:	7820      	ldrb	r0, [r4, #0]
 800ae80:	f7ff ff98 	bl	800adb4 <__hexdig_fun>
 800ae84:	2800      	cmp	r0, #0
 800ae86:	d102      	bne.n	800ae8e <__gethex+0xae>
 800ae88:	1b2d      	subs	r5, r5, r4
 800ae8a:	00af      	lsls	r7, r5, #2
 800ae8c:	e003      	b.n	800ae96 <__gethex+0xb6>
 800ae8e:	3401      	adds	r4, #1
 800ae90:	e7f5      	b.n	800ae7e <__gethex+0x9e>
 800ae92:	2d00      	cmp	r5, #0
 800ae94:	d1f8      	bne.n	800ae88 <__gethex+0xa8>
 800ae96:	2220      	movs	r2, #32
 800ae98:	7823      	ldrb	r3, [r4, #0]
 800ae9a:	0026      	movs	r6, r4
 800ae9c:	4393      	bics	r3, r2
 800ae9e:	2b50      	cmp	r3, #80	@ 0x50
 800aea0:	d11d      	bne.n	800aede <__gethex+0xfe>
 800aea2:	7863      	ldrb	r3, [r4, #1]
 800aea4:	2b2b      	cmp	r3, #43	@ 0x2b
 800aea6:	d02d      	beq.n	800af04 <__gethex+0x124>
 800aea8:	2b2d      	cmp	r3, #45	@ 0x2d
 800aeaa:	d02f      	beq.n	800af0c <__gethex+0x12c>
 800aeac:	2300      	movs	r3, #0
 800aeae:	1c66      	adds	r6, r4, #1
 800aeb0:	9304      	str	r3, [sp, #16]
 800aeb2:	7830      	ldrb	r0, [r6, #0]
 800aeb4:	f7ff ff7e 	bl	800adb4 <__hexdig_fun>
 800aeb8:	1e43      	subs	r3, r0, #1
 800aeba:	b2db      	uxtb	r3, r3
 800aebc:	0005      	movs	r5, r0
 800aebe:	2b18      	cmp	r3, #24
 800aec0:	d82a      	bhi.n	800af18 <__gethex+0x138>
 800aec2:	7870      	ldrb	r0, [r6, #1]
 800aec4:	f7ff ff76 	bl	800adb4 <__hexdig_fun>
 800aec8:	1e43      	subs	r3, r0, #1
 800aeca:	b2db      	uxtb	r3, r3
 800aecc:	3601      	adds	r6, #1
 800aece:	3d10      	subs	r5, #16
 800aed0:	2b18      	cmp	r3, #24
 800aed2:	d91d      	bls.n	800af10 <__gethex+0x130>
 800aed4:	9b04      	ldr	r3, [sp, #16]
 800aed6:	2b00      	cmp	r3, #0
 800aed8:	d000      	beq.n	800aedc <__gethex+0xfc>
 800aeda:	426d      	negs	r5, r5
 800aedc:	197f      	adds	r7, r7, r5
 800aede:	9b06      	ldr	r3, [sp, #24]
 800aee0:	601e      	str	r6, [r3, #0]
 800aee2:	9b02      	ldr	r3, [sp, #8]
 800aee4:	2b00      	cmp	r3, #0
 800aee6:	d019      	beq.n	800af1c <__gethex+0x13c>
 800aee8:	9b05      	ldr	r3, [sp, #20]
 800aeea:	2606      	movs	r6, #6
 800aeec:	425a      	negs	r2, r3
 800aeee:	4153      	adcs	r3, r2
 800aef0:	425b      	negs	r3, r3
 800aef2:	401e      	ands	r6, r3
 800aef4:	0030      	movs	r0, r6
 800aef6:	b009      	add	sp, #36	@ 0x24
 800aef8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aefa:	2301      	movs	r3, #1
 800aefc:	2700      	movs	r7, #0
 800aefe:	9c00      	ldr	r4, [sp, #0]
 800af00:	9302      	str	r3, [sp, #8]
 800af02:	e7c8      	b.n	800ae96 <__gethex+0xb6>
 800af04:	2300      	movs	r3, #0
 800af06:	9304      	str	r3, [sp, #16]
 800af08:	1ca6      	adds	r6, r4, #2
 800af0a:	e7d2      	b.n	800aeb2 <__gethex+0xd2>
 800af0c:	2301      	movs	r3, #1
 800af0e:	e7fa      	b.n	800af06 <__gethex+0x126>
 800af10:	230a      	movs	r3, #10
 800af12:	435d      	muls	r5, r3
 800af14:	182d      	adds	r5, r5, r0
 800af16:	e7d4      	b.n	800aec2 <__gethex+0xe2>
 800af18:	0026      	movs	r6, r4
 800af1a:	e7e0      	b.n	800aede <__gethex+0xfe>
 800af1c:	9b00      	ldr	r3, [sp, #0]
 800af1e:	9902      	ldr	r1, [sp, #8]
 800af20:	1ae3      	subs	r3, r4, r3
 800af22:	3b01      	subs	r3, #1
 800af24:	2b07      	cmp	r3, #7
 800af26:	dc0a      	bgt.n	800af3e <__gethex+0x15e>
 800af28:	9803      	ldr	r0, [sp, #12]
 800af2a:	f7fe f8e5 	bl	80090f8 <_Balloc>
 800af2e:	1e05      	subs	r5, r0, #0
 800af30:	d108      	bne.n	800af44 <__gethex+0x164>
 800af32:	002a      	movs	r2, r5
 800af34:	21e4      	movs	r1, #228	@ 0xe4
 800af36:	4b5f      	ldr	r3, [pc, #380]	@ (800b0b4 <__gethex+0x2d4>)
 800af38:	485f      	ldr	r0, [pc, #380]	@ (800b0b8 <__gethex+0x2d8>)
 800af3a:	f7ff fe9d 	bl	800ac78 <__assert_func>
 800af3e:	3101      	adds	r1, #1
 800af40:	105b      	asrs	r3, r3, #1
 800af42:	e7ef      	b.n	800af24 <__gethex+0x144>
 800af44:	0003      	movs	r3, r0
 800af46:	3314      	adds	r3, #20
 800af48:	9302      	str	r3, [sp, #8]
 800af4a:	9305      	str	r3, [sp, #20]
 800af4c:	2300      	movs	r3, #0
 800af4e:	001e      	movs	r6, r3
 800af50:	9304      	str	r3, [sp, #16]
 800af52:	9b00      	ldr	r3, [sp, #0]
 800af54:	42a3      	cmp	r3, r4
 800af56:	d338      	bcc.n	800afca <__gethex+0x1ea>
 800af58:	9c05      	ldr	r4, [sp, #20]
 800af5a:	9b02      	ldr	r3, [sp, #8]
 800af5c:	c440      	stmia	r4!, {r6}
 800af5e:	1ae4      	subs	r4, r4, r3
 800af60:	10a4      	asrs	r4, r4, #2
 800af62:	0030      	movs	r0, r6
 800af64:	612c      	str	r4, [r5, #16]
 800af66:	f7fe f9bf 	bl	80092e8 <__hi0bits>
 800af6a:	9b01      	ldr	r3, [sp, #4]
 800af6c:	0164      	lsls	r4, r4, #5
 800af6e:	681b      	ldr	r3, [r3, #0]
 800af70:	1a26      	subs	r6, r4, r0
 800af72:	9300      	str	r3, [sp, #0]
 800af74:	429e      	cmp	r6, r3
 800af76:	dd52      	ble.n	800b01e <__gethex+0x23e>
 800af78:	1af6      	subs	r6, r6, r3
 800af7a:	0031      	movs	r1, r6
 800af7c:	0028      	movs	r0, r5
 800af7e:	f7fe fd62 	bl	8009a46 <__any_on>
 800af82:	1e04      	subs	r4, r0, #0
 800af84:	d00f      	beq.n	800afa6 <__gethex+0x1c6>
 800af86:	2401      	movs	r4, #1
 800af88:	231f      	movs	r3, #31
 800af8a:	0020      	movs	r0, r4
 800af8c:	1e72      	subs	r2, r6, #1
 800af8e:	4013      	ands	r3, r2
 800af90:	4098      	lsls	r0, r3
 800af92:	0003      	movs	r3, r0
 800af94:	1151      	asrs	r1, r2, #5
 800af96:	9802      	ldr	r0, [sp, #8]
 800af98:	0089      	lsls	r1, r1, #2
 800af9a:	5809      	ldr	r1, [r1, r0]
 800af9c:	4219      	tst	r1, r3
 800af9e:	d002      	beq.n	800afa6 <__gethex+0x1c6>
 800afa0:	42a2      	cmp	r2, r4
 800afa2:	dc34      	bgt.n	800b00e <__gethex+0x22e>
 800afa4:	2402      	movs	r4, #2
 800afa6:	0031      	movs	r1, r6
 800afa8:	0028      	movs	r0, r5
 800afaa:	f7ff feb0 	bl	800ad0e <rshift>
 800afae:	19bf      	adds	r7, r7, r6
 800afb0:	9b01      	ldr	r3, [sp, #4]
 800afb2:	689b      	ldr	r3, [r3, #8]
 800afb4:	42bb      	cmp	r3, r7
 800afb6:	da42      	bge.n	800b03e <__gethex+0x25e>
 800afb8:	0029      	movs	r1, r5
 800afba:	9803      	ldr	r0, [sp, #12]
 800afbc:	f7fe f8e0 	bl	8009180 <_Bfree>
 800afc0:	2300      	movs	r3, #0
 800afc2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800afc4:	26a3      	movs	r6, #163	@ 0xa3
 800afc6:	6013      	str	r3, [r2, #0]
 800afc8:	e794      	b.n	800aef4 <__gethex+0x114>
 800afca:	3c01      	subs	r4, #1
 800afcc:	7823      	ldrb	r3, [r4, #0]
 800afce:	2b2e      	cmp	r3, #46	@ 0x2e
 800afd0:	d012      	beq.n	800aff8 <__gethex+0x218>
 800afd2:	9b04      	ldr	r3, [sp, #16]
 800afd4:	2b20      	cmp	r3, #32
 800afd6:	d104      	bne.n	800afe2 <__gethex+0x202>
 800afd8:	9b05      	ldr	r3, [sp, #20]
 800afda:	c340      	stmia	r3!, {r6}
 800afdc:	2600      	movs	r6, #0
 800afde:	9305      	str	r3, [sp, #20]
 800afe0:	9604      	str	r6, [sp, #16]
 800afe2:	7820      	ldrb	r0, [r4, #0]
 800afe4:	f7ff fee6 	bl	800adb4 <__hexdig_fun>
 800afe8:	230f      	movs	r3, #15
 800afea:	4018      	ands	r0, r3
 800afec:	9b04      	ldr	r3, [sp, #16]
 800afee:	4098      	lsls	r0, r3
 800aff0:	3304      	adds	r3, #4
 800aff2:	4306      	orrs	r6, r0
 800aff4:	9304      	str	r3, [sp, #16]
 800aff6:	e7ac      	b.n	800af52 <__gethex+0x172>
 800aff8:	9b00      	ldr	r3, [sp, #0]
 800affa:	42a3      	cmp	r3, r4
 800affc:	d8e9      	bhi.n	800afd2 <__gethex+0x1f2>
 800affe:	2201      	movs	r2, #1
 800b000:	0020      	movs	r0, r4
 800b002:	492b      	ldr	r1, [pc, #172]	@ (800b0b0 <__gethex+0x2d0>)
 800b004:	f7ff fe04 	bl	800ac10 <strncmp>
 800b008:	2800      	cmp	r0, #0
 800b00a:	d1e2      	bne.n	800afd2 <__gethex+0x1f2>
 800b00c:	e7a1      	b.n	800af52 <__gethex+0x172>
 800b00e:	0028      	movs	r0, r5
 800b010:	1eb1      	subs	r1, r6, #2
 800b012:	f7fe fd18 	bl	8009a46 <__any_on>
 800b016:	2800      	cmp	r0, #0
 800b018:	d0c4      	beq.n	800afa4 <__gethex+0x1c4>
 800b01a:	2403      	movs	r4, #3
 800b01c:	e7c3      	b.n	800afa6 <__gethex+0x1c6>
 800b01e:	9b00      	ldr	r3, [sp, #0]
 800b020:	2400      	movs	r4, #0
 800b022:	429e      	cmp	r6, r3
 800b024:	dac4      	bge.n	800afb0 <__gethex+0x1d0>
 800b026:	1b9e      	subs	r6, r3, r6
 800b028:	0029      	movs	r1, r5
 800b02a:	0032      	movs	r2, r6
 800b02c:	9803      	ldr	r0, [sp, #12]
 800b02e:	f7fe fad1 	bl	80095d4 <__lshift>
 800b032:	0003      	movs	r3, r0
 800b034:	3314      	adds	r3, #20
 800b036:	0005      	movs	r5, r0
 800b038:	1bbf      	subs	r7, r7, r6
 800b03a:	9302      	str	r3, [sp, #8]
 800b03c:	e7b8      	b.n	800afb0 <__gethex+0x1d0>
 800b03e:	9b01      	ldr	r3, [sp, #4]
 800b040:	685e      	ldr	r6, [r3, #4]
 800b042:	42be      	cmp	r6, r7
 800b044:	dd6f      	ble.n	800b126 <__gethex+0x346>
 800b046:	9b00      	ldr	r3, [sp, #0]
 800b048:	1bf6      	subs	r6, r6, r7
 800b04a:	42b3      	cmp	r3, r6
 800b04c:	dc36      	bgt.n	800b0bc <__gethex+0x2dc>
 800b04e:	9b01      	ldr	r3, [sp, #4]
 800b050:	68db      	ldr	r3, [r3, #12]
 800b052:	2b02      	cmp	r3, #2
 800b054:	d024      	beq.n	800b0a0 <__gethex+0x2c0>
 800b056:	2b03      	cmp	r3, #3
 800b058:	d026      	beq.n	800b0a8 <__gethex+0x2c8>
 800b05a:	2b01      	cmp	r3, #1
 800b05c:	d117      	bne.n	800b08e <__gethex+0x2ae>
 800b05e:	9b00      	ldr	r3, [sp, #0]
 800b060:	42b3      	cmp	r3, r6
 800b062:	d114      	bne.n	800b08e <__gethex+0x2ae>
 800b064:	2b01      	cmp	r3, #1
 800b066:	d10b      	bne.n	800b080 <__gethex+0x2a0>
 800b068:	9b01      	ldr	r3, [sp, #4]
 800b06a:	9a07      	ldr	r2, [sp, #28]
 800b06c:	685b      	ldr	r3, [r3, #4]
 800b06e:	2662      	movs	r6, #98	@ 0x62
 800b070:	6013      	str	r3, [r2, #0]
 800b072:	2301      	movs	r3, #1
 800b074:	9a02      	ldr	r2, [sp, #8]
 800b076:	612b      	str	r3, [r5, #16]
 800b078:	6013      	str	r3, [r2, #0]
 800b07a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b07c:	601d      	str	r5, [r3, #0]
 800b07e:	e739      	b.n	800aef4 <__gethex+0x114>
 800b080:	9900      	ldr	r1, [sp, #0]
 800b082:	0028      	movs	r0, r5
 800b084:	3901      	subs	r1, #1
 800b086:	f7fe fcde 	bl	8009a46 <__any_on>
 800b08a:	2800      	cmp	r0, #0
 800b08c:	d1ec      	bne.n	800b068 <__gethex+0x288>
 800b08e:	0029      	movs	r1, r5
 800b090:	9803      	ldr	r0, [sp, #12]
 800b092:	f7fe f875 	bl	8009180 <_Bfree>
 800b096:	2300      	movs	r3, #0
 800b098:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b09a:	2650      	movs	r6, #80	@ 0x50
 800b09c:	6013      	str	r3, [r2, #0]
 800b09e:	e729      	b.n	800aef4 <__gethex+0x114>
 800b0a0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b0a2:	2b00      	cmp	r3, #0
 800b0a4:	d1f3      	bne.n	800b08e <__gethex+0x2ae>
 800b0a6:	e7df      	b.n	800b068 <__gethex+0x288>
 800b0a8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b0aa:	2b00      	cmp	r3, #0
 800b0ac:	d1dc      	bne.n	800b068 <__gethex+0x288>
 800b0ae:	e7ee      	b.n	800b08e <__gethex+0x2ae>
 800b0b0:	0800c180 	.word	0x0800c180
 800b0b4:	0800c015 	.word	0x0800c015
 800b0b8:	0800c32e 	.word	0x0800c32e
 800b0bc:	1e77      	subs	r7, r6, #1
 800b0be:	2c00      	cmp	r4, #0
 800b0c0:	d12f      	bne.n	800b122 <__gethex+0x342>
 800b0c2:	2f00      	cmp	r7, #0
 800b0c4:	d004      	beq.n	800b0d0 <__gethex+0x2f0>
 800b0c6:	0039      	movs	r1, r7
 800b0c8:	0028      	movs	r0, r5
 800b0ca:	f7fe fcbc 	bl	8009a46 <__any_on>
 800b0ce:	0004      	movs	r4, r0
 800b0d0:	231f      	movs	r3, #31
 800b0d2:	117a      	asrs	r2, r7, #5
 800b0d4:	401f      	ands	r7, r3
 800b0d6:	3b1e      	subs	r3, #30
 800b0d8:	40bb      	lsls	r3, r7
 800b0da:	9902      	ldr	r1, [sp, #8]
 800b0dc:	0092      	lsls	r2, r2, #2
 800b0de:	5852      	ldr	r2, [r2, r1]
 800b0e0:	421a      	tst	r2, r3
 800b0e2:	d001      	beq.n	800b0e8 <__gethex+0x308>
 800b0e4:	2302      	movs	r3, #2
 800b0e6:	431c      	orrs	r4, r3
 800b0e8:	9b00      	ldr	r3, [sp, #0]
 800b0ea:	0031      	movs	r1, r6
 800b0ec:	1b9b      	subs	r3, r3, r6
 800b0ee:	2602      	movs	r6, #2
 800b0f0:	0028      	movs	r0, r5
 800b0f2:	9300      	str	r3, [sp, #0]
 800b0f4:	f7ff fe0b 	bl	800ad0e <rshift>
 800b0f8:	9b01      	ldr	r3, [sp, #4]
 800b0fa:	685f      	ldr	r7, [r3, #4]
 800b0fc:	2c00      	cmp	r4, #0
 800b0fe:	d03f      	beq.n	800b180 <__gethex+0x3a0>
 800b100:	9b01      	ldr	r3, [sp, #4]
 800b102:	68db      	ldr	r3, [r3, #12]
 800b104:	2b02      	cmp	r3, #2
 800b106:	d010      	beq.n	800b12a <__gethex+0x34a>
 800b108:	2b03      	cmp	r3, #3
 800b10a:	d012      	beq.n	800b132 <__gethex+0x352>
 800b10c:	2b01      	cmp	r3, #1
 800b10e:	d106      	bne.n	800b11e <__gethex+0x33e>
 800b110:	07a2      	lsls	r2, r4, #30
 800b112:	d504      	bpl.n	800b11e <__gethex+0x33e>
 800b114:	9a02      	ldr	r2, [sp, #8]
 800b116:	6812      	ldr	r2, [r2, #0]
 800b118:	4314      	orrs	r4, r2
 800b11a:	421c      	tst	r4, r3
 800b11c:	d10c      	bne.n	800b138 <__gethex+0x358>
 800b11e:	2310      	movs	r3, #16
 800b120:	e02d      	b.n	800b17e <__gethex+0x39e>
 800b122:	2401      	movs	r4, #1
 800b124:	e7d4      	b.n	800b0d0 <__gethex+0x2f0>
 800b126:	2601      	movs	r6, #1
 800b128:	e7e8      	b.n	800b0fc <__gethex+0x31c>
 800b12a:	2301      	movs	r3, #1
 800b12c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800b12e:	1a9b      	subs	r3, r3, r2
 800b130:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b132:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b134:	2b00      	cmp	r3, #0
 800b136:	d0f2      	beq.n	800b11e <__gethex+0x33e>
 800b138:	692b      	ldr	r3, [r5, #16]
 800b13a:	2000      	movs	r0, #0
 800b13c:	9302      	str	r3, [sp, #8]
 800b13e:	009b      	lsls	r3, r3, #2
 800b140:	9304      	str	r3, [sp, #16]
 800b142:	002b      	movs	r3, r5
 800b144:	9a04      	ldr	r2, [sp, #16]
 800b146:	3314      	adds	r3, #20
 800b148:	1899      	adds	r1, r3, r2
 800b14a:	681a      	ldr	r2, [r3, #0]
 800b14c:	1c54      	adds	r4, r2, #1
 800b14e:	d01c      	beq.n	800b18a <__gethex+0x3aa>
 800b150:	3201      	adds	r2, #1
 800b152:	601a      	str	r2, [r3, #0]
 800b154:	002b      	movs	r3, r5
 800b156:	3314      	adds	r3, #20
 800b158:	2e02      	cmp	r6, #2
 800b15a:	d13f      	bne.n	800b1dc <__gethex+0x3fc>
 800b15c:	9a01      	ldr	r2, [sp, #4]
 800b15e:	9900      	ldr	r1, [sp, #0]
 800b160:	6812      	ldr	r2, [r2, #0]
 800b162:	3a01      	subs	r2, #1
 800b164:	428a      	cmp	r2, r1
 800b166:	d109      	bne.n	800b17c <__gethex+0x39c>
 800b168:	000a      	movs	r2, r1
 800b16a:	201f      	movs	r0, #31
 800b16c:	4010      	ands	r0, r2
 800b16e:	2201      	movs	r2, #1
 800b170:	4082      	lsls	r2, r0
 800b172:	1149      	asrs	r1, r1, #5
 800b174:	0089      	lsls	r1, r1, #2
 800b176:	58cb      	ldr	r3, [r1, r3]
 800b178:	4213      	tst	r3, r2
 800b17a:	d13d      	bne.n	800b1f8 <__gethex+0x418>
 800b17c:	2320      	movs	r3, #32
 800b17e:	431e      	orrs	r6, r3
 800b180:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b182:	601d      	str	r5, [r3, #0]
 800b184:	9b07      	ldr	r3, [sp, #28]
 800b186:	601f      	str	r7, [r3, #0]
 800b188:	e6b4      	b.n	800aef4 <__gethex+0x114>
 800b18a:	c301      	stmia	r3!, {r0}
 800b18c:	4299      	cmp	r1, r3
 800b18e:	d8dc      	bhi.n	800b14a <__gethex+0x36a>
 800b190:	68ab      	ldr	r3, [r5, #8]
 800b192:	9a02      	ldr	r2, [sp, #8]
 800b194:	429a      	cmp	r2, r3
 800b196:	db18      	blt.n	800b1ca <__gethex+0x3ea>
 800b198:	6869      	ldr	r1, [r5, #4]
 800b19a:	9803      	ldr	r0, [sp, #12]
 800b19c:	3101      	adds	r1, #1
 800b19e:	f7fd ffab 	bl	80090f8 <_Balloc>
 800b1a2:	1e04      	subs	r4, r0, #0
 800b1a4:	d104      	bne.n	800b1b0 <__gethex+0x3d0>
 800b1a6:	0022      	movs	r2, r4
 800b1a8:	2184      	movs	r1, #132	@ 0x84
 800b1aa:	4b1d      	ldr	r3, [pc, #116]	@ (800b220 <__gethex+0x440>)
 800b1ac:	481d      	ldr	r0, [pc, #116]	@ (800b224 <__gethex+0x444>)
 800b1ae:	e6c4      	b.n	800af3a <__gethex+0x15a>
 800b1b0:	0029      	movs	r1, r5
 800b1b2:	692a      	ldr	r2, [r5, #16]
 800b1b4:	310c      	adds	r1, #12
 800b1b6:	3202      	adds	r2, #2
 800b1b8:	0092      	lsls	r2, r2, #2
 800b1ba:	300c      	adds	r0, #12
 800b1bc:	f7ff fd4c 	bl	800ac58 <memcpy>
 800b1c0:	0029      	movs	r1, r5
 800b1c2:	9803      	ldr	r0, [sp, #12]
 800b1c4:	f7fd ffdc 	bl	8009180 <_Bfree>
 800b1c8:	0025      	movs	r5, r4
 800b1ca:	692b      	ldr	r3, [r5, #16]
 800b1cc:	1c5a      	adds	r2, r3, #1
 800b1ce:	612a      	str	r2, [r5, #16]
 800b1d0:	2201      	movs	r2, #1
 800b1d2:	3304      	adds	r3, #4
 800b1d4:	009b      	lsls	r3, r3, #2
 800b1d6:	18eb      	adds	r3, r5, r3
 800b1d8:	605a      	str	r2, [r3, #4]
 800b1da:	e7bb      	b.n	800b154 <__gethex+0x374>
 800b1dc:	692a      	ldr	r2, [r5, #16]
 800b1de:	9902      	ldr	r1, [sp, #8]
 800b1e0:	428a      	cmp	r2, r1
 800b1e2:	dd0b      	ble.n	800b1fc <__gethex+0x41c>
 800b1e4:	2101      	movs	r1, #1
 800b1e6:	0028      	movs	r0, r5
 800b1e8:	f7ff fd91 	bl	800ad0e <rshift>
 800b1ec:	9b01      	ldr	r3, [sp, #4]
 800b1ee:	3701      	adds	r7, #1
 800b1f0:	689b      	ldr	r3, [r3, #8]
 800b1f2:	42bb      	cmp	r3, r7
 800b1f4:	da00      	bge.n	800b1f8 <__gethex+0x418>
 800b1f6:	e6df      	b.n	800afb8 <__gethex+0x1d8>
 800b1f8:	2601      	movs	r6, #1
 800b1fa:	e7bf      	b.n	800b17c <__gethex+0x39c>
 800b1fc:	221f      	movs	r2, #31
 800b1fe:	9c00      	ldr	r4, [sp, #0]
 800b200:	9900      	ldr	r1, [sp, #0]
 800b202:	4014      	ands	r4, r2
 800b204:	4211      	tst	r1, r2
 800b206:	d0f7      	beq.n	800b1f8 <__gethex+0x418>
 800b208:	9a04      	ldr	r2, [sp, #16]
 800b20a:	189b      	adds	r3, r3, r2
 800b20c:	3b04      	subs	r3, #4
 800b20e:	6818      	ldr	r0, [r3, #0]
 800b210:	f7fe f86a 	bl	80092e8 <__hi0bits>
 800b214:	2320      	movs	r3, #32
 800b216:	1b1b      	subs	r3, r3, r4
 800b218:	4298      	cmp	r0, r3
 800b21a:	dbe3      	blt.n	800b1e4 <__gethex+0x404>
 800b21c:	e7ec      	b.n	800b1f8 <__gethex+0x418>
 800b21e:	46c0      	nop			@ (mov r8, r8)
 800b220:	0800c015 	.word	0x0800c015
 800b224:	0800c32e 	.word	0x0800c32e

0800b228 <L_shift>:
 800b228:	2308      	movs	r3, #8
 800b22a:	b570      	push	{r4, r5, r6, lr}
 800b22c:	2520      	movs	r5, #32
 800b22e:	1a9a      	subs	r2, r3, r2
 800b230:	0092      	lsls	r2, r2, #2
 800b232:	1aad      	subs	r5, r5, r2
 800b234:	6843      	ldr	r3, [r0, #4]
 800b236:	6804      	ldr	r4, [r0, #0]
 800b238:	001e      	movs	r6, r3
 800b23a:	40ae      	lsls	r6, r5
 800b23c:	40d3      	lsrs	r3, r2
 800b23e:	4334      	orrs	r4, r6
 800b240:	6004      	str	r4, [r0, #0]
 800b242:	6043      	str	r3, [r0, #4]
 800b244:	3004      	adds	r0, #4
 800b246:	4288      	cmp	r0, r1
 800b248:	d3f4      	bcc.n	800b234 <L_shift+0xc>
 800b24a:	bd70      	pop	{r4, r5, r6, pc}

0800b24c <__match>:
 800b24c:	b530      	push	{r4, r5, lr}
 800b24e:	6803      	ldr	r3, [r0, #0]
 800b250:	780c      	ldrb	r4, [r1, #0]
 800b252:	3301      	adds	r3, #1
 800b254:	2c00      	cmp	r4, #0
 800b256:	d102      	bne.n	800b25e <__match+0x12>
 800b258:	6003      	str	r3, [r0, #0]
 800b25a:	2001      	movs	r0, #1
 800b25c:	bd30      	pop	{r4, r5, pc}
 800b25e:	781a      	ldrb	r2, [r3, #0]
 800b260:	0015      	movs	r5, r2
 800b262:	3d41      	subs	r5, #65	@ 0x41
 800b264:	2d19      	cmp	r5, #25
 800b266:	d800      	bhi.n	800b26a <__match+0x1e>
 800b268:	3220      	adds	r2, #32
 800b26a:	3101      	adds	r1, #1
 800b26c:	42a2      	cmp	r2, r4
 800b26e:	d0ef      	beq.n	800b250 <__match+0x4>
 800b270:	2000      	movs	r0, #0
 800b272:	e7f3      	b.n	800b25c <__match+0x10>

0800b274 <__hexnan>:
 800b274:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b276:	680b      	ldr	r3, [r1, #0]
 800b278:	b08b      	sub	sp, #44	@ 0x2c
 800b27a:	9201      	str	r2, [sp, #4]
 800b27c:	9901      	ldr	r1, [sp, #4]
 800b27e:	115a      	asrs	r2, r3, #5
 800b280:	0092      	lsls	r2, r2, #2
 800b282:	188a      	adds	r2, r1, r2
 800b284:	9202      	str	r2, [sp, #8]
 800b286:	0019      	movs	r1, r3
 800b288:	221f      	movs	r2, #31
 800b28a:	4011      	ands	r1, r2
 800b28c:	9008      	str	r0, [sp, #32]
 800b28e:	9106      	str	r1, [sp, #24]
 800b290:	4213      	tst	r3, r2
 800b292:	d002      	beq.n	800b29a <__hexnan+0x26>
 800b294:	9b02      	ldr	r3, [sp, #8]
 800b296:	3304      	adds	r3, #4
 800b298:	9302      	str	r3, [sp, #8]
 800b29a:	9b02      	ldr	r3, [sp, #8]
 800b29c:	2500      	movs	r5, #0
 800b29e:	1f1f      	subs	r7, r3, #4
 800b2a0:	003e      	movs	r6, r7
 800b2a2:	003c      	movs	r4, r7
 800b2a4:	9b08      	ldr	r3, [sp, #32]
 800b2a6:	603d      	str	r5, [r7, #0]
 800b2a8:	681b      	ldr	r3, [r3, #0]
 800b2aa:	9507      	str	r5, [sp, #28]
 800b2ac:	9305      	str	r3, [sp, #20]
 800b2ae:	9503      	str	r5, [sp, #12]
 800b2b0:	9b05      	ldr	r3, [sp, #20]
 800b2b2:	3301      	adds	r3, #1
 800b2b4:	9309      	str	r3, [sp, #36]	@ 0x24
 800b2b6:	9b05      	ldr	r3, [sp, #20]
 800b2b8:	785b      	ldrb	r3, [r3, #1]
 800b2ba:	9304      	str	r3, [sp, #16]
 800b2bc:	2b00      	cmp	r3, #0
 800b2be:	d028      	beq.n	800b312 <__hexnan+0x9e>
 800b2c0:	9804      	ldr	r0, [sp, #16]
 800b2c2:	f7ff fd77 	bl	800adb4 <__hexdig_fun>
 800b2c6:	2800      	cmp	r0, #0
 800b2c8:	d155      	bne.n	800b376 <__hexnan+0x102>
 800b2ca:	9b04      	ldr	r3, [sp, #16]
 800b2cc:	2b20      	cmp	r3, #32
 800b2ce:	d819      	bhi.n	800b304 <__hexnan+0x90>
 800b2d0:	9b03      	ldr	r3, [sp, #12]
 800b2d2:	9a07      	ldr	r2, [sp, #28]
 800b2d4:	4293      	cmp	r3, r2
 800b2d6:	dd12      	ble.n	800b2fe <__hexnan+0x8a>
 800b2d8:	42b4      	cmp	r4, r6
 800b2da:	d206      	bcs.n	800b2ea <__hexnan+0x76>
 800b2dc:	2d07      	cmp	r5, #7
 800b2de:	dc04      	bgt.n	800b2ea <__hexnan+0x76>
 800b2e0:	002a      	movs	r2, r5
 800b2e2:	0031      	movs	r1, r6
 800b2e4:	0020      	movs	r0, r4
 800b2e6:	f7ff ff9f 	bl	800b228 <L_shift>
 800b2ea:	9b01      	ldr	r3, [sp, #4]
 800b2ec:	2508      	movs	r5, #8
 800b2ee:	429c      	cmp	r4, r3
 800b2f0:	d905      	bls.n	800b2fe <__hexnan+0x8a>
 800b2f2:	1f26      	subs	r6, r4, #4
 800b2f4:	2500      	movs	r5, #0
 800b2f6:	0034      	movs	r4, r6
 800b2f8:	9b03      	ldr	r3, [sp, #12]
 800b2fa:	6035      	str	r5, [r6, #0]
 800b2fc:	9307      	str	r3, [sp, #28]
 800b2fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b300:	9305      	str	r3, [sp, #20]
 800b302:	e7d5      	b.n	800b2b0 <__hexnan+0x3c>
 800b304:	9b04      	ldr	r3, [sp, #16]
 800b306:	2b29      	cmp	r3, #41	@ 0x29
 800b308:	d15a      	bne.n	800b3c0 <__hexnan+0x14c>
 800b30a:	9b05      	ldr	r3, [sp, #20]
 800b30c:	9a08      	ldr	r2, [sp, #32]
 800b30e:	3302      	adds	r3, #2
 800b310:	6013      	str	r3, [r2, #0]
 800b312:	9b03      	ldr	r3, [sp, #12]
 800b314:	2b00      	cmp	r3, #0
 800b316:	d053      	beq.n	800b3c0 <__hexnan+0x14c>
 800b318:	42b4      	cmp	r4, r6
 800b31a:	d206      	bcs.n	800b32a <__hexnan+0xb6>
 800b31c:	2d07      	cmp	r5, #7
 800b31e:	dc04      	bgt.n	800b32a <__hexnan+0xb6>
 800b320:	002a      	movs	r2, r5
 800b322:	0031      	movs	r1, r6
 800b324:	0020      	movs	r0, r4
 800b326:	f7ff ff7f 	bl	800b228 <L_shift>
 800b32a:	9b01      	ldr	r3, [sp, #4]
 800b32c:	429c      	cmp	r4, r3
 800b32e:	d936      	bls.n	800b39e <__hexnan+0x12a>
 800b330:	001a      	movs	r2, r3
 800b332:	0023      	movs	r3, r4
 800b334:	cb02      	ldmia	r3!, {r1}
 800b336:	c202      	stmia	r2!, {r1}
 800b338:	429f      	cmp	r7, r3
 800b33a:	d2fb      	bcs.n	800b334 <__hexnan+0xc0>
 800b33c:	9b02      	ldr	r3, [sp, #8]
 800b33e:	1c61      	adds	r1, r4, #1
 800b340:	1eda      	subs	r2, r3, #3
 800b342:	2304      	movs	r3, #4
 800b344:	4291      	cmp	r1, r2
 800b346:	d805      	bhi.n	800b354 <__hexnan+0xe0>
 800b348:	9b02      	ldr	r3, [sp, #8]
 800b34a:	3b04      	subs	r3, #4
 800b34c:	1b1b      	subs	r3, r3, r4
 800b34e:	089b      	lsrs	r3, r3, #2
 800b350:	3301      	adds	r3, #1
 800b352:	009b      	lsls	r3, r3, #2
 800b354:	9a01      	ldr	r2, [sp, #4]
 800b356:	18d3      	adds	r3, r2, r3
 800b358:	2200      	movs	r2, #0
 800b35a:	c304      	stmia	r3!, {r2}
 800b35c:	429f      	cmp	r7, r3
 800b35e:	d2fc      	bcs.n	800b35a <__hexnan+0xe6>
 800b360:	683b      	ldr	r3, [r7, #0]
 800b362:	2b00      	cmp	r3, #0
 800b364:	d104      	bne.n	800b370 <__hexnan+0xfc>
 800b366:	9b01      	ldr	r3, [sp, #4]
 800b368:	429f      	cmp	r7, r3
 800b36a:	d127      	bne.n	800b3bc <__hexnan+0x148>
 800b36c:	2301      	movs	r3, #1
 800b36e:	603b      	str	r3, [r7, #0]
 800b370:	2005      	movs	r0, #5
 800b372:	b00b      	add	sp, #44	@ 0x2c
 800b374:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b376:	9b03      	ldr	r3, [sp, #12]
 800b378:	3501      	adds	r5, #1
 800b37a:	3301      	adds	r3, #1
 800b37c:	9303      	str	r3, [sp, #12]
 800b37e:	2d08      	cmp	r5, #8
 800b380:	dd06      	ble.n	800b390 <__hexnan+0x11c>
 800b382:	9b01      	ldr	r3, [sp, #4]
 800b384:	429c      	cmp	r4, r3
 800b386:	d9ba      	bls.n	800b2fe <__hexnan+0x8a>
 800b388:	2300      	movs	r3, #0
 800b38a:	2501      	movs	r5, #1
 800b38c:	3c04      	subs	r4, #4
 800b38e:	6023      	str	r3, [r4, #0]
 800b390:	220f      	movs	r2, #15
 800b392:	6823      	ldr	r3, [r4, #0]
 800b394:	4010      	ands	r0, r2
 800b396:	011b      	lsls	r3, r3, #4
 800b398:	4303      	orrs	r3, r0
 800b39a:	6023      	str	r3, [r4, #0]
 800b39c:	e7af      	b.n	800b2fe <__hexnan+0x8a>
 800b39e:	9b06      	ldr	r3, [sp, #24]
 800b3a0:	2b00      	cmp	r3, #0
 800b3a2:	d0dd      	beq.n	800b360 <__hexnan+0xec>
 800b3a4:	2320      	movs	r3, #32
 800b3a6:	9a06      	ldr	r2, [sp, #24]
 800b3a8:	9902      	ldr	r1, [sp, #8]
 800b3aa:	1a9b      	subs	r3, r3, r2
 800b3ac:	2201      	movs	r2, #1
 800b3ae:	4252      	negs	r2, r2
 800b3b0:	40da      	lsrs	r2, r3
 800b3b2:	3904      	subs	r1, #4
 800b3b4:	680b      	ldr	r3, [r1, #0]
 800b3b6:	4013      	ands	r3, r2
 800b3b8:	600b      	str	r3, [r1, #0]
 800b3ba:	e7d1      	b.n	800b360 <__hexnan+0xec>
 800b3bc:	3f04      	subs	r7, #4
 800b3be:	e7cf      	b.n	800b360 <__hexnan+0xec>
 800b3c0:	2004      	movs	r0, #4
 800b3c2:	e7d6      	b.n	800b372 <__hexnan+0xfe>

0800b3c4 <__ascii_mbtowc>:
 800b3c4:	b082      	sub	sp, #8
 800b3c6:	2900      	cmp	r1, #0
 800b3c8:	d100      	bne.n	800b3cc <__ascii_mbtowc+0x8>
 800b3ca:	a901      	add	r1, sp, #4
 800b3cc:	1e10      	subs	r0, r2, #0
 800b3ce:	d006      	beq.n	800b3de <__ascii_mbtowc+0x1a>
 800b3d0:	2b00      	cmp	r3, #0
 800b3d2:	d006      	beq.n	800b3e2 <__ascii_mbtowc+0x1e>
 800b3d4:	7813      	ldrb	r3, [r2, #0]
 800b3d6:	600b      	str	r3, [r1, #0]
 800b3d8:	7810      	ldrb	r0, [r2, #0]
 800b3da:	1e43      	subs	r3, r0, #1
 800b3dc:	4198      	sbcs	r0, r3
 800b3de:	b002      	add	sp, #8
 800b3e0:	4770      	bx	lr
 800b3e2:	2002      	movs	r0, #2
 800b3e4:	4240      	negs	r0, r0
 800b3e6:	e7fa      	b.n	800b3de <__ascii_mbtowc+0x1a>

0800b3e8 <_realloc_r>:
 800b3e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b3ea:	0006      	movs	r6, r0
 800b3ec:	000c      	movs	r4, r1
 800b3ee:	0015      	movs	r5, r2
 800b3f0:	2900      	cmp	r1, #0
 800b3f2:	d105      	bne.n	800b400 <_realloc_r+0x18>
 800b3f4:	0011      	movs	r1, r2
 800b3f6:	f7fd fdef 	bl	8008fd8 <_malloc_r>
 800b3fa:	0004      	movs	r4, r0
 800b3fc:	0020      	movs	r0, r4
 800b3fe:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b400:	2a00      	cmp	r2, #0
 800b402:	d103      	bne.n	800b40c <_realloc_r+0x24>
 800b404:	f7fd fd72 	bl	8008eec <_free_r>
 800b408:	2400      	movs	r4, #0
 800b40a:	e7f7      	b.n	800b3fc <_realloc_r+0x14>
 800b40c:	f000 f83f 	bl	800b48e <_malloc_usable_size_r>
 800b410:	0007      	movs	r7, r0
 800b412:	4285      	cmp	r5, r0
 800b414:	d802      	bhi.n	800b41c <_realloc_r+0x34>
 800b416:	0843      	lsrs	r3, r0, #1
 800b418:	42ab      	cmp	r3, r5
 800b41a:	d3ef      	bcc.n	800b3fc <_realloc_r+0x14>
 800b41c:	0029      	movs	r1, r5
 800b41e:	0030      	movs	r0, r6
 800b420:	f7fd fdda 	bl	8008fd8 <_malloc_r>
 800b424:	9001      	str	r0, [sp, #4]
 800b426:	2800      	cmp	r0, #0
 800b428:	d0ee      	beq.n	800b408 <_realloc_r+0x20>
 800b42a:	002a      	movs	r2, r5
 800b42c:	42bd      	cmp	r5, r7
 800b42e:	d900      	bls.n	800b432 <_realloc_r+0x4a>
 800b430:	003a      	movs	r2, r7
 800b432:	0021      	movs	r1, r4
 800b434:	9801      	ldr	r0, [sp, #4]
 800b436:	f7ff fc0f 	bl	800ac58 <memcpy>
 800b43a:	0021      	movs	r1, r4
 800b43c:	0030      	movs	r0, r6
 800b43e:	f7fd fd55 	bl	8008eec <_free_r>
 800b442:	9c01      	ldr	r4, [sp, #4]
 800b444:	e7da      	b.n	800b3fc <_realloc_r+0x14>

0800b446 <__ascii_wctomb>:
 800b446:	0003      	movs	r3, r0
 800b448:	1e08      	subs	r0, r1, #0
 800b44a:	d005      	beq.n	800b458 <__ascii_wctomb+0x12>
 800b44c:	2aff      	cmp	r2, #255	@ 0xff
 800b44e:	d904      	bls.n	800b45a <__ascii_wctomb+0x14>
 800b450:	228a      	movs	r2, #138	@ 0x8a
 800b452:	2001      	movs	r0, #1
 800b454:	601a      	str	r2, [r3, #0]
 800b456:	4240      	negs	r0, r0
 800b458:	4770      	bx	lr
 800b45a:	2001      	movs	r0, #1
 800b45c:	700a      	strb	r2, [r1, #0]
 800b45e:	e7fb      	b.n	800b458 <__ascii_wctomb+0x12>

0800b460 <fiprintf>:
 800b460:	b40e      	push	{r1, r2, r3}
 800b462:	b517      	push	{r0, r1, r2, r4, lr}
 800b464:	4c05      	ldr	r4, [pc, #20]	@ (800b47c <fiprintf+0x1c>)
 800b466:	ab05      	add	r3, sp, #20
 800b468:	cb04      	ldmia	r3!, {r2}
 800b46a:	0001      	movs	r1, r0
 800b46c:	6820      	ldr	r0, [r4, #0]
 800b46e:	9301      	str	r3, [sp, #4]
 800b470:	f000 f83c 	bl	800b4ec <_vfiprintf_r>
 800b474:	bc1e      	pop	{r1, r2, r3, r4}
 800b476:	bc08      	pop	{r3}
 800b478:	b003      	add	sp, #12
 800b47a:	4718      	bx	r3
 800b47c:	20000028 	.word	0x20000028

0800b480 <abort>:
 800b480:	2006      	movs	r0, #6
 800b482:	b510      	push	{r4, lr}
 800b484:	f000 fa18 	bl	800b8b8 <raise>
 800b488:	2001      	movs	r0, #1
 800b48a:	f7f7 fb2d 	bl	8002ae8 <_exit>

0800b48e <_malloc_usable_size_r>:
 800b48e:	1f0b      	subs	r3, r1, #4
 800b490:	681b      	ldr	r3, [r3, #0]
 800b492:	1f18      	subs	r0, r3, #4
 800b494:	2b00      	cmp	r3, #0
 800b496:	da01      	bge.n	800b49c <_malloc_usable_size_r+0xe>
 800b498:	580b      	ldr	r3, [r1, r0]
 800b49a:	18c0      	adds	r0, r0, r3
 800b49c:	4770      	bx	lr

0800b49e <__sfputc_r>:
 800b49e:	6893      	ldr	r3, [r2, #8]
 800b4a0:	b510      	push	{r4, lr}
 800b4a2:	3b01      	subs	r3, #1
 800b4a4:	6093      	str	r3, [r2, #8]
 800b4a6:	2b00      	cmp	r3, #0
 800b4a8:	da04      	bge.n	800b4b4 <__sfputc_r+0x16>
 800b4aa:	6994      	ldr	r4, [r2, #24]
 800b4ac:	42a3      	cmp	r3, r4
 800b4ae:	db07      	blt.n	800b4c0 <__sfputc_r+0x22>
 800b4b0:	290a      	cmp	r1, #10
 800b4b2:	d005      	beq.n	800b4c0 <__sfputc_r+0x22>
 800b4b4:	6813      	ldr	r3, [r2, #0]
 800b4b6:	1c58      	adds	r0, r3, #1
 800b4b8:	6010      	str	r0, [r2, #0]
 800b4ba:	7019      	strb	r1, [r3, #0]
 800b4bc:	0008      	movs	r0, r1
 800b4be:	bd10      	pop	{r4, pc}
 800b4c0:	f000 f930 	bl	800b724 <__swbuf_r>
 800b4c4:	0001      	movs	r1, r0
 800b4c6:	e7f9      	b.n	800b4bc <__sfputc_r+0x1e>

0800b4c8 <__sfputs_r>:
 800b4c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b4ca:	0006      	movs	r6, r0
 800b4cc:	000f      	movs	r7, r1
 800b4ce:	0014      	movs	r4, r2
 800b4d0:	18d5      	adds	r5, r2, r3
 800b4d2:	42ac      	cmp	r4, r5
 800b4d4:	d101      	bne.n	800b4da <__sfputs_r+0x12>
 800b4d6:	2000      	movs	r0, #0
 800b4d8:	e007      	b.n	800b4ea <__sfputs_r+0x22>
 800b4da:	7821      	ldrb	r1, [r4, #0]
 800b4dc:	003a      	movs	r2, r7
 800b4de:	0030      	movs	r0, r6
 800b4e0:	f7ff ffdd 	bl	800b49e <__sfputc_r>
 800b4e4:	3401      	adds	r4, #1
 800b4e6:	1c43      	adds	r3, r0, #1
 800b4e8:	d1f3      	bne.n	800b4d2 <__sfputs_r+0xa>
 800b4ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b4ec <_vfiprintf_r>:
 800b4ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b4ee:	b0a1      	sub	sp, #132	@ 0x84
 800b4f0:	000f      	movs	r7, r1
 800b4f2:	0015      	movs	r5, r2
 800b4f4:	001e      	movs	r6, r3
 800b4f6:	9003      	str	r0, [sp, #12]
 800b4f8:	2800      	cmp	r0, #0
 800b4fa:	d004      	beq.n	800b506 <_vfiprintf_r+0x1a>
 800b4fc:	6a03      	ldr	r3, [r0, #32]
 800b4fe:	2b00      	cmp	r3, #0
 800b500:	d101      	bne.n	800b506 <_vfiprintf_r+0x1a>
 800b502:	f7fc fd3b 	bl	8007f7c <__sinit>
 800b506:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b508:	07db      	lsls	r3, r3, #31
 800b50a:	d405      	bmi.n	800b518 <_vfiprintf_r+0x2c>
 800b50c:	89bb      	ldrh	r3, [r7, #12]
 800b50e:	059b      	lsls	r3, r3, #22
 800b510:	d402      	bmi.n	800b518 <_vfiprintf_r+0x2c>
 800b512:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800b514:	f7fc fe57 	bl	80081c6 <__retarget_lock_acquire_recursive>
 800b518:	89bb      	ldrh	r3, [r7, #12]
 800b51a:	071b      	lsls	r3, r3, #28
 800b51c:	d502      	bpl.n	800b524 <_vfiprintf_r+0x38>
 800b51e:	693b      	ldr	r3, [r7, #16]
 800b520:	2b00      	cmp	r3, #0
 800b522:	d113      	bne.n	800b54c <_vfiprintf_r+0x60>
 800b524:	0039      	movs	r1, r7
 800b526:	9803      	ldr	r0, [sp, #12]
 800b528:	f000 f93e 	bl	800b7a8 <__swsetup_r>
 800b52c:	2800      	cmp	r0, #0
 800b52e:	d00d      	beq.n	800b54c <_vfiprintf_r+0x60>
 800b530:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b532:	07db      	lsls	r3, r3, #31
 800b534:	d503      	bpl.n	800b53e <_vfiprintf_r+0x52>
 800b536:	2001      	movs	r0, #1
 800b538:	4240      	negs	r0, r0
 800b53a:	b021      	add	sp, #132	@ 0x84
 800b53c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b53e:	89bb      	ldrh	r3, [r7, #12]
 800b540:	059b      	lsls	r3, r3, #22
 800b542:	d4f8      	bmi.n	800b536 <_vfiprintf_r+0x4a>
 800b544:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800b546:	f7fc fe3f 	bl	80081c8 <__retarget_lock_release_recursive>
 800b54a:	e7f4      	b.n	800b536 <_vfiprintf_r+0x4a>
 800b54c:	2300      	movs	r3, #0
 800b54e:	ac08      	add	r4, sp, #32
 800b550:	6163      	str	r3, [r4, #20]
 800b552:	3320      	adds	r3, #32
 800b554:	7663      	strb	r3, [r4, #25]
 800b556:	3310      	adds	r3, #16
 800b558:	76a3      	strb	r3, [r4, #26]
 800b55a:	9607      	str	r6, [sp, #28]
 800b55c:	002e      	movs	r6, r5
 800b55e:	7833      	ldrb	r3, [r6, #0]
 800b560:	2b00      	cmp	r3, #0
 800b562:	d001      	beq.n	800b568 <_vfiprintf_r+0x7c>
 800b564:	2b25      	cmp	r3, #37	@ 0x25
 800b566:	d148      	bne.n	800b5fa <_vfiprintf_r+0x10e>
 800b568:	1b73      	subs	r3, r6, r5
 800b56a:	9305      	str	r3, [sp, #20]
 800b56c:	42ae      	cmp	r6, r5
 800b56e:	d00b      	beq.n	800b588 <_vfiprintf_r+0x9c>
 800b570:	002a      	movs	r2, r5
 800b572:	0039      	movs	r1, r7
 800b574:	9803      	ldr	r0, [sp, #12]
 800b576:	f7ff ffa7 	bl	800b4c8 <__sfputs_r>
 800b57a:	3001      	adds	r0, #1
 800b57c:	d100      	bne.n	800b580 <_vfiprintf_r+0x94>
 800b57e:	e0ae      	b.n	800b6de <_vfiprintf_r+0x1f2>
 800b580:	6963      	ldr	r3, [r4, #20]
 800b582:	9a05      	ldr	r2, [sp, #20]
 800b584:	189b      	adds	r3, r3, r2
 800b586:	6163      	str	r3, [r4, #20]
 800b588:	7833      	ldrb	r3, [r6, #0]
 800b58a:	2b00      	cmp	r3, #0
 800b58c:	d100      	bne.n	800b590 <_vfiprintf_r+0xa4>
 800b58e:	e0a6      	b.n	800b6de <_vfiprintf_r+0x1f2>
 800b590:	2201      	movs	r2, #1
 800b592:	2300      	movs	r3, #0
 800b594:	4252      	negs	r2, r2
 800b596:	6062      	str	r2, [r4, #4]
 800b598:	a904      	add	r1, sp, #16
 800b59a:	3254      	adds	r2, #84	@ 0x54
 800b59c:	1852      	adds	r2, r2, r1
 800b59e:	1c75      	adds	r5, r6, #1
 800b5a0:	6023      	str	r3, [r4, #0]
 800b5a2:	60e3      	str	r3, [r4, #12]
 800b5a4:	60a3      	str	r3, [r4, #8]
 800b5a6:	7013      	strb	r3, [r2, #0]
 800b5a8:	65a3      	str	r3, [r4, #88]	@ 0x58
 800b5aa:	4b59      	ldr	r3, [pc, #356]	@ (800b710 <_vfiprintf_r+0x224>)
 800b5ac:	2205      	movs	r2, #5
 800b5ae:	0018      	movs	r0, r3
 800b5b0:	7829      	ldrb	r1, [r5, #0]
 800b5b2:	9305      	str	r3, [sp, #20]
 800b5b4:	f7fc fe09 	bl	80081ca <memchr>
 800b5b8:	1c6e      	adds	r6, r5, #1
 800b5ba:	2800      	cmp	r0, #0
 800b5bc:	d11f      	bne.n	800b5fe <_vfiprintf_r+0x112>
 800b5be:	6822      	ldr	r2, [r4, #0]
 800b5c0:	06d3      	lsls	r3, r2, #27
 800b5c2:	d504      	bpl.n	800b5ce <_vfiprintf_r+0xe2>
 800b5c4:	2353      	movs	r3, #83	@ 0x53
 800b5c6:	a904      	add	r1, sp, #16
 800b5c8:	185b      	adds	r3, r3, r1
 800b5ca:	2120      	movs	r1, #32
 800b5cc:	7019      	strb	r1, [r3, #0]
 800b5ce:	0713      	lsls	r3, r2, #28
 800b5d0:	d504      	bpl.n	800b5dc <_vfiprintf_r+0xf0>
 800b5d2:	2353      	movs	r3, #83	@ 0x53
 800b5d4:	a904      	add	r1, sp, #16
 800b5d6:	185b      	adds	r3, r3, r1
 800b5d8:	212b      	movs	r1, #43	@ 0x2b
 800b5da:	7019      	strb	r1, [r3, #0]
 800b5dc:	782b      	ldrb	r3, [r5, #0]
 800b5de:	2b2a      	cmp	r3, #42	@ 0x2a
 800b5e0:	d016      	beq.n	800b610 <_vfiprintf_r+0x124>
 800b5e2:	002e      	movs	r6, r5
 800b5e4:	2100      	movs	r1, #0
 800b5e6:	200a      	movs	r0, #10
 800b5e8:	68e3      	ldr	r3, [r4, #12]
 800b5ea:	7832      	ldrb	r2, [r6, #0]
 800b5ec:	1c75      	adds	r5, r6, #1
 800b5ee:	3a30      	subs	r2, #48	@ 0x30
 800b5f0:	2a09      	cmp	r2, #9
 800b5f2:	d950      	bls.n	800b696 <_vfiprintf_r+0x1aa>
 800b5f4:	2900      	cmp	r1, #0
 800b5f6:	d111      	bne.n	800b61c <_vfiprintf_r+0x130>
 800b5f8:	e017      	b.n	800b62a <_vfiprintf_r+0x13e>
 800b5fa:	3601      	adds	r6, #1
 800b5fc:	e7af      	b.n	800b55e <_vfiprintf_r+0x72>
 800b5fe:	9b05      	ldr	r3, [sp, #20]
 800b600:	6822      	ldr	r2, [r4, #0]
 800b602:	1ac0      	subs	r0, r0, r3
 800b604:	2301      	movs	r3, #1
 800b606:	4083      	lsls	r3, r0
 800b608:	4313      	orrs	r3, r2
 800b60a:	0035      	movs	r5, r6
 800b60c:	6023      	str	r3, [r4, #0]
 800b60e:	e7cc      	b.n	800b5aa <_vfiprintf_r+0xbe>
 800b610:	9b07      	ldr	r3, [sp, #28]
 800b612:	1d19      	adds	r1, r3, #4
 800b614:	681b      	ldr	r3, [r3, #0]
 800b616:	9107      	str	r1, [sp, #28]
 800b618:	2b00      	cmp	r3, #0
 800b61a:	db01      	blt.n	800b620 <_vfiprintf_r+0x134>
 800b61c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b61e:	e004      	b.n	800b62a <_vfiprintf_r+0x13e>
 800b620:	425b      	negs	r3, r3
 800b622:	60e3      	str	r3, [r4, #12]
 800b624:	2302      	movs	r3, #2
 800b626:	4313      	orrs	r3, r2
 800b628:	6023      	str	r3, [r4, #0]
 800b62a:	7833      	ldrb	r3, [r6, #0]
 800b62c:	2b2e      	cmp	r3, #46	@ 0x2e
 800b62e:	d10c      	bne.n	800b64a <_vfiprintf_r+0x15e>
 800b630:	7873      	ldrb	r3, [r6, #1]
 800b632:	2b2a      	cmp	r3, #42	@ 0x2a
 800b634:	d134      	bne.n	800b6a0 <_vfiprintf_r+0x1b4>
 800b636:	9b07      	ldr	r3, [sp, #28]
 800b638:	3602      	adds	r6, #2
 800b63a:	1d1a      	adds	r2, r3, #4
 800b63c:	681b      	ldr	r3, [r3, #0]
 800b63e:	9207      	str	r2, [sp, #28]
 800b640:	2b00      	cmp	r3, #0
 800b642:	da01      	bge.n	800b648 <_vfiprintf_r+0x15c>
 800b644:	2301      	movs	r3, #1
 800b646:	425b      	negs	r3, r3
 800b648:	9309      	str	r3, [sp, #36]	@ 0x24
 800b64a:	4d32      	ldr	r5, [pc, #200]	@ (800b714 <_vfiprintf_r+0x228>)
 800b64c:	2203      	movs	r2, #3
 800b64e:	0028      	movs	r0, r5
 800b650:	7831      	ldrb	r1, [r6, #0]
 800b652:	f7fc fdba 	bl	80081ca <memchr>
 800b656:	2800      	cmp	r0, #0
 800b658:	d006      	beq.n	800b668 <_vfiprintf_r+0x17c>
 800b65a:	2340      	movs	r3, #64	@ 0x40
 800b65c:	1b40      	subs	r0, r0, r5
 800b65e:	4083      	lsls	r3, r0
 800b660:	6822      	ldr	r2, [r4, #0]
 800b662:	3601      	adds	r6, #1
 800b664:	4313      	orrs	r3, r2
 800b666:	6023      	str	r3, [r4, #0]
 800b668:	7831      	ldrb	r1, [r6, #0]
 800b66a:	2206      	movs	r2, #6
 800b66c:	482a      	ldr	r0, [pc, #168]	@ (800b718 <_vfiprintf_r+0x22c>)
 800b66e:	1c75      	adds	r5, r6, #1
 800b670:	7621      	strb	r1, [r4, #24]
 800b672:	f7fc fdaa 	bl	80081ca <memchr>
 800b676:	2800      	cmp	r0, #0
 800b678:	d040      	beq.n	800b6fc <_vfiprintf_r+0x210>
 800b67a:	4b28      	ldr	r3, [pc, #160]	@ (800b71c <_vfiprintf_r+0x230>)
 800b67c:	2b00      	cmp	r3, #0
 800b67e:	d122      	bne.n	800b6c6 <_vfiprintf_r+0x1da>
 800b680:	2207      	movs	r2, #7
 800b682:	9b07      	ldr	r3, [sp, #28]
 800b684:	3307      	adds	r3, #7
 800b686:	4393      	bics	r3, r2
 800b688:	3308      	adds	r3, #8
 800b68a:	9307      	str	r3, [sp, #28]
 800b68c:	6963      	ldr	r3, [r4, #20]
 800b68e:	9a04      	ldr	r2, [sp, #16]
 800b690:	189b      	adds	r3, r3, r2
 800b692:	6163      	str	r3, [r4, #20]
 800b694:	e762      	b.n	800b55c <_vfiprintf_r+0x70>
 800b696:	4343      	muls	r3, r0
 800b698:	002e      	movs	r6, r5
 800b69a:	2101      	movs	r1, #1
 800b69c:	189b      	adds	r3, r3, r2
 800b69e:	e7a4      	b.n	800b5ea <_vfiprintf_r+0xfe>
 800b6a0:	2300      	movs	r3, #0
 800b6a2:	200a      	movs	r0, #10
 800b6a4:	0019      	movs	r1, r3
 800b6a6:	3601      	adds	r6, #1
 800b6a8:	6063      	str	r3, [r4, #4]
 800b6aa:	7832      	ldrb	r2, [r6, #0]
 800b6ac:	1c75      	adds	r5, r6, #1
 800b6ae:	3a30      	subs	r2, #48	@ 0x30
 800b6b0:	2a09      	cmp	r2, #9
 800b6b2:	d903      	bls.n	800b6bc <_vfiprintf_r+0x1d0>
 800b6b4:	2b00      	cmp	r3, #0
 800b6b6:	d0c8      	beq.n	800b64a <_vfiprintf_r+0x15e>
 800b6b8:	9109      	str	r1, [sp, #36]	@ 0x24
 800b6ba:	e7c6      	b.n	800b64a <_vfiprintf_r+0x15e>
 800b6bc:	4341      	muls	r1, r0
 800b6be:	002e      	movs	r6, r5
 800b6c0:	2301      	movs	r3, #1
 800b6c2:	1889      	adds	r1, r1, r2
 800b6c4:	e7f1      	b.n	800b6aa <_vfiprintf_r+0x1be>
 800b6c6:	aa07      	add	r2, sp, #28
 800b6c8:	9200      	str	r2, [sp, #0]
 800b6ca:	0021      	movs	r1, r4
 800b6cc:	003a      	movs	r2, r7
 800b6ce:	4b14      	ldr	r3, [pc, #80]	@ (800b720 <_vfiprintf_r+0x234>)
 800b6d0:	9803      	ldr	r0, [sp, #12]
 800b6d2:	f7fb fdf9 	bl	80072c8 <_printf_float>
 800b6d6:	9004      	str	r0, [sp, #16]
 800b6d8:	9b04      	ldr	r3, [sp, #16]
 800b6da:	3301      	adds	r3, #1
 800b6dc:	d1d6      	bne.n	800b68c <_vfiprintf_r+0x1a0>
 800b6de:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b6e0:	07db      	lsls	r3, r3, #31
 800b6e2:	d405      	bmi.n	800b6f0 <_vfiprintf_r+0x204>
 800b6e4:	89bb      	ldrh	r3, [r7, #12]
 800b6e6:	059b      	lsls	r3, r3, #22
 800b6e8:	d402      	bmi.n	800b6f0 <_vfiprintf_r+0x204>
 800b6ea:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800b6ec:	f7fc fd6c 	bl	80081c8 <__retarget_lock_release_recursive>
 800b6f0:	89bb      	ldrh	r3, [r7, #12]
 800b6f2:	065b      	lsls	r3, r3, #25
 800b6f4:	d500      	bpl.n	800b6f8 <_vfiprintf_r+0x20c>
 800b6f6:	e71e      	b.n	800b536 <_vfiprintf_r+0x4a>
 800b6f8:	980d      	ldr	r0, [sp, #52]	@ 0x34
 800b6fa:	e71e      	b.n	800b53a <_vfiprintf_r+0x4e>
 800b6fc:	aa07      	add	r2, sp, #28
 800b6fe:	9200      	str	r2, [sp, #0]
 800b700:	0021      	movs	r1, r4
 800b702:	003a      	movs	r2, r7
 800b704:	4b06      	ldr	r3, [pc, #24]	@ (800b720 <_vfiprintf_r+0x234>)
 800b706:	9803      	ldr	r0, [sp, #12]
 800b708:	f7fc f88c 	bl	8007824 <_printf_i>
 800b70c:	e7e3      	b.n	800b6d6 <_vfiprintf_r+0x1ea>
 800b70e:	46c0      	nop			@ (mov r8, r8)
 800b710:	0800c2d9 	.word	0x0800c2d9
 800b714:	0800c2df 	.word	0x0800c2df
 800b718:	0800c2e3 	.word	0x0800c2e3
 800b71c:	080072c9 	.word	0x080072c9
 800b720:	0800b4c9 	.word	0x0800b4c9

0800b724 <__swbuf_r>:
 800b724:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b726:	0006      	movs	r6, r0
 800b728:	000d      	movs	r5, r1
 800b72a:	0014      	movs	r4, r2
 800b72c:	2800      	cmp	r0, #0
 800b72e:	d004      	beq.n	800b73a <__swbuf_r+0x16>
 800b730:	6a03      	ldr	r3, [r0, #32]
 800b732:	2b00      	cmp	r3, #0
 800b734:	d101      	bne.n	800b73a <__swbuf_r+0x16>
 800b736:	f7fc fc21 	bl	8007f7c <__sinit>
 800b73a:	69a3      	ldr	r3, [r4, #24]
 800b73c:	60a3      	str	r3, [r4, #8]
 800b73e:	89a3      	ldrh	r3, [r4, #12]
 800b740:	071b      	lsls	r3, r3, #28
 800b742:	d502      	bpl.n	800b74a <__swbuf_r+0x26>
 800b744:	6923      	ldr	r3, [r4, #16]
 800b746:	2b00      	cmp	r3, #0
 800b748:	d109      	bne.n	800b75e <__swbuf_r+0x3a>
 800b74a:	0021      	movs	r1, r4
 800b74c:	0030      	movs	r0, r6
 800b74e:	f000 f82b 	bl	800b7a8 <__swsetup_r>
 800b752:	2800      	cmp	r0, #0
 800b754:	d003      	beq.n	800b75e <__swbuf_r+0x3a>
 800b756:	2501      	movs	r5, #1
 800b758:	426d      	negs	r5, r5
 800b75a:	0028      	movs	r0, r5
 800b75c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b75e:	6923      	ldr	r3, [r4, #16]
 800b760:	6820      	ldr	r0, [r4, #0]
 800b762:	b2ef      	uxtb	r7, r5
 800b764:	1ac0      	subs	r0, r0, r3
 800b766:	6963      	ldr	r3, [r4, #20]
 800b768:	b2ed      	uxtb	r5, r5
 800b76a:	4283      	cmp	r3, r0
 800b76c:	dc05      	bgt.n	800b77a <__swbuf_r+0x56>
 800b76e:	0021      	movs	r1, r4
 800b770:	0030      	movs	r0, r6
 800b772:	f7ff fa0f 	bl	800ab94 <_fflush_r>
 800b776:	2800      	cmp	r0, #0
 800b778:	d1ed      	bne.n	800b756 <__swbuf_r+0x32>
 800b77a:	68a3      	ldr	r3, [r4, #8]
 800b77c:	3001      	adds	r0, #1
 800b77e:	3b01      	subs	r3, #1
 800b780:	60a3      	str	r3, [r4, #8]
 800b782:	6823      	ldr	r3, [r4, #0]
 800b784:	1c5a      	adds	r2, r3, #1
 800b786:	6022      	str	r2, [r4, #0]
 800b788:	701f      	strb	r7, [r3, #0]
 800b78a:	6963      	ldr	r3, [r4, #20]
 800b78c:	4283      	cmp	r3, r0
 800b78e:	d004      	beq.n	800b79a <__swbuf_r+0x76>
 800b790:	89a3      	ldrh	r3, [r4, #12]
 800b792:	07db      	lsls	r3, r3, #31
 800b794:	d5e1      	bpl.n	800b75a <__swbuf_r+0x36>
 800b796:	2d0a      	cmp	r5, #10
 800b798:	d1df      	bne.n	800b75a <__swbuf_r+0x36>
 800b79a:	0021      	movs	r1, r4
 800b79c:	0030      	movs	r0, r6
 800b79e:	f7ff f9f9 	bl	800ab94 <_fflush_r>
 800b7a2:	2800      	cmp	r0, #0
 800b7a4:	d0d9      	beq.n	800b75a <__swbuf_r+0x36>
 800b7a6:	e7d6      	b.n	800b756 <__swbuf_r+0x32>

0800b7a8 <__swsetup_r>:
 800b7a8:	4b2d      	ldr	r3, [pc, #180]	@ (800b860 <__swsetup_r+0xb8>)
 800b7aa:	b570      	push	{r4, r5, r6, lr}
 800b7ac:	0005      	movs	r5, r0
 800b7ae:	6818      	ldr	r0, [r3, #0]
 800b7b0:	000c      	movs	r4, r1
 800b7b2:	2800      	cmp	r0, #0
 800b7b4:	d004      	beq.n	800b7c0 <__swsetup_r+0x18>
 800b7b6:	6a03      	ldr	r3, [r0, #32]
 800b7b8:	2b00      	cmp	r3, #0
 800b7ba:	d101      	bne.n	800b7c0 <__swsetup_r+0x18>
 800b7bc:	f7fc fbde 	bl	8007f7c <__sinit>
 800b7c0:	230c      	movs	r3, #12
 800b7c2:	5ee2      	ldrsh	r2, [r4, r3]
 800b7c4:	0713      	lsls	r3, r2, #28
 800b7c6:	d423      	bmi.n	800b810 <__swsetup_r+0x68>
 800b7c8:	06d3      	lsls	r3, r2, #27
 800b7ca:	d407      	bmi.n	800b7dc <__swsetup_r+0x34>
 800b7cc:	2309      	movs	r3, #9
 800b7ce:	602b      	str	r3, [r5, #0]
 800b7d0:	2340      	movs	r3, #64	@ 0x40
 800b7d2:	2001      	movs	r0, #1
 800b7d4:	4313      	orrs	r3, r2
 800b7d6:	81a3      	strh	r3, [r4, #12]
 800b7d8:	4240      	negs	r0, r0
 800b7da:	e03a      	b.n	800b852 <__swsetup_r+0xaa>
 800b7dc:	0752      	lsls	r2, r2, #29
 800b7de:	d513      	bpl.n	800b808 <__swsetup_r+0x60>
 800b7e0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b7e2:	2900      	cmp	r1, #0
 800b7e4:	d008      	beq.n	800b7f8 <__swsetup_r+0x50>
 800b7e6:	0023      	movs	r3, r4
 800b7e8:	3344      	adds	r3, #68	@ 0x44
 800b7ea:	4299      	cmp	r1, r3
 800b7ec:	d002      	beq.n	800b7f4 <__swsetup_r+0x4c>
 800b7ee:	0028      	movs	r0, r5
 800b7f0:	f7fd fb7c 	bl	8008eec <_free_r>
 800b7f4:	2300      	movs	r3, #0
 800b7f6:	6363      	str	r3, [r4, #52]	@ 0x34
 800b7f8:	2224      	movs	r2, #36	@ 0x24
 800b7fa:	89a3      	ldrh	r3, [r4, #12]
 800b7fc:	4393      	bics	r3, r2
 800b7fe:	81a3      	strh	r3, [r4, #12]
 800b800:	2300      	movs	r3, #0
 800b802:	6063      	str	r3, [r4, #4]
 800b804:	6923      	ldr	r3, [r4, #16]
 800b806:	6023      	str	r3, [r4, #0]
 800b808:	2308      	movs	r3, #8
 800b80a:	89a2      	ldrh	r2, [r4, #12]
 800b80c:	4313      	orrs	r3, r2
 800b80e:	81a3      	strh	r3, [r4, #12]
 800b810:	6923      	ldr	r3, [r4, #16]
 800b812:	2b00      	cmp	r3, #0
 800b814:	d10b      	bne.n	800b82e <__swsetup_r+0x86>
 800b816:	21a0      	movs	r1, #160	@ 0xa0
 800b818:	2280      	movs	r2, #128	@ 0x80
 800b81a:	89a3      	ldrh	r3, [r4, #12]
 800b81c:	0089      	lsls	r1, r1, #2
 800b81e:	0092      	lsls	r2, r2, #2
 800b820:	400b      	ands	r3, r1
 800b822:	4293      	cmp	r3, r2
 800b824:	d003      	beq.n	800b82e <__swsetup_r+0x86>
 800b826:	0021      	movs	r1, r4
 800b828:	0028      	movs	r0, r5
 800b82a:	f000 f88f 	bl	800b94c <__smakebuf_r>
 800b82e:	230c      	movs	r3, #12
 800b830:	5ee2      	ldrsh	r2, [r4, r3]
 800b832:	2101      	movs	r1, #1
 800b834:	0013      	movs	r3, r2
 800b836:	400b      	ands	r3, r1
 800b838:	420a      	tst	r2, r1
 800b83a:	d00b      	beq.n	800b854 <__swsetup_r+0xac>
 800b83c:	2300      	movs	r3, #0
 800b83e:	60a3      	str	r3, [r4, #8]
 800b840:	6963      	ldr	r3, [r4, #20]
 800b842:	425b      	negs	r3, r3
 800b844:	61a3      	str	r3, [r4, #24]
 800b846:	2000      	movs	r0, #0
 800b848:	6923      	ldr	r3, [r4, #16]
 800b84a:	4283      	cmp	r3, r0
 800b84c:	d101      	bne.n	800b852 <__swsetup_r+0xaa>
 800b84e:	0613      	lsls	r3, r2, #24
 800b850:	d4be      	bmi.n	800b7d0 <__swsetup_r+0x28>
 800b852:	bd70      	pop	{r4, r5, r6, pc}
 800b854:	0791      	lsls	r1, r2, #30
 800b856:	d400      	bmi.n	800b85a <__swsetup_r+0xb2>
 800b858:	6963      	ldr	r3, [r4, #20]
 800b85a:	60a3      	str	r3, [r4, #8]
 800b85c:	e7f3      	b.n	800b846 <__swsetup_r+0x9e>
 800b85e:	46c0      	nop			@ (mov r8, r8)
 800b860:	20000028 	.word	0x20000028

0800b864 <_raise_r>:
 800b864:	b570      	push	{r4, r5, r6, lr}
 800b866:	0004      	movs	r4, r0
 800b868:	000d      	movs	r5, r1
 800b86a:	291f      	cmp	r1, #31
 800b86c:	d904      	bls.n	800b878 <_raise_r+0x14>
 800b86e:	2316      	movs	r3, #22
 800b870:	6003      	str	r3, [r0, #0]
 800b872:	2001      	movs	r0, #1
 800b874:	4240      	negs	r0, r0
 800b876:	bd70      	pop	{r4, r5, r6, pc}
 800b878:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 800b87a:	2b00      	cmp	r3, #0
 800b87c:	d004      	beq.n	800b888 <_raise_r+0x24>
 800b87e:	008a      	lsls	r2, r1, #2
 800b880:	189b      	adds	r3, r3, r2
 800b882:	681a      	ldr	r2, [r3, #0]
 800b884:	2a00      	cmp	r2, #0
 800b886:	d108      	bne.n	800b89a <_raise_r+0x36>
 800b888:	0020      	movs	r0, r4
 800b88a:	f000 f831 	bl	800b8f0 <_getpid_r>
 800b88e:	002a      	movs	r2, r5
 800b890:	0001      	movs	r1, r0
 800b892:	0020      	movs	r0, r4
 800b894:	f000 f81a 	bl	800b8cc <_kill_r>
 800b898:	e7ed      	b.n	800b876 <_raise_r+0x12>
 800b89a:	2a01      	cmp	r2, #1
 800b89c:	d009      	beq.n	800b8b2 <_raise_r+0x4e>
 800b89e:	1c51      	adds	r1, r2, #1
 800b8a0:	d103      	bne.n	800b8aa <_raise_r+0x46>
 800b8a2:	2316      	movs	r3, #22
 800b8a4:	6003      	str	r3, [r0, #0]
 800b8a6:	2001      	movs	r0, #1
 800b8a8:	e7e5      	b.n	800b876 <_raise_r+0x12>
 800b8aa:	2100      	movs	r1, #0
 800b8ac:	0028      	movs	r0, r5
 800b8ae:	6019      	str	r1, [r3, #0]
 800b8b0:	4790      	blx	r2
 800b8b2:	2000      	movs	r0, #0
 800b8b4:	e7df      	b.n	800b876 <_raise_r+0x12>
	...

0800b8b8 <raise>:
 800b8b8:	b510      	push	{r4, lr}
 800b8ba:	4b03      	ldr	r3, [pc, #12]	@ (800b8c8 <raise+0x10>)
 800b8bc:	0001      	movs	r1, r0
 800b8be:	6818      	ldr	r0, [r3, #0]
 800b8c0:	f7ff ffd0 	bl	800b864 <_raise_r>
 800b8c4:	bd10      	pop	{r4, pc}
 800b8c6:	46c0      	nop			@ (mov r8, r8)
 800b8c8:	20000028 	.word	0x20000028

0800b8cc <_kill_r>:
 800b8cc:	2300      	movs	r3, #0
 800b8ce:	b570      	push	{r4, r5, r6, lr}
 800b8d0:	4d06      	ldr	r5, [pc, #24]	@ (800b8ec <_kill_r+0x20>)
 800b8d2:	0004      	movs	r4, r0
 800b8d4:	0008      	movs	r0, r1
 800b8d6:	0011      	movs	r1, r2
 800b8d8:	602b      	str	r3, [r5, #0]
 800b8da:	f7f7 f8f5 	bl	8002ac8 <_kill>
 800b8de:	1c43      	adds	r3, r0, #1
 800b8e0:	d103      	bne.n	800b8ea <_kill_r+0x1e>
 800b8e2:	682b      	ldr	r3, [r5, #0]
 800b8e4:	2b00      	cmp	r3, #0
 800b8e6:	d000      	beq.n	800b8ea <_kill_r+0x1e>
 800b8e8:	6023      	str	r3, [r4, #0]
 800b8ea:	bd70      	pop	{r4, r5, r6, pc}
 800b8ec:	2000061c 	.word	0x2000061c

0800b8f0 <_getpid_r>:
 800b8f0:	b510      	push	{r4, lr}
 800b8f2:	f7f7 f8e3 	bl	8002abc <_getpid>
 800b8f6:	bd10      	pop	{r4, pc}

0800b8f8 <__swhatbuf_r>:
 800b8f8:	b570      	push	{r4, r5, r6, lr}
 800b8fa:	000e      	movs	r6, r1
 800b8fc:	001d      	movs	r5, r3
 800b8fe:	230e      	movs	r3, #14
 800b900:	5ec9      	ldrsh	r1, [r1, r3]
 800b902:	0014      	movs	r4, r2
 800b904:	b096      	sub	sp, #88	@ 0x58
 800b906:	2900      	cmp	r1, #0
 800b908:	da0c      	bge.n	800b924 <__swhatbuf_r+0x2c>
 800b90a:	89b2      	ldrh	r2, [r6, #12]
 800b90c:	2380      	movs	r3, #128	@ 0x80
 800b90e:	0011      	movs	r1, r2
 800b910:	4019      	ands	r1, r3
 800b912:	421a      	tst	r2, r3
 800b914:	d114      	bne.n	800b940 <__swhatbuf_r+0x48>
 800b916:	2380      	movs	r3, #128	@ 0x80
 800b918:	00db      	lsls	r3, r3, #3
 800b91a:	2000      	movs	r0, #0
 800b91c:	6029      	str	r1, [r5, #0]
 800b91e:	6023      	str	r3, [r4, #0]
 800b920:	b016      	add	sp, #88	@ 0x58
 800b922:	bd70      	pop	{r4, r5, r6, pc}
 800b924:	466a      	mov	r2, sp
 800b926:	f000 f853 	bl	800b9d0 <_fstat_r>
 800b92a:	2800      	cmp	r0, #0
 800b92c:	dbed      	blt.n	800b90a <__swhatbuf_r+0x12>
 800b92e:	23f0      	movs	r3, #240	@ 0xf0
 800b930:	9901      	ldr	r1, [sp, #4]
 800b932:	021b      	lsls	r3, r3, #8
 800b934:	4019      	ands	r1, r3
 800b936:	4b04      	ldr	r3, [pc, #16]	@ (800b948 <__swhatbuf_r+0x50>)
 800b938:	18c9      	adds	r1, r1, r3
 800b93a:	424b      	negs	r3, r1
 800b93c:	4159      	adcs	r1, r3
 800b93e:	e7ea      	b.n	800b916 <__swhatbuf_r+0x1e>
 800b940:	2100      	movs	r1, #0
 800b942:	2340      	movs	r3, #64	@ 0x40
 800b944:	e7e9      	b.n	800b91a <__swhatbuf_r+0x22>
 800b946:	46c0      	nop			@ (mov r8, r8)
 800b948:	ffffe000 	.word	0xffffe000

0800b94c <__smakebuf_r>:
 800b94c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b94e:	2602      	movs	r6, #2
 800b950:	898b      	ldrh	r3, [r1, #12]
 800b952:	0005      	movs	r5, r0
 800b954:	000c      	movs	r4, r1
 800b956:	b085      	sub	sp, #20
 800b958:	4233      	tst	r3, r6
 800b95a:	d007      	beq.n	800b96c <__smakebuf_r+0x20>
 800b95c:	0023      	movs	r3, r4
 800b95e:	3347      	adds	r3, #71	@ 0x47
 800b960:	6023      	str	r3, [r4, #0]
 800b962:	6123      	str	r3, [r4, #16]
 800b964:	2301      	movs	r3, #1
 800b966:	6163      	str	r3, [r4, #20]
 800b968:	b005      	add	sp, #20
 800b96a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b96c:	ab03      	add	r3, sp, #12
 800b96e:	aa02      	add	r2, sp, #8
 800b970:	f7ff ffc2 	bl	800b8f8 <__swhatbuf_r>
 800b974:	9f02      	ldr	r7, [sp, #8]
 800b976:	9001      	str	r0, [sp, #4]
 800b978:	0039      	movs	r1, r7
 800b97a:	0028      	movs	r0, r5
 800b97c:	f7fd fb2c 	bl	8008fd8 <_malloc_r>
 800b980:	2800      	cmp	r0, #0
 800b982:	d108      	bne.n	800b996 <__smakebuf_r+0x4a>
 800b984:	220c      	movs	r2, #12
 800b986:	5ea3      	ldrsh	r3, [r4, r2]
 800b988:	059a      	lsls	r2, r3, #22
 800b98a:	d4ed      	bmi.n	800b968 <__smakebuf_r+0x1c>
 800b98c:	2203      	movs	r2, #3
 800b98e:	4393      	bics	r3, r2
 800b990:	431e      	orrs	r6, r3
 800b992:	81a6      	strh	r6, [r4, #12]
 800b994:	e7e2      	b.n	800b95c <__smakebuf_r+0x10>
 800b996:	2380      	movs	r3, #128	@ 0x80
 800b998:	89a2      	ldrh	r2, [r4, #12]
 800b99a:	6020      	str	r0, [r4, #0]
 800b99c:	4313      	orrs	r3, r2
 800b99e:	81a3      	strh	r3, [r4, #12]
 800b9a0:	9b03      	ldr	r3, [sp, #12]
 800b9a2:	6120      	str	r0, [r4, #16]
 800b9a4:	6167      	str	r7, [r4, #20]
 800b9a6:	2b00      	cmp	r3, #0
 800b9a8:	d00c      	beq.n	800b9c4 <__smakebuf_r+0x78>
 800b9aa:	0028      	movs	r0, r5
 800b9ac:	230e      	movs	r3, #14
 800b9ae:	5ee1      	ldrsh	r1, [r4, r3]
 800b9b0:	f000 f820 	bl	800b9f4 <_isatty_r>
 800b9b4:	2800      	cmp	r0, #0
 800b9b6:	d005      	beq.n	800b9c4 <__smakebuf_r+0x78>
 800b9b8:	2303      	movs	r3, #3
 800b9ba:	89a2      	ldrh	r2, [r4, #12]
 800b9bc:	439a      	bics	r2, r3
 800b9be:	3b02      	subs	r3, #2
 800b9c0:	4313      	orrs	r3, r2
 800b9c2:	81a3      	strh	r3, [r4, #12]
 800b9c4:	89a3      	ldrh	r3, [r4, #12]
 800b9c6:	9a01      	ldr	r2, [sp, #4]
 800b9c8:	4313      	orrs	r3, r2
 800b9ca:	81a3      	strh	r3, [r4, #12]
 800b9cc:	e7cc      	b.n	800b968 <__smakebuf_r+0x1c>
	...

0800b9d0 <_fstat_r>:
 800b9d0:	2300      	movs	r3, #0
 800b9d2:	b570      	push	{r4, r5, r6, lr}
 800b9d4:	4d06      	ldr	r5, [pc, #24]	@ (800b9f0 <_fstat_r+0x20>)
 800b9d6:	0004      	movs	r4, r0
 800b9d8:	0008      	movs	r0, r1
 800b9da:	0011      	movs	r1, r2
 800b9dc:	602b      	str	r3, [r5, #0]
 800b9de:	f7f7 f8d3 	bl	8002b88 <_fstat>
 800b9e2:	1c43      	adds	r3, r0, #1
 800b9e4:	d103      	bne.n	800b9ee <_fstat_r+0x1e>
 800b9e6:	682b      	ldr	r3, [r5, #0]
 800b9e8:	2b00      	cmp	r3, #0
 800b9ea:	d000      	beq.n	800b9ee <_fstat_r+0x1e>
 800b9ec:	6023      	str	r3, [r4, #0]
 800b9ee:	bd70      	pop	{r4, r5, r6, pc}
 800b9f0:	2000061c 	.word	0x2000061c

0800b9f4 <_isatty_r>:
 800b9f4:	2300      	movs	r3, #0
 800b9f6:	b570      	push	{r4, r5, r6, lr}
 800b9f8:	4d06      	ldr	r5, [pc, #24]	@ (800ba14 <_isatty_r+0x20>)
 800b9fa:	0004      	movs	r4, r0
 800b9fc:	0008      	movs	r0, r1
 800b9fe:	602b      	str	r3, [r5, #0]
 800ba00:	f7f7 f8d0 	bl	8002ba4 <_isatty>
 800ba04:	1c43      	adds	r3, r0, #1
 800ba06:	d103      	bne.n	800ba10 <_isatty_r+0x1c>
 800ba08:	682b      	ldr	r3, [r5, #0]
 800ba0a:	2b00      	cmp	r3, #0
 800ba0c:	d000      	beq.n	800ba10 <_isatty_r+0x1c>
 800ba0e:	6023      	str	r3, [r4, #0]
 800ba10:	bd70      	pop	{r4, r5, r6, pc}
 800ba12:	46c0      	nop			@ (mov r8, r8)
 800ba14:	2000061c 	.word	0x2000061c

0800ba18 <_init>:
 800ba18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba1a:	46c0      	nop			@ (mov r8, r8)
 800ba1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ba1e:	bc08      	pop	{r3}
 800ba20:	469e      	mov	lr, r3
 800ba22:	4770      	bx	lr

0800ba24 <_fini>:
 800ba24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba26:	46c0      	nop			@ (mov r8, r8)
 800ba28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ba2a:	bc08      	pop	{r3}
 800ba2c:	469e      	mov	lr, r3
 800ba2e:	4770      	bx	lr
